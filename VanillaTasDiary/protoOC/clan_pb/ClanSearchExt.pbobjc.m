// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clan_pb/clan_search.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "clan_pb/ClanSearchExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ClanSearchExtRoot

@implementation PB3ClanSearchExtRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3ClanSearchExtRoot_FileDescriptor

static GPBFileDescriptor *PB3ClanSearchExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"clan_pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PB3SearchClanMemberReq

@implementation PB3SearchClanMemberReq

@dynamic playerId;

typedef struct PB3SearchClanMemberReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3SearchClanMemberReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchClanMemberReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchClanMemberReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchClanMemberReq class]
                                     rootClass:[PB3ClanSearchExtRoot class]
                                          file:PB3ClanSearchExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchClanMemberReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchClanMemberRes

@implementation PB3SearchClanMemberRes

@dynamic playerId;
@dynamic nickName;
@dynamic icon;
@dynamic charmLev;
@dynamic wealthLev;
@dynamic shortId;

typedef struct PB3SearchClanMemberRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *icon;
  int64_t playerId;
  int64_t charmLev;
  int64_t wealthLev;
  int64_t shortId;
} PB3SearchClanMemberRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchClanMemberRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchClanMemberRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchClanMemberRes_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchClanMemberRes__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchClanMemberRes_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SearchClanMemberRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "charmLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchClanMemberRes_FieldNumber_CharmLev,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SearchClanMemberRes__storage_, charmLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wealthLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchClanMemberRes_FieldNumber_WealthLev,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SearchClanMemberRes__storage_, wealthLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "shortId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchClanMemberRes_FieldNumber_ShortId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SearchClanMemberRes__storage_, shortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchClanMemberRes class]
                                     rootClass:[PB3ClanSearchExtRoot class]
                                          file:PB3ClanSearchExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchClanMemberRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClanMemberShowListReq

@implementation PB3ClanMemberShowListReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3ClanMemberShowListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3ClanMemberShowListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShowListReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClanMemberShowListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShowListReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClanMemberShowListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClanMemberShowListReq class]
                                     rootClass:[PB3ClanSearchExtRoot class]
                                          file:PB3ClanSearchExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClanMemberShowListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClanMemberShowListRes

@implementation PB3ClanMemberShowListRes

@dynamic listArray, listArray_Count;

typedef struct PB3ClanMemberShowListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ClanMemberShowListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClanMemberShow),
        .number = PB3ClanMemberShowListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ClanMemberShowListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClanMemberShowListRes class]
                                     rootClass:[PB3ClanSearchExtRoot class]
                                          file:PB3ClanSearchExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClanMemberShowListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClanMemberShow

@implementation PB3ClanMemberShow

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic wealthLev;
@dynamic charmLev;

typedef struct PB3ClanMemberShow__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealthLev;
  int32_t charmLev;
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3ClanMemberShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShow_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClanMemberShow__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShow_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClanMemberShow__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShow_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ClanMemberShow__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShow_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ClanMemberShow__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShow_FieldNumber_WealthLev,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ClanMemberShow__storage_, wealthLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMemberShow_FieldNumber_CharmLev,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ClanMemberShow__storage_, charmLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClanMemberShow class]
                                     rootClass:[PB3ClanSearchExtRoot class]
                                          file:PB3ClanSearchExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClanMemberShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetRandomClanRoomReq

@implementation PB3GetRandomClanRoomReq


typedef struct PB3GetRandomClanRoomReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetRandomClanRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetRandomClanRoomReq class]
                                     rootClass:[PB3ClanSearchExtRoot class]
                                          file:PB3ClanSearchExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetRandomClanRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetRandomClanRoomRes

@implementation PB3GetRandomClanRoomRes

@dynamic roomId;

typedef struct PB3GetRandomClanRoomRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3GetRandomClanRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRandomClanRoomRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetRandomClanRoomRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetRandomClanRoomRes class]
                                     rootClass:[PB3ClanSearchExtRoot class]
                                          file:PB3ClanSearchExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetRandomClanRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
