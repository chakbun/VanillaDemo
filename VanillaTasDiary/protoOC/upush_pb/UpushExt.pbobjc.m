// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upush_pb/upush.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "upush_pb/UpushExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PROTOUpushExtRoot

@implementation PROTOUpushExtRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PROTOUpushExtRoot_FileDescriptor

static GPBFileDescriptor *PROTOUpushExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"upush_pb"
                                                 objcPrefix:@"PROTO"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PROTOErrorUpushCode

GPBEnumDescriptor *PROTOErrorUpushCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UpZero\000UpParam\000UpTooFrequent\000";
    static const int32_t values[] = {
        PROTOErrorUpushCode_UpZero,
        PROTOErrorUpushCode_UpParam,
        PROTOErrorUpushCode_UpTooFrequent,
    };
    static const char *extraTextFormatInfo = "\003\000b\204\000\001b\205\000\002b\213\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PROTOErrorUpushCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PROTOErrorUpushCode_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PROTOErrorUpushCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PROTOErrorUpushCode_UpZero:
    case PROTOErrorUpushCode_UpParam:
    case PROTOErrorUpushCode_UpTooFrequent:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PROTOUpushCmdId

GPBEnumDescriptor *PROTOUpushCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UcZero\000UcNoticeTag\000";
    static const int32_t values[] = {
        PROTOUpushCmdId_UcZero,
        PROTOUpushCmdId_UcNoticeTag,
    };
    static const char *extraTextFormatInfo = "\002\000b\204\000\001b\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PROTOUpushCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PROTOUpushCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PROTOUpushCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PROTOUpushCmdId_UcZero:
    case PROTOUpushCmdId_UcNoticeTag:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PROTOTagOpt

GPBEnumDescriptor *PROTOTagOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TagZero\000TagAdd\000TagDelete\000";
    static const int32_t values[] = {
        PROTOTagOpt_TagZero,
        PROTOTagOpt_TagAdd,
        PROTOTagOpt_TagDelete,
    };
    static const char *extraTextFormatInfo = "\003\000\003\204\000\001\003\203\000\002\003\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PROTOTagOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PROTOTagOpt_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PROTOTagOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PROTOTagOpt_TagZero:
    case PROTOTagOpt_TagAdd:
    case PROTOTagOpt_TagDelete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PROTONoticeTag

@implementation PROTONoticeTag

@dynamic opt;
@dynamic tagName;

typedef struct PROTONoticeTag__storage_ {
  uint32_t _has_storage_[1];
  PROTOTagOpt opt;
  NSString *tagName;
} PROTONoticeTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PROTOTagOpt_EnumDescriptor,
        .number = PROTONoticeTag_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PROTONoticeTag__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tagName",
        .dataTypeSpecific.className = NULL,
        .number = PROTONoticeTag_FieldNumber_TagName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PROTONoticeTag__storage_, tagName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PROTONoticeTag class]
                                     rootClass:[PROTOUpushExtRoot class]
                                          file:PROTOUpushExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PROTONoticeTag__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PROTONoticeTag_Opt_RawValue(PROTONoticeTag *message) {
  GPBDescriptor *descriptor = [PROTONoticeTag descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PROTONoticeTag_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPROTONoticeTag_Opt_RawValue(PROTONoticeTag *message, int32_t value) {
  GPBDescriptor *descriptor = [PROTONoticeTag descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PROTONoticeTag_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
