// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_pb/video.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "plugin_pb/VideoExt.pbobjc.h"
#import "plugin_pb/CommunityExt.pbobjc.h"
#import "plugin_pb/PluginExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3VideoExtRoot

@implementation PB3VideoExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3VideoExtRoot_FileDescriptor

static GPBFileDescriptor *PB3VideoExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"plugin_pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3VideoCmdId

GPBEnumDescriptor *PB3VideoCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IcVideoZero\000";
    static const int32_t values[] = {
        PB3VideoCmdId_IcVideoZero,
    };
    static const char *extraTextFormatInfo = "\001\000b\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoCmdId_IcVideoZero:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VideoGetType

GPBEnumDescriptor *PB3VideoGetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VgtZero\000VgtFirst\000";
    static const int32_t values[] = {
        PB3VideoGetType_VgtZero,
        PB3VideoGetType_VgtFirst,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoGetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoGetType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoGetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoGetType_VgtZero:
    case PB3VideoGetType_VgtFirst:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EIButtonType

GPBEnumDescriptor *PB3EIButtonType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EibtZero\000EibtSkill\000EibtChat\000EibtLiaoTa\000E"
        "ibtZhenxinhua\000EibtCpYuehui\000";
    static const int32_t values[] = {
        PB3EIButtonType_EibtZero,
        PB3EIButtonType_EibtSkill,
        PB3EIButtonType_EibtChat,
        PB3EIButtonType_EibtLiaoTa,
        PB3EIButtonType_EibtZhenxinhua,
        PB3EIButtonType_EibtCpYuehui,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EIButtonType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EIButtonType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EIButtonType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EIButtonType_EibtZero:
    case PB3EIButtonType_EibtSkill:
    case PB3EIButtonType_EibtChat:
    case PB3EIButtonType_EibtLiaoTa:
    case PB3EIButtonType_EibtZhenxinhua:
    case PB3EIButtonType_EibtCpYuehui:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VideoPlayerStatus

GPBEnumDescriptor *PB3VideoPlayerStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VpsZero\000VpsOutRoom\000VpsInRoom\000VpsOnChair\000"
        "VpsSinging\000";
    static const int32_t values[] = {
        PB3VideoPlayerStatus_VpsZero,
        PB3VideoPlayerStatus_VpsOutRoom,
        PB3VideoPlayerStatus_VpsInRoom,
        PB3VideoPlayerStatus_VpsOnChair,
        PB3VideoPlayerStatus_VpsSinging,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoPlayerStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoPlayerStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoPlayerStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoPlayerStatus_VpsZero:
    case PB3VideoPlayerStatus_VpsOutRoom:
    case PB3VideoPlayerStatus_VpsInRoom:
    case PB3VideoPlayerStatus_VpsOnChair:
    case PB3VideoPlayerStatus_VpsSinging:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VideoCTopType

GPBEnumDescriptor *PB3VideoCTopType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VctZero\000VctActivity\000VctSameCity\000VctFallo"
        "w\000";
    static const int32_t values[] = {
        PB3VideoCTopType_VctZero,
        PB3VideoCTopType_VctActivity,
        PB3VideoCTopType_VctSameCity,
        PB3VideoCTopType_VctFallow,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoCTopType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoCTopType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoCTopType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoCTopType_VctZero:
    case PB3VideoCTopType_VctActivity:
    case PB3VideoCTopType_VctSameCity:
    case PB3VideoCTopType_VctFallow:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VideoRecReason

GPBEnumDescriptor *PB3VideoRecReason_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VrrZero\000VrrNearby\000VrrFocus\000VrrGood\000VrrTo"
        "p\000VrrLabel\000";
    static const int32_t values[] = {
        PB3VideoRecReason_VrrZero,
        PB3VideoRecReason_VrrNearby,
        PB3VideoRecReason_VrrFocus,
        PB3VideoRecReason_VrrGood,
        PB3VideoRecReason_VrrTop,
        PB3VideoRecReason_VrrLabel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoRecReason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoRecReason_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoRecReason_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoRecReason_VrrZero:
    case PB3VideoRecReason_VrrNearby:
    case PB3VideoRecReason_VrrFocus:
    case PB3VideoRecReason_VrrGood:
    case PB3VideoRecReason_VrrTop:
    case PB3VideoRecReason_VrrLabel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VideoButtonType

GPBEnumDescriptor *PB3VideoButtonType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VbtZero\000VbtInteraction\000VbtBill\000VbtIm\000";
    static const int32_t values[] = {
        PB3VideoButtonType_VbtZero,
        PB3VideoButtonType_VbtInteraction,
        PB3VideoButtonType_VbtBill,
        PB3VideoButtonType_VbtIm,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoButtonType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoButtonType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoButtonType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoButtonType_VbtZero:
    case PB3VideoButtonType_VbtInteraction:
    case PB3VideoButtonType_VbtBill:
    case PB3VideoButtonType_VbtIm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VideoOptType

GPBEnumDescriptor *PB3VideoOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VotZero\000VotStart\000VotComplete\000VotStop\000Vot"
        "Uninterested\000VotCover\000";
    static const int32_t values[] = {
        PB3VideoOptType_VotZero,
        PB3VideoOptType_VotStart,
        PB3VideoOptType_VotComplete,
        PB3VideoOptType_VotStop,
        PB3VideoOptType_VotUninterested,
        PB3VideoOptType_VotCover,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoOptType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoOptType_VotZero:
    case PB3VideoOptType_VotStart:
    case PB3VideoOptType_VotComplete:
    case PB3VideoOptType_VotStop:
    case PB3VideoOptType_VotUninterested:
    case PB3VideoOptType_VotCover:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3VideoReq

@implementation PB3VideoReq

@dynamic getType;
@dynamic lastTrendId;
@dynamic lastIdsArray, lastIdsArray_Count;
@dynamic lastIndex;

typedef struct PB3VideoReq__storage_ {
  uint32_t _has_storage_[1];
  PB3VideoGetType getType;
  int32_t lastIndex;
  GPBInt64Array *lastIdsArray;
  int64_t lastTrendId;
} PB3VideoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "getType",
        .dataTypeSpecific.enumDescFunc = PB3VideoGetType_EnumDescriptor,
        .number = PB3VideoReq_FieldNumber_GetType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoReq__storage_, getType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "lastTrendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoReq_FieldNumber_LastTrendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoReq__storage_, lastTrendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoReq_FieldNumber_LastIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VideoReq__storage_, lastIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoReq_FieldNumber_LastIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoReq__storage_, lastIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoReq class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VideoReq_GetType_RawValue(PB3VideoReq *message) {
  GPBDescriptor *descriptor = [PB3VideoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoReq_FieldNumber_GetType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoReq_GetType_RawValue(PB3VideoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoReq_FieldNumber_GetType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VideoRes

@implementation PB3VideoRes

@dynamic infosArray, infosArray_Count;
@dynamic preloadIdxArray, preloadIdxArray_Count;

typedef struct PB3VideoRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *infosArray;
  GPBInt64Array *preloadIdxArray;
} PB3VideoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VideoInfo),
        .number = PB3VideoRes_FieldNumber_InfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VideoRes__storage_, infosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "preloadIdxArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoRes_FieldNumber_PreloadIdxArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VideoRes__storage_, preloadIdxArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoRes class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VideoInfo

@implementation PB3VideoInfo

@dynamic trendId;
@dynamic playerId;
@dynamic name;
@dynamic sex;
@dynamic icon;
@dynamic videoURL;
@dynamic likeNum;
@dynamic commentNum;
@dynamic content;
@dynamic tagsArray, tagsArray_Count;
@dynamic isGaveLike;
@dynamic coverURL;
@dynamic videoWidth;
@dynamic videoHeight;
@dynamic skillId;
@dynamic iaId;
@dynamic activityId;
@dynamic sourceId;
@dynamic from;
@dynamic quality;
@dynamic labelId;
@dynamic recmdSource;
@dynamic recmdSourceId;
@dynamic traceInfo;
@dynamic authInfoListArray, authInfoListArray_Count;

typedef struct PB3VideoInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3PluginSexType sex;
  int32_t videoWidth;
  int32_t videoHeight;
  int32_t skillId;
  int32_t iaId;
  int32_t activityId;
  int32_t from;
  int32_t quality;
  int32_t labelId;
  PB3VideoRecmdSource recmdSource;
  NSString *name;
  NSString *icon;
  NSString *videoURL;
  NSString *content;
  NSMutableArray *tagsArray;
  NSString *coverURL;
  NSString *recmdSourceId;
  NSString *traceInfo;
  NSMutableArray *authInfoListArray;
  int64_t trendId;
  int64_t playerId;
  int64_t likeNum;
  int64_t commentNum;
  int64_t sourceId;
} PB3VideoInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "trendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_TrendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, trendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3PluginSexType_EnumDescriptor,
        .number = PB3VideoInfo_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_VideoURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, videoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "likeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_LikeNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, likeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_CommentNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, commentNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_Content,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TrendTag),
        .number = PB3VideoInfo_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isGaveLike",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_IsGaveLike,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "coverURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_CoverURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, coverURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoWidth",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_VideoWidth,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, videoWidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "videoHeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_VideoHeight,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, videoHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_SkillId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "iaId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_IaId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, iaId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_ActivityId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sourceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_SourceId,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, sourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_From,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "quality",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_Quality,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "labelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_LabelId,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, labelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "recmdSource",
        .dataTypeSpecific.enumDescFunc = PB3VideoRecmdSource_EnumDescriptor,
        .number = PB3VideoInfo_FieldNumber_RecmdSource,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, recmdSource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "recmdSourceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_RecmdSourceId,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, recmdSourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "traceInfo",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoInfo_FieldNumber_TraceInfo,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, traceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PAuthInfo),
        .number = PB3VideoInfo_FieldNumber_AuthInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VideoInfo__storage_, authInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoInfo class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\005\241!!\000\014\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VideoInfo_Sex_RawValue(PB3VideoInfo *message) {
  GPBDescriptor *descriptor = [PB3VideoInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoInfo_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoInfo_Sex_RawValue(PB3VideoInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoInfo_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3VideoInfo_RecmdSource_RawValue(PB3VideoInfo *message) {
  GPBDescriptor *descriptor = [PB3VideoInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoInfo_FieldNumber_RecmdSource];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoInfo_RecmdSource_RawValue(PB3VideoInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoInfo_FieldNumber_RecmdSource];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VideoPlayerReq

@implementation PB3VideoPlayerReq

@dynamic trendId;
@dynamic from;
@dynamic quality;
@dynamic labelId;

typedef struct PB3VideoPlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t quality;
  int32_t labelId;
  int64_t trendId;
} PB3VideoPlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "trendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoPlayerReq_FieldNumber_TrendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoPlayerReq__storage_, trendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoPlayerReq_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoPlayerReq__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "quality",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoPlayerReq_FieldNumber_Quality,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoPlayerReq__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "labelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoPlayerReq_FieldNumber_LabelId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VideoPlayerReq__storage_, labelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoPlayerReq class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoPlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VideoPlayerRes

@implementation PB3VideoPlayerRes

@dynamic hasContentTop, contentTop;
@dynamic hasButton, button;
@dynamic status;
@dynamic roomId;
@dynamic recReason;
@dynamic hasExtraInfoBtn, extraInfoBtn;

typedef struct PB3VideoPlayerRes__storage_ {
  uint32_t _has_storage_[1];
  PB3VideoPlayerStatus status;
  PB3VideoRecReason recReason;
  PB3VideoContentTop *contentTop;
  PB3VideoButton *button;
  PB3ExtraInfo *extraInfoBtn;
  int64_t roomId;
} PB3VideoPlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentTop",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VideoContentTop),
        .number = PB3VideoPlayerRes_FieldNumber_ContentTop,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoPlayerRes__storage_, contentTop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "button",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VideoButton),
        .number = PB3VideoPlayerRes_FieldNumber_Button,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoPlayerRes__storage_, button),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3VideoPlayerStatus_EnumDescriptor,
        .number = PB3VideoPlayerRes_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoPlayerRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoPlayerRes_FieldNumber_RoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VideoPlayerRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "recReason",
        .dataTypeSpecific.enumDescFunc = PB3VideoRecReason_EnumDescriptor,
        .number = PB3VideoPlayerRes_FieldNumber_RecReason,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VideoPlayerRes__storage_, recReason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "extraInfoBtn",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ExtraInfo),
        .number = PB3VideoPlayerRes_FieldNumber_ExtraInfoBtn,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VideoPlayerRes__storage_, extraInfoBtn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoPlayerRes class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoPlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VideoPlayerRes_Status_RawValue(PB3VideoPlayerRes *message) {
  GPBDescriptor *descriptor = [PB3VideoPlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoPlayerRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoPlayerRes_Status_RawValue(PB3VideoPlayerRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoPlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoPlayerRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3VideoPlayerRes_RecReason_RawValue(PB3VideoPlayerRes *message) {
  GPBDescriptor *descriptor = [PB3VideoPlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoPlayerRes_FieldNumber_RecReason];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoPlayerRes_RecReason_RawValue(PB3VideoPlayerRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoPlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoPlayerRes_FieldNumber_RecReason];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ExtraInfo

@implementation PB3ExtraInfo

@dynamic buttonType;
@dynamic buttonIcon;
@dynamic buttonContent;
@dynamic icon;
@dynamic content;
@dynamic orderNum;
@dynamic skillInfo;
@dynamic expireTime;
@dynamic jumpURL;
@dynamic price;

typedef struct PB3ExtraInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3EIButtonType buttonType;
  int32_t orderNum;
  int32_t price;
  NSString *buttonIcon;
  NSString *buttonContent;
  NSString *icon;
  NSString *content;
  NSString *skillInfo;
  NSString *jumpURL;
  int64_t expireTime;
} PB3ExtraInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "buttonType",
        .dataTypeSpecific.enumDescFunc = PB3EIButtonType_EnumDescriptor,
        .number = PB3ExtraInfo_FieldNumber_ButtonType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, buttonType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "buttonIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_ButtonIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, buttonIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_ButtonContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, buttonContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_OrderNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillInfo",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_SkillInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, skillInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_ExpireTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_JumpURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExtraInfo_FieldNumber_Price,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ExtraInfo__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ExtraInfo class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ExtraInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\t\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ExtraInfo_ButtonType_RawValue(PB3ExtraInfo *message) {
  GPBDescriptor *descriptor = [PB3ExtraInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ExtraInfo_FieldNumber_ButtonType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ExtraInfo_ButtonType_RawValue(PB3ExtraInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ExtraInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ExtraInfo_FieldNumber_ButtonType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VideoContentTop

@implementation PB3VideoContentTop

@dynamic ctType;
@dynamic icon;
@dynamic text;
@dynamic jumpURL;

typedef struct PB3VideoContentTop__storage_ {
  uint32_t _has_storage_[1];
  PB3VideoCTopType ctType;
  NSString *icon;
  NSString *text;
  NSString *jumpURL;
} PB3VideoContentTop__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ctType",
        .dataTypeSpecific.enumDescFunc = PB3VideoCTopType_EnumDescriptor,
        .number = PB3VideoContentTop_FieldNumber_CtType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoContentTop__storage_, ctType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoContentTop_FieldNumber_Icon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoContentTop__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoContentTop_FieldNumber_Text,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoContentTop__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoContentTop_FieldNumber_JumpURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VideoContentTop__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoContentTop class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoContentTop__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VideoContentTop_CtType_RawValue(PB3VideoContentTop *message) {
  GPBDescriptor *descriptor = [PB3VideoContentTop descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoContentTop_FieldNumber_CtType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoContentTop_CtType_RawValue(PB3VideoContentTop *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoContentTop descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoContentTop_FieldNumber_CtType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VideoButton

@implementation PB3VideoButton

@dynamic icon;
@dynamic text;
@dynamic jumpURL;
@dynamic ctType;
@dynamic typeId;

typedef struct PB3VideoButton__storage_ {
  uint32_t _has_storage_[1];
  PB3VideoButtonType ctType;
  NSString *icon;
  NSString *text;
  NSString *jumpURL;
  int64_t typeId;
} PB3VideoButton__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoButton_FieldNumber_Icon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoButton__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoButton_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoButton__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoButton_FieldNumber_JumpURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoButton__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ctType",
        .dataTypeSpecific.enumDescFunc = PB3VideoButtonType_EnumDescriptor,
        .number = PB3VideoButton_FieldNumber_CtType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VideoButton__storage_, ctType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "typeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoButton_FieldNumber_TypeId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VideoButton__storage_, typeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoButton class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoButton__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VideoButton_CtType_RawValue(PB3VideoButton *message) {
  GPBDescriptor *descriptor = [PB3VideoButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoButton_FieldNumber_CtType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoButton_CtType_RawValue(PB3VideoButton *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoButton_FieldNumber_CtType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VideoLikeReq

@implementation PB3VideoLikeReq

@dynamic page;

typedef struct PB3VideoLikeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
} PB3VideoLikeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoLikeReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoLikeReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoLikeReq class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoLikeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VideoLikeRes

@implementation PB3VideoLikeRes

@dynamic nextPage;
@dynamic infosArray, infosArray_Count;

typedef struct PB3VideoLikeRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextPage;
  NSMutableArray *infosArray;
} PB3VideoLikeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nextPage",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoLikeRes_FieldNumber_NextPage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoLikeRes__storage_, nextPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "infosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VideoInfo),
        .number = PB3VideoLikeRes_FieldNumber_InfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VideoLikeRes__storage_, infosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoLikeRes class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoLikeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VideoOptReq

@implementation PB3VideoOptReq

@dynamic optType;
@dynamic trendId;
@dynamic second;
@dynamic leftNum;
@dynamic sourceId;
@dynamic recmdSource;
@dynamic recmdSourceId;
@dynamic traceInfo;
@dynamic firstPlay;

typedef struct PB3VideoOptReq__storage_ {
  uint32_t _has_storage_[1];
  PB3VideoOptType optType;
  int32_t leftNum;
  PB3VideoRecmdSource recmdSource;
  NSString *recmdSourceId;
  NSString *traceInfo;
  int64_t trendId;
  int64_t second;
  int64_t sourceId;
} PB3VideoOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3VideoOptType_EnumDescriptor,
        .number = PB3VideoOptReq_FieldNumber_OptType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "trendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoOptReq_FieldNumber_TrendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, trendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "second",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoOptReq_FieldNumber_Second,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, second),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "leftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoOptReq_FieldNumber_LeftNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, leftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sourceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoOptReq_FieldNumber_SourceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, sourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "recmdSource",
        .dataTypeSpecific.enumDescFunc = PB3VideoRecmdSource_EnumDescriptor,
        .number = PB3VideoOptReq_FieldNumber_RecmdSource,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, recmdSource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "recmdSourceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoOptReq_FieldNumber_RecmdSourceId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, recmdSourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "traceInfo",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoOptReq_FieldNumber_TraceInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VideoOptReq__storage_, traceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstPlay",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoOptReq_FieldNumber_FirstPlay,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoOptReq class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VideoOptReq_OptType_RawValue(PB3VideoOptReq *message) {
  GPBDescriptor *descriptor = [PB3VideoOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoOptReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoOptReq_OptType_RawValue(PB3VideoOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoOptReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3VideoOptReq_RecmdSource_RawValue(PB3VideoOptReq *message) {
  GPBDescriptor *descriptor = [PB3VideoOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoOptReq_FieldNumber_RecmdSource];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoOptReq_RecmdSource_RawValue(PB3VideoOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoOptReq_FieldNumber_RecmdSource];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VideoOptRes

@implementation PB3VideoOptRes


typedef struct PB3VideoOptRes__storage_ {
  uint32_t _has_storage_[1];
} PB3VideoOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoOptRes class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VideoOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VideoButtonReportReq

@implementation PB3VideoButtonReportReq

@dynamic btn;
@dynamic trendId;

typedef struct PB3VideoButtonReportReq__storage_ {
  uint32_t _has_storage_[1];
  PB3EIButtonType btn;
  int64_t trendId;
} PB3VideoButtonReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "btn",
        .dataTypeSpecific.enumDescFunc = PB3EIButtonType_EnumDescriptor,
        .number = PB3VideoButtonReportReq_FieldNumber_Btn,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoButtonReportReq__storage_, btn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "trendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoButtonReportReq_FieldNumber_TrendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoButtonReportReq__storage_, trendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoButtonReportReq class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoButtonReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VideoButtonReportReq_Btn_RawValue(PB3VideoButtonReportReq *message) {
  GPBDescriptor *descriptor = [PB3VideoButtonReportReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoButtonReportReq_FieldNumber_Btn];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VideoButtonReportReq_Btn_RawValue(PB3VideoButtonReportReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VideoButtonReportReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VideoButtonReportReq_FieldNumber_Btn];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VideoButtonReportRes

@implementation PB3VideoButtonReportRes


typedef struct PB3VideoButtonReportRes__storage_ {
  uint32_t _has_storage_[1];
} PB3VideoButtonReportRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoButtonReportRes class]
                                     rootClass:[PB3VideoExtRoot class]
                                          file:PB3VideoExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VideoButtonReportRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
