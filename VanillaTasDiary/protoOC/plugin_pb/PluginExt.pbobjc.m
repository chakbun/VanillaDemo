// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_pb/plugin.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "plugin_pb/PluginExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB4PluginExtRoot

@implementation PB4PluginExtRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB4PluginExtRoot_FileDescriptor

static GPBFileDescriptor *PB4PluginExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"plugin_pb"
                                                 objcPrefix:@"PB4"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB4PluginRoomType

GPBEnumDescriptor *PB4PluginRoomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtGuild\000RtPersonal\000RtReward\000";
    static const int32_t values[] = {
        PB4PluginRoomType_RtGuild,
        PB4PluginRoomType_RtPersonal,
        PB4PluginRoomType_RtReward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginRoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginRoomType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginRoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginRoomType_RtGuild:
    case PB4PluginRoomType_RtPersonal:
    case PB4PluginRoomType_RtReward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4FilterDimensionType

GPBEnumDescriptor *PB4FilterDimensionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FilterDimensionDefault\000FilterDimensionPl"
        "ayer\000FilterDimensionPlayerSkill\000";
    static const int32_t values[] = {
        PB4FilterDimensionType_FilterDimensionDefault,
        PB4FilterDimensionType_FilterDimensionPlayer,
        PB4FilterDimensionType_FilterDimensionPlayerSkill,
    };
    static const char *extraTextFormatInfo = "\003\000\026\000\001\025\000\002\032\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4FilterDimensionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4FilterDimensionType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4FilterDimensionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4FilterDimensionType_FilterDimensionDefault:
    case PB4FilterDimensionType_FilterDimensionPlayer:
    case PB4FilterDimensionType_FilterDimensionPlayerSkill:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4IconLocationType

GPBEnumDescriptor *PB4IconLocationType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IconLocationDefault\000IconLocationUp\000IconL"
        "ocationDown\000";
    static const int32_t values[] = {
        PB4IconLocationType_IconLocationDefault,
        PB4IconLocationType_IconLocationUp,
        PB4IconLocationType_IconLocationDown,
    };
    static const char *extraTextFormatInfo = "\003\000\023\000\001\016\000\002\020\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4IconLocationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4IconLocationType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4IconLocationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4IconLocationType_IconLocationDefault:
    case PB4IconLocationType_IconLocationUp:
    case PB4IconLocationType_IconLocationDown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginSwitchType

GPBEnumDescriptor *PB4PluginSwitchType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StZero\000StUserRemember\000StIndex\000StFocusMes"
        "sage\000";
    static const int32_t values[] = {
        PB4PluginSwitchType_StZero,
        PB4PluginSwitchType_StUserRemember,
        PB4PluginSwitchType_StIndex,
        PB4PluginSwitchType_StFocusMessage,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginSwitchType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginSwitchType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginSwitchType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginSwitchType_StZero:
    case PB4PluginSwitchType_StUserRemember:
    case PB4PluginSwitchType_StIndex:
    case PB4PluginSwitchType_StFocusMessage:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginSwitchStatus

GPBEnumDescriptor *PB4PluginSwitchStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SwitchZero\000SwitchOn\000SwitchOff\000SwitchWhit"
        "elist\000";
    static const int32_t values[] = {
        PB4PluginSwitchStatus_SwitchZero,
        PB4PluginSwitchStatus_SwitchOn,
        PB4PluginSwitchStatus_SwitchOff,
        PB4PluginSwitchStatus_SwitchWhitelist,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginSwitchStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginSwitchStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginSwitchStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginSwitchStatus_SwitchZero:
    case PB4PluginSwitchStatus_SwitchOn:
    case PB4PluginSwitchStatus_SwitchOff:
    case PB4PluginSwitchStatus_SwitchWhitelist:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginSexType

GPBEnumDescriptor *PB4PluginSexType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Mail\000Femail\000";
    static const int32_t values[] = {
        PB4PluginSexType_Unknown,
        PB4PluginSexType_Mail,
        PB4PluginSexType_Femail,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginSexType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginSexType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginSexType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginSexType_Unknown:
    case PB4PluginSexType_Mail:
    case PB4PluginSexType_Femail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginBcFriendType

GPBEnumDescriptor *PB4PluginBcFriendType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BcFriendTypeNone\000BcFriendTypeHead\000BcFrie"
        "ndTypeNormal\000";
    static const int32_t values[] = {
        PB4PluginBcFriendType_BcFriendTypeNone,
        PB4PluginBcFriendType_BcFriendTypeHead,
        PB4PluginBcFriendType_BcFriendTypeNormal,
    };
    static const char *extraTextFormatInfo = "\003\000\020\000\001\020\000\002\022\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginBcFriendType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginBcFriendType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginBcFriendType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginBcFriendType_BcFriendTypeNone:
    case PB4PluginBcFriendType_BcFriendTypeHead:
    case PB4PluginBcFriendType_BcFriendTypeNormal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4StatusType

GPBEnumDescriptor *PB4StatusType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StatusInvalid\000StatusValid\000";
    static const int32_t values[] = {
        PB4StatusType_StatusInvalid,
        PB4StatusType_StatusValid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4StatusType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4StatusType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4StatusType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4StatusType_StatusInvalid:
    case PB4StatusType_StatusValid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PhomeDecorateType

GPBEnumDescriptor *PB4PhomeDecorateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PdtNone\000PdtRoomBackdrop\000PdtRoomSign\000PdtR"
        "oomFrame\000";
    static const int32_t values[] = {
        PB4PhomeDecorateType_PdtNone,
        PB4PhomeDecorateType_PdtRoomBackdrop,
        PB4PhomeDecorateType_PdtRoomSign,
        PB4PhomeDecorateType_PdtRoomFrame,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PhomeDecorateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PhomeDecorateType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PhomeDecorateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PhomeDecorateType_PdtNone:
    case PB4PhomeDecorateType_PdtRoomBackdrop:
    case PB4PhomeDecorateType_PdtRoomSign:
    case PB4PhomeDecorateType_PdtRoomFrame:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginUploadType

GPBEnumDescriptor *PB4PluginUploadType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeZero\000HeadAlbumImg\000HeadIconImg\000Dynami"
        "csImg\000ClientLog\000TipOffsImg\000Indetity\000Pmme"
        "dia\000Voice\000BillVoice\000BillPicture\000CmsSingl"
        "eImg\000CmsCombineImg\000CommunityImg\000Communit"
        "yVideo\000CommunityAudio\000CommunityGroupImg\000"
        "GreetVoice\000";
    static const int32_t values[] = {
        PB4PluginUploadType_TypeZero,
        PB4PluginUploadType_HeadAlbumImg,
        PB4PluginUploadType_HeadIconImg,
        PB4PluginUploadType_DynamicsImg,
        PB4PluginUploadType_ClientLog,
        PB4PluginUploadType_TipOffsImg,
        PB4PluginUploadType_Indetity,
        PB4PluginUploadType_Pmmedia,
        PB4PluginUploadType_Voice,
        PB4PluginUploadType_BillVoice,
        PB4PluginUploadType_BillPicture,
        PB4PluginUploadType_CmsSingleImg,
        PB4PluginUploadType_CmsCombineImg,
        PB4PluginUploadType_CommunityImg,
        PB4PluginUploadType_CommunityVideo,
        PB4PluginUploadType_CommunityAudio,
        PB4PluginUploadType_CommunityGroupImg,
        PB4PluginUploadType_GreetVoice,
    };
    static const char *extraTextFormatInfo = "\022\000\010\000\001\014\000\002\013\000\003\013\000\004\t\000\005\n\000\006\010\000\007c\004\000\010\005\000\t\t\000\n\013\000\013\014\000\014\r\000\r\014\000\016\016\000\017\016\000\020\021\000\021\n\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginUploadType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginUploadType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginUploadType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginUploadType_TypeZero:
    case PB4PluginUploadType_HeadAlbumImg:
    case PB4PluginUploadType_HeadIconImg:
    case PB4PluginUploadType_DynamicsImg:
    case PB4PluginUploadType_ClientLog:
    case PB4PluginUploadType_TipOffsImg:
    case PB4PluginUploadType_Indetity:
    case PB4PluginUploadType_Pmmedia:
    case PB4PluginUploadType_Voice:
    case PB4PluginUploadType_BillVoice:
    case PB4PluginUploadType_BillPicture:
    case PB4PluginUploadType_CmsSingleImg:
    case PB4PluginUploadType_CmsCombineImg:
    case PB4PluginUploadType_CommunityImg:
    case PB4PluginUploadType_CommunityVideo:
    case PB4PluginUploadType_CommunityAudio:
    case PB4PluginUploadType_CommunityGroupImg:
    case PB4PluginUploadType_GreetVoice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4CommunityGroupType

GPBEnumDescriptor *PB4CommunityGroupType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CgtNormal\000CgtClan\000CgtAdmin\000";
    static const int32_t values[] = {
        PB4CommunityGroupType_CgtNormal,
        PB4CommunityGroupType_CgtClan,
        PB4CommunityGroupType_CgtAdmin,
    };
    static const char *extraTextFormatInfo = "\001\000c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4CommunityGroupType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4CommunityGroupType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4CommunityGroupType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4CommunityGroupType_CgtNormal:
    case PB4CommunityGroupType_CgtClan:
    case PB4CommunityGroupType_CgtAdmin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4CommunityGroupOpt

GPBEnumDescriptor *PB4CommunityGroupOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CgoNone\000CgoReject\000CgoAllow\000CgoAllReject\000";
    static const int32_t values[] = {
        PB4CommunityGroupOpt_CgoNone,
        PB4CommunityGroupOpt_CgoReject,
        PB4CommunityGroupOpt_CgoAllow,
        PB4CommunityGroupOpt_CgoAllReject,
    };
    static const char *extraTextFormatInfo = "\003\001c\206\000\002c\205\000\003c\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4CommunityGroupOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4CommunityGroupOpt_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4CommunityGroupOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4CommunityGroupOpt_CgoNone:
    case PB4CommunityGroupOpt_CgoReject:
    case PB4CommunityGroupOpt_CgoAllow:
    case PB4CommunityGroupOpt_CgoAllReject:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4CommunityGroupLeaveOpt

GPBEnumDescriptor *PB4CommunityGroupLeaveOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GloNone\000GloLeave\000GloKick\000GloDisband\000";
    static const int32_t values[] = {
        PB4CommunityGroupLeaveOpt_GloNone,
        PB4CommunityGroupLeaveOpt_GloLeave,
        PB4CommunityGroupLeaveOpt_GloKick,
        PB4CommunityGroupLeaveOpt_GloDisband,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4CommunityGroupLeaveOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4CommunityGroupLeaveOpt_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4CommunityGroupLeaveOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4CommunityGroupLeaveOpt_GloNone:
    case PB4CommunityGroupLeaveOpt_GloLeave:
    case PB4CommunityGroupLeaveOpt_GloKick:
    case PB4CommunityGroupLeaveOpt_GloDisband:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4CommunityPlayerGroupType

GPBEnumDescriptor *PB4CommunityPlayerGroupType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PgtNone\000PgtJoin\000PgtStore\000";
    static const int32_t values[] = {
        PB4CommunityPlayerGroupType_PgtNone,
        PB4CommunityPlayerGroupType_PgtJoin,
        PB4CommunityPlayerGroupType_PgtStore,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4CommunityPlayerGroupType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4CommunityPlayerGroupType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4CommunityPlayerGroupType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4CommunityPlayerGroupType_PgtNone:
    case PB4CommunityPlayerGroupType_PgtJoin:
    case PB4CommunityPlayerGroupType_PgtStore:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginBillPlayerStatus

GPBEnumDescriptor *PB4PluginBillPlayerStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BpNone\000BpOpen\000BpClose\000BpFreeze\000";
    static const int32_t values[] = {
        PB4PluginBillPlayerStatus_BpNone,
        PB4PluginBillPlayerStatus_BpOpen,
        PB4PluginBillPlayerStatus_BpClose,
        PB4PluginBillPlayerStatus_BpFreeze,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginBillPlayerStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginBillPlayerStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginBillPlayerStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginBillPlayerStatus_BpNone:
    case PB4PluginBillPlayerStatus_BpOpen:
    case PB4PluginBillPlayerStatus_BpClose:
    case PB4PluginBillPlayerStatus_BpFreeze:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginBillPlayerCheckStatus

GPBEnumDescriptor *PB4PluginBillPlayerCheckStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BpcNone\000BpcChecking\000BpcCheckedSucc\000BpcCh"
        "eckedFail\000BpcReChecking\000BpcReCheckedFail"
        "\000";
    static const int32_t values[] = {
        PB4PluginBillPlayerCheckStatus_BpcNone,
        PB4PluginBillPlayerCheckStatus_BpcChecking,
        PB4PluginBillPlayerCheckStatus_BpcCheckedSucc,
        PB4PluginBillPlayerCheckStatus_BpcCheckedFail,
        PB4PluginBillPlayerCheckStatus_BpcReChecking,
        PB4PluginBillPlayerCheckStatus_BpcReCheckedFail,
    };
    static const char *extraTextFormatInfo = "\001\000c\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginBillPlayerCheckStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginBillPlayerCheckStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginBillPlayerCheckStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginBillPlayerCheckStatus_BpcNone:
    case PB4PluginBillPlayerCheckStatus_BpcChecking:
    case PB4PluginBillPlayerCheckStatus_BpcCheckedSucc:
    case PB4PluginBillPlayerCheckStatus_BpcCheckedFail:
    case PB4PluginBillPlayerCheckStatus_BpcReChecking:
    case PB4PluginBillPlayerCheckStatus_BpcReCheckedFail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginBillSkillType

GPBEnumDescriptor *PB4PluginBillSkillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BstNone\000BstFirst\000BstSecond\000";
    static const int32_t values[] = {
        PB4PluginBillSkillType_BstNone,
        PB4PluginBillSkillType_BstFirst,
        PB4PluginBillSkillType_BstSecond,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginBillSkillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginBillSkillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginBillSkillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginBillSkillType_BstNone:
    case PB4PluginBillSkillType_BstFirst:
    case PB4PluginBillSkillType_BstSecond:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PluginOnOffType

GPBEnumDescriptor *PB4PluginOnOffType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PootZero\000OxygenBarTrendGif\000OxygenBarComm"
        "unityPicture\000OxygenVideoButton\000OxygenPho"
        "meReport\000";
    static const int32_t values[] = {
        PB4PluginOnOffType_PootZero,
        PB4PluginOnOffType_OxygenBarTrendGif,
        PB4PluginOnOffType_OxygenBarCommunityPicture,
        PB4PluginOnOffType_OxygenVideoButton,
        PB4PluginOnOffType_OxygenPhomeReport,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PluginOnOffType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PluginOnOffType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PluginOnOffType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PluginOnOffType_PootZero:
    case PB4PluginOnOffType_OxygenBarTrendGif:
    case PB4PluginOnOffType_OxygenBarCommunityPicture:
    case PB4PluginOnOffType_OxygenVideoButton:
    case PB4PluginOnOffType_OxygenPhomeReport:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PlayerAction

GPBEnumDescriptor *PB4PlayerAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PaNone\000PaNoAction\000PaSelfRoom\000PaClanNoCha"
        "ir\000PaChair\000PaGaming\000PaSinging\000PaOpenChai"
        "r\000PaReceiveGift\000PaSingingChair\000PaOrder\000P"
        "aChating\000";
    static const int32_t values[] = {
        PB4PlayerAction_PaNone,
        PB4PlayerAction_PaNoAction,
        PB4PlayerAction_PaSelfRoom,
        PB4PlayerAction_PaClanNoChair,
        PB4PlayerAction_PaChair,
        PB4PlayerAction_PaGaming,
        PB4PlayerAction_PaSinging,
        PB4PlayerAction_PaOpenChair,
        PB4PlayerAction_PaReceiveGift,
        PB4PlayerAction_PaSingingChair,
        PB4PlayerAction_PaOrder,
        PB4PlayerAction_PaChating,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PlayerAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PlayerAction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PlayerAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PlayerAction_PaNone:
    case PB4PlayerAction_PaNoAction:
    case PB4PlayerAction_PaSelfRoom:
    case PB4PlayerAction_PaClanNoChair:
    case PB4PlayerAction_PaChair:
    case PB4PlayerAction_PaGaming:
    case PB4PlayerAction_PaSinging:
    case PB4PlayerAction_PaOpenChair:
    case PB4PlayerAction_PaReceiveGift:
    case PB4PlayerAction_PaSingingChair:
    case PB4PlayerAction_PaOrder:
    case PB4PlayerAction_PaChating:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PhomeRoomPattern

GPBEnumDescriptor *PB4PhomeRoomPattern_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PrpGame\000PrpStandard\000PrpPersonal\000PrpIntim"
        "ate\000PrpShow\000PrpMate\000PrpSendOrder\000PrpGame"
        "Platform\000PnrpMobaTeam\000PnrpOrganizeMobaTe"
        "am\000";
    static const int32_t values[] = {
        PB4PhomeRoomPattern_PrpGame,
        PB4PhomeRoomPattern_PrpStandard,
        PB4PhomeRoomPattern_PrpPersonal,
        PB4PhomeRoomPattern_PrpIntimate,
        PB4PhomeRoomPattern_PrpShow,
        PB4PhomeRoomPattern_PrpMate,
        PB4PhomeRoomPattern_PrpSendOrder,
        PB4PhomeRoomPattern_PrpGamePlatform,
        PB4PhomeRoomPattern_PnrpMobaTeam,
        PB4PhomeRoomPattern_PnrpOrganizeMobaTeam,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PhomeRoomPattern)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PhomeRoomPattern_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PhomeRoomPattern_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PhomeRoomPattern_PrpGame:
    case PB4PhomeRoomPattern_PrpStandard:
    case PB4PhomeRoomPattern_PrpPersonal:
    case PB4PhomeRoomPattern_PrpIntimate:
    case PB4PhomeRoomPattern_PrpShow:
    case PB4PhomeRoomPattern_PrpMate:
    case PB4PhomeRoomPattern_PrpSendOrder:
    case PB4PhomeRoomPattern_PrpGamePlatform:
    case PB4PhomeRoomPattern_PnrpMobaTeam:
    case PB4PhomeRoomPattern_PnrpOrganizeMobaTeam:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4UserSongType

GPBEnumDescriptor *PB4UserSongType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UstNone\000UstPlay\000UstStop\000";
    static const int32_t values[] = {
        PB4UserSongType_UstNone,
        PB4UserSongType_UstPlay,
        PB4UserSongType_UstStop,
    };
    static const char *extraTextFormatInfo = "\001\000c\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4UserSongType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4UserSongType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4UserSongType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4UserSongType_UstNone:
    case PB4UserSongType_UstPlay:
    case PB4UserSongType_UstStop:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4VideoRecmdSource

GPBEnumDescriptor *PB4VideoRecmdSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VstZero\000VstRules\000VstAlgorithm\000";
    static const int32_t values[] = {
        PB4VideoRecmdSource_VstZero,
        PB4VideoRecmdSource_VstRules,
        PB4VideoRecmdSource_VstAlgorithm,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4VideoRecmdSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4VideoRecmdSource_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4VideoRecmdSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4VideoRecmdSource_VstZero:
    case PB4VideoRecmdSource_VstRules:
    case PB4VideoRecmdSource_VstAlgorithm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PAuthType

GPBEnumDescriptor *PB4PAuthType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AuthTypeNone\000AuthTypeSinger\000AuthTypeVoic"
        "er\000AuthTypeSurface\000AuthTypeHaveSong\000Auth"
        "TypeStar\000";
    static const int32_t values[] = {
        PB4PAuthType_AuthTypeNone,
        PB4PAuthType_AuthTypeSinger,
        PB4PAuthType_AuthTypeVoicer,
        PB4PAuthType_AuthTypeSurface,
        PB4PAuthType_AuthTypeHaveSong,
        PB4PAuthType_AuthTypeStar,
    };
    static const char *extraTextFormatInfo = "\006\000\014\000\001\016\000\002\016\000\003\017\000\004\020\000\005\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PAuthType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PAuthType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PAuthType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PAuthType_AuthTypeNone:
    case PB4PAuthType_AuthTypeSinger:
    case PB4PAuthType_AuthTypeVoicer:
    case PB4PAuthType_AuthTypeSurface:
    case PB4PAuthType_AuthTypeHaveSong:
    case PB4PAuthType_AuthTypeStar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB4PAuthStatus

GPBEnumDescriptor *PB4PAuthStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AosNone\000AosActivate\000AosBlock\000";
    static const int32_t values[] = {
        PB4PAuthStatus_AosNone,
        PB4PAuthStatus_AosActivate,
        PB4PAuthStatus_AosBlock,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\210\000\002c\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB4PAuthStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB4PAuthStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB4PAuthStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB4PAuthStatus_AosNone:
    case PB4PAuthStatus_AosActivate:
    case PB4PAuthStatus_AosBlock:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB4PluginHomeTips

@implementation PB4PluginHomeTips

@dynamic id_p;
@dynamic color;
@dynamic URL;
@dynamic msg;
@dynamic roomDisplay;

typedef struct PB4PluginHomeTips__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *color;
  NSString *URL;
  NSString *msg;
} PB4PluginHomeTips__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginHomeTips_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginHomeTips__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "color",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginHomeTips_FieldNumber_Color,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginHomeTips__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginHomeTips_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginHomeTips__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginHomeTips_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginHomeTips__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomDisplay",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginHomeTips_FieldNumber_RoomDisplay,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginHomeTips class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginHomeTips__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginSwitch

@implementation PB4PluginSwitch

@dynamic switch_p;
@dynamic status;

typedef struct PB4PluginSwitch__storage_ {
  uint32_t _has_storage_[1];
  PB4PluginSwitchType switch_p;
  PB4PluginSwitchStatus status;
} PB4PluginSwitch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "switch_p",
        .dataTypeSpecific.enumDescFunc = PB4PluginSwitchType_EnumDescriptor,
        .number = PB4PluginSwitch_FieldNumber_Switch_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginSwitch__storage_, switch_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB4PluginSwitchStatus_EnumDescriptor,
        .number = PB4PluginSwitch_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginSwitch__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginSwitch class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginSwitch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4PluginSwitch_Switch_p_RawValue(PB4PluginSwitch *message) {
  GPBDescriptor *descriptor = [PB4PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginSwitch_FieldNumber_Switch_p];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PluginSwitch_Switch_p_RawValue(PB4PluginSwitch *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginSwitch_FieldNumber_Switch_p];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB4PluginSwitch_Status_RawValue(PB4PluginSwitch *message) {
  GPBDescriptor *descriptor = [PB4PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginSwitch_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PluginSwitch_Status_RawValue(PB4PluginSwitch *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginSwitch_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB4PlayerImageInfo

@implementation PB4PlayerImageInfo

@dynamic id_p;
@dynamic width;
@dynamic height;
@dynamic isVideo;
@dynamic URL;

typedef struct PB4PlayerImageInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  NSString *URL;
  int64_t id_p;
} PB4PlayerImageInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerImageInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PlayerImageInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerImageInfo_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PlayerImageInfo__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerImageInfo_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PlayerImageInfo__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isVideo",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerImageInfo_FieldNumber_IsVideo,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerImageInfo_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PlayerImageInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PlayerImageInfo class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PlayerImageInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4RoomDecorate

@implementation PB4RoomDecorate

@dynamic decorateId;
@dynamic decorateType;
@dynamic picURL;
@dynamic pcPicURL;
@dynamic weight;
@dynamic shelterURL;
@dynamic pcShelterURL;
@dynamic stretchableURL;

typedef struct PB4RoomDecorate__storage_ {
  uint32_t _has_storage_[1];
  PB4PhomeDecorateType decorateType;
  NSString *picURL;
  NSString *pcPicURL;
  NSString *shelterURL;
  NSString *pcShelterURL;
  NSString *stretchableURL;
  int64_t decorateId;
  int64_t weight;
} PB4RoomDecorate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB4RoomDecorate_FieldNumber_DecorateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "decorateType",
        .dataTypeSpecific.enumDescFunc = PB4PhomeDecorateType_EnumDescriptor,
        .number = PB4RoomDecorate_FieldNumber_DecorateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, decorateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = PB4RoomDecorate_FieldNumber_PicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, picURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcPicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB4RoomDecorate_FieldNumber_PcPicURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, pcPicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB4RoomDecorate_FieldNumber_Weight,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "shelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB4RoomDecorate_FieldNumber_ShelterURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, shelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcShelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB4RoomDecorate_FieldNumber_PcShelterURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, pcShelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stretchableURL",
        .dataTypeSpecific.className = NULL,
        .number = PB4RoomDecorate_FieldNumber_StretchableURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB4RoomDecorate__storage_, stretchableURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4RoomDecorate class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4RoomDecorate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\003\241!!\000\004\002\243\241!!\000\006\007\241!!\000\007\002\247\241!!\000\010\013\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4RoomDecorate_DecorateType_RawValue(PB4RoomDecorate *message) {
  GPBDescriptor *descriptor = [PB4RoomDecorate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4RoomDecorate_FieldNumber_DecorateType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4RoomDecorate_DecorateType_RawValue(PB4RoomDecorate *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4RoomDecorate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4RoomDecorate_FieldNumber_DecorateType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB4PluginUresOssCallbackReq

@implementation PB4PluginUresOssCallbackReq

@dynamic type;

typedef struct PB4PluginUresOssCallbackReq__storage_ {
  uint32_t _has_storage_[1];
  PB4PluginUploadType type;
} PB4PluginUresOssCallbackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB4PluginUploadType_EnumDescriptor,
        .number = PB4PluginUresOssCallbackReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginUresOssCallbackReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginUresOssCallbackReq class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginUresOssCallbackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4PluginUresOssCallbackReq_Type_RawValue(PB4PluginUresOssCallbackReq *message) {
  GPBDescriptor *descriptor = [PB4PluginUresOssCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginUresOssCallbackReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PluginUresOssCallbackReq_Type_RawValue(PB4PluginUresOssCallbackReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PluginUresOssCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginUresOssCallbackReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB4PluginUresOssCallbackRes

@implementation PB4PluginUresOssCallbackRes


typedef struct PB4PluginUresOssCallbackRes__storage_ {
  uint32_t _has_storage_[1];
} PB4PluginUresOssCallbackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginUresOssCallbackRes class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB4PluginUresOssCallbackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginPlayer

@implementation PB4PluginPlayer

@dynamic id_p;
@dynamic nickname;
@dynamic sex;
@dynamic id2;
@dynamic icon;
@dynamic flags;
@dynamic flags2;
@dynamic charm;
@dynamic charmLevel;
@dynamic wealthLevel;
@dynamic wealth;
@dynamic onlineExp;
@dynamic createAt;
@dynamic hasPasswd;
@dynamic isPhone;
@dynamic flowerLevel;
@dynamic flower;
@dynamic isOnline;
@dynamic flagsKv, flagsKv_Count;
@dynamic newWealth;
@dynamic authInfoArray, authInfoArray_Count;

typedef struct PB4PluginPlayer__storage_ {
  uint32_t _has_storage_[1];
  PB4PluginSexType sex;
  int32_t wealth;
  uint32_t onlineExp;
  uint32_t createAt;
  int32_t charmLevel;
  int32_t wealthLevel;
  int32_t flowerLevel;
  NSString *nickname;
  NSString *icon;
  GPBInt32Int32Dictionary *flagsKv;
  NSMutableArray *authInfoArray;
  int64_t id_p;
  int64_t id2;
  int64_t flags;
  int64_t charm;
  int64_t flags2;
  int64_t flower;
  int64_t newWealth;
} PB4PluginPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB4PluginSexType_EnumDescriptor,
        .number = PB4PluginPlayer_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Id2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Flags,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "charm",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Charm,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, charm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Wealth,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "onlineExp",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_OnlineExp,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, onlineExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_CreateAt,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, createAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasPasswd",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_HasPasswd,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_IsPhone,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_CharmLevel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, charmLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flags2",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Flags2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, flags2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_WealthLevel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, wealthLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flowerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_FlowerLevel,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, flowerLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flower",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_Flower,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, flower),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isOnline",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_IsOnline,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "flagsKv",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_FlagsKv,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, flagsKv),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newWealth",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginPlayer_FieldNumber_NewWealth,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, newWealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "authInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB4PAuthInfo),
        .number = PB4PluginPlayer_FieldNumber_AuthInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB4PluginPlayer__storage_, authInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginPlayer class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\013\010\000\017\n\000 \013\000!\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4PluginPlayer_Sex_RawValue(PB4PluginPlayer *message) {
  GPBDescriptor *descriptor = [PB4PluginPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginPlayer_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PluginPlayer_Sex_RawValue(PB4PluginPlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PluginPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginPlayer_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB4PluginUserInfo

@implementation PB4PluginUserInfo

@dynamic userId;
@dynamic city;
@dynamic signature;
@dynamic birthday;
@dynamic intimateSlot;
@dynamic mind;
@dynamic shortIdSlot;

typedef struct PB4PluginUserInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateSlot;
  int32_t shortIdSlot;
  NSString *city;
  NSString *signature;
  NSString *birthday;
  NSString *mind;
  int64_t userId;
} PB4PluginUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginUserInfo_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginUserInfo__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginUserInfo_FieldNumber_City,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginUserInfo__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginUserInfo_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginUserInfo__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthday",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginUserInfo_FieldNumber_Birthday,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginUserInfo__storage_, birthday),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intimateSlot",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginUserInfo_FieldNumber_IntimateSlot,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4PluginUserInfo__storage_, intimateSlot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "mind",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginUserInfo_FieldNumber_Mind,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PluginUserInfo__storage_, mind),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortIdSlot",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginUserInfo_FieldNumber_ShortIdSlot,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB4PluginUserInfo__storage_, shortIdSlot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginUserInfo class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginUserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginRoomInfo

@implementation PB4PluginRoomInfo

@dynamic roomId;
@dynamic name;
@dynamic greeting;
@dynamic category;
@dynamic pattern;
@dynamic password;
@dynamic online;
@dynamic newPatter;
@dynamic voice;
@dynamic isRewardRoom;

typedef struct PB4PluginRoomInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t category;
  int32_t pattern;
  int32_t online;
  int32_t newPatter;
  int32_t voice;
  NSString *name;
  NSString *greeting;
  NSString *password;
  int64_t roomId;
} PB4PluginRoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_Greeting,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_Category,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_Pattern,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, pattern),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_Password,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "online",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_Online,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, online),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newPatter",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_NewPatter,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, newPatter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_Voice,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB4PluginRoomInfo__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isRewardRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginRoomInfo_FieldNumber_IsRewardRoom,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginRoomInfo class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginRoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginBillSkill

@implementation PB4PluginBillSkill

@dynamic type;
@dynamic skill;
@dynamic skillCreateAt;
@dynamic orderNum;
@dynamic introText;
@dynamic price;

typedef struct PB4PluginBillSkill__storage_ {
  uint32_t _has_storage_[1];
  PB4PluginBillSkillType type;
  int32_t skill;
  int32_t orderNum;
  int32_t price;
  NSString *introText;
  int64_t skillCreateAt;
} PB4PluginBillSkill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB4PluginBillSkillType_EnumDescriptor,
        .number = PB4PluginBillSkill_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginBillSkill__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "skill",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBillSkill_FieldNumber_Skill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginBillSkill__storage_, skill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillCreateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBillSkill_FieldNumber_SkillCreateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginBillSkill__storage_, skillCreateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBillSkill_FieldNumber_OrderNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginBillSkill__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "introText",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBillSkill_FieldNumber_IntroText,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4PluginBillSkill__storage_, introText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBillSkill_FieldNumber_Price,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PluginBillSkill__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginBillSkill class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginBillSkill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4PluginBillSkill_Type_RawValue(PB4PluginBillSkill *message) {
  GPBDescriptor *descriptor = [PB4PluginBillSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginBillSkill_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PluginBillSkill_Type_RawValue(PB4PluginBillSkill *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PluginBillSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginBillSkill_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB4PluginBillPlayerCard

@implementation PB4PluginBillPlayerCard

@dynamic level;
@dynamic skillsArray, skillsArray_Count;
@dynamic status;
@dynamic checkStatus;
@dynamic billSkillsArray, billSkillsArray_Count;

typedef struct PB4PluginBillPlayerCard__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  PB4PluginBillPlayerStatus status;
  PB4PluginBillPlayerCheckStatus checkStatus;
  GPBInt32Array *skillsArray;
  NSMutableArray *billSkillsArray;
} PB4PluginBillPlayerCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBillPlayerCard_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginBillPlayerCard__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBillPlayerCard_FieldNumber_SkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB4PluginBillPlayerCard__storage_, skillsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB4PluginBillPlayerStatus_EnumDescriptor,
        .number = PB4PluginBillPlayerCard_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginBillPlayerCard__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "checkStatus",
        .dataTypeSpecific.enumDescFunc = PB4PluginBillPlayerCheckStatus_EnumDescriptor,
        .number = PB4PluginBillPlayerCard_FieldNumber_CheckStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginBillPlayerCard__storage_, checkStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "billSkillsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB4PluginBillSkill),
        .number = PB4PluginBillPlayerCard_FieldNumber_BillSkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB4PluginBillPlayerCard__storage_, billSkillsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginBillPlayerCard class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginBillPlayerCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4PluginBillPlayerCard_Status_RawValue(PB4PluginBillPlayerCard *message) {
  GPBDescriptor *descriptor = [PB4PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginBillPlayerCard_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PluginBillPlayerCard_Status_RawValue(PB4PluginBillPlayerCard *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginBillPlayerCard_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB4PluginBillPlayerCard_CheckStatus_RawValue(PB4PluginBillPlayerCard *message) {
  GPBDescriptor *descriptor = [PB4PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginBillPlayerCard_FieldNumber_CheckStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PluginBillPlayerCard_CheckStatus_RawValue(PB4PluginBillPlayerCard *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PluginBillPlayerCard_FieldNumber_CheckStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB4PluginSystemMsgNotice

@implementation PB4PluginSystemMsgNotice

@dynamic msg;
@dynamic sendTime;
@dynamic language;
@dynamic routerURL;
@dynamic picture;
@dynamic pictureRouter;
@dynamic maskText;
@dynamic bottomText;
@dynamic bottomRouter;
@dynamic msgTitle;
@dynamic roomId;
@dynamic status;
@dynamic overdueTime;
@dynamic hyperlink;
@dynamic msgType;

typedef struct PB4PluginSystemMsgNotice__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sendTime;
  uint32_t language;
  uint32_t status;
  uint32_t msgType;
  NSString *msg;
  NSString *routerURL;
  NSString *picture;
  NSString *pictureRouter;
  NSString *maskText;
  NSString *bottomText;
  NSString *bottomRouter;
  NSString *msgTitle;
  NSData *roomId;
  NSString *hyperlink;
  int64_t overdueTime;
} PB4PluginSystemMsgNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_SendTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_Language,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_RouterURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_Picture,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pictureRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_PictureRouter,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, pictureRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskText",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_MaskText,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, maskText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomText",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_BottomText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, bottomText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_BottomRouter,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, bottomRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_MsgTitle,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, msgTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_RoomId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_Status,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "overdueTime",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_OverdueTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, overdueTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hyperlink",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_Hyperlink,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, hyperlink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginSystemMsgNotice_FieldNumber_MsgType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB4PluginSystemMsgNotice__storage_, msgType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginSystemMsgNotice class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginSystemMsgNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PlayerBaseInfo

@implementation PB4PlayerBaseInfo

@dynamic id_p;
@dynamic id2;
@dynamic nickName;
@dynamic icon;

typedef struct PB4PlayerBaseInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB4PlayerBaseInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerBaseInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PlayerBaseInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerBaseInfo_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PlayerBaseInfo__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerBaseInfo_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PlayerBaseInfo__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerBaseInfo_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PlayerBaseInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PlayerBaseInfo class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PlayerBaseInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PlayerActMsg

@implementation PB4PlayerActMsg

@dynamic action;
@dynamic msg;

typedef struct PB4PlayerActMsg__storage_ {
  uint32_t _has_storage_[1];
  PB4PlayerAction action;
  NSString *msg;
} PB4PlayerActMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = PB4PlayerAction_EnumDescriptor,
        .number = PB4PlayerActMsg_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PlayerActMsg__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB4PlayerActMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PlayerActMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PlayerActMsg class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PlayerActMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4PlayerActMsg_Action_RawValue(PB4PlayerActMsg *message) {
  GPBDescriptor *descriptor = [PB4PlayerActMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PlayerActMsg_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PlayerActMsg_Action_RawValue(PB4PlayerActMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PlayerActMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PlayerActMsg_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB4MatchUserGameReq

@implementation PB4MatchUserGameReq

@dynamic roomId;
@dynamic gameId;

typedef struct PB4MatchUserGameReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t gameId;
} PB4MatchUserGameReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB4MatchUserGameReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4MatchUserGameReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB4MatchUserGameReq_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4MatchUserGameReq__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4MatchUserGameReq class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4MatchUserGameReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4MatchUserGameRes

@implementation PB4MatchUserGameRes


typedef struct PB4MatchUserGameRes__storage_ {
  uint32_t _has_storage_[1];
} PB4MatchUserGameRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4MatchUserGameRes class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB4MatchUserGameRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4MatchUserGameCancelReq

@implementation PB4MatchUserGameCancelReq

@dynamic roomId;
@dynamic gameId;
@dynamic playerId;

typedef struct PB4MatchUserGameCancelReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t gameId;
  int32_t playerId;
} PB4MatchUserGameCancelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB4MatchUserGameCancelReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4MatchUserGameCancelReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB4MatchUserGameCancelReq_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4MatchUserGameCancelReq__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB4MatchUserGameCancelReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4MatchUserGameCancelReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4MatchUserGameCancelReq class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4MatchUserGameCancelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4MatchUserGameCancelRes

@implementation PB4MatchUserGameCancelRes


typedef struct PB4MatchUserGameCancelRes__storage_ {
  uint32_t _has_storage_[1];
} PB4MatchUserGameCancelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4MatchUserGameCancelRes class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB4MatchUserGameCancelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginGain

@implementation PB4PluginGain

@dynamic type;
@dynamic giftId;
@dynamic num;

typedef struct PB4PluginGain__storage_ {
  uint32_t _has_storage_[1];
  uint64_t type;
  uint64_t giftId;
  uint64_t num;
} PB4PluginGain__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginGain_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginGain__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginGain_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginGain__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginGain_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginGain__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginGain class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginGain__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginLoss

@implementation PB4PluginLoss

@dynamic type;
@dynamic giftId;
@dynamic num;

typedef struct PB4PluginLoss__storage_ {
  uint32_t _has_storage_[1];
  uint64_t type;
  uint64_t giftId;
  uint64_t num;
} PB4PluginLoss__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginLoss_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginLoss__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginLoss_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginLoss__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginLoss_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginLoss__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginLoss class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginLoss__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginAssetsGainReq

@implementation PB4PluginAssetsGainReq

@dynamic playerId;
@dynamic gainsArray, gainsArray_Count;
@dynamic lossArray, lossArray_Count;
@dynamic type;
@dynamic reMark;
@dynamic giftType;
@dynamic giftReMark;
@dynamic lossGiftType;
@dynamic lossGiftReMark;
@dynamic isSuperAdmin;

typedef struct PB4PluginAssetsGainReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t giftType;
  int32_t lossGiftType;
  NSMutableArray *gainsArray;
  NSMutableArray *lossArray;
  NSString *reMark;
  NSString *giftReMark;
  NSString *lossGiftReMark;
  uint64_t playerId;
} PB4PluginAssetsGainReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "gainsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB4PluginGain),
        .number = PB4PluginAssetsGainReq_FieldNumber_GainsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, gainsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lossArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB4PluginLoss),
        .number = PB4PluginAssetsGainReq_FieldNumber_LossArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, lossArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reMark",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_ReMark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, reMark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftType",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_GiftType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, giftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftReMark",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_GiftReMark,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, giftReMark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lossGiftType",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_LossGiftType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, lossGiftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lossGiftReMark",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_LossGiftReMark,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGainReq__storage_, lossGiftReMark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSuperAdmin",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGainReq_FieldNumber_IsSuperAdmin,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginAssetsGainReq class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginAssetsGainReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\005\006\000\007\004\246\000\t\004\244\246\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginBagItem

@implementation PB4PluginBagItem

@dynamic giftId;
@dynamic amount;
@dynamic cteateAt;

typedef struct PB4PluginBagItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  uint32_t amount;
  NSString *cteateAt;
} PB4PluginBagItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBagItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginBagItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBagItem_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginBagItem__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cteateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginBagItem_FieldNumber_CteateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginBagItem__storage_, cteateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginBagItem class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginBagItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PluginAssetsGetRes

@implementation PB4PluginAssetsGetRes

@dynamic itemsArray, itemsArray_Count;
@dynamic gold;
@dynamic silver;
@dynamic giftTicket;
@dynamic charge;

typedef struct PB4PluginAssetsGetRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t silver;
  uint32_t giftTicket;
  uint32_t charge;
  NSMutableArray *itemsArray;
  int64_t gold;
} PB4PluginAssetsGetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB4PluginBagItem),
        .number = PB4PluginAssetsGetRes_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGetRes__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGetRes_FieldNumber_Gold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGetRes__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "silver",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGetRes_FieldNumber_Silver,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGetRes__storage_, silver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftTicket",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGetRes_FieldNumber_GiftTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGetRes__storage_, giftTicket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "charge",
        .dataTypeSpecific.className = NULL,
        .number = PB4PluginAssetsGetRes_FieldNumber_Charge,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PluginAssetsGetRes__storage_, charge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PluginAssetsGetRes class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PluginAssetsGetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB4PAuthInfo

@implementation PB4PAuthInfo

@dynamic authType;
@dynamic level;
@dynamic levExp;
@dynamic URL;
@dynamic status;
@dynamic songNum;
@dynamic name;
@dynamic startColor;
@dynamic endColor;

typedef struct PB4PAuthInfo__storage_ {
  uint32_t _has_storage_[1];
  PB4PAuthType authType;
  int32_t level;
  PB4PAuthStatus status;
  NSString *URL;
  NSString *name;
  NSString *startColor;
  NSString *endColor;
  int64_t levExp;
  int64_t songNum;
} PB4PAuthInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authType",
        .dataTypeSpecific.enumDescFunc = PB4PAuthType_EnumDescriptor,
        .number = PB4PAuthInfo_FieldNumber_AuthType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, authType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB4PAuthInfo_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "levExp",
        .dataTypeSpecific.className = NULL,
        .number = PB4PAuthInfo_FieldNumber_LevExp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, levExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB4PAuthInfo_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB4PAuthStatus_EnumDescriptor,
        .number = PB4PAuthInfo_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "songNum",
        .dataTypeSpecific.className = NULL,
        .number = PB4PAuthInfo_FieldNumber_SongNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, songNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB4PAuthInfo_FieldNumber_Name,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startColor",
        .dataTypeSpecific.className = NULL,
        .number = PB4PAuthInfo_FieldNumber_StartColor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, startColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endColor",
        .dataTypeSpecific.className = NULL,
        .number = PB4PAuthInfo_FieldNumber_EndColor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB4PAuthInfo__storage_, endColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB4PAuthInfo class]
                                     rootClass:[PB4PluginExtRoot class]
                                          file:PB4PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB4PAuthInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB4PAuthInfo_AuthType_RawValue(PB4PAuthInfo *message) {
  GPBDescriptor *descriptor = [PB4PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PAuthInfo_FieldNumber_AuthType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PAuthInfo_AuthType_RawValue(PB4PAuthInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PAuthInfo_FieldNumber_AuthType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB4PAuthInfo_Status_RawValue(PB4PAuthInfo *message) {
  GPBDescriptor *descriptor = [PB4PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PAuthInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB4PAuthInfo_Status_RawValue(PB4PAuthInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB4PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB4PAuthInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
