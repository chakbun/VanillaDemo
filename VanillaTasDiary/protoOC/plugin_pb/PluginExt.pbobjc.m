// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_pb/plugin.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "plugin_pb/PluginExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3PluginExtRoot

@implementation PB3PluginExtRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3PluginExtRoot_FileDescriptor

static GPBFileDescriptor *PB3PluginExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"plugin_pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3PluginRoomType

GPBEnumDescriptor *PB3PluginRoomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtGuild\000RtPersonal\000RtReward\000";
    static const int32_t values[] = {
        PB3PluginRoomType_RtGuild,
        PB3PluginRoomType_RtPersonal,
        PB3PluginRoomType_RtReward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginRoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginRoomType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginRoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginRoomType_RtGuild:
    case PB3PluginRoomType_RtPersonal:
    case PB3PluginRoomType_RtReward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FilterDimensionType

GPBEnumDescriptor *PB3FilterDimensionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FilterDimensionDefault\000FilterDimensionPl"
        "ayer\000FilterDimensionPlayerSkill\000";
    static const int32_t values[] = {
        PB3FilterDimensionType_FilterDimensionDefault,
        PB3FilterDimensionType_FilterDimensionPlayer,
        PB3FilterDimensionType_FilterDimensionPlayerSkill,
    };
    static const char *extraTextFormatInfo = "\003\000\026\000\001\025\000\002\032\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FilterDimensionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FilterDimensionType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FilterDimensionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FilterDimensionType_FilterDimensionDefault:
    case PB3FilterDimensionType_FilterDimensionPlayer:
    case PB3FilterDimensionType_FilterDimensionPlayerSkill:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IconLocationType

GPBEnumDescriptor *PB3IconLocationType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IconLocationDefault\000IconLocationUp\000IconL"
        "ocationDown\000";
    static const int32_t values[] = {
        PB3IconLocationType_IconLocationDefault,
        PB3IconLocationType_IconLocationUp,
        PB3IconLocationType_IconLocationDown,
    };
    static const char *extraTextFormatInfo = "\003\000\023\000\001\016\000\002\020\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IconLocationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IconLocationType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IconLocationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IconLocationType_IconLocationDefault:
    case PB3IconLocationType_IconLocationUp:
    case PB3IconLocationType_IconLocationDown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginSwitchType

GPBEnumDescriptor *PB3PluginSwitchType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StZero\000StUserRemember\000StIndex\000StFocusMes"
        "sage\000";
    static const int32_t values[] = {
        PB3PluginSwitchType_StZero,
        PB3PluginSwitchType_StUserRemember,
        PB3PluginSwitchType_StIndex,
        PB3PluginSwitchType_StFocusMessage,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginSwitchType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginSwitchType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginSwitchType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginSwitchType_StZero:
    case PB3PluginSwitchType_StUserRemember:
    case PB3PluginSwitchType_StIndex:
    case PB3PluginSwitchType_StFocusMessage:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginSwitchStatus

GPBEnumDescriptor *PB3PluginSwitchStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SwitchZero\000SwitchOn\000SwitchOff\000SwitchWhit"
        "elist\000";
    static const int32_t values[] = {
        PB3PluginSwitchStatus_SwitchZero,
        PB3PluginSwitchStatus_SwitchOn,
        PB3PluginSwitchStatus_SwitchOff,
        PB3PluginSwitchStatus_SwitchWhitelist,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginSwitchStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginSwitchStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginSwitchStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginSwitchStatus_SwitchZero:
    case PB3PluginSwitchStatus_SwitchOn:
    case PB3PluginSwitchStatus_SwitchOff:
    case PB3PluginSwitchStatus_SwitchWhitelist:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginSexType

GPBEnumDescriptor *PB3PluginSexType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Mail\000Femail\000";
    static const int32_t values[] = {
        PB3PluginSexType_Unknown,
        PB3PluginSexType_Mail,
        PB3PluginSexType_Femail,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginSexType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginSexType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginSexType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginSexType_Unknown:
    case PB3PluginSexType_Mail:
    case PB3PluginSexType_Femail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginBcFriendType

GPBEnumDescriptor *PB3PluginBcFriendType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BcFriendTypeNone\000BcFriendTypeHead\000BcFrie"
        "ndTypeNormal\000";
    static const int32_t values[] = {
        PB3PluginBcFriendType_BcFriendTypeNone,
        PB3PluginBcFriendType_BcFriendTypeHead,
        PB3PluginBcFriendType_BcFriendTypeNormal,
    };
    static const char *extraTextFormatInfo = "\003\000\020\000\001\020\000\002\022\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginBcFriendType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginBcFriendType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginBcFriendType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginBcFriendType_BcFriendTypeNone:
    case PB3PluginBcFriendType_BcFriendTypeHead:
    case PB3PluginBcFriendType_BcFriendTypeNormal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3StatusType

GPBEnumDescriptor *PB3StatusType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StatusInvalid\000StatusValid\000";
    static const int32_t values[] = {
        PB3StatusType_StatusInvalid,
        PB3StatusType_StatusValid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3StatusType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3StatusType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3StatusType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3StatusType_StatusInvalid:
    case PB3StatusType_StatusValid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PhomeDecorateType

GPBEnumDescriptor *PB3PhomeDecorateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PdtNone\000PdtRoomBackdrop\000PdtRoomSign\000PdtR"
        "oomFrame\000";
    static const int32_t values[] = {
        PB3PhomeDecorateType_PdtNone,
        PB3PhomeDecorateType_PdtRoomBackdrop,
        PB3PhomeDecorateType_PdtRoomSign,
        PB3PhomeDecorateType_PdtRoomFrame,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PhomeDecorateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PhomeDecorateType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PhomeDecorateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PhomeDecorateType_PdtNone:
    case PB3PhomeDecorateType_PdtRoomBackdrop:
    case PB3PhomeDecorateType_PdtRoomSign:
    case PB3PhomeDecorateType_PdtRoomFrame:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginUploadType

GPBEnumDescriptor *PB3PluginUploadType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeZero\000HeadAlbumImg\000HeadIconImg\000Dynami"
        "csImg\000ClientLog\000TipOffsImg\000Indetity\000Pmme"
        "dia\000Voice\000BillVoice\000BillPicture\000CmsSingl"
        "eImg\000CmsCombineImg\000CommunityImg\000Communit"
        "yVideo\000CommunityAudio\000CommunityGroupImg\000"
        "GreetVoice\000";
    static const int32_t values[] = {
        PB3PluginUploadType_TypeZero,
        PB3PluginUploadType_HeadAlbumImg,
        PB3PluginUploadType_HeadIconImg,
        PB3PluginUploadType_DynamicsImg,
        PB3PluginUploadType_ClientLog,
        PB3PluginUploadType_TipOffsImg,
        PB3PluginUploadType_Indetity,
        PB3PluginUploadType_Pmmedia,
        PB3PluginUploadType_Voice,
        PB3PluginUploadType_BillVoice,
        PB3PluginUploadType_BillPicture,
        PB3PluginUploadType_CmsSingleImg,
        PB3PluginUploadType_CmsCombineImg,
        PB3PluginUploadType_CommunityImg,
        PB3PluginUploadType_CommunityVideo,
        PB3PluginUploadType_CommunityAudio,
        PB3PluginUploadType_CommunityGroupImg,
        PB3PluginUploadType_GreetVoice,
    };
    static const char *extraTextFormatInfo = "\022\000\010\000\001\014\000\002\013\000\003\013\000\004\t\000\005\n\000\006\010\000\007c\004\000\010\005\000\t\t\000\n\013\000\013\014\000\014\r\000\r\014\000\016\016\000\017\016\000\020\021\000\021\n\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginUploadType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginUploadType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginUploadType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginUploadType_TypeZero:
    case PB3PluginUploadType_HeadAlbumImg:
    case PB3PluginUploadType_HeadIconImg:
    case PB3PluginUploadType_DynamicsImg:
    case PB3PluginUploadType_ClientLog:
    case PB3PluginUploadType_TipOffsImg:
    case PB3PluginUploadType_Indetity:
    case PB3PluginUploadType_Pmmedia:
    case PB3PluginUploadType_Voice:
    case PB3PluginUploadType_BillVoice:
    case PB3PluginUploadType_BillPicture:
    case PB3PluginUploadType_CmsSingleImg:
    case PB3PluginUploadType_CmsCombineImg:
    case PB3PluginUploadType_CommunityImg:
    case PB3PluginUploadType_CommunityVideo:
    case PB3PluginUploadType_CommunityAudio:
    case PB3PluginUploadType_CommunityGroupImg:
    case PB3PluginUploadType_GreetVoice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CommunityGroupType

GPBEnumDescriptor *PB3CommunityGroupType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CgtNormal\000CgtClan\000CgtAdmin\000";
    static const int32_t values[] = {
        PB3CommunityGroupType_CgtNormal,
        PB3CommunityGroupType_CgtClan,
        PB3CommunityGroupType_CgtAdmin,
    };
    static const char *extraTextFormatInfo = "\001\000c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CommunityGroupType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CommunityGroupType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CommunityGroupType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CommunityGroupType_CgtNormal:
    case PB3CommunityGroupType_CgtClan:
    case PB3CommunityGroupType_CgtAdmin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CommunityGroupOpt

GPBEnumDescriptor *PB3CommunityGroupOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CgoNone\000CgoReject\000CgoAllow\000CgoAllReject\000";
    static const int32_t values[] = {
        PB3CommunityGroupOpt_CgoNone,
        PB3CommunityGroupOpt_CgoReject,
        PB3CommunityGroupOpt_CgoAllow,
        PB3CommunityGroupOpt_CgoAllReject,
    };
    static const char *extraTextFormatInfo = "\003\001c\206\000\002c\205\000\003c\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CommunityGroupOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CommunityGroupOpt_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CommunityGroupOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CommunityGroupOpt_CgoNone:
    case PB3CommunityGroupOpt_CgoReject:
    case PB3CommunityGroupOpt_CgoAllow:
    case PB3CommunityGroupOpt_CgoAllReject:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CommunityGroupLeaveOpt

GPBEnumDescriptor *PB3CommunityGroupLeaveOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GloNone\000GloLeave\000GloKick\000GloDisband\000";
    static const int32_t values[] = {
        PB3CommunityGroupLeaveOpt_GloNone,
        PB3CommunityGroupLeaveOpt_GloLeave,
        PB3CommunityGroupLeaveOpt_GloKick,
        PB3CommunityGroupLeaveOpt_GloDisband,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CommunityGroupLeaveOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CommunityGroupLeaveOpt_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CommunityGroupLeaveOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CommunityGroupLeaveOpt_GloNone:
    case PB3CommunityGroupLeaveOpt_GloLeave:
    case PB3CommunityGroupLeaveOpt_GloKick:
    case PB3CommunityGroupLeaveOpt_GloDisband:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CommunityPlayerGroupType

GPBEnumDescriptor *PB3CommunityPlayerGroupType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PgtNone\000PgtJoin\000PgtStore\000";
    static const int32_t values[] = {
        PB3CommunityPlayerGroupType_PgtNone,
        PB3CommunityPlayerGroupType_PgtJoin,
        PB3CommunityPlayerGroupType_PgtStore,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CommunityPlayerGroupType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CommunityPlayerGroupType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CommunityPlayerGroupType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CommunityPlayerGroupType_PgtNone:
    case PB3CommunityPlayerGroupType_PgtJoin:
    case PB3CommunityPlayerGroupType_PgtStore:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginBillPlayerStatus

GPBEnumDescriptor *PB3PluginBillPlayerStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BpNone\000BpOpen\000BpClose\000BpFreeze\000";
    static const int32_t values[] = {
        PB3PluginBillPlayerStatus_BpNone,
        PB3PluginBillPlayerStatus_BpOpen,
        PB3PluginBillPlayerStatus_BpClose,
        PB3PluginBillPlayerStatus_BpFreeze,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginBillPlayerStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginBillPlayerStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginBillPlayerStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginBillPlayerStatus_BpNone:
    case PB3PluginBillPlayerStatus_BpOpen:
    case PB3PluginBillPlayerStatus_BpClose:
    case PB3PluginBillPlayerStatus_BpFreeze:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginBillPlayerCheckStatus

GPBEnumDescriptor *PB3PluginBillPlayerCheckStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BpcNone\000BpcChecking\000BpcCheckedSucc\000BpcCh"
        "eckedFail\000BpcReChecking\000BpcReCheckedFail"
        "\000";
    static const int32_t values[] = {
        PB3PluginBillPlayerCheckStatus_BpcNone,
        PB3PluginBillPlayerCheckStatus_BpcChecking,
        PB3PluginBillPlayerCheckStatus_BpcCheckedSucc,
        PB3PluginBillPlayerCheckStatus_BpcCheckedFail,
        PB3PluginBillPlayerCheckStatus_BpcReChecking,
        PB3PluginBillPlayerCheckStatus_BpcReCheckedFail,
    };
    static const char *extraTextFormatInfo = "\001\000c\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginBillPlayerCheckStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginBillPlayerCheckStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginBillPlayerCheckStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginBillPlayerCheckStatus_BpcNone:
    case PB3PluginBillPlayerCheckStatus_BpcChecking:
    case PB3PluginBillPlayerCheckStatus_BpcCheckedSucc:
    case PB3PluginBillPlayerCheckStatus_BpcCheckedFail:
    case PB3PluginBillPlayerCheckStatus_BpcReChecking:
    case PB3PluginBillPlayerCheckStatus_BpcReCheckedFail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginBillSkillType

GPBEnumDescriptor *PB3PluginBillSkillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BstNone\000BstFirst\000BstSecond\000";
    static const int32_t values[] = {
        PB3PluginBillSkillType_BstNone,
        PB3PluginBillSkillType_BstFirst,
        PB3PluginBillSkillType_BstSecond,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginBillSkillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginBillSkillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginBillSkillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginBillSkillType_BstNone:
    case PB3PluginBillSkillType_BstFirst:
    case PB3PluginBillSkillType_BstSecond:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginOnOffType

GPBEnumDescriptor *PB3PluginOnOffType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PootZero\000OxygenBarTrendGif\000OxygenBarComm"
        "unityPicture\000OxygenVideoButton\000OxygenPho"
        "meReport\000";
    static const int32_t values[] = {
        PB3PluginOnOffType_PootZero,
        PB3PluginOnOffType_OxygenBarTrendGif,
        PB3PluginOnOffType_OxygenBarCommunityPicture,
        PB3PluginOnOffType_OxygenVideoButton,
        PB3PluginOnOffType_OxygenPhomeReport,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginOnOffType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginOnOffType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginOnOffType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginOnOffType_PootZero:
    case PB3PluginOnOffType_OxygenBarTrendGif:
    case PB3PluginOnOffType_OxygenBarCommunityPicture:
    case PB3PluginOnOffType_OxygenVideoButton:
    case PB3PluginOnOffType_OxygenPhomeReport:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PlayerAction

GPBEnumDescriptor *PB3PlayerAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PaNone\000PaNoAction\000PaSelfRoom\000PaClanNoCha"
        "ir\000PaChair\000PaGaming\000PaSinging\000PaOpenChai"
        "r\000PaReceiveGift\000PaSingingChair\000PaOrder\000P"
        "aChating\000";
    static const int32_t values[] = {
        PB3PlayerAction_PaNone,
        PB3PlayerAction_PaNoAction,
        PB3PlayerAction_PaSelfRoom,
        PB3PlayerAction_PaClanNoChair,
        PB3PlayerAction_PaChair,
        PB3PlayerAction_PaGaming,
        PB3PlayerAction_PaSinging,
        PB3PlayerAction_PaOpenChair,
        PB3PlayerAction_PaReceiveGift,
        PB3PlayerAction_PaSingingChair,
        PB3PlayerAction_PaOrder,
        PB3PlayerAction_PaChating,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PlayerAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PlayerAction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PlayerAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PlayerAction_PaNone:
    case PB3PlayerAction_PaNoAction:
    case PB3PlayerAction_PaSelfRoom:
    case PB3PlayerAction_PaClanNoChair:
    case PB3PlayerAction_PaChair:
    case PB3PlayerAction_PaGaming:
    case PB3PlayerAction_PaSinging:
    case PB3PlayerAction_PaOpenChair:
    case PB3PlayerAction_PaReceiveGift:
    case PB3PlayerAction_PaSingingChair:
    case PB3PlayerAction_PaOrder:
    case PB3PlayerAction_PaChating:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PhomeRoomPattern

GPBEnumDescriptor *PB3PhomeRoomPattern_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PrpGame\000PrpStandard\000PrpPersonal\000PrpIntim"
        "ate\000PrpShow\000PrpMate\000PrpSendOrder\000PrpGame"
        "Platform\000PnrpMobaTeam\000PnrpOrganizeMobaTe"
        "am\000PnrpSingleLiveVsn2\000";
    static const int32_t values[] = {
        PB3PhomeRoomPattern_PrpGame,
        PB3PhomeRoomPattern_PrpStandard,
        PB3PhomeRoomPattern_PrpPersonal,
        PB3PhomeRoomPattern_PrpIntimate,
        PB3PhomeRoomPattern_PrpShow,
        PB3PhomeRoomPattern_PrpMate,
        PB3PhomeRoomPattern_PrpSendOrder,
        PB3PhomeRoomPattern_PrpGamePlatform,
        PB3PhomeRoomPattern_PnrpMobaTeam,
        PB3PhomeRoomPattern_PnrpOrganizeMobaTeam,
        PB3PhomeRoomPattern_PnrpSingleLiveVsn2,
    };
    static const char *extraTextFormatInfo = "\001\nd\346\344\343\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PhomeRoomPattern)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PhomeRoomPattern_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PhomeRoomPattern_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PhomeRoomPattern_PrpGame:
    case PB3PhomeRoomPattern_PrpStandard:
    case PB3PhomeRoomPattern_PrpPersonal:
    case PB3PhomeRoomPattern_PrpIntimate:
    case PB3PhomeRoomPattern_PrpShow:
    case PB3PhomeRoomPattern_PrpMate:
    case PB3PhomeRoomPattern_PrpSendOrder:
    case PB3PhomeRoomPattern_PrpGamePlatform:
    case PB3PhomeRoomPattern_PnrpMobaTeam:
    case PB3PhomeRoomPattern_PnrpOrganizeMobaTeam:
    case PB3PhomeRoomPattern_PnrpSingleLiveVsn2:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UserSongType

GPBEnumDescriptor *PB3UserSongType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UstNone\000UstPlay\000UstStop\000";
    static const int32_t values[] = {
        PB3UserSongType_UstNone,
        PB3UserSongType_UstPlay,
        PB3UserSongType_UstStop,
    };
    static const char *extraTextFormatInfo = "\001\000c\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserSongType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserSongType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserSongType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserSongType_UstNone:
    case PB3UserSongType_UstPlay:
    case PB3UserSongType_UstStop:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VideoRecmdSource

GPBEnumDescriptor *PB3VideoRecmdSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VstZero\000VstRules\000VstAlgorithm\000";
    static const int32_t values[] = {
        PB3VideoRecmdSource_VstZero,
        PB3VideoRecmdSource_VstRules,
        PB3VideoRecmdSource_VstAlgorithm,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VideoRecmdSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VideoRecmdSource_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VideoRecmdSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VideoRecmdSource_VstZero:
    case PB3VideoRecmdSource_VstRules:
    case PB3VideoRecmdSource_VstAlgorithm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PAuthType

GPBEnumDescriptor *PB3PAuthType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AuthTypeNone\000AuthTypeSinger\000AuthTypeVoic"
        "er\000AuthTypeSurface\000AuthTypeHaveSong\000Auth"
        "TypeStar\000";
    static const int32_t values[] = {
        PB3PAuthType_AuthTypeNone,
        PB3PAuthType_AuthTypeSinger,
        PB3PAuthType_AuthTypeVoicer,
        PB3PAuthType_AuthTypeSurface,
        PB3PAuthType_AuthTypeHaveSong,
        PB3PAuthType_AuthTypeStar,
    };
    static const char *extraTextFormatInfo = "\006\000\014\000\001\016\000\002\016\000\003\017\000\004\020\000\005\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PAuthType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PAuthType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PAuthType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PAuthType_AuthTypeNone:
    case PB3PAuthType_AuthTypeSinger:
    case PB3PAuthType_AuthTypeVoicer:
    case PB3PAuthType_AuthTypeSurface:
    case PB3PAuthType_AuthTypeHaveSong:
    case PB3PAuthType_AuthTypeStar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PAuthStatus

GPBEnumDescriptor *PB3PAuthStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AosNone\000AosActivate\000AosBlock\000";
    static const int32_t values[] = {
        PB3PAuthStatus_AosNone,
        PB3PAuthStatus_AosActivate,
        PB3PAuthStatus_AosBlock,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\210\000\002c\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PAuthStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PAuthStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PAuthStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PAuthStatus_AosNone:
    case PB3PAuthStatus_AosActivate:
    case PB3PAuthStatus_AosBlock:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginHotPointType

GPBEnumDescriptor *PB3PluginHotPointType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PhptNone\000PhptOfficial\000PhptHot\000PhptNew\000";
    static const int32_t values[] = {
        PB3PluginHotPointType_PhptNone,
        PB3PluginHotPointType_PhptOfficial,
        PB3PluginHotPointType_PhptHot,
        PB3PluginHotPointType_PhptNew,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginHotPointType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginHotPointType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginHotPointType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginHotPointType_PhptNone:
    case PB3PluginHotPointType_PhptOfficial:
    case PB3PluginHotPointType_PhptHot:
    case PB3PluginHotPointType_PhptNew:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3HotPointStatus

GPBEnumDescriptor *PB3HotPointStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PhptNormal\000PhptUnShelve\000PhptExpire\000PhptD"
        "elete\000";
    static const int32_t values[] = {
        PB3HotPointStatus_PhptNormal,
        PB3HotPointStatus_PhptUnShelve,
        PB3HotPointStatus_PhptExpire,
        PB3HotPointStatus_PhptDelete,
    };
    static const char *extraTextFormatInfo = "\004\000d\206\000\001d\210\000\002d\206\000\003d\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3HotPointStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3HotPointStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3HotPointStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3HotPointStatus_PhptNormal:
    case PB3HotPointStatus_PhptUnShelve:
    case PB3HotPointStatus_PhptExpire:
    case PB3HotPointStatus_PhptDelete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3HotHide

GPBEnumDescriptor *PB3HotHide_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Visible\000Invisible\000";
    static const int32_t values[] = {
        PB3HotHide_Visible,
        PB3HotHide_Invisible,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3HotHide)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3HotHide_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3HotHide_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3HotHide_Visible:
    case PB3HotHide_Invisible:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PluginGenderPattern

GPBEnumDescriptor *PB3PluginGenderPattern_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GvZero\000GvMale\000GvFemale\000";
    static const int32_t values[] = {
        PB3PluginGenderPattern_GvZero,
        PB3PluginGenderPattern_GvMale,
        PB3PluginGenderPattern_GvFemale,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PluginGenderPattern)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PluginGenderPattern_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PluginGenderPattern_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PluginGenderPattern_GvZero:
    case PB3PluginGenderPattern_GvMale:
    case PB3PluginGenderPattern_GvFemale:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3PluginHomeTips

@implementation PB3PluginHomeTips

@dynamic id_p;
@dynamic color;
@dynamic URL;
@dynamic msg;
@dynamic roomDisplay;

typedef struct PB3PluginHomeTips__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *color;
  NSString *URL;
  NSString *msg;
} PB3PluginHomeTips__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginHomeTips_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginHomeTips__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "color",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginHomeTips_FieldNumber_Color,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginHomeTips__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginHomeTips_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginHomeTips__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginHomeTips_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginHomeTips__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomDisplay",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginHomeTips_FieldNumber_RoomDisplay,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginHomeTips class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginHomeTips__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginSwitch

@implementation PB3PluginSwitch

@dynamic switch_p;
@dynamic status;

typedef struct PB3PluginSwitch__storage_ {
  uint32_t _has_storage_[1];
  PB3PluginSwitchType switch_p;
  PB3PluginSwitchStatus status;
} PB3PluginSwitch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "switch_p",
        .dataTypeSpecific.enumDescFunc = PB3PluginSwitchType_EnumDescriptor,
        .number = PB3PluginSwitch_FieldNumber_Switch_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginSwitch__storage_, switch_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3PluginSwitchStatus_EnumDescriptor,
        .number = PB3PluginSwitch_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginSwitch__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginSwitch class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginSwitch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PluginSwitch_Switch_p_RawValue(PB3PluginSwitch *message) {
  GPBDescriptor *descriptor = [PB3PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginSwitch_FieldNumber_Switch_p];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PluginSwitch_Switch_p_RawValue(PB3PluginSwitch *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginSwitch_FieldNumber_Switch_p];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3PluginSwitch_Status_RawValue(PB3PluginSwitch *message) {
  GPBDescriptor *descriptor = [PB3PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginSwitch_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PluginSwitch_Status_RawValue(PB3PluginSwitch *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PluginSwitch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginSwitch_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlayerImageInfo

@implementation PB3PlayerImageInfo

@dynamic id_p;
@dynamic width;
@dynamic height;
@dynamic isVideo;
@dynamic URL;

typedef struct PB3PlayerImageInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  NSString *URL;
  int64_t id_p;
} PB3PlayerImageInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerImageInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerImageInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerImageInfo_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerImageInfo__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerImageInfo_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerImageInfo__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isVideo",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerImageInfo_FieldNumber_IsVideo,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerImageInfo_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerImageInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerImageInfo class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerImageInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomDecorate

@implementation PB3RoomDecorate

@dynamic decorateId;
@dynamic decorateType;
@dynamic picURL;
@dynamic pcPicURL;
@dynamic weight;
@dynamic shelterURL;
@dynamic pcShelterURL;
@dynamic stretchableURL;

typedef struct PB3RoomDecorate__storage_ {
  uint32_t _has_storage_[1];
  PB3PhomeDecorateType decorateType;
  NSString *picURL;
  NSString *pcPicURL;
  NSString *shelterURL;
  NSString *pcShelterURL;
  NSString *stretchableURL;
  int64_t decorateId;
  int64_t weight;
} PB3RoomDecorate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomDecorate_FieldNumber_DecorateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "decorateType",
        .dataTypeSpecific.enumDescFunc = PB3PhomeDecorateType_EnumDescriptor,
        .number = PB3RoomDecorate_FieldNumber_DecorateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, decorateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomDecorate_FieldNumber_PicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, picURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcPicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomDecorate_FieldNumber_PcPicURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, pcPicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomDecorate_FieldNumber_Weight,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "shelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomDecorate_FieldNumber_ShelterURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, shelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcShelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomDecorate_FieldNumber_PcShelterURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, pcShelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stretchableURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomDecorate_FieldNumber_StretchableURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RoomDecorate__storage_, stretchableURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomDecorate class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomDecorate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\003\241!!\000\004\002\243\241!!\000\006\007\241!!\000\007\002\247\241!!\000\010\013\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomDecorate_DecorateType_RawValue(PB3RoomDecorate *message) {
  GPBDescriptor *descriptor = [PB3RoomDecorate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomDecorate_FieldNumber_DecorateType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomDecorate_DecorateType_RawValue(PB3RoomDecorate *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomDecorate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomDecorate_FieldNumber_DecorateType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PluginUresOssCallbackReq

@implementation PB3PluginUresOssCallbackReq

@dynamic type;

typedef struct PB3PluginUresOssCallbackReq__storage_ {
  uint32_t _has_storage_[1];
  PB3PluginUploadType type;
} PB3PluginUresOssCallbackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3PluginUploadType_EnumDescriptor,
        .number = PB3PluginUresOssCallbackReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginUresOssCallbackReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginUresOssCallbackReq class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginUresOssCallbackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PluginUresOssCallbackReq_Type_RawValue(PB3PluginUresOssCallbackReq *message) {
  GPBDescriptor *descriptor = [PB3PluginUresOssCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginUresOssCallbackReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PluginUresOssCallbackReq_Type_RawValue(PB3PluginUresOssCallbackReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PluginUresOssCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginUresOssCallbackReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PluginUresOssCallbackRes

@implementation PB3PluginUresOssCallbackRes


typedef struct PB3PluginUresOssCallbackRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PluginUresOssCallbackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginUresOssCallbackRes class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PluginUresOssCallbackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginPlayer

@implementation PB3PluginPlayer

@dynamic id_p;
@dynamic nickname;
@dynamic sex;
@dynamic id2;
@dynamic icon;
@dynamic flags;
@dynamic flags2;
@dynamic charm;
@dynamic charmLevel;
@dynamic wealthLevel;
@dynamic wealth;
@dynamic onlineExp;
@dynamic createAt;
@dynamic hasPasswd;
@dynamic isPhone;
@dynamic flowerLevel;
@dynamic flower;
@dynamic isOnline;
@dynamic flagsKv, flagsKv_Count;
@dynamic newWealth;
@dynamic authInfoArray, authInfoArray_Count;
@dynamic isDeleted;

typedef struct PB3PluginPlayer__storage_ {
  uint32_t _has_storage_[1];
  PB3PluginSexType sex;
  int32_t wealth;
  uint32_t onlineExp;
  uint32_t createAt;
  int32_t charmLevel;
  int32_t wealthLevel;
  int32_t flowerLevel;
  NSString *nickname;
  NSString *icon;
  GPBInt32Int32Dictionary *flagsKv;
  NSMutableArray *authInfoArray;
  int64_t id_p;
  int64_t id2;
  int64_t flags;
  int64_t charm;
  int64_t flags2;
  int64_t flower;
  int64_t newWealth;
} PB3PluginPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3PluginSexType_EnumDescriptor,
        .number = PB3PluginPlayer_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Id2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Flags,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "charm",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Charm,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, charm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Wealth,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "onlineExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_OnlineExp,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, onlineExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_CreateAt,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, createAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasPasswd",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_HasPasswd,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_IsPhone,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_CharmLevel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, charmLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flags2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Flags2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, flags2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_WealthLevel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, wealthLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flowerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_FlowerLevel,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, flowerLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flower",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_Flower,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, flower),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isOnline",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_IsOnline,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "flagsKv",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_FlagsKv,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, flagsKv),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newWealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_NewWealth,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, newWealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "authInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PAuthInfo),
        .number = PB3PluginPlayer_FieldNumber_AuthInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PluginPlayer__storage_, authInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isDeleted",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginPlayer_FieldNumber_IsDeleted,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginPlayer class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\013\010\000\017\n\000 \013\000!\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PluginPlayer_Sex_RawValue(PB3PluginPlayer *message) {
  GPBDescriptor *descriptor = [PB3PluginPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginPlayer_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PluginPlayer_Sex_RawValue(PB3PluginPlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PluginPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginPlayer_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PluginUserInfo

@implementation PB3PluginUserInfo

@dynamic userId;
@dynamic city;
@dynamic signature;
@dynamic birthday;
@dynamic intimateSlot;
@dynamic mind;
@dynamic shortIdSlot;

typedef struct PB3PluginUserInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateSlot;
  int32_t shortIdSlot;
  NSString *city;
  NSString *signature;
  NSString *birthday;
  NSString *mind;
  int64_t userId;
} PB3PluginUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginUserInfo_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginUserInfo__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginUserInfo_FieldNumber_City,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginUserInfo__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginUserInfo_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginUserInfo__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthday",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginUserInfo_FieldNumber_Birthday,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginUserInfo__storage_, birthday),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intimateSlot",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginUserInfo_FieldNumber_IntimateSlot,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PluginUserInfo__storage_, intimateSlot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "mind",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginUserInfo_FieldNumber_Mind,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PluginUserInfo__storage_, mind),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortIdSlot",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginUserInfo_FieldNumber_ShortIdSlot,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PluginUserInfo__storage_, shortIdSlot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginUserInfo class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginUserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginRoomInfo

@implementation PB3PluginRoomInfo

@dynamic roomId;
@dynamic name;
@dynamic greeting;
@dynamic category;
@dynamic pattern;
@dynamic password;
@dynamic online;
@dynamic newPatter;
@dynamic voice;
@dynamic isRewardRoom;

typedef struct PB3PluginRoomInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t category;
  int32_t pattern;
  int32_t online;
  int32_t newPatter;
  int32_t voice;
  NSString *name;
  NSString *greeting;
  NSString *password;
  int64_t roomId;
} PB3PluginRoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_Greeting,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_Category,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_Pattern,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, pattern),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_Password,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "online",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_Online,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, online),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newPatter",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_NewPatter,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, newPatter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_Voice,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PluginRoomInfo__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isRewardRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginRoomInfo_FieldNumber_IsRewardRoom,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginRoomInfo class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginRoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginBillSkill

@implementation PB3PluginBillSkill

@dynamic type;
@dynamic skill;
@dynamic skillCreateAt;
@dynamic orderNum;
@dynamic introText;
@dynamic price;

typedef struct PB3PluginBillSkill__storage_ {
  uint32_t _has_storage_[1];
  PB3PluginBillSkillType type;
  int32_t skill;
  int32_t orderNum;
  int32_t price;
  NSString *introText;
  int64_t skillCreateAt;
} PB3PluginBillSkill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3PluginBillSkillType_EnumDescriptor,
        .number = PB3PluginBillSkill_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginBillSkill__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "skill",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBillSkill_FieldNumber_Skill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginBillSkill__storage_, skill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillCreateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBillSkill_FieldNumber_SkillCreateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginBillSkill__storage_, skillCreateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBillSkill_FieldNumber_OrderNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginBillSkill__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "introText",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBillSkill_FieldNumber_IntroText,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PluginBillSkill__storage_, introText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBillSkill_FieldNumber_Price,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PluginBillSkill__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginBillSkill class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginBillSkill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PluginBillSkill_Type_RawValue(PB3PluginBillSkill *message) {
  GPBDescriptor *descriptor = [PB3PluginBillSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginBillSkill_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PluginBillSkill_Type_RawValue(PB3PluginBillSkill *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PluginBillSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginBillSkill_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PluginBillPlayerCard

@implementation PB3PluginBillPlayerCard

@dynamic level;
@dynamic skillsArray, skillsArray_Count;
@dynamic status;
@dynamic checkStatus;
@dynamic billSkillsArray, billSkillsArray_Count;

typedef struct PB3PluginBillPlayerCard__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  PB3PluginBillPlayerStatus status;
  PB3PluginBillPlayerCheckStatus checkStatus;
  GPBInt32Array *skillsArray;
  NSMutableArray *billSkillsArray;
} PB3PluginBillPlayerCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBillPlayerCard_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginBillPlayerCard__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBillPlayerCard_FieldNumber_SkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PluginBillPlayerCard__storage_, skillsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3PluginBillPlayerStatus_EnumDescriptor,
        .number = PB3PluginBillPlayerCard_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginBillPlayerCard__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "checkStatus",
        .dataTypeSpecific.enumDescFunc = PB3PluginBillPlayerCheckStatus_EnumDescriptor,
        .number = PB3PluginBillPlayerCard_FieldNumber_CheckStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginBillPlayerCard__storage_, checkStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "billSkillsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PluginBillSkill),
        .number = PB3PluginBillPlayerCard_FieldNumber_BillSkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PluginBillPlayerCard__storage_, billSkillsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginBillPlayerCard class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginBillPlayerCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PluginBillPlayerCard_Status_RawValue(PB3PluginBillPlayerCard *message) {
  GPBDescriptor *descriptor = [PB3PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginBillPlayerCard_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PluginBillPlayerCard_Status_RawValue(PB3PluginBillPlayerCard *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginBillPlayerCard_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3PluginBillPlayerCard_CheckStatus_RawValue(PB3PluginBillPlayerCard *message) {
  GPBDescriptor *descriptor = [PB3PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginBillPlayerCard_FieldNumber_CheckStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PluginBillPlayerCard_CheckStatus_RawValue(PB3PluginBillPlayerCard *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PluginBillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PluginBillPlayerCard_FieldNumber_CheckStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PluginSystemMsgNotice

@implementation PB3PluginSystemMsgNotice

@dynamic msg;
@dynamic sendTime;
@dynamic language;
@dynamic routerURL;
@dynamic picture;
@dynamic pictureRouter;
@dynamic maskText;
@dynamic bottomText;
@dynamic bottomRouter;
@dynamic msgTitle;
@dynamic roomId;
@dynamic status;
@dynamic overdueTime;
@dynamic hyperlink;
@dynamic msgType;

typedef struct PB3PluginSystemMsgNotice__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sendTime;
  uint32_t language;
  uint32_t status;
  uint32_t msgType;
  NSString *msg;
  NSString *routerURL;
  NSString *picture;
  NSString *pictureRouter;
  NSString *maskText;
  NSString *bottomText;
  NSString *bottomRouter;
  NSString *msgTitle;
  NSData *roomId;
  NSString *hyperlink;
  int64_t overdueTime;
} PB3PluginSystemMsgNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_SendTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_Language,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_RouterURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_Picture,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pictureRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_PictureRouter,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, pictureRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskText",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_MaskText,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, maskText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomText",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_BottomText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, bottomText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_BottomRouter,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, bottomRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_MsgTitle,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, msgTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_RoomId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_Status,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "overdueTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_OverdueTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, overdueTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hyperlink",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_Hyperlink,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, hyperlink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginSystemMsgNotice_FieldNumber_MsgType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3PluginSystemMsgNotice__storage_, msgType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginSystemMsgNotice class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginSystemMsgNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerBaseInfo

@implementation PB3PlayerBaseInfo

@dynamic id_p;
@dynamic id2;
@dynamic nickName;
@dynamic icon;

typedef struct PB3PlayerBaseInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3PlayerBaseInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBaseInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerBaseInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBaseInfo_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerBaseInfo__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBaseInfo_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerBaseInfo__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBaseInfo_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerBaseInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerBaseInfo class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerBaseInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerActMsg

@implementation PB3PlayerActMsg

@dynamic action;
@dynamic msg;

typedef struct PB3PlayerActMsg__storage_ {
  uint32_t _has_storage_[1];
  PB3PlayerAction action;
  NSString *msg;
} PB3PlayerActMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = PB3PlayerAction_EnumDescriptor,
        .number = PB3PlayerActMsg_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerActMsg__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerActMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerActMsg class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerActMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerActMsg_Action_RawValue(PB3PlayerActMsg *message) {
  GPBDescriptor *descriptor = [PB3PlayerActMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerActMsg_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerActMsg_Action_RawValue(PB3PlayerActMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerActMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerActMsg_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3MatchUserGameReq

@implementation PB3MatchUserGameReq

@dynamic roomId;
@dynamic gameId;

typedef struct PB3MatchUserGameReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t gameId;
} PB3MatchUserGameReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MatchUserGameReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MatchUserGameReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MatchUserGameReq_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MatchUserGameReq__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MatchUserGameReq class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MatchUserGameReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MatchUserGameRes

@implementation PB3MatchUserGameRes


typedef struct PB3MatchUserGameRes__storage_ {
  uint32_t _has_storage_[1];
} PB3MatchUserGameRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MatchUserGameRes class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MatchUserGameRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MatchUserGameCancelReq

@implementation PB3MatchUserGameCancelReq

@dynamic roomId;
@dynamic gameId;
@dynamic playerId;

typedef struct PB3MatchUserGameCancelReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t gameId;
  int32_t playerId;
} PB3MatchUserGameCancelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MatchUserGameCancelReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MatchUserGameCancelReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MatchUserGameCancelReq_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MatchUserGameCancelReq__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MatchUserGameCancelReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MatchUserGameCancelReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MatchUserGameCancelReq class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MatchUserGameCancelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MatchUserGameCancelRes

@implementation PB3MatchUserGameCancelRes


typedef struct PB3MatchUserGameCancelRes__storage_ {
  uint32_t _has_storage_[1];
} PB3MatchUserGameCancelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MatchUserGameCancelRes class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MatchUserGameCancelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginGain

@implementation PB3PluginGain

@dynamic type;
@dynamic giftId;
@dynamic num;

typedef struct PB3PluginGain__storage_ {
  uint32_t _has_storage_[1];
  uint64_t type;
  uint64_t giftId;
  uint64_t num;
} PB3PluginGain__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginGain_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginGain__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginGain_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginGain__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginGain_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginGain__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginGain class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginGain__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginLoss

@implementation PB3PluginLoss

@dynamic type;
@dynamic giftId;
@dynamic num;

typedef struct PB3PluginLoss__storage_ {
  uint32_t _has_storage_[1];
  uint64_t type;
  uint64_t giftId;
  uint64_t num;
} PB3PluginLoss__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginLoss_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginLoss__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginLoss_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginLoss__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginLoss_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginLoss__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginLoss class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginLoss__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginAssetsGainReq

@implementation PB3PluginAssetsGainReq

@dynamic playerId;
@dynamic gainsArray, gainsArray_Count;
@dynamic lossArray, lossArray_Count;
@dynamic type;
@dynamic reMark;
@dynamic giftType;
@dynamic giftReMark;
@dynamic lossGiftType;
@dynamic lossGiftReMark;
@dynamic isSuperAdmin;

typedef struct PB3PluginAssetsGainReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t giftType;
  int32_t lossGiftType;
  NSMutableArray *gainsArray;
  NSMutableArray *lossArray;
  NSString *reMark;
  NSString *giftReMark;
  NSString *lossGiftReMark;
  uint64_t playerId;
} PB3PluginAssetsGainReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "gainsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PluginGain),
        .number = PB3PluginAssetsGainReq_FieldNumber_GainsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, gainsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lossArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PluginLoss),
        .number = PB3PluginAssetsGainReq_FieldNumber_LossArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, lossArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reMark",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_ReMark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, reMark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftType",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_GiftType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, giftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftReMark",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_GiftReMark,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, giftReMark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lossGiftType",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_LossGiftType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, lossGiftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lossGiftReMark",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_LossGiftReMark,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGainReq__storage_, lossGiftReMark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSuperAdmin",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGainReq_FieldNumber_IsSuperAdmin,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginAssetsGainReq class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginAssetsGainReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\005\006\000\007\004\246\000\t\004\244\246\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginBagItem

@implementation PB3PluginBagItem

@dynamic giftId;
@dynamic amount;
@dynamic cteateAt;

typedef struct PB3PluginBagItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  uint32_t amount;
  NSString *cteateAt;
} PB3PluginBagItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBagItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginBagItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBagItem_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginBagItem__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cteateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginBagItem_FieldNumber_CteateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginBagItem__storage_, cteateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginBagItem class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginBagItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PluginAssetsGetRes

@implementation PB3PluginAssetsGetRes

@dynamic itemsArray, itemsArray_Count;
@dynamic gold;
@dynamic silver;
@dynamic giftTicket;
@dynamic charge;

typedef struct PB3PluginAssetsGetRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t silver;
  uint32_t giftTicket;
  uint32_t charge;
  NSMutableArray *itemsArray;
  int64_t gold;
} PB3PluginAssetsGetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PluginBagItem),
        .number = PB3PluginAssetsGetRes_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGetRes__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGetRes_FieldNumber_Gold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGetRes__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "silver",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGetRes_FieldNumber_Silver,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGetRes__storage_, silver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftTicket",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGetRes_FieldNumber_GiftTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGetRes__storage_, giftTicket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "charge",
        .dataTypeSpecific.className = NULL,
        .number = PB3PluginAssetsGetRes_FieldNumber_Charge,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PluginAssetsGetRes__storage_, charge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PluginAssetsGetRes class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PluginAssetsGetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PAuthInfo

@implementation PB3PAuthInfo

@dynamic authType;
@dynamic level;
@dynamic levExp;
@dynamic URL;
@dynamic status;
@dynamic songNum;
@dynamic name;
@dynamic startColor;
@dynamic endColor;

typedef struct PB3PAuthInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3PAuthType authType;
  int32_t level;
  PB3PAuthStatus status;
  NSString *URL;
  NSString *name;
  NSString *startColor;
  NSString *endColor;
  int64_t levExp;
  int64_t songNum;
} PB3PAuthInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authType",
        .dataTypeSpecific.enumDescFunc = PB3PAuthType_EnumDescriptor,
        .number = PB3PAuthInfo_FieldNumber_AuthType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, authType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3PAuthInfo_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "levExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3PAuthInfo_FieldNumber_LevExp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, levExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PAuthInfo_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3PAuthStatus_EnumDescriptor,
        .number = PB3PAuthInfo_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "songNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PAuthInfo_FieldNumber_SongNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, songNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PAuthInfo_FieldNumber_Name,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3PAuthInfo_FieldNumber_StartColor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, startColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3PAuthInfo_FieldNumber_EndColor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PAuthInfo__storage_, endColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PAuthInfo class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PAuthInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PAuthInfo_AuthType_RawValue(PB3PAuthInfo *message) {
  GPBDescriptor *descriptor = [PB3PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PAuthInfo_FieldNumber_AuthType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PAuthInfo_AuthType_RawValue(PB3PAuthInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PAuthInfo_FieldNumber_AuthType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3PAuthInfo_Status_RawValue(PB3PAuthInfo *message) {
  GPBDescriptor *descriptor = [PB3PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PAuthInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PAuthInfo_Status_RawValue(PB3PAuthInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PAuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PAuthInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PHomeEntryHotPoint

@implementation PB3PHomeEntryHotPoint

@dynamic hotPointId;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerId3;
@dynamic name;
@dynamic icon;
@dynamic sex;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic wealthLevelFish;
@dynamic charmLevelFish;
@dynamic content;
@dynamic contentResponse;
@dynamic rank;
@dynamic type;
@dynamic gold;
@dynamic heat;
@dynamic watchNum;
@dynamic jumpURL;
@dynamic pushTime;
@dynamic roomId;
@dynamic status;
@dynamic isHide;

typedef struct PB3PHomeEntryHotPoint__storage_ {
  uint32_t _has_storage_[1];
  PB3PluginSexType sex;
  int32_t wealthLevel;
  int32_t charmLevel;
  int32_t wealthLevelFish;
  int32_t charmLevelFish;
  int32_t rank;
  PB3PluginHotPointType type;
  int32_t gold;
  int32_t heat;
  int32_t watchNum;
  PB3HotPointStatus status;
  PB3HotHide isHide;
  NSString *name;
  NSString *icon;
  NSString *content;
  NSString *contentResponse;
  NSString *jumpURL;
  int64_t hotPointId;
  int64_t playerId;
  int64_t playerId2;
  int64_t playerId3;
  int64_t pushTime;
  int64_t roomId;
} PB3PHomeEntryHotPoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hotPointId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_HotPointId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, hotPointId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId3",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_PlayerId3,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, playerId3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Icon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3PluginSexType_EnumDescriptor,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Sex,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_WealthLevel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_CharmLevel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLevelFish",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_WealthLevelFish,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, wealthLevelFish),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevelFish",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_CharmLevelFish,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, charmLevelFish),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Content,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentResponse",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_ContentResponse,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, contentResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Rank,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3PluginHotPointType_EnumDescriptor,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Type,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Gold,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "heat",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Heat,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, heat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "watchNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_WatchNum,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, watchNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_JumpURL,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_PushTime,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, pushTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PHomeEntryHotPoint_FieldNumber_RoomId,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3HotPointStatus_EnumDescriptor,
        .number = PB3PHomeEntryHotPoint_FieldNumber_Status,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isHide",
        .dataTypeSpecific.enumDescFunc = PB3HotHide_EnumDescriptor,
        .number = PB3PHomeEntryHotPoint_FieldNumber_IsHide,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3PHomeEntryHotPoint__storage_, isHide),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PHomeEntryHotPoint class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PHomeEntryHotPoint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\023\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PHomeEntryHotPoint_Sex_RawValue(PB3PHomeEntryHotPoint *message) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PHomeEntryHotPoint_Sex_RawValue(PB3PHomeEntryHotPoint *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3PHomeEntryHotPoint_Type_RawValue(PB3PHomeEntryHotPoint *message) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PHomeEntryHotPoint_Type_RawValue(PB3PHomeEntryHotPoint *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3PHomeEntryHotPoint_Status_RawValue(PB3PHomeEntryHotPoint *message) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PHomeEntryHotPoint_Status_RawValue(PB3PHomeEntryHotPoint *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3PHomeEntryHotPoint_IsHide_RawValue(PB3PHomeEntryHotPoint *message) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_IsHide];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PHomeEntryHotPoint_IsHide_RawValue(PB3PHomeEntryHotPoint *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PHomeEntryHotPoint descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PHomeEntryHotPoint_FieldNumber_IsHide];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FirepowerRank

@implementation PB3FirepowerRank

@dynamic playerId;
@dynamic playerImage;
@dynamic playerName;
@dynamic firepower;

typedef struct PB3FirepowerRank__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerImage;
  NSString *playerName;
  int64_t playerId;
  int64_t firepower;
} PB3FirepowerRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirepowerRank_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FirepowerRank__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirepowerRank_FieldNumber_PlayerImage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FirepowerRank__storage_, playerImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirepowerRank_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FirepowerRank__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firepower",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirepowerRank_FieldNumber_Firepower,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FirepowerRank__storage_, firepower),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirepowerRank class]
                                     rootClass:[PB3PluginExtRoot class]
                                          file:PB3PluginExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FirepowerRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
