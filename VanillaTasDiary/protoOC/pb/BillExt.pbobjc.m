// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/bill.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/BillExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3BillExtRoot

@implementation PB3BillExtRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3BillExtRoot_FileDescriptor

static GPBFileDescriptor *PB3BillExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3BillCmdId

GPBEnumDescriptor *PB3BillCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BillNone1\000BillOrderMsgCmdId\000BillOrderRed"
        "CmdId\000SendOrderMsgNumberCmdId\000VisitBillP"
        "layerCmdId\000DispatchWindowPushCmdId\000Visit"
        "LogV2RedCmdId\000SendOrderMsgRedNumberCmdId"
        "\000";
    static const int32_t values[] = {
        PB3BillCmdId_BillNone1,
        PB3BillCmdId_BillOrderMsgCmdId,
        PB3BillCmdId_BillOrderRedCmdId,
        PB3BillCmdId_SendOrderMsgNumberCmdId,
        PB3BillCmdId_VisitBillPlayerCmdId,
        PB3BillCmdId_DispatchWindowPushCmdId,
        PB3BillCmdId_VisitLogV2RedCmdId,
        PB3BillCmdId_SendOrderMsgRedNumberCmdId,
    };
    static const char *extraTextFormatInfo = "\010\000\t\000\001\021\000\002\021\000\003\027\000\004\024\000\005\027\000\006\022\000\007\032\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillCmdId_BillNone1:
    case PB3BillCmdId_BillOrderMsgCmdId:
    case PB3BillCmdId_BillOrderRedCmdId:
    case PB3BillCmdId_SendOrderMsgNumberCmdId:
    case PB3BillCmdId_VisitBillPlayerCmdId:
    case PB3BillCmdId_DispatchWindowPushCmdId:
    case PB3BillCmdId_VisitLogV2RedCmdId:
    case PB3BillCmdId_SendOrderMsgRedNumberCmdId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillOrderOper

GPBEnumDescriptor *PB3BillOrderOper_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BoZero\000BoAccept\000BoDeliver\000BoConfirmDeliv"
        "er\000BoRefuse\000BoBossCancel\000BoApply\000BoConfi"
        "rmBegin\000";
    static const int32_t values[] = {
        PB3BillOrderOper_BoZero,
        PB3BillOrderOper_BoAccept,
        PB3BillOrderOper_BoDeliver,
        PB3BillOrderOper_BoConfirmDeliver,
        PB3BillOrderOper_BoRefuse,
        PB3BillOrderOper_BoBossCancel,
        PB3BillOrderOper_BoApply,
        PB3BillOrderOper_BoConfirmBegin,
    };
    static const char *extraTextFormatInfo = "\006\001b\206\000\002b\207\000\003b\216\000\004b\206\000\006b\205\000\007b\214\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillOrderOper)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillOrderOper_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillOrderOper_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillOrderOper_BoZero:
    case PB3BillOrderOper_BoAccept:
    case PB3BillOrderOper_BoDeliver:
    case PB3BillOrderOper_BoConfirmDeliver:
    case PB3BillOrderOper_BoRefuse:
    case PB3BillOrderOper_BoBossCancel:
    case PB3BillOrderOper_BoApply:
    case PB3BillOrderOper_BoConfirmBegin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillIntOrderOper

GPBEnumDescriptor *PB3BillIntOrderOper_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BointZero\000BointSysRefuse\000BointSysSettlem"
        "ent\000BointSysRefund\000BointDelOrderId\000Boint"
        "BossComplaint\000BointSysUnlock\000BointSysNot"
        "ApplyBegin\000BointSysAutoBegin\000";
    static const int32_t values[] = {
        PB3BillIntOrderOper_BointZero,
        PB3BillIntOrderOper_BointSysRefuse,
        PB3BillIntOrderOper_BointSysSettlement,
        PB3BillIntOrderOper_BointSysRefund,
        PB3BillIntOrderOper_BointDelOrderId,
        PB3BillIntOrderOper_BointBossComplaint,
        PB3BillIntOrderOper_BointSysUnlock,
        PB3BillIntOrderOper_BointSysNotApplyBegin,
        PB3BillIntOrderOper_BointSysAutoBegin,
    };
    static const char *extraTextFormatInfo = "\t\000c\002\344\000\001c\002\211\000\002c\002\215\000\003c\002\211\000\004c\002\212\000\005c\002\204\211\000\006c\002\211\000\007c\002\220\000\010c\002\214\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillIntOrderOper)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillIntOrderOper_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillIntOrderOper_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillIntOrderOper_BointZero:
    case PB3BillIntOrderOper_BointSysRefuse:
    case PB3BillIntOrderOper_BointSysSettlement:
    case PB3BillIntOrderOper_BointSysRefund:
    case PB3BillIntOrderOper_BointDelOrderId:
    case PB3BillIntOrderOper_BointBossComplaint:
    case PB3BillIntOrderOper_BointSysUnlock:
    case PB3BillIntOrderOper_BointSysNotApplyBegin:
    case PB3BillIntOrderOper_BointSysAutoBegin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillOrder_Status

GPBEnumDescriptor *PB3BillOrder_Status_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BostatusZero\000BostatusOrder\000BostatusAccep"
        "t\000BostatusDeliver\000BostatusConfirmDeliver"
        "\000BostatusRefuse\000BostatusSysRefuse\000Bostat"
        "usSettlement\000BostatusRefund\000BostatusCanc"
        "el\000BostatusComplaintRefund\000BostatusOrder"
        "Unlock\000BostatusApplyService\000BostatusAppl"
        "yServiceTimeout\000BostatusConfirmBegin\000Bos"
        "tatusConfirmBeginTimeout\000BostatusNewOrde"
        "r\000BostatusNewBossApplyStart\000BostatusNewP"
        "papplyStart\000BostatusNewRefuseStart\000Bosta"
        "tusNewPpagreeServicing\000BostatusNewEndAdv"
        "ance\000BostatusNewEndTimeout\000BostatusNewEn"
        "dComplaint\000BostatusNewCancel\000BostatusNew"
        "CancelTimeout\000BostatusNewComplaintRefund"
        "\000BostatusNewSettlement\000BostatusNewCompla"
        "int\000BostatusNewBossRefuseStart\000BostatusN"
        "ewCancelComplaint\000BostatusNewComplaintRe"
        "fuse\000BostatusNewBossAgreeServicing\000Bosta"
        "tusNewAdminRefund\000";
    static const int32_t values[] = {
        PB3BillOrder_Status_BostatusZero,
        PB3BillOrder_Status_BostatusOrder,
        PB3BillOrder_Status_BostatusAccept,
        PB3BillOrder_Status_BostatusDeliver,
        PB3BillOrder_Status_BostatusConfirmDeliver,
        PB3BillOrder_Status_BostatusRefuse,
        PB3BillOrder_Status_BostatusSysRefuse,
        PB3BillOrder_Status_BostatusSettlement,
        PB3BillOrder_Status_BostatusRefund,
        PB3BillOrder_Status_BostatusCancel,
        PB3BillOrder_Status_BostatusComplaintRefund,
        PB3BillOrder_Status_BostatusOrderUnlock,
        PB3BillOrder_Status_BostatusApplyService,
        PB3BillOrder_Status_BostatusApplyServiceTimeout,
        PB3BillOrder_Status_BostatusConfirmBegin,
        PB3BillOrder_Status_BostatusConfirmBeginTimeout,
        PB3BillOrder_Status_BostatusNewOrder,
        PB3BillOrder_Status_BostatusNewBossApplyStart,
        PB3BillOrder_Status_BostatusNewPpapplyStart,
        PB3BillOrder_Status_BostatusNewRefuseStart,
        PB3BillOrder_Status_BostatusNewPpagreeServicing,
        PB3BillOrder_Status_BostatusNewEndAdvance,
        PB3BillOrder_Status_BostatusNewEndTimeout,
        PB3BillOrder_Status_BostatusNewEndComplaint,
        PB3BillOrder_Status_BostatusNewCancel,
        PB3BillOrder_Status_BostatusNewCancelTimeout,
        PB3BillOrder_Status_BostatusNewComplaintRefund,
        PB3BillOrder_Status_BostatusNewSettlement,
        PB3BillOrder_Status_BostatusNewComplaint,
        PB3BillOrder_Status_BostatusNewBossRefuseStart,
        PB3BillOrder_Status_BostatusNewCancelComplaint,
        PB3BillOrder_Status_BostatusNewComplaintRefuse,
        PB3BillOrder_Status_BostatusNewBossAgreeServicing,
        PB3BillOrder_Status_BostatusNewAdminRefund,
    };
    static const char *extraTextFormatInfo = "\"\000c\005\344\000\001c\005\205\000\002c\005\206\000\003c\005\207\000\004c\005\216\000\005c\005\206\000\006c\005\203\206\000\007c\005\212\000\010c\005\206\000\tc\005\206\000\nc\005\211\206\000\013c\005\205\206\000\014c\005\205\207\000\rc\005\205\207\207\000\016c\005\207\205\000\017c\005\207\205\207\000\020c\005\203\205\000\021c\005\203\216\000\022c\005\203\343\t\000\023c\005\203\213\000\024c\005\203\343\r\000\025c\005\203\212\000\026c\005\203\212\000\027c\005\203\214\000\030c\005\203\206\000\031c\005\203\215\000\032c\005\203\211\206\000\033c\005\203\212\000\034c\005\203\211\000\035c\005\203\217\000\036c\005\203\206\211\000\037c\005\203\211\206\000 c\005\203\222\000!c\005\203\205\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillOrder_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillOrder_Status_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillOrder_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillOrder_Status_BostatusZero:
    case PB3BillOrder_Status_BostatusOrder:
    case PB3BillOrder_Status_BostatusAccept:
    case PB3BillOrder_Status_BostatusDeliver:
    case PB3BillOrder_Status_BostatusConfirmDeliver:
    case PB3BillOrder_Status_BostatusRefuse:
    case PB3BillOrder_Status_BostatusSysRefuse:
    case PB3BillOrder_Status_BostatusSettlement:
    case PB3BillOrder_Status_BostatusRefund:
    case PB3BillOrder_Status_BostatusCancel:
    case PB3BillOrder_Status_BostatusComplaintRefund:
    case PB3BillOrder_Status_BostatusOrderUnlock:
    case PB3BillOrder_Status_BostatusApplyService:
    case PB3BillOrder_Status_BostatusApplyServiceTimeout:
    case PB3BillOrder_Status_BostatusConfirmBegin:
    case PB3BillOrder_Status_BostatusConfirmBeginTimeout:
    case PB3BillOrder_Status_BostatusNewOrder:
    case PB3BillOrder_Status_BostatusNewBossApplyStart:
    case PB3BillOrder_Status_BostatusNewPpapplyStart:
    case PB3BillOrder_Status_BostatusNewRefuseStart:
    case PB3BillOrder_Status_BostatusNewPpagreeServicing:
    case PB3BillOrder_Status_BostatusNewEndAdvance:
    case PB3BillOrder_Status_BostatusNewEndTimeout:
    case PB3BillOrder_Status_BostatusNewEndComplaint:
    case PB3BillOrder_Status_BostatusNewCancel:
    case PB3BillOrder_Status_BostatusNewCancelTimeout:
    case PB3BillOrder_Status_BostatusNewComplaintRefund:
    case PB3BillOrder_Status_BostatusNewSettlement:
    case PB3BillOrder_Status_BostatusNewComplaint:
    case PB3BillOrder_Status_BostatusNewBossRefuseStart:
    case PB3BillOrder_Status_BostatusNewCancelComplaint:
    case PB3BillOrder_Status_BostatusNewComplaintRefuse:
    case PB3BillOrder_Status_BostatusNewBossAgreeServicing:
    case PB3BillOrder_Status_BostatusNewAdminRefund:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillServiceProgressType

GPBEnumDescriptor *PB3BillServiceProgressType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BsptNone\000BsptWaitAccept\000BsptWaitService\000"
        "BsptServicing\000BsptCompletion\000";
    static const int32_t values[] = {
        PB3BillServiceProgressType_BsptNone,
        PB3BillServiceProgressType_BsptWaitAccept,
        PB3BillServiceProgressType_BsptWaitService,
        PB3BillServiceProgressType_BsptServicing,
        PB3BillServiceProgressType_BsptCompletion,
    };
    static const char *extraTextFormatInfo = "\004\001d\212\000\002d\213\000\003d\211\000\004d\212\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillServiceProgressType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillServiceProgressType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillServiceProgressType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillServiceProgressType_BsptNone:
    case PB3BillServiceProgressType_BsptWaitAccept:
    case PB3BillServiceProgressType_BsptWaitService:
    case PB3BillServiceProgressType_BsptServicing:
    case PB3BillServiceProgressType_BsptCompletion:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillHistory

GPBEnumDescriptor *PB3BillHistory_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BhZero\000BhAccept\000BhOrder\000BhAll\000BhIm\000BhAcc"
        "eptMsg\000BhOrderMsg\000";
    static const int32_t values[] = {
        PB3BillHistory_BhZero,
        PB3BillHistory_BhAccept,
        PB3BillHistory_BhOrder,
        PB3BillHistory_BhAll,
        PB3BillHistory_BhIm,
        PB3BillHistory_BhAcceptMsg,
        PB3BillHistory_BhOrderMsg,
    };
    static const char *extraTextFormatInfo = "\005\001b\206\000\002b\205\000\003b\203\000\005b\206\243\000\006b\205\243\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillHistory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillHistory_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillHistory_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillHistory_BhZero:
    case PB3BillHistory_BhAccept:
    case PB3BillHistory_BhOrder:
    case PB3BillHistory_BhAll:
    case PB3BillHistory_BhIm:
    case PB3BillHistory_BhAcceptMsg:
    case PB3BillHistory_BhOrderMsg:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillHistoryTime

GPBEnumDescriptor *PB3BillHistoryTime_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BhtZero\000BhtAll\000BhtThisMonth\000BhtLastMonth"
        "\000BhtThisWeek\000BhtToday\000";
    static const int32_t values[] = {
        PB3BillHistoryTime_BhtZero,
        PB3BillHistoryTime_BhtAll,
        PB3BillHistoryTime_BhtThisMonth,
        PB3BillHistoryTime_BhtLastMonth,
        PB3BillHistoryTime_BhtThisWeek,
        PB3BillHistoryTime_BhtToday,
    };
    static const char *extraTextFormatInfo = "\005\001c\203\000\002c\211\000\003c\211\000\004c\210\000\005c\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillHistoryTime)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillHistoryTime_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillHistoryTime_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillHistoryTime_BhtZero:
    case PB3BillHistoryTime_BhtAll:
    case PB3BillHistoryTime_BhtThisMonth:
    case PB3BillHistoryTime_BhtLastMonth:
    case PB3BillHistoryTime_BhtThisWeek:
    case PB3BillHistoryTime_BhtToday:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillSkill_Status

GPBEnumDescriptor *PB3BillSkill_Status_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BskillStatusNormal\000BskillStatusClosed\000";
    static const int32_t values[] = {
        PB3BillSkill_Status_BskillStatusNormal,
        PB3BillSkill_Status_BskillStatusClosed,
    };
    static const char *extraTextFormatInfo = "\002\000b\004\206\206\000\001b\004\206\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillSkill_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillSkill_Status_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillSkill_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillSkill_Status_BskillStatusNormal:
    case PB3BillSkill_Status_BskillStatusClosed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ClanIconType

GPBEnumDescriptor *PB3ClanIconType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CitNormal\000CitRely\000CitBill\000";
    static const int32_t values[] = {
        PB3ClanIconType_CitNormal,
        PB3ClanIconType_CitRely,
        PB3ClanIconType_CitBill,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ClanIconType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ClanIconType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ClanIconType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ClanIconType_CitNormal:
    case PB3ClanIconType_CitRely:
    case PB3ClanIconType_CitBill:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OrderRole

GPBEnumDescriptor *PB3OrderRole_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrZero\000OrServer\000OrBoss\000";
    static const int32_t values[] = {
        PB3OrderRole_OrZero,
        PB3OrderRole_OrServer,
        PB3OrderRole_OrBoss,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OrderRole)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OrderRole_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OrderRole_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OrderRole_OrZero:
    case PB3OrderRole_OrServer:
    case PB3OrderRole_OrBoss:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillPlayerStatus

GPBEnumDescriptor *PB3BillPlayerStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BpNone\000BpOpen\000BpClose\000BpFreeze\000";
    static const int32_t values[] = {
        PB3BillPlayerStatus_BpNone,
        PB3BillPlayerStatus_BpOpen,
        PB3BillPlayerStatus_BpClose,
        PB3BillPlayerStatus_BpFreeze,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillPlayerStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillPlayerStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillPlayerStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillPlayerStatus_BpNone:
    case PB3BillPlayerStatus_BpOpen:
    case PB3BillPlayerStatus_BpClose:
    case PB3BillPlayerStatus_BpFreeze:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillPlayerCheckStatus

GPBEnumDescriptor *PB3BillPlayerCheckStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BpcNone\000BpcChecking\000BpcCheckedSucc\000BpcCh"
        "eckedFail\000BpcReChecking\000BpcReCheckedFail"
        "\000";
    static const int32_t values[] = {
        PB3BillPlayerCheckStatus_BpcNone,
        PB3BillPlayerCheckStatus_BpcChecking,
        PB3BillPlayerCheckStatus_BpcCheckedSucc,
        PB3BillPlayerCheckStatus_BpcCheckedFail,
        PB3BillPlayerCheckStatus_BpcReChecking,
        PB3BillPlayerCheckStatus_BpcReCheckedFail,
    };
    static const char *extraTextFormatInfo = "\001\000c\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillPlayerCheckStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillPlayerCheckStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillPlayerCheckStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillPlayerCheckStatus_BpcNone:
    case PB3BillPlayerCheckStatus_BpcChecking:
    case PB3BillPlayerCheckStatus_BpcCheckedSucc:
    case PB3BillPlayerCheckStatus_BpcCheckedFail:
    case PB3BillPlayerCheckStatus_BpcReChecking:
    case PB3BillPlayerCheckStatus_BpcReCheckedFail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OrderButtonType

GPBEnumDescriptor *PB3OrderButtonType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrderButtionNone\000OrderButtionNormal\000Orde"
        "rButtionCancel\000OrderButtionRouter\000";
    static const int32_t values[] = {
        PB3OrderButtonType_OrderButtionNone,
        PB3OrderButtonType_OrderButtionNormal,
        PB3OrderButtonType_OrderButtionCancel,
        PB3OrderButtonType_OrderButtionRouter,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OrderButtonType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OrderButtonType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OrderButtonType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OrderButtonType_OrderButtionNone:
    case PB3OrderButtonType_OrderButtionNormal:
    case PB3OrderButtonType_OrderButtionCancel:
    case PB3OrderButtonType_OrderButtionRouter:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GenrationOrderMsgType

GPBEnumDescriptor *PB3GenrationOrderMsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrderGMsgNone\000OrderGMsgBill\000OrderGMsgNew"
        "Order\000";
    static const int32_t values[] = {
        PB3GenrationOrderMsgType_OrderGMsgNone,
        PB3GenrationOrderMsgType_OrderGMsgBill,
        PB3GenrationOrderMsgType_OrderGMsgNewOrder,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GenrationOrderMsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GenrationOrderMsgType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GenrationOrderMsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GenrationOrderMsgType_OrderGMsgNone:
    case PB3GenrationOrderMsgType_OrderGMsgBill:
    case PB3GenrationOrderMsgType_OrderGMsgNewOrder:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OrderButtonStyle

GPBEnumDescriptor *PB3OrderButtonStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrderBtnStyleNone\000OrderBtnStyleNormal\000Or"
        "derBtnStyleCancel\000OrderBtnStyleAgain\000Ord"
        "erBtnStyleComplaint\000";
    static const int32_t values[] = {
        PB3OrderButtonStyle_OrderBtnStyleNone,
        PB3OrderButtonStyle_OrderBtnStyleNormal,
        PB3OrderButtonStyle_OrderBtnStyleCancel,
        PB3OrderButtonStyle_OrderBtnStyleAgain,
        PB3OrderButtonStyle_OrderBtnStyleComplaint,
    };
    static const char *extraTextFormatInfo = "\005\000\r\344\000\001\r\206\000\002\r\206\000\003\r\205\000\004\r\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OrderButtonStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OrderButtonStyle_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OrderButtonStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OrderButtonStyle_OrderBtnStyleNone:
    case PB3OrderButtonStyle_OrderBtnStyleNormal:
    case PB3OrderButtonStyle_OrderBtnStyleCancel:
    case PB3OrderButtonStyle_OrderBtnStyleAgain:
    case PB3OrderButtonStyle_OrderBtnStyleComplaint:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OrderMsgStyleType

GPBEnumDescriptor *PB3OrderMsgStyleType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrderMsgStyleNone\000OrderMsgStyleNormal\000Or"
        "derMsgStyleText\000OrderMsgStyle2\000OrderMsgS"
        "tyle3\000OrderMsgStyleNewNormal\000";
    static const int32_t values[] = {
        PB3OrderMsgStyleType_OrderMsgStyleNone,
        PB3OrderMsgStyleType_OrderMsgStyleNormal,
        PB3OrderMsgStyleType_OrderMsgStyleText,
        PB3OrderMsgStyleType_OrderMsgStyle2,
        PB3OrderMsgStyleType_OrderMsgStyle3,
        PB3OrderMsgStyleType_OrderMsgStyleNewNormal,
    };
    static const char *extraTextFormatInfo = "\002\003e\343\345\201\000\004e\343\345\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OrderMsgStyleType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OrderMsgStyleType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OrderMsgStyleType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OrderMsgStyleType_OrderMsgStyleNone:
    case PB3OrderMsgStyleType_OrderMsgStyleNormal:
    case PB3OrderMsgStyleType_OrderMsgStyleText:
    case PB3OrderMsgStyleType_OrderMsgStyle2:
    case PB3OrderMsgStyleType_OrderMsgStyle3:
    case PB3OrderMsgStyleType_OrderMsgStyleNewNormal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillFileType

GPBEnumDescriptor *PB3BillFileType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FtPicture\000FtVoice\000";
    static const int32_t values[] = {
        PB3BillFileType_FtPicture,
        PB3BillFileType_FtVoice,
    };
    static const char *extraTextFormatInfo = "\002\000b\207\000\001b\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillFileType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillFileType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillFileType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillFileType_FtPicture:
    case PB3BillFileType_FtVoice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillOrderType

GPBEnumDescriptor *PB3BillOrderType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BotNormal\000BotNewPlayer\000";
    static const int32_t values[] = {
        PB3BillOrderType_BotNormal,
        PB3BillOrderType_BotNewPlayer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillOrderType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillOrderType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillOrderType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillOrderType_BotNormal:
    case PB3BillOrderType_BotNewPlayer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillSkillType

GPBEnumDescriptor *PB3BillSkillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BstNone\000BstFirst\000BstSecond\000";
    static const int32_t values[] = {
        PB3BillSkillType_BstNone,
        PB3BillSkillType_BstFirst,
        PB3BillSkillType_BstSecond,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillSkillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillSkillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillSkillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillSkillType_BstNone:
    case PB3BillSkillType_BstFirst:
    case PB3BillSkillType_BstSecond:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewPlayerBillStatus

GPBEnumDescriptor *PB3NewPlayerBillStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NpbsNone\000NpbsOpen\000NpbsClose\000";
    static const int32_t values[] = {
        PB3NewPlayerBillStatus_NpbsNone,
        PB3NewPlayerBillStatus_NpbsOpen,
        PB3NewPlayerBillStatus_NpbsClose,
    };
    static const char *extraTextFormatInfo = "\003\000d\204\000\001d\204\000\002d\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewPlayerBillStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewPlayerBillStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewPlayerBillStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewPlayerBillStatus_NpbsNone:
    case PB3NewPlayerBillStatus_NpbsOpen:
    case PB3NewPlayerBillStatus_NpbsClose:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillNewPriceType

GPBEnumDescriptor *PB3BillNewPriceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BnptNone\000BnptNewPlayer\000";
    static const int32_t values[] = {
        PB3BillNewPriceType_BnptNone,
        PB3BillNewPriceType_BnptNewPlayer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillNewPriceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillNewPriceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillNewPriceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillNewPriceType_BnptNone:
    case PB3BillNewPriceType_BnptNewPlayer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SendOrderType

GPBEnumDescriptor *PB3SendOrderType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SotZero\000SotQuery\000SotSendOrder\000SotAgain\000S"
        "otFinish\000";
    static const int32_t values[] = {
        PB3SendOrderType_SotZero,
        PB3SendOrderType_SotQuery,
        PB3SendOrderType_SotSendOrder,
        PB3SendOrderType_SotAgain,
        PB3SendOrderType_SotFinish,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SendOrderType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SendOrderType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SendOrderType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SendOrderType_SotZero:
    case PB3SendOrderType_SotQuery:
    case PB3SendOrderType_SotSendOrder:
    case PB3SendOrderType_SotAgain:
    case PB3SendOrderType_SotFinish:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DisBillInfoStatus

GPBEnumDescriptor *PB3DisBillInfoStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DbisNone\000DbisDispatch\000DbisEnd\000";
    static const int32_t values[] = {
        PB3DisBillInfoStatus_DbisNone,
        PB3DisBillInfoStatus_DbisDispatch,
        PB3DisBillInfoStatus_DbisEnd,
    };
    static const char *extraTextFormatInfo = "\003\000d\204\000\001d\210\000\002d\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DisBillInfoStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DisBillInfoStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DisBillInfoStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DisBillInfoStatus_DbisNone:
    case PB3DisBillInfoStatus_DbisDispatch:
    case PB3DisBillInfoStatus_DbisEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SendOrderMsgNumberType

GPBEnumDescriptor *PB3SendOrderMsgNumberType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SomntNone\000SomntStart\000SomntEnd\000";
    static const int32_t values[] = {
        PB3SendOrderMsgNumberType_SomntNone,
        PB3SendOrderMsgNumberType_SomntStart,
        PB3SendOrderMsgNumberType_SomntEnd,
    };
    static const char *extraTextFormatInfo = "\003\000e\204\000\001e\205\000\002e\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SendOrderMsgNumberType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SendOrderMsgNumberType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SendOrderMsgNumberType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SendOrderMsgNumberType_SomntNone:
    case PB3SendOrderMsgNumberType_SomntStart:
    case PB3SendOrderMsgNumberType_SomntEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SysSendOrderType

GPBEnumDescriptor *PB3SysSendOrderType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SysSotypeNone\000SysSotypeTimeout\000SysSotype"
        "FirstPush\000SysSotypeSysPush\000";
    static const int32_t values[] = {
        PB3SysSendOrderType_SysSotypeNone,
        PB3SysSendOrderType_SysSotypeTimeout,
        PB3SysSendOrderType_SysSotypeFirstPush,
        PB3SysSendOrderType_SysSotypeSysPush,
    };
    static const char *extraTextFormatInfo = "\004\000\004b\003\204\000\001\004b\003\207\000\002\004b\003\211\000\003\004b\003\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SysSendOrderType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SysSendOrderType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SysSendOrderType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SysSendOrderType_SysSotypeNone:
    case PB3SysSendOrderType_SysSotypeTimeout:
    case PB3SysSendOrderType_SysSotypeFirstPush:
    case PB3SysSendOrderType_SysSotypeSysPush:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillPlayerSkillStatus

GPBEnumDescriptor *PB3BillPlayerSkillStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BpssNone\000BpssNormal\000BpssClosed\000";
    static const int32_t values[] = {
        PB3BillPlayerSkillStatus_BpssNone,
        PB3BillPlayerSkillStatus_BpssNormal,
        PB3BillPlayerSkillStatus_BpssClosed,
    };
    static const char *extraTextFormatInfo = "\003\000d\204\000\001d\206\000\002d\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillPlayerSkillStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillPlayerSkillStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillPlayerSkillStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillPlayerSkillStatus_BpssNone:
    case PB3BillPlayerSkillStatus_BpssNormal:
    case PB3BillPlayerSkillStatus_BpssClosed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillSkillCheckStatus

GPBEnumDescriptor *PB3BillSkillCheckStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BscsNone\000BscsChecking\000BscsCheckedPass\000Bs"
        "csCheckedNoPass\000";
    static const int32_t values[] = {
        PB3BillSkillCheckStatus_BscsNone,
        PB3BillSkillCheckStatus_BscsChecking,
        PB3BillSkillCheckStatus_BscsCheckedPass,
        PB3BillSkillCheckStatus_BscsCheckedNoPass,
    };
    static const char *extraTextFormatInfo = "\004\000d\204\000\001d\210\000\002d\213\000\003d\215\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillSkillCheckStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillSkillCheckStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillSkillCheckStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillSkillCheckStatus_BscsNone:
    case PB3BillSkillCheckStatus_BscsChecking:
    case PB3BillSkillCheckStatus_BscsCheckedPass:
    case PB3BillSkillCheckStatus_BscsCheckedNoPass:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillSkillSetOption

GPBEnumDescriptor *PB3BillSkillSetOption_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BssoNone\000BssoSkillStatus\000BssoNewPlayerBi"
        "ll\000BssoAll\000";
    static const int32_t values[] = {
        PB3BillSkillSetOption_BssoNone,
        PB3BillSkillSetOption_BssoSkillStatus,
        PB3BillSkillSetOption_BssoNewPlayerBill,
        PB3BillSkillSetOption_BssoAll,
    };
    static const char *extraTextFormatInfo = "\003\000d\204\000\001d\213\000\002d\215\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillSkillSetOption)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillSkillSetOption_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillSkillSetOption_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillSkillSetOption_BssoNone:
    case PB3BillSkillSetOption_BssoSkillStatus:
    case PB3BillSkillSetOption_BssoNewPlayerBill:
    case PB3BillSkillSetOption_BssoAll:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillSkillCheckSegment

GPBEnumDescriptor *PB3BillSkillCheckSegment_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BsisNone\000BsisAll\000BsisLevel\000BsisIntroText"
        "\000BsisIntroVoice\000BsisIntroPictures\000BsisIc"
        "on\000";
    static const int32_t values[] = {
        PB3BillSkillCheckSegment_BsisNone,
        PB3BillSkillCheckSegment_BsisAll,
        PB3BillSkillCheckSegment_BsisLevel,
        PB3BillSkillCheckSegment_BsisIntroText,
        PB3BillSkillCheckSegment_BsisIntroVoice,
        PB3BillSkillCheckSegment_BsisIntroPictures,
        PB3BillSkillCheckSegment_BsisIcon,
    };
    static const char *extraTextFormatInfo = "\006\000d\204\000\002d\205\000\003d\211\000\004d\212\000\005d\215\000\006d\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillSkillCheckSegment)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillSkillCheckSegment_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillSkillCheckSegment_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillSkillCheckSegment_BsisNone:
    case PB3BillSkillCheckSegment_BsisAll:
    case PB3BillSkillCheckSegment_BsisLevel:
    case PB3BillSkillCheckSegment_BsisIntroText:
    case PB3BillSkillCheckSegment_BsisIntroVoice:
    case PB3BillSkillCheckSegment_BsisIntroPictures:
    case PB3BillSkillCheckSegment_BsisIcon:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillSkillPriceType

GPBEnumDescriptor *PB3BillSkillPriceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BskptNone\000BskptOriginal\000BskptNewPlayer\000";
    static const int32_t values[] = {
        PB3BillSkillPriceType_BskptNone,
        PB3BillSkillPriceType_BskptOriginal,
        PB3BillSkillPriceType_BskptNewPlayer,
    };
    static const char *extraTextFormatInfo = "\003\000e\204\000\001e\210\000\002e\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillSkillPriceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillSkillPriceType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillSkillPriceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillSkillPriceType_BskptNone:
    case PB3BillSkillPriceType_BskptOriginal:
    case PB3BillSkillPriceType_BskptNewPlayer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillArrowType

GPBEnumDescriptor *PB3BillArrowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BatNull\000BatPurpleRightArrow\000BatGrayRight"
        "Arrow\000BatRedRightArrow\000";
    static const int32_t values[] = {
        PB3BillArrowType_BatNull,
        PB3BillArrowType_BatPurpleRightArrow,
        PB3BillArrowType_BatGrayRightArrow,
        PB3BillArrowType_BatRedRightArrow,
    };
    static const char *extraTextFormatInfo = "\003\001c\206\205\205\000\002c\204\205\205\000\003c\203\205\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillArrowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillArrowType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillArrowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillArrowType_BatNull:
    case PB3BillArrowType_BatPurpleRightArrow:
    case PB3BillArrowType_BatGrayRightArrow:
    case PB3BillArrowType_BatRedRightArrow:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ComplaintType

GPBEnumDescriptor *PB3ComplaintType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BctNone\000BctComplaint\000BctCancel\000";
    static const int32_t values[] = {
        PB3ComplaintType_BctNone,
        PB3ComplaintType_BctComplaint,
        PB3ComplaintType_BctCancel,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\211\000\002c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ComplaintType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ComplaintType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ComplaintType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ComplaintType_BctNone:
    case PB3ComplaintType_BctComplaint:
    case PB3ComplaintType_BctCancel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ComplaintStatus

GPBEnumDescriptor *PB3ComplaintStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BcsNone\000BcsProgressing\000BcsAgree\000BcsRefus"
        "e\000BcsCancel\000";
    static const int32_t values[] = {
        PB3ComplaintStatus_BcsNone,
        PB3ComplaintStatus_BcsProgressing,
        PB3ComplaintStatus_BcsAgree,
        PB3ComplaintStatus_BcsRefuse,
        PB3ComplaintStatus_BcsCancel,
    };
    static const char *extraTextFormatInfo = "\005\000c\204\000\001c\213\000\002c\205\000\003c\206\000\004c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ComplaintStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ComplaintStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ComplaintStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ComplaintStatus_BcsNone:
    case PB3ComplaintStatus_BcsProgressing:
    case PB3ComplaintStatus_BcsAgree:
    case PB3ComplaintStatus_BcsRefuse:
    case PB3ComplaintStatus_BcsCancel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OrderOptExtraDataType

GPBEnumDescriptor *PB3OrderOptExtraDataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OoedtNull\000OoedtRefuse\000";
    static const int32_t values[] = {
        PB3OrderOptExtraDataType_OoedtNull,
        PB3OrderOptExtraDataType_OoedtRefuse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OrderOptExtraDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OrderOptExtraDataType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OrderOptExtraDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OrderOptExtraDataType_OoedtNull:
    case PB3OrderOptExtraDataType_OoedtRefuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VisitSource

GPBEnumDescriptor *PB3VisitSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VlcNone\000VlcIm\000VlcBillPlayerSkill\000";
    static const int32_t values[] = {
        PB3VisitSource_VlcNone,
        PB3VisitSource_VlcIm,
        PB3VisitSource_VlcBillPlayerSkill,
    };
    static const char *extraTextFormatInfo = "\002\000c\204\000\002c\217\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VisitSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VisitSource_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VisitSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VisitSource_VlcNone:
    case PB3VisitSource_VlcIm:
    case PB3VisitSource_VlcBillPlayerSkill:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillIconCheckStatus

GPBEnumDescriptor *PB3BillIconCheckStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BicstatusNone\000BicstatusChecking\000Bicstatu"
        "sCheckedPass\000";
    static const int32_t values[] = {
        PB3BillIconCheckStatus_BicstatusNone,
        PB3BillIconCheckStatus_BicstatusChecking,
        PB3BillIconCheckStatus_BicstatusCheckedPass,
    };
    static const char *extraTextFormatInfo = "\003\000i\204\000\001i\210\000\002i\213\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillIconCheckStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillIconCheckStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillIconCheckStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillIconCheckStatus_BicstatusNone:
    case PB3BillIconCheckStatus_BicstatusChecking:
    case PB3BillIconCheckStatus_BicstatusCheckedPass:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EvaluationStatus

GPBEnumDescriptor *PB3EvaluationStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EsNone\000EsWait\000EsUpdate\000EsDone\000";
    static const int32_t values[] = {
        PB3EvaluationStatus_EsNone,
        PB3EvaluationStatus_EsWait,
        PB3EvaluationStatus_EsUpdate,
        PB3EvaluationStatus_EsDone,
    };
    static const char *extraTextFormatInfo = "\004\000b\204\000\001b\204\000\002b\206\000\003b\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EvaluationStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EvaluationStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EvaluationStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EvaluationStatus_EsNone:
    case PB3EvaluationStatus_EsWait:
    case PB3EvaluationStatus_EsUpdate:
    case PB3EvaluationStatus_EsDone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3BillSkillConf

@implementation PB3BillSkillConf

@dynamic id_p;
@dynamic name;
@dynamic linearStartColor;
@dynamic linearEndColor;
@dynamic giftId;
@dynamic giftNum;
@dynamic maxNum;
@dynamic serviceTime;
@dynamic unitName;
@dynamic status;
@dynamic textUncheckColor;
@dynamic textCheckedColor;
@dynamic borderUncheckColor;
@dynamic borderCheckedColor;
@dynamic newPrice, newPrice_Count;
@dynamic iconURL;
@dynamic levelsArray, levelsArray_Count;
@dynamic needLevelCheck;
@dynamic pricesArray, pricesArray_Count;
@dynamic newPlayerBill;
@dynamic sort;
@dynamic closedIconURL;
@dynamic cardBackgroundURL;
@dynamic tagsArray, tagsArray_Count;

typedef struct PB3BillSkillConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t giftId;
  int32_t giftNum;
  int32_t maxNum;
  int32_t serviceTime;
  PB3BillSkill_Status status;
  int32_t sort;
  NSString *name;
  NSString *linearStartColor;
  NSString *linearEndColor;
  NSString *unitName;
  NSString *textUncheckColor;
  NSString *textCheckedColor;
  NSString *borderUncheckColor;
  NSString *borderCheckedColor;
  GPBInt32ObjectDictionary *newPrice;
  NSString *iconURL;
  NSMutableArray *levelsArray;
  NSMutableArray *pricesArray;
  NSString *closedIconURL;
  NSString *cardBackgroundURL;
  NSMutableArray *tagsArray;
} PB3BillSkillConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "linearStartColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_LinearStartColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, linearStartColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "linearEndColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_LinearEndColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, linearEndColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_GiftId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_GiftNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_MaxNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, maxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serviceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_ServiceTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, serviceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unitName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_UnitName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, unitName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillSkill_Status_EnumDescriptor,
        .number = PB3BillSkillConf_FieldNumber_Status,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "textUncheckColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_TextUncheckColor,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, textUncheckColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textCheckedColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_TextCheckedColor,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, textCheckedColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "borderUncheckColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_BorderUncheckColor,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, borderUncheckColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "borderCheckedColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_BorderCheckedColor,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, borderCheckedColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPrice",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillNewPrice),
        .number = PB3BillSkillConf_FieldNumber_NewPrice,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, newPrice),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_IconURL,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillLevel),
        .number = PB3BillSkillConf_FieldNumber_LevelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, levelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "needLevelCheck",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_NeedLevelCheck,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "pricesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillPrice),
        .number = PB3BillSkillConf_FieldNumber_PricesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, pricesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newPlayerBill",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_NewPlayerBill,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_Sort,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "closedIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_ClosedIconURL,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, closedIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillConf_FieldNumber_CardBackgroundURL,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, cardBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillTag),
        .number = PB3BillSkillConf_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillSkillConf__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillConf class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\020\004\241!!\000\026\006\244\241!!\000\027\004\252\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkillConf_Status_RawValue(PB3BillSkillConf *message) {
  GPBDescriptor *descriptor = [PB3BillSkillConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillConf_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillConf_Status_RawValue(PB3BillSkillConf *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillConf_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillTag

@implementation PB3BillTag

@dynamic tagId;
@dynamic name;
@dynamic sex;

typedef struct PB3BillTag__storage_ {
  uint32_t _has_storage_[1];
  int32_t tagId;
  int32_t sex;
  NSString *name;
} PB3BillTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillTag_FieldNumber_TagId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillTag__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillTag_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillTag__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillTag_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillTag__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillTag class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillTag__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillLevelConf

@implementation PB3BillLevelConf

@dynamic level;
@dynamic iconURL;
@dynamic nextNum;
@dynamic zoneIconURL;
@dynamic iconURLNum;

typedef struct PB3BillLevelConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  int32_t nextNum;
  int32_t iconURLNum;
  NSString *iconURL;
  NSString *zoneIconURL;
} PB3BillLevelConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillLevelConf_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillLevelConf__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillLevelConf_FieldNumber_IconURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillLevelConf__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nextNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillLevelConf_FieldNumber_NextNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillLevelConf__storage_, nextNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "zoneIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillLevelConf_FieldNumber_ZoneIconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillLevelConf__storage_, zoneIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURLNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillLevelConf_FieldNumber_IconURLNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillLevelConf__storage_, iconURLNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillLevelConf class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillLevelConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\004\241!!\000\004\004\244\241!!\000\005\004\241!!\243\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrder

@implementation PB3BillOrder

@dynamic id_p;
@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic playerId2;
@dynamic tick;
@dynamic hasSkillInfo, skillInfo;
@dynamic num;
@dynamic status;
@dynamic orderTime;
@dynamic updateTime;
@dynamic buttonsArray, buttonsArray_Count;
@dynamic statusTips;
@dynamic noticeTips;
@dynamic roleTips;
@dynamic clanId;
@dynamic clanIconWord;
@dynamic clanLevelName;
@dynamic clanName;
@dynamic clanLevel;
@dynamic shortStatusTips;
@dynamic shortStatusColor;
@dynamic servantRoomId;
@dynamic noticeRouter;
@dynamic noticeColor;
@dynamic counterDown;
@dynamic gold;
@dynamic role;
@dynamic type;
@dynamic shortStatusTipsV2;
@dynamic shortStatusColorV2;
@dynamic noticesArray, noticesArray_Count;
@dynamic progress;
@dynamic detailContentArray, detailContentArray_Count;
@dynamic sex;
@dynamic isProgressing;
@dynamic orderCost;
@dynamic historyArray, historyArray_Count;
@dynamic billIcon;
@dynamic iconType;

typedef struct PB3BillOrder__storage_ {
  uint32_t _has_storage_[2];
  int32_t tick;
  int32_t num;
  PB3BillOrder_Status status;
  int32_t gold;
  PB3OrderRole role;
  PB3BillOrderType type;
  PB3BillServiceProgressType progress;
  int32_t sex;
  int32_t orderCost;
  PB3ClanIconType iconType;
  NSString *id_p;
  NSString *playerName;
  NSString *playerIcon;
  PB3BillSkillConf *skillInfo;
  NSMutableArray *buttonsArray;
  NSString *statusTips;
  NSString *noticeTips;
  NSString *roleTips;
  NSString *clanIconWord;
  NSString *clanLevelName;
  NSString *clanName;
  NSString *shortStatusTips;
  NSString *shortStatusColor;
  NSString *noticeRouter;
  NSString *noticeColor;
  NSString *shortStatusTipsV2;
  NSString *shortStatusColorV2;
  NSMutableArray *noticesArray;
  NSMutableArray *detailContentArray;
  NSMutableArray *historyArray;
  NSString *billIcon;
  int64_t playerId;
  int64_t playerId2;
  int64_t orderTime;
  int64_t updateTime;
  int64_t clanId;
  int64_t clanLevel;
  int64_t servantRoomId;
  int64_t counterDown;
} PB3BillOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_PlayerId2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tick",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_Tick,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, tick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillConf),
        .number = PB3BillOrder_FieldNumber_SkillInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, skillInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_Num,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillOrder_Status_EnumDescriptor,
        .number = PB3BillOrder_FieldNumber_Status,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "orderTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_OrderTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, orderTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_UpdateTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, updateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderButton),
        .number = PB3BillOrder_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, buttonsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "statusTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_StatusTips,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, statusTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noticeTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_NoticeTips,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, noticeTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roleTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_RoleTips,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, roleTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ClanId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, clanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clanIconWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ClanIconWord,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, clanIconWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clanLevelName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ClanLevelName,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, clanLevelName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clanName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ClanName,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, clanName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clanLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ClanLevel,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, clanLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "shortStatusTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ShortStatusTips,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, shortStatusTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortStatusColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ShortStatusColor,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, shortStatusColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "servantRoomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ServantRoomId,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, servantRoomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "noticeRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_NoticeRouter,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, noticeRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noticeColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_NoticeColor,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, noticeColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "counterDown",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_CounterDown,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, counterDown),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_Gold,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = PB3OrderRole_EnumDescriptor,
        .number = PB3BillOrder_FieldNumber_Role,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillOrderType_EnumDescriptor,
        .number = PB3BillOrder_FieldNumber_Type,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shortStatusTipsV2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ShortStatusTipsV2,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, shortStatusTipsV2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortStatusColorV2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_ShortStatusColorV2,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, shortStatusColorV2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noticesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NoticeMsg),
        .number = PB3BillOrder_FieldNumber_NoticesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, noticesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "progress",
        .dataTypeSpecific.enumDescFunc = PB3BillServiceProgressType_EnumDescriptor,
        .number = PB3BillOrder_FieldNumber_Progress,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, progress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "detailContentArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NoticeMsg),
        .number = PB3BillOrder_FieldNumber_DetailContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, detailContentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_Sex,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isProgressing",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_IsProgressing,
        .hasIndex = 32,
        .offset = 33,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "orderCost",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_OrderCost,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, orderCost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "historyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillOrderHistory),
        .number = PB3BillOrder_FieldNumber_HistoryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, historyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "billIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrder_FieldNumber_BillIcon,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, billIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconType",
        .dataTypeSpecific.enumDescFunc = PB3ClanIconType_EnumDescriptor,
        .number = PB3BillOrder_FieldNumber_IconType,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(PB3BillOrder__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrder class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillOrder_Status_RawValue(PB3BillOrder *message) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrder_Status_RawValue(PB3BillOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillOrder_Role_RawValue(PB3BillOrder *message) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Role];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrder_Role_RawValue(PB3BillOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Role];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillOrder_Type_RawValue(PB3BillOrder *message) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrder_Type_RawValue(PB3BillOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillOrder_Progress_RawValue(PB3BillOrder *message) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Progress];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrder_Progress_RawValue(PB3BillOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_Progress];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillOrder_IconType_RawValue(PB3BillOrder *message) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_IconType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrder_IconType_RawValue(PB3BillOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrder_FieldNumber_IconType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderHistory

@implementation PB3BillOrderHistory

@dynamic dateStr;
@dynamic statusStr;

typedef struct PB3BillOrderHistory__storage_ {
  uint32_t _has_storage_[1];
  NSString *dateStr;
  NSString *statusStr;
} PB3BillOrderHistory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dateStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderHistory_FieldNumber_DateStr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderHistory__storage_, dateStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderHistory_FieldNumber_StatusStr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderHistory__storage_, statusStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderHistory class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderHistory__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NoticeMsg

@implementation PB3NoticeMsg

@dynamic noticeTips;
@dynamic noticeRouter;
@dynamic noticeColor;

typedef struct PB3NoticeMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *noticeTips;
  NSString *noticeRouter;
  NSString *noticeColor;
} PB3NoticeMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noticeTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeMsg_FieldNumber_NoticeTips,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NoticeMsg__storage_, noticeTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noticeRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeMsg_FieldNumber_NoticeRouter,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NoticeMsg__storage_, noticeRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noticeColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeMsg_FieldNumber_NoticeColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NoticeMsg__storage_, noticeColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NoticeMsg class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NoticeMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderReq

@implementation PB3BillOrderReq

@dynamic toPlayerId;
@dynamic skillId;
@dynamic num;
@dynamic remark;
@dynamic newPriceType;

typedef struct PB3BillOrderReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int32_t num;
  PB3BillNewPriceType newPriceType;
  NSString *remark;
  int64_t toPlayerId;
} PB3BillOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderReq_FieldNumber_ToPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderReq__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderReq_FieldNumber_SkillId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderReq_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillOrderReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderReq_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillOrderReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPriceType",
        .dataTypeSpecific.enumDescFunc = PB3BillNewPriceType_EnumDescriptor,
        .number = PB3BillOrderReq_FieldNumber_NewPriceType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillOrderReq__storage_, newPriceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillOrderReq_NewPriceType_RawValue(PB3BillOrderReq *message) {
  GPBDescriptor *descriptor = [PB3BillOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderReq_FieldNumber_NewPriceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderReq_NewPriceType_RawValue(PB3BillOrderReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderReq_FieldNumber_NewPriceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderRes

@implementation PB3BillOrderRes

@dynamic hasOrder, order;

typedef struct PB3BillOrderRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillOrder *order;
} PB3BillOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillOrder),
        .number = PB3BillOrderRes_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderOperReq

@implementation PB3BillOrderOperReq

@dynamic opType;
@dynamic orderId;

typedef struct PB3BillOrderOperReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillOrderOper opType;
  NSString *orderId;
} PB3BillOrderOperReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.enumDescFunc = PB3BillOrderOper_EnumDescriptor,
        .number = PB3BillOrderOperReq_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderOperReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderOperReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderOperReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderOperReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderOperReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillOrderOperReq_OpType_RawValue(PB3BillOrderOperReq *message) {
  GPBDescriptor *descriptor = [PB3BillOrderOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderOperReq_FieldNumber_OpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderOperReq_OpType_RawValue(PB3BillOrderOperReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderOperReq_FieldNumber_OpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderOperRes

@implementation PB3BillOrderOperRes

@dynamic opType;
@dynamic hasOrder, order;

typedef struct PB3BillOrderOperRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillOrderOper opType;
  PB3BillOrder *order;
} PB3BillOrderOperRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.enumDescFunc = PB3BillOrderOper_EnumDescriptor,
        .number = PB3BillOrderOperRes_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderOperRes__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillOrder),
        .number = PB3BillOrderOperRes_FieldNumber_Order,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderOperRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderOperRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderOperRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillOrderOperRes_OpType_RawValue(PB3BillOrderOperRes *message) {
  GPBDescriptor *descriptor = [PB3BillOrderOperRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderOperRes_FieldNumber_OpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderOperRes_OpType_RawValue(PB3BillOrderOperRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderOperRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderOperRes_FieldNumber_OpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderIntOperReq

@implementation PB3BillOrderIntOperReq

@dynamic opType;
@dynamic orderId;
@dynamic nextStatus;
@dynamic playerId;

typedef struct PB3BillOrderIntOperReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillIntOrderOper opType;
  PB3BillOrder_Status nextStatus;
  NSString *orderId;
  int64_t playerId;
} PB3BillOrderIntOperReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.enumDescFunc = PB3BillIntOrderOper_EnumDescriptor,
        .number = PB3BillOrderIntOperReq_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderIntOperReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderIntOperReq_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderIntOperReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nextStatus",
        .dataTypeSpecific.enumDescFunc = PB3BillOrder_Status_EnumDescriptor,
        .number = PB3BillOrderIntOperReq_FieldNumber_NextStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillOrderIntOperReq__storage_, nextStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderIntOperReq_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillOrderIntOperReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderIntOperReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderIntOperReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillOrderIntOperReq_OpType_RawValue(PB3BillOrderIntOperReq *message) {
  GPBDescriptor *descriptor = [PB3BillOrderIntOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderIntOperReq_FieldNumber_OpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderIntOperReq_OpType_RawValue(PB3BillOrderIntOperReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderIntOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderIntOperReq_FieldNumber_OpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillOrderIntOperReq_NextStatus_RawValue(PB3BillOrderIntOperReq *message) {
  GPBDescriptor *descriptor = [PB3BillOrderIntOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderIntOperReq_FieldNumber_NextStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderIntOperReq_NextStatus_RawValue(PB3BillOrderIntOperReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderIntOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderIntOperReq_FieldNumber_NextStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderIntOperRes

@implementation PB3BillOrderIntOperRes


typedef struct PB3BillOrderIntOperRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillOrderIntOperRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderIntOperRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillOrderIntOperRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderListReq

@implementation PB3BillOrderListReq

@dynamic opType;
@dynamic timeType;
@dynamic page;

typedef struct PB3BillOrderListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillHistory opType;
  PB3BillHistoryTime timeType;
  int32_t page;
} PB3BillOrderListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.enumDescFunc = PB3BillHistory_EnumDescriptor,
        .number = PB3BillOrderListReq_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderListReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timeType",
        .dataTypeSpecific.enumDescFunc = PB3BillHistoryTime_EnumDescriptor,
        .number = PB3BillOrderListReq_FieldNumber_TimeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderListReq__storage_, timeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderListReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillOrderListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderListReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillOrderListReq_OpType_RawValue(PB3BillOrderListReq *message) {
  GPBDescriptor *descriptor = [PB3BillOrderListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderListReq_FieldNumber_OpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderListReq_OpType_RawValue(PB3BillOrderListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderListReq_FieldNumber_OpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillOrderListReq_TimeType_RawValue(PB3BillOrderListReq *message) {
  GPBDescriptor *descriptor = [PB3BillOrderListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderListReq_FieldNumber_TimeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderListReq_TimeType_RawValue(PB3BillOrderListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderListReq_FieldNumber_TimeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderListRes

@implementation PB3BillOrderListRes

@dynamic listArray, listArray_Count;
@dynamic countNum;
@dynamic countTick;
@dynamic processingNum;

typedef struct PB3BillOrderListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t countNum;
  int32_t countTick;
  int32_t processingNum;
  NSMutableArray *listArray;
} PB3BillOrderListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillOrder),
        .number = PB3BillOrderListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrderListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "countNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderListRes_FieldNumber_CountNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderListRes__storage_, countNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "countTick",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderListRes_FieldNumber_CountTick,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderListRes__storage_, countTick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "processingNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderListRes_FieldNumber_ProcessingNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillOrderListRes__storage_, processingNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderListRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillConfReq

@implementation PB3BillConfReq


typedef struct PB3BillConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BillConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillConfReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillConfRes

@implementation PB3BillConfRes

@dynamic skills, skills_Count;
@dynamic levels, levels_Count;
@dynamic maxSkillNum;
@dynamic maxSummaryNum;
@dynamic bannerModId;
@dynamic skillCertify;
@dynamic skillBindPhone;
@dynamic evaluateWordNum;
@dynamic isMinors;

typedef struct PB3BillConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t maxSkillNum;
  int32_t maxSummaryNum;
  int32_t bannerModId;
  int32_t evaluateWordNum;
  GPBInt32ObjectDictionary *skills;
  GPBInt32ObjectDictionary *levels;
} PB3BillConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skills",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillConf),
        .number = PB3BillConfRes_FieldNumber_Skills,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillConfRes__storage_, skills),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "levels",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillLevelConf),
        .number = PB3BillConfRes_FieldNumber_Levels,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillConfRes__storage_, levels),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxSkillNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillConfRes_FieldNumber_MaxSkillNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillConfRes__storage_, maxSkillNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxSummaryNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillConfRes_FieldNumber_MaxSummaryNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillConfRes__storage_, maxSummaryNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bannerModId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillConfRes_FieldNumber_BannerModId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillConfRes__storage_, bannerModId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillCertify",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillConfRes_FieldNumber_SkillCertify,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "skillBindPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillConfRes_FieldNumber_SkillBindPhone,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "evaluateWordNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillConfRes_FieldNumber_EvaluateWordNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillConfRes__storage_, evaluateWordNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isMinors",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillConfRes_FieldNumber_IsMinors,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillConfRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillPlayer

@implementation PB3BillPlayer

@dynamic playerId;
@dynamic name;
@dynamic sex;
@dynamic level;
@dynamic orderNum;
@dynamic voice;
@dynamic skillsArray, skillsArray_Count;
@dynamic picsArray, picsArray_Count;
@dynamic roomId;
@dynamic signature;
@dynamic status;
@dynamic icon;
@dynamic clanId;
@dynamic clanName;
@dynamic clanIconWord;
@dynamic clanLevel;
@dynamic isOnline;
@dynamic voiceSec;
@dynamic acceptNew;
@dynamic newPriceType;
@dynamic billSkillsArray, billSkillsArray_Count;
@dynamic receiveSendOrderMsg;
@dynamic roomName;
@dynamic roomIcon;
@dynamic skillInfosArray, skillInfosArray_Count;
@dynamic inService;
@dynamic iconType;
@dynamic isMinors;

typedef struct PB3BillPlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  int32_t level;
  int32_t orderNum;
  PB3BillPlayerStatus status;
  int32_t voiceSec;
  PB3BillNewPriceType newPriceType;
  PB3ClanIconType iconType;
  NSString *name;
  NSString *voice;
  GPBInt32Array *skillsArray;
  NSMutableArray *picsArray;
  NSString *signature;
  NSString *icon;
  NSString *clanName;
  NSString *clanIconWord;
  NSMutableArray *billSkillsArray;
  NSString *roomName;
  NSString *roomIcon;
  NSMutableArray *skillInfosArray;
  int64_t playerId;
  int64_t roomId;
  int64_t clanId;
  int64_t clanLevel;
} PB3BillPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_Level,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_OrderNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_Voice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skillsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_SkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, skillsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "picsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_PicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, picsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_Signature,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillPlayerStatus_EnumDescriptor,
        .number = PB3BillPlayer_FieldNumber_Status,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_Icon,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_ClanId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, clanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clanName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_ClanName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, clanName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isOnline",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_IsOnline,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "voiceSec",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_VoiceSec,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, voiceSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "clanLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_ClanLevel,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, clanLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clanIconWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_ClanIconWord,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, clanIconWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "acceptNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_AcceptNew,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "newPriceType",
        .dataTypeSpecific.enumDescFunc = PB3BillNewPriceType_EnumDescriptor,
        .number = PB3BillPlayer_FieldNumber_NewPriceType,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, newPriceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "billSkillsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkill),
        .number = PB3BillPlayer_FieldNumber_BillSkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, billSkillsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiveSendOrderMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_ReceiveSendOrderMsg,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_RoomName,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_RoomIcon,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, roomIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skillInfosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillInfo),
        .number = PB3BillPlayer_FieldNumber_SkillInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, skillInfosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inService",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_InService,
        .hasIndex = 24,
        .offset = 25,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "iconType",
        .dataTypeSpecific.enumDescFunc = PB3ClanIconType_EnumDescriptor,
        .number = PB3BillPlayer_FieldNumber_IconType,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3BillPlayer__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isMinors",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayer_FieldNumber_IsMinors,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPlayer class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillPlayer_Status_RawValue(PB3BillPlayer *message) {
  GPBDescriptor *descriptor = [PB3BillPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayer_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillPlayer_Status_RawValue(PB3BillPlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayer_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillPlayer_NewPriceType_RawValue(PB3BillPlayer *message) {
  GPBDescriptor *descriptor = [PB3BillPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayer_FieldNumber_NewPriceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillPlayer_NewPriceType_RawValue(PB3BillPlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayer_FieldNumber_NewPriceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillPlayer_IconType_RawValue(PB3BillPlayer *message) {
  GPBDescriptor *descriptor = [PB3BillPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayer_FieldNumber_IconType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillPlayer_IconType_RawValue(PB3BillPlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayer_FieldNumber_IconType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillPlayerCheck

@implementation PB3BillPlayerCheck

@dynamic status;
@dynamic signature;
@dynamic picsArray, picsArray_Count;
@dynamic voice;
@dynamic voiceSec;

typedef struct PB3BillPlayerCheck__storage_ {
  uint32_t _has_storage_[1];
  PB3BillPlayerCheckStatus status;
  int32_t voiceSec;
  NSString *signature;
  NSMutableArray *picsArray;
  NSString *voice;
} PB3BillPlayerCheck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillPlayerCheckStatus_EnumDescriptor,
        .number = PB3BillPlayerCheck_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPlayerCheck__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCheck_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillPlayerCheck__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCheck_FieldNumber_PicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayerCheck__storage_, picsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCheck_FieldNumber_Voice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillPlayerCheck__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceSec",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCheck_FieldNumber_VoiceSec,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillPlayerCheck__storage_, voiceSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPlayerCheck class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPlayerCheck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillPlayerCheck_Status_RawValue(PB3BillPlayerCheck *message) {
  GPBDescriptor *descriptor = [PB3BillPlayerCheck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerCheck_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillPlayerCheck_Status_RawValue(PB3BillPlayerCheck *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillPlayerCheck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerCheck_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillPlayerCard

@implementation PB3BillPlayerCard

@dynamic level;
@dynamic skillsArray, skillsArray_Count;
@dynamic status;
@dynamic checkStatus;
@dynamic billSkillsArray, billSkillsArray_Count;
@dynamic skillIdsArray, skillIdsArray_Count;
@dynamic tick;
@dynamic isMaster;
@dynamic isRedPoint;
@dynamic isShowItem;

typedef struct PB3BillPlayerCard__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  PB3BillPlayerStatus status;
  PB3BillPlayerCheckStatus checkStatus;
  GPBInt32Array *skillsArray;
  NSMutableArray *billSkillsArray;
  GPBInt32Array *skillIdsArray;
  int64_t tick;
} PB3BillPlayerCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCard_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPlayerCard__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCard_FieldNumber_SkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayerCard__storage_, skillsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillPlayerStatus_EnumDescriptor,
        .number = PB3BillPlayerCard_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillPlayerCard__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "checkStatus",
        .dataTypeSpecific.enumDescFunc = PB3BillPlayerCheckStatus_EnumDescriptor,
        .number = PB3BillPlayerCard_FieldNumber_CheckStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillPlayerCard__storage_, checkStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "billSkillsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkill),
        .number = PB3BillPlayerCard_FieldNumber_BillSkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayerCard__storage_, billSkillsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "skillIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCard_FieldNumber_SkillIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayerCard__storage_, skillIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tick",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCard_FieldNumber_Tick,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillPlayerCard__storage_, tick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isMaster",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCard_FieldNumber_IsMaster,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isRedPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCard_FieldNumber_IsRedPoint,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShowItem",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerCard_FieldNumber_IsShowItem,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPlayerCard class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPlayerCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillPlayerCard_Status_RawValue(PB3BillPlayerCard *message) {
  GPBDescriptor *descriptor = [PB3BillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerCard_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillPlayerCard_Status_RawValue(PB3BillPlayerCard *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerCard_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillPlayerCard_CheckStatus_RawValue(PB3BillPlayerCard *message) {
  GPBDescriptor *descriptor = [PB3BillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerCard_FieldNumber_CheckStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillPlayerCard_CheckStatus_RawValue(PB3BillPlayerCard *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillPlayerCard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerCard_FieldNumber_CheckStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderSetReq

@implementation PB3BillOrderSetReq

@dynamic skillsArray, skillsArray_Count;
@dynamic signature;
@dynamic picsArray, picsArray_Count;
@dynamic voice;
@dynamic voiceSec;
@dynamic billSkillsArray, billSkillsArray_Count;

typedef struct PB3BillOrderSetReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t voiceSec;
  GPBInt32Array *skillsArray;
  NSString *signature;
  NSMutableArray *picsArray;
  NSString *voice;
  NSMutableArray *billSkillsArray;
} PB3BillOrderSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderSetReq_FieldNumber_SkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrderSetReq__storage_, skillsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderSetReq_FieldNumber_Signature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderSetReq__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderSetReq_FieldNumber_PicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrderSetReq__storage_, picsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderSetReq_FieldNumber_Voice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderSetReq__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceSec",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderSetReq_FieldNumber_VoiceSec,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillOrderSetReq__storage_, voiceSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billSkillsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkill),
        .number = PB3BillOrderSetReq_FieldNumber_BillSkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrderSetReq__storage_, billSkillsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderSetReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderSetRes

@implementation PB3BillOrderSetRes

@dynamic hasPlayer, player;
@dynamic hasCheck, check;

typedef struct PB3BillOrderSetRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillPlayer *player;
  PB3BillPlayerCheck *check;
} PB3BillOrderSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayer),
        .number = PB3BillOrderSetRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderSetRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "check",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayerCheck),
        .number = PB3BillOrderSetRes_FieldNumber_Check,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderSetRes__storage_, check),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderSetRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBillPlayerReq

@implementation PB3GetBillPlayerReq

@dynamic playerId;
@dynamic isBill;
@dynamic isMustReturn;
@dynamic allCheckedSkill;

typedef struct PB3GetBillPlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GetBillPlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBillPlayerReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBillPlayerReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isBill",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBillPlayerReq_FieldNumber_IsBill,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isMustReturn",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBillPlayerReq_FieldNumber_IsMustReturn,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "allCheckedSkill",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBillPlayerReq_FieldNumber_AllCheckedSkill,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBillPlayerReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBillPlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBillPlayerRes

@implementation PB3GetBillPlayerRes

@dynamic hasPlayer, player;
@dynamic hasCheck, check;
@dynamic skillCheckListArray, skillCheckListArray_Count;

typedef struct PB3GetBillPlayerRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillPlayer *player;
  PB3BillPlayerCheck *check;
  NSMutableArray *skillCheckListArray;
} PB3GetBillPlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayer),
        .number = PB3GetBillPlayerRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBillPlayerRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "check",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayerCheck),
        .number = PB3GetBillPlayerRes_FieldNumber_Check,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetBillPlayerRes__storage_, check),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "skillCheckListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillCheck),
        .number = PB3GetBillPlayerRes_FieldNumber_SkillCheckListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetBillPlayerRes__storage_, skillCheckListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBillPlayerRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBillPlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderStatusSetReq

@implementation PB3BillOrderStatusSetReq

@dynamic status;

typedef struct PB3BillOrderStatusSetReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillPlayerStatus status;
} PB3BillOrderStatusSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillPlayerStatus_EnumDescriptor,
        .number = PB3BillOrderStatusSetReq_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderStatusSetReq__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderStatusSetReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderStatusSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillOrderStatusSetReq_Status_RawValue(PB3BillOrderStatusSetReq *message) {
  GPBDescriptor *descriptor = [PB3BillOrderStatusSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderStatusSetReq_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillOrderStatusSetReq_Status_RawValue(PB3BillOrderStatusSetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillOrderStatusSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillOrderStatusSetReq_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillOrderStatusSetRes

@implementation PB3BillOrderStatusSetRes


typedef struct PB3BillOrderStatusSetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillOrderStatusSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderStatusSetRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillOrderStatusSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderSkillsSetReq

@implementation PB3BillOrderSkillsSetReq

@dynamic skillsArray, skillsArray_Count;

typedef struct PB3BillOrderSkillsSetReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *skillsArray;
} PB3BillOrderSkillsSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderSkillsSetReq_FieldNumber_SkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrderSkillsSetReq__storage_, skillsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderSkillsSetReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderSkillsSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderSkillsSetRes

@implementation PB3BillOrderSkillsSetRes


typedef struct PB3BillOrderSkillsSetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillOrderSkillsSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderSkillsSetRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillOrderSkillsSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderSkillsSetSepReq

@implementation PB3BillOrderSkillsSetSepReq

@dynamic billSkillsArray, billSkillsArray_Count;

typedef struct PB3BillOrderSkillsSetSepReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *billSkillsArray;
} PB3BillOrderSkillsSetSepReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "billSkillsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkill),
        .number = PB3BillOrderSkillsSetSepReq_FieldNumber_BillSkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrderSkillsSetSepReq__storage_, billSkillsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderSkillsSetSepReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderSkillsSetSepReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderSkillsSetSepRes

@implementation PB3BillOrderSkillsSetSepRes


typedef struct PB3BillOrderSkillsSetSepRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillOrderSkillsSetSepRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderSkillsSetSepRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillOrderSkillsSetSepRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderButton

@implementation PB3OrderButton

@dynamic isPressed;
@dynamic text;
@dynamic callbackData;
@dynamic type;
@dynamic routerURL;
@dynamic styleType;
@dynamic isSecondPopup;
@dynamic secondPopupMsg;
@dynamic endTime;

typedef struct PB3OrderButton__storage_ {
  uint32_t _has_storage_[1];
  PB3OrderButtonType type;
  PB3OrderButtonStyle styleType;
  NSString *text;
  NSData *callbackData;
  NSString *routerURL;
  NSString *secondPopupMsg;
  int64_t endTime;
} PB3OrderButton__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isPressed",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderButton_FieldNumber_IsPressed,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderButton_FieldNumber_Text,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderButton__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callbackData",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderButton_FieldNumber_CallbackData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderButton__storage_, callbackData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3OrderButtonType_EnumDescriptor,
        .number = PB3OrderButton_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OrderButton__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderButton_FieldNumber_RouterURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3OrderButton__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "styleType",
        .dataTypeSpecific.enumDescFunc = PB3OrderButtonStyle_EnumDescriptor,
        .number = PB3OrderButton_FieldNumber_StyleType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3OrderButton__storage_, styleType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isSecondPopup",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderButton_FieldNumber_IsSecondPopup,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "secondPopupMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderButton_FieldNumber_SecondPopupMsg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3OrderButton__storage_, secondPopupMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderButton_FieldNumber_EndTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3OrderButton__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderButton class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderButton__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderButton_Type_RawValue(PB3OrderButton *message) {
  GPBDescriptor *descriptor = [PB3OrderButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderButton_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderButton_Type_RawValue(PB3OrderButton *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderButton_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3OrderButton_StyleType_RawValue(PB3OrderButton *message) {
  GPBDescriptor *descriptor = [PB3OrderButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderButton_FieldNumber_StyleType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderButton_StyleType_RawValue(PB3OrderButton *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderButton_FieldNumber_StyleType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderMsg

@implementation PB3OrderMsg

@dynamic title;
@dynamic msg;
@dynamic generationType;
@dynamic generationData;
@dynamic orderTime;
@dynamic buttonsArray, buttonsArray_Count;
@dynamic type;
@dynamic isPopup;

typedef struct PB3OrderMsg__storage_ {
  uint32_t _has_storage_[1];
  PB3GenrationOrderMsgType generationType;
  PB3OrderMsgStyleType type;
  NSString *title;
  NSString *msg;
  NSData *generationData;
  NSMutableArray *buttonsArray;
  int64_t orderTime;
} PB3OrderMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderMsg_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderMsg__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "generationType",
        .dataTypeSpecific.enumDescFunc = PB3GenrationOrderMsgType_EnumDescriptor,
        .number = PB3OrderMsg_FieldNumber_GenerationType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderMsg__storage_, generationType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "generationData",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderMsg_FieldNumber_GenerationData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderMsg__storage_, generationData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "orderTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderMsg_FieldNumber_OrderTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OrderMsg__storage_, orderTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderButton),
        .number = PB3OrderMsg_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderMsg__storage_, buttonsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3OrderMsgStyleType_EnumDescriptor,
        .number = PB3OrderMsg_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3OrderMsg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isPopup",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderMsg_FieldNumber_IsPopup,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderMsg class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderMsg_GenerationType_RawValue(PB3OrderMsg *message) {
  GPBDescriptor *descriptor = [PB3OrderMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderMsg_FieldNumber_GenerationType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderMsg_GenerationType_RawValue(PB3OrderMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderMsg_FieldNumber_GenerationType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3OrderMsg_Type_RawValue(PB3OrderMsg *message) {
  GPBDescriptor *descriptor = [PB3OrderMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderMsg_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderMsg_Type_RawValue(PB3OrderMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderMsg_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillDelFileReq

@implementation PB3BillDelFileReq

@dynamic id_p;
@dynamic fileType;

typedef struct PB3BillDelFileReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillFileType fileType;
  int64_t id_p;
} PB3BillDelFileReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillDelFileReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillDelFileReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileType",
        .dataTypeSpecific.enumDescFunc = PB3BillFileType_EnumDescriptor,
        .number = PB3BillDelFileReq_FieldNumber_FileType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillDelFileReq__storage_, fileType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillDelFileReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillDelFileReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillDelFileReq_FileType_RawValue(PB3BillDelFileReq *message) {
  GPBDescriptor *descriptor = [PB3BillDelFileReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillDelFileReq_FieldNumber_FileType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillDelFileReq_FileType_RawValue(PB3BillDelFileReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillDelFileReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillDelFileReq_FieldNumber_FileType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillDelFileRes

@implementation PB3BillDelFileRes


typedef struct PB3BillDelFileRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillDelFileRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillDelFileRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillDelFileRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderRedMsg

@implementation PB3BillOrderRedMsg

@dynamic unreadedNums;

typedef struct PB3BillOrderRedMsg__storage_ {
  uint32_t _has_storage_[1];
  int64_t unreadedNums;
} PB3BillOrderRedMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unreadedNums",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderRedMsg_FieldNumber_UnreadedNums,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderRedMsg__storage_, unreadedNums),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderRedMsg class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderRedMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillVoiceReq

@implementation PB3BillVoiceReq

@dynamic URL;

typedef struct PB3BillVoiceReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} PB3BillVoiceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillVoiceReq_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillVoiceReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillVoiceReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillVoiceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillVoiceRes

@implementation PB3BillVoiceRes


typedef struct PB3BillVoiceRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillVoiceRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillVoiceRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillVoiceRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillPictureReq

@implementation PB3BillPictureReq

@dynamic URL;

typedef struct PB3BillPictureReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} PB3BillPictureReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPictureReq_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPictureReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPictureReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPictureReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillPictureRes

@implementation PB3BillPictureRes


typedef struct PB3BillPictureRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillPictureRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPictureRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillPictureRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastBillCheckStatus

@implementation PB3BroadcastBillCheckStatus

@dynamic playerId;
@dynamic hasCard, card;

typedef struct PB3BroadcastBillCheckStatus__storage_ {
  uint32_t _has_storage_[1];
  PB3BillPlayerCard *card;
  int64_t playerId;
} PB3BroadcastBillCheckStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBillCheckStatus_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastBillCheckStatus__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "card",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayerCard),
        .number = PB3BroadcastBillCheckStatus_FieldNumber_Card,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastBillCheckStatus__storage_, card),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastBillCheckStatus class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastBillCheckStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillFeedbackReq

@implementation PB3BillFeedbackReq

@dynamic id_p;
@dynamic content;
@dynamic imgsURLArray, imgsURLArray_Count;

typedef struct PB3BillFeedbackReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  NSMutableArray *imgsURLArray;
  int64_t id_p;
} PB3BillFeedbackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillFeedbackReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillFeedbackReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillFeedbackReq_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillFeedbackReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgsURLArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillFeedbackReq_FieldNumber_ImgsURLArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillFeedbackReq__storage_, imgsURLArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillFeedbackReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillFeedbackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\000imgs_url\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillFeedbackRes

@implementation PB3BillFeedbackRes


typedef struct PB3BillFeedbackRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillFeedbackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillFeedbackRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillFeedbackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderAcceptNewSetReq

@implementation PB3BillOrderAcceptNewSetReq

@dynamic onOff;

typedef struct PB3BillOrderAcceptNewSetReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BillOrderAcceptNewSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderAcceptNewSetReq_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderAcceptNewSetReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderAcceptNewSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderAcceptNewSetRes

@implementation PB3BillOrderAcceptNewSetRes


typedef struct PB3BillOrderAcceptNewSetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillOrderAcceptNewSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderAcceptNewSetRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillOrderAcceptNewSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkill

@implementation PB3BillSkill

@dynamic type;
@dynamic skill;
@dynamic skillCreateAt;
@dynamic orderNum;
@dynamic introText;
@dynamic price;

typedef struct PB3BillSkill__storage_ {
  uint32_t _has_storage_[1];
  PB3BillSkillType type;
  int32_t skill;
  int32_t orderNum;
  int32_t price;
  NSString *introText;
  int64_t skillCreateAt;
} PB3BillSkill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillType_EnumDescriptor,
        .number = PB3BillSkill_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkill__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "skill",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkill_FieldNumber_Skill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkill__storage_, skill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillCreateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkill_FieldNumber_SkillCreateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSkill__storage_, skillCreateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkill_FieldNumber_OrderNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSkill__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "introText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkill_FieldNumber_IntroText,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillSkill__storage_, introText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkill_FieldNumber_Price,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillSkill__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkill class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkill_Type_RawValue(PB3BillSkill *message) {
  GPBDescriptor *descriptor = [PB3BillSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkill_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkill_Type_RawValue(PB3BillSkill *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkill_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillInfo

@implementation PB3BillSkillInfo

@dynamic skillId;
@dynamic levelId;
@dynamic orderNum;
@dynamic priceType;
@dynamic status;
@dynamic sort;
@dynamic hasEvaluation, evaluation;
@dynamic newPlayerBill;

typedef struct PB3BillSkillInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int32_t levelId;
  int32_t orderNum;
  PB3BillSkillPriceType priceType;
  PB3BillPlayerSkillStatus status;
  int32_t sort;
  PB3NewPlayerBillStatus newPlayerBill;
  PB3SkillEvaluated *evaluation;
} PB3BillSkillInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillInfo_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillInfo_FieldNumber_LevelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, levelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillInfo_FieldNumber_OrderNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "priceType",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillPriceType_EnumDescriptor,
        .number = PB3BillSkillInfo_FieldNumber_PriceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, priceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillPlayerSkillStatus_EnumDescriptor,
        .number = PB3BillSkillInfo_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillInfo_FieldNumber_Sort,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "evaluation",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SkillEvaluated),
        .number = PB3BillSkillInfo_FieldNumber_Evaluation,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, evaluation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newPlayerBill",
        .dataTypeSpecific.enumDescFunc = PB3NewPlayerBillStatus_EnumDescriptor,
        .number = PB3BillSkillInfo_FieldNumber_NewPlayerBill,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillSkillInfo__storage_, newPlayerBill),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillInfo class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkillInfo_PriceType_RawValue(PB3BillSkillInfo *message) {
  GPBDescriptor *descriptor = [PB3BillSkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillInfo_FieldNumber_PriceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillInfo_PriceType_RawValue(PB3BillSkillInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillInfo_FieldNumber_PriceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillSkillInfo_Status_RawValue(PB3BillSkillInfo *message) {
  GPBDescriptor *descriptor = [PB3BillSkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillInfo_Status_RawValue(PB3BillSkillInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillSkillInfo_NewPlayerBill_RawValue(PB3BillSkillInfo *message) {
  GPBDescriptor *descriptor = [PB3BillSkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillInfo_FieldNumber_NewPlayerBill];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillInfo_NewPlayerBill_RawValue(PB3BillSkillInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillInfo_FieldNumber_NewPlayerBill];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillBoss

@implementation PB3BillBoss

@dynamic playerId;
@dynamic orderNum;
@dynamic orderNumNew;
@dynamic goldTotal;

typedef struct PB3BillBoss__storage_ {
  uint32_t _has_storage_[1];
  int32_t orderNum;
  int32_t orderNumNew;
  uint32_t goldTotal;
  int64_t playerId;
} PB3BillBoss__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillBoss_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillBoss__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillBoss_FieldNumber_OrderNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillBoss__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNumNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillBoss_FieldNumber_OrderNumNew,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillBoss__storage_, orderNumNew),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goldTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillBoss_FieldNumber_GoldTotal,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillBoss__storage_, goldTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillBoss class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillBoss__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBillBossReq

@implementation PB3GetBillBossReq

@dynamic playerId;

typedef struct PB3GetBillBossReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GetBillBossReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBillBossReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBillBossReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBillBossReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBillBossReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBillBossRes

@implementation PB3GetBillBossRes

@dynamic hasBoss, boss;

typedef struct PB3GetBillBossRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillBoss *boss;
} PB3GetBillBossRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boss",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillBoss),
        .number = PB3GetBillBossRes_FieldNumber_Boss,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBillBossRes__storage_, boss),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBillBossRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBillBossRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkillNewPrice

@implementation PB3BillSkillNewPrice

@dynamic type;
@dynamic giftIdNew;
@dynamic giftNumNew;

typedef struct PB3BillSkillNewPrice__storage_ {
  uint32_t _has_storage_[1];
  PB3BillNewPriceType type;
  int32_t giftIdNew;
  int32_t giftNumNew;
} PB3BillSkillNewPrice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillNewPriceType_EnumDescriptor,
        .number = PB3BillSkillNewPrice_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillNewPrice__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "giftIdNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillNewPrice_FieldNumber_GiftIdNew,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillNewPrice__storage_, giftIdNew),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNumNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillNewPrice_FieldNumber_GiftNumNew,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSkillNewPrice__storage_, giftNumNew),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillNewPrice class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillNewPrice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkillNewPrice_Type_RawValue(PB3BillSkillNewPrice *message) {
  GPBDescriptor *descriptor = [PB3BillSkillNewPrice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillNewPrice_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillNewPrice_Type_RawValue(PB3BillSkillNewPrice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillNewPrice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillNewPrice_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSendOptReq

@implementation PB3BillSendOptReq

@dynamic optType;
@dynamic bossId;
@dynamic skillId;
@dynamic sex;
@dynamic minLevel;
@dynamic orderNum;
@dynamic anchorCondition;
@dynamic sendOrderId;

typedef struct PB3BillSendOptReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SendOrderType optType;
  int32_t skillId;
  int32_t sex;
  int32_t minLevel;
  int32_t orderNum;
  NSString *anchorCondition;
  NSString *sendOrderId;
  int64_t bossId;
} PB3BillSendOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3SendOrderType_EnumDescriptor,
        .number = PB3BillSendOptReq_FieldNumber_OptType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptReq_FieldNumber_BossId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptReq_FieldNumber_SkillId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptReq_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptReq_FieldNumber_MinLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, minLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptReq_FieldNumber_OrderNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "anchorCondition",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptReq_FieldNumber_AnchorCondition,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, anchorCondition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptReq_FieldNumber_SendOrderId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillSendOptReq__storage_, sendOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSendOptReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSendOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSendOptReq_OptType_RawValue(PB3BillSendOptReq *message) {
  GPBDescriptor *descriptor = [PB3BillSendOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSendOptReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSendOptReq_OptType_RawValue(PB3BillSendOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSendOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSendOptReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSendOptRes

@implementation PB3BillSendOptRes

@dynamic bossId;
@dynamic bossId2;
@dynamic bossName;
@dynamic skillId;
@dynamic sex;
@dynamic minLevel;
@dynamic orderNum;
@dynamic anchorCondition;
@dynamic sendOrderId;
@dynamic sendOrderTime;
@dynamic sendTime;

typedef struct PB3BillSendOptRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int32_t sex;
  int32_t minLevel;
  int32_t orderNum;
  int32_t sendTime;
  NSString *bossName;
  NSString *anchorCondition;
  NSString *sendOrderId;
  int64_t bossId;
  int64_t bossId2;
  int64_t sendOrderTime;
} PB3BillSendOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_BossId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bossId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_BossId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, bossId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bossName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_BossName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, bossName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_SkillId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_MinLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, minLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_OrderNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "anchorCondition",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_AnchorCondition,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, anchorCondition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_SendOrderId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, sendOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendOrderTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_SendOrderTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, sendOrderTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSendOptRes_FieldNumber_SendTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BillSendOptRes__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSendOptRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSendOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendOrderReceiveMsgSetReq

@implementation PB3SendOrderReceiveMsgSetReq

@dynamic onOff;

typedef struct PB3SendOrderReceiveMsgSetReq__storage_ {
  uint32_t _has_storage_[1];
} PB3SendOrderReceiveMsgSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendOrderReceiveMsgSetReq_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendOrderReceiveMsgSetReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendOrderReceiveMsgSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendOrderReceiveMsgSetRes

@implementation PB3SendOrderReceiveMsgSetRes


typedef struct PB3SendOrderReceiveMsgSetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendOrderReceiveMsgSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendOrderReceiveMsgSetRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendOrderReceiveMsgSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelDisBillReq

@implementation PB3DelDisBillReq

@dynamic sendOrderId;

typedef struct PB3DelDisBillReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *sendOrderId;
} PB3DelDisBillReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelDisBillReq_FieldNumber_SendOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DelDisBillReq__storage_, sendOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelDisBillReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelDisBillReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelDisBillRes

@implementation PB3DelDisBillRes

@dynamic code;

typedef struct PB3DelDisBillRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
} PB3DelDisBillRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelDisBillRes_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DelDisBillRes__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelDisBillRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelDisBillRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DisBillInfo

@implementation PB3DisBillInfo

@dynamic sendOrderId;
@dynamic sendOrderTime;
@dynamic hostName;
@dynamic hostIcon;
@dynamic hostId;
@dynamic hostId2;
@dynamic roomId;
@dynamic skillId;
@dynamic orderNum;
@dynamic anchorCondition;
@dynamic hostSex;
@dynamic roomName;
@dynamic status;
@dynamic skillName;
@dynamic skillIcon;

typedef struct PB3DisBillInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int32_t orderNum;
  int32_t hostSex;
  PB3DisBillInfoStatus status;
  NSString *sendOrderId;
  NSString *hostName;
  NSString *hostIcon;
  NSString *anchorCondition;
  NSString *roomName;
  NSString *skillName;
  NSString *skillIcon;
  int64_t sendOrderTime;
  int64_t hostId;
  int64_t hostId2;
  int64_t roomId;
} PB3DisBillInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_SendOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, sendOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendOrderTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_SendOrderTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, sendOrderTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hostName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_HostName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, hostName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_HostIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, hostIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_HostId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, hostId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hostId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_HostId2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, hostId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_SkillId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_OrderNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "anchorCondition",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_AnchorCondition,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, anchorCondition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostSex",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_HostSex,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, hostSex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_RoomName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3DisBillInfoStatus_EnumDescriptor,
        .number = PB3DisBillInfo_FieldNumber_Status,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "skillName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_SkillName,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, skillName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skillIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillInfo_FieldNumber_SkillIcon,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3DisBillInfo__storage_, skillIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DisBillInfo class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DisBillInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DisBillInfo_Status_RawValue(PB3DisBillInfo *message) {
  GPBDescriptor *descriptor = [PB3DisBillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DisBillInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DisBillInfo_Status_RawValue(PB3DisBillInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DisBillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DisBillInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DisBillListReq

@implementation PB3DisBillListReq

@dynamic query;
@dynamic page;
@dynamic pageSize;
@dynamic cleanRed;

typedef struct PB3DisBillListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t query;
  int32_t page;
  int32_t pageSize;
} PB3DisBillListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "query",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillListReq_FieldNumber_Query,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DisBillListReq__storage_, query),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillListReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DisBillListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillListReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DisBillListReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cleanRed",
        .dataTypeSpecific.className = NULL,
        .number = PB3DisBillListReq_FieldNumber_CleanRed,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DisBillListReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DisBillListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DisBillListRes

@implementation PB3DisBillListRes

@dynamic disBillArray, disBillArray_Count;

typedef struct PB3DisBillListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *disBillArray;
} PB3DisBillListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "disBillArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DisBillInfo),
        .number = PB3DisBillListRes_FieldNumber_DisBillArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DisBillListRes__storage_, disBillArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DisBillListRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DisBillListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendOrderAcceptReq

@implementation PB3SendOrderAcceptReq

@dynamic sendOrderId;

typedef struct PB3SendOrderAcceptReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *sendOrderId;
} PB3SendOrderAcceptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendOrderAcceptReq_FieldNumber_SendOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendOrderAcceptReq__storage_, sendOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendOrderAcceptReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendOrderAcceptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendOrderAcceptRes

@implementation PB3SendOrderAcceptRes


typedef struct PB3SendOrderAcceptRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendOrderAcceptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendOrderAcceptRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendOrderAcceptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendOrderMsgNumber

@implementation PB3SendOrderMsgNumber

@dynamic msgNum;
@dynamic billId;
@dynamic status;

typedef struct PB3SendOrderMsgNumber__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgNum;
  PB3SendOrderMsgNumberType status;
  NSString *billId;
} PB3SendOrderMsgNumber__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendOrderMsgNumber_FieldNumber_MsgNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendOrderMsgNumber__storage_, msgNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendOrderMsgNumber_FieldNumber_BillId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendOrderMsgNumber__storage_, billId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3SendOrderMsgNumberType_EnumDescriptor,
        .number = PB3SendOrderMsgNumber_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SendOrderMsgNumber__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendOrderMsgNumber class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendOrderMsgNumber__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SendOrderMsgNumber_Status_RawValue(PB3SendOrderMsgNumber *message) {
  GPBDescriptor *descriptor = [PB3SendOrderMsgNumber descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SendOrderMsgNumber_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SendOrderMsgNumber_Status_RawValue(PB3SendOrderMsgNumber *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SendOrderMsgNumber descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SendOrderMsgNumber_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SendOrderMsgRedNumber

@implementation PB3SendOrderMsgRedNumber

@dynamic msgNum;

typedef struct PB3SendOrderMsgRedNumber__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgNum;
} PB3SendOrderMsgRedNumber__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendOrderMsgRedNumber_FieldNumber_MsgNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendOrderMsgRedNumber__storage_, msgNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendOrderMsgRedNumber class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendOrderMsgRedNumber__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SysSendBillReq

@implementation PB3SysSendBillReq

@dynamic sendOrderId;
@dynamic roomId;
@dynamic opType;

typedef struct PB3SysSendBillReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SysSendOrderType opType;
  NSString *sendOrderId;
  int64_t roomId;
} PB3SysSendBillReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SysSendBillReq_FieldNumber_SendOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SysSendBillReq__storage_, sendOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SysSendBillReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SysSendBillReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "opType",
        .dataTypeSpecific.enumDescFunc = PB3SysSendOrderType_EnumDescriptor,
        .number = PB3SysSendBillReq_FieldNumber_OpType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SysSendBillReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SysSendBillReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SysSendBillReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SysSendBillReq_OpType_RawValue(PB3SysSendBillReq *message) {
  GPBDescriptor *descriptor = [PB3SysSendBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SysSendBillReq_FieldNumber_OpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SysSendBillReq_OpType_RawValue(PB3SysSendBillReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SysSendBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SysSendBillReq_FieldNumber_OpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SysSendBillRes

@implementation PB3SysSendBillRes


typedef struct PB3SysSendBillRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SysSendBillRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SysSendBillRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SysSendBillRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LastReadBillMsgTimeReq

@implementation PB3LastReadBillMsgTimeReq

@dynamic lastReadTime;

typedef struct PB3LastReadBillMsgTimeReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t lastReadTime;
} PB3LastReadBillMsgTimeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastReadTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LastReadBillMsgTimeReq_FieldNumber_LastReadTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LastReadBillMsgTimeReq__storage_, lastReadTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LastReadBillMsgTimeReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LastReadBillMsgTimeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LastReadBillMsgTimeRes

@implementation PB3LastReadBillMsgTimeRes


typedef struct PB3LastReadBillMsgTimeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LastReadBillMsgTimeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LastReadBillMsgTimeRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LastReadBillMsgTimeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitBillPlayerReq

@implementation PB3VisitBillPlayerReq

@dynamic playerId;

typedef struct PB3VisitBillPlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3VisitBillPlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitBillPlayerReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitBillPlayerReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitBillPlayerReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitBillPlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitBillPlayerRes

@implementation PB3VisitBillPlayerRes


typedef struct PB3VisitBillPlayerRes__storage_ {
  uint32_t _has_storage_[1];
} PB3VisitBillPlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitBillPlayerRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VisitBillPlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitLogReq

@implementation PB3VisitLogReq


typedef struct PB3VisitLogReq__storage_ {
  uint32_t _has_storage_[1];
} PB3VisitLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitLogReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VisitLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitLogRes

@implementation PB3VisitLogRes

@dynamic listArray, listArray_Count;

typedef struct PB3VisitLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3VisitLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VisitPlayerInfo),
        .number = PB3VisitLogRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VisitLogRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitLogRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitPlayerInfo

@implementation PB3VisitPlayerInfo

@dynamic id_p;
@dynamic id2;
@dynamic sex;
@dynamic name;
@dynamic charmLevel;
@dynamic wealthLevel;
@dynamic visitTime;
@dynamic visitMsg;
@dynamic isOnline;
@dynamic roomId;
@dynamic icon;

typedef struct PB3VisitPlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  int32_t charmLevel;
  int32_t wealthLevel;
  NSString *name;
  NSString *visitMsg;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
  int64_t visitTime;
  int64_t roomId;
} PB3VisitPlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_CharmLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_WealthLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "visitTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_VisitTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, visitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "visitMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_VisitMsg,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, visitMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isOnline",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_IsOnline,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_RoomId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfo_FieldNumber_Icon,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitPlayerInfo class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitPlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DispatchWindowConfReq

@implementation PB3DispatchWindowConfReq


typedef struct PB3DispatchWindowConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3DispatchWindowConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DispatchWindowConfReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DispatchWindowConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DispatchWindowConfRes

@implementation PB3DispatchWindowConfRes

@dynamic positionsArray, positionsArray_Count;
@dynamic exposureTime;

typedef struct PB3DispatchWindowConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t exposureTime;
  GPBInt32Array *positionsArray;
} PB3DispatchWindowConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "positionsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DispatchWindowConfRes_FieldNumber_PositionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DispatchWindowConfRes__storage_, positionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exposureTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3DispatchWindowConfRes_FieldNumber_ExposureTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DispatchWindowConfRes__storage_, exposureTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DispatchWindowConfRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DispatchWindowConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IfDispatchWindowReq

@implementation PB3IfDispatchWindowReq


typedef struct PB3IfDispatchWindowReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IfDispatchWindowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IfDispatchWindowReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IfDispatchWindowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IfDispatchWindowRes

@implementation PB3IfDispatchWindowRes

@dynamic nextUnix;

typedef struct PB3IfDispatchWindowRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextUnix;
} PB3IfDispatchWindowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nextUnix",
        .dataTypeSpecific.className = NULL,
        .number = PB3IfDispatchWindowRes_FieldNumber_NextUnix,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IfDispatchWindowRes__storage_, nextUnix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IfDispatchWindowRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IfDispatchWindowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DispatchWindowPush

@implementation PB3DispatchWindowPush


typedef struct PB3DispatchWindowPush__storage_ {
  uint32_t _has_storage_[1];
} PB3DispatchWindowPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DispatchWindowPush class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DispatchWindowPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DispatchWindowEnterReq

@implementation PB3DispatchWindowEnterReq

@dynamic dispatchType;

typedef struct PB3DispatchWindowEnterReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t dispatchType;
} PB3DispatchWindowEnterReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dispatchType",
        .dataTypeSpecific.className = NULL,
        .number = PB3DispatchWindowEnterReq_FieldNumber_DispatchType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DispatchWindowEnterReq__storage_, dispatchType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DispatchWindowEnterReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DispatchWindowEnterReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DispatchWindowEnterRes

@implementation PB3DispatchWindowEnterRes

@dynamic roomId;

typedef struct PB3DispatchWindowEnterRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3DispatchWindowEnterRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DispatchWindowEnterRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DispatchWindowEnterRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DispatchWindowEnterRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DispatchWindowEnterRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderMsgNotifyIntReq

@implementation PB3BillOrderMsgNotifyIntReq

@dynamic orderId;
@dynamic playerId;
@dynamic toPlayerId;

typedef struct PB3BillOrderMsgNotifyIntReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  int64_t playerId;
  int64_t toPlayerId;
} PB3BillOrderMsgNotifyIntReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderMsgNotifyIntReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderMsgNotifyIntReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderMsgNotifyIntReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillOrderMsgNotifyIntReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderMsgNotifyIntReq_FieldNumber_ToPlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillOrderMsgNotifyIntReq__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderMsgNotifyIntReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderMsgNotifyIntReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderMsgNotifyIntRes

@implementation PB3BillOrderMsgNotifyIntRes


typedef struct PB3BillOrderMsgNotifyIntRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillOrderMsgNotifyIntRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderMsgNotifyIntRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillOrderMsgNotifyIntRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillInfoReq

@implementation PB3BillInfoReq

@dynamic orderId;

typedef struct PB3BillInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} PB3BillInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfoReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillInfoReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillInfoReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillInfoRes

@implementation PB3BillInfoRes

@dynamic hasOrder, order;

typedef struct PB3BillInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillOrder *order;
} PB3BillInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillOrder),
        .number = PB3BillInfoRes_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillInfoRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillInfoRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillClanComplaintReq

@implementation PB3BillClanComplaintReq

@dynamic orderId;
@dynamic servantId;

typedef struct PB3BillClanComplaintReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  int64_t servantId;
} PB3BillClanComplaintReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanComplaintReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillClanComplaintReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "servantId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanComplaintReq_FieldNumber_ServantId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillClanComplaintReq__storage_, servantId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillClanComplaintReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillClanComplaintReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillClanComplaintRes

@implementation PB3BillClanComplaintRes

@dynamic isChat;
@dynamic id_p;
@dynamic name;
@dynamic icon;

typedef struct PB3BillClanComplaintRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *icon;
  int64_t id_p;
} PB3BillClanComplaintRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isChat",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanComplaintRes_FieldNumber_IsChat,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanComplaintRes_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillClanComplaintRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanComplaintRes_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillClanComplaintRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanComplaintRes_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillClanComplaintRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillClanComplaintRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillClanComplaintRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkillCheck

@implementation PB3BillSkillCheck

@dynamic skillId;
@dynamic status;

typedef struct PB3BillSkillCheck__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  PB3BillSkillCheckStatus status;
} PB3BillSkillCheck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheck_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillCheck__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillCheckStatus_EnumDescriptor,
        .number = PB3BillSkillCheck_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillCheck__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillCheck class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillCheck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkillCheck_Status_RawValue(PB3BillSkillCheck *message) {
  GPBDescriptor *descriptor = [PB3BillSkillCheck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillCheck_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillCheck_Status_RawValue(PB3BillSkillCheck *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillCheck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillCheck_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillSetItem

@implementation PB3BillSkillSetItem

@dynamic option;
@dynamic value;

typedef struct PB3BillSkillSetItem__storage_ {
  uint32_t _has_storage_[1];
  PB3BillSkillSetOption option;
  int32_t value;
} PB3BillSkillSetItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "option",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillSetOption_EnumDescriptor,
        .number = PB3BillSkillSetItem_FieldNumber_Option,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillSetItem__storage_, option),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillSetItem_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillSetItem__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillSetItem class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillSetItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkillSetItem_Option_RawValue(PB3BillSkillSetItem *message) {
  GPBDescriptor *descriptor = [PB3BillSkillSetItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillSetItem_FieldNumber_Option];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillSetItem_Option_RawValue(PB3BillSkillSetItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillSetItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillSetItem_FieldNumber_Option];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillOptionSetReq

@implementation PB3BillSkillOptionSetReq

@dynamic skillId;
@dynamic hasItem, item;

typedef struct PB3BillSkillOptionSetReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  PB3BillSkillSetItem *item;
} PB3BillSkillOptionSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillOptionSetReq_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillOptionSetReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "item",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillSetItem),
        .number = PB3BillSkillOptionSetReq_FieldNumber_Item,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillOptionSetReq__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillOptionSetReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillOptionSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkillOptionSetRes

@implementation PB3BillSkillOptionSetRes


typedef struct PB3BillSkillOptionSetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillSkillOptionSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillOptionSetRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillSkillOptionSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SkillCheckSegmentStatus

@implementation PB3SkillCheckSegmentStatus

@dynamic segment;
@dynamic status;
@dynamic checkTips;
@dynamic checkAt;

typedef struct PB3SkillCheckSegmentStatus__storage_ {
  uint32_t _has_storage_[1];
  PB3BillSkillCheckSegment segment;
  PB3BillSkillCheckStatus status;
  NSString *checkTips;
  int64_t checkAt;
} PB3SkillCheckSegmentStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "segment",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillCheckSegment_EnumDescriptor,
        .number = PB3SkillCheckSegmentStatus_FieldNumber_Segment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillCheckSegmentStatus__storage_, segment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillCheckStatus_EnumDescriptor,
        .number = PB3SkillCheckSegmentStatus_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SkillCheckSegmentStatus__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "checkTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillCheckSegmentStatus_FieldNumber_CheckTips,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SkillCheckSegmentStatus__storage_, checkTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "checkAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillCheckSegmentStatus_FieldNumber_CheckAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SkillCheckSegmentStatus__storage_, checkAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillCheckSegmentStatus class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillCheckSegmentStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SkillCheckSegmentStatus_Segment_RawValue(PB3SkillCheckSegmentStatus *message) {
  GPBDescriptor *descriptor = [PB3SkillCheckSegmentStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SkillCheckSegmentStatus_FieldNumber_Segment];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SkillCheckSegmentStatus_Segment_RawValue(PB3SkillCheckSegmentStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SkillCheckSegmentStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SkillCheckSegmentStatus_FieldNumber_Segment];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SkillCheckSegmentStatus_Status_RawValue(PB3SkillCheckSegmentStatus *message) {
  GPBDescriptor *descriptor = [PB3SkillCheckSegmentStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SkillCheckSegmentStatus_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SkillCheckSegmentStatus_Status_RawValue(PB3SkillCheckSegmentStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SkillCheckSegmentStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SkillCheckSegmentStatus_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillCheckReq

@implementation PB3BillSkillCheckReq

@dynamic skillId;
@dynamic segment;
@dynamic iconURL;
@dynamic levelId;
@dynamic levelPicURL;
@dynamic introText;
@dynamic introVoiceURL;
@dynamic introVoiceSec;
@dynamic homepagePicURL;
@dynamic abilityPicUrlsArray, abilityPicUrlsArray_Count;

typedef struct PB3BillSkillCheckReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  PB3BillSkillCheckSegment segment;
  int32_t levelId;
  int32_t introVoiceSec;
  NSString *iconURL;
  NSString *levelPicURL;
  NSString *introText;
  NSString *introVoiceURL;
  NSString *homepagePicURL;
  NSMutableArray *abilityPicUrlsArray;
} PB3BillSkillCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "segment",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillCheckSegment_EnumDescriptor,
        .number = PB3BillSkillCheckReq_FieldNumber_Segment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, segment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_IconURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_LevelId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, levelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelPicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_LevelPicURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, levelPicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_IntroText,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, introText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introVoiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_IntroVoiceURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, introVoiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introVoiceSec",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_IntroVoiceSec,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, introVoiceSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "homepagePicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_HomepagePicURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, homepagePicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "abilityPicUrlsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillCheckReq_FieldNumber_AbilityPicUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillSkillCheckReq__storage_, abilityPicUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillCheckReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillCheckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\004\241!!\000\005\005\243\241!!\000\007\005\245\241!!\000\t\010\243\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkillCheckReq_Segment_RawValue(PB3BillSkillCheckReq *message) {
  GPBDescriptor *descriptor = [PB3BillSkillCheckReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillCheckReq_FieldNumber_Segment];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillCheckReq_Segment_RawValue(PB3BillSkillCheckReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillCheckReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillCheckReq_FieldNumber_Segment];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillCheckRes

@implementation PB3BillSkillCheckRes


typedef struct PB3BillSkillCheckRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillSkillCheckRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillCheckRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillSkillCheckRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillPlayerSkillReq

@implementation PB3BillPlayerSkillReq

@dynamic playerId;
@dynamic skillId;

typedef struct PB3BillPlayerSkillReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int64_t playerId;
} PB3BillPlayerSkillReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillReq_FieldNumber_SkillId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPlayerSkillReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPlayerSkillReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillPlayerSkillRes

@implementation PB3BillPlayerSkillRes

@dynamic hasSkill, skill;
@dynamic hasSkillCheck, skillCheck;

typedef struct PB3BillPlayerSkillRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillPlayerSkill *skill;
  PB3BillPlayerSkillCheck *skillCheck;
} PB3BillPlayerSkillRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skill",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayerSkill),
        .number = PB3BillPlayerSkillRes_FieldNumber_Skill,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillRes__storage_, skill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "skillCheck",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayerSkillCheck),
        .number = PB3BillPlayerSkillRes_FieldNumber_SkillCheck,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillRes__storage_, skillCheck),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPlayerSkillRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPlayerSkillRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillPlayerSkill

@implementation PB3BillPlayerSkill

@dynamic levelId;
@dynamic introText;
@dynamic introVoiceURL;
@dynamic introVoiceSec;
@dynamic homepagePicURL;
@dynamic abilityPicUrlsArray, abilityPicUrlsArray_Count;
@dynamic orderNum;

typedef struct PB3BillPlayerSkill__storage_ {
  uint32_t _has_storage_[1];
  int32_t levelId;
  int32_t introVoiceSec;
  int32_t orderNum;
  NSString *introText;
  NSString *introVoiceURL;
  NSString *homepagePicURL;
  NSMutableArray *abilityPicUrlsArray;
} PB3BillPlayerSkill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "levelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkill_FieldNumber_LevelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkill__storage_, levelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "introText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkill_FieldNumber_IntroText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkill__storage_, introText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introVoiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkill_FieldNumber_IntroVoiceURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkill__storage_, introVoiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introVoiceSec",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkill_FieldNumber_IntroVoiceSec,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkill__storage_, introVoiceSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "homepagePicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkill_FieldNumber_HomepagePicURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkill__storage_, homepagePicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "abilityPicUrlsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkill_FieldNumber_AbilityPicUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkill__storage_, abilityPicUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkill_FieldNumber_OrderNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkill__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPlayerSkill class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPlayerSkill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\005\245\241!!\000\005\010\243\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillPlayerSkillCheck

@implementation PB3BillPlayerSkillCheck

@dynamic levelId;
@dynamic levelPicURL;
@dynamic introText;
@dynamic introVoiceURL;
@dynamic introVoiceSec;
@dynamic homepagePicURL;
@dynamic abilityPicUrlsArray, abilityPicUrlsArray_Count;
@dynamic statusListArray, statusListArray_Count;
@dynamic status;
@dynamic newPlayerBillVisible;
@dynamic newPlayerBill;
@dynamic iconURL;

typedef struct PB3BillPlayerSkillCheck__storage_ {
  uint32_t _has_storage_[1];
  int32_t levelId;
  int32_t introVoiceSec;
  PB3BillPlayerSkillStatus status;
  NSString *levelPicURL;
  NSString *introText;
  NSString *introVoiceURL;
  NSString *homepagePicURL;
  NSMutableArray *abilityPicUrlsArray;
  NSMutableArray *statusListArray;
  NSString *iconURL;
} PB3BillPlayerSkillCheck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "levelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_LevelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, levelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelPicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_LevelPicURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, levelPicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_IntroText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, introText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introVoiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_IntroVoiceURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, introVoiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introVoiceSec",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_IntroVoiceSec,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, introVoiceSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "homepagePicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_HomepagePicURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, homepagePicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "abilityPicUrlsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_AbilityPicUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, abilityPicUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SkillCheckSegmentStatus),
        .number = PB3BillPlayerSkillCheck_FieldNumber_StatusListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, statusListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillPlayerSkillStatus_EnumDescriptor,
        .number = PB3BillPlayerSkillCheck_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "newPlayerBillVisible",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_NewPlayerBillVisible,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "newPlayerBill",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_NewPlayerBill,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillPlayerSkillCheck_FieldNumber_IconURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BillPlayerSkillCheck__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillPlayerSkillCheck class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillPlayerSkillCheck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\005\243\241!!\000\004\005\245\241!!\000\006\010\243\241!!\000\014\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillPlayerSkillCheck_Status_RawValue(PB3BillPlayerSkillCheck *message) {
  GPBDescriptor *descriptor = [PB3BillPlayerSkillCheck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerSkillCheck_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillPlayerSkillCheck_Status_RawValue(PB3BillPlayerSkillCheck *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillPlayerSkillCheck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillPlayerSkillCheck_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillLevel

@implementation PB3BillSkillLevel

@dynamic id_p;
@dynamic name;
@dynamic textColor;
@dynamic borderColor;

typedef struct PB3BillSkillLevel__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *name;
  NSString *textColor;
  NSString *borderColor;
} PB3BillSkillLevel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillLevel_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillLevel__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillLevel_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillLevel__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillLevel_FieldNumber_TextColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSkillLevel__storage_, textColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "borderColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillLevel_FieldNumber_BorderColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSkillLevel__storage_, borderColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillLevel class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillLevel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkillPriceItem

@implementation PB3BillSkillPriceItem

@dynamic priceType;
@dynamic gold;

typedef struct PB3BillSkillPriceItem__storage_ {
  uint32_t _has_storage_[1];
  PB3BillSkillPriceType priceType;
  int32_t gold;
} PB3BillSkillPriceItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceType",
        .dataTypeSpecific.enumDescFunc = PB3BillSkillPriceType_EnumDescriptor,
        .number = PB3BillSkillPriceItem_FieldNumber_PriceType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillPriceItem__storage_, priceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillPriceItem_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillPriceItem__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillPriceItem class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillPriceItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillSkillPriceItem_PriceType_RawValue(PB3BillSkillPriceItem *message) {
  GPBDescriptor *descriptor = [PB3BillSkillPriceItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillPriceItem_FieldNumber_PriceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillSkillPriceItem_PriceType_RawValue(PB3BillSkillPriceItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillSkillPriceItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillSkillPriceItem_FieldNumber_PriceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillPrice

@implementation PB3BillSkillPrice

@dynamic priceId;
@dynamic itemsArray, itemsArray_Count;
@dynamic unitName;

typedef struct PB3BillSkillPrice__storage_ {
  uint32_t _has_storage_[1];
  int32_t priceId;
  NSMutableArray *itemsArray;
  NSString *unitName;
} PB3BillSkillPrice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillPrice_FieldNumber_PriceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillPrice__storage_, priceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillPriceItem),
        .number = PB3BillSkillPrice_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillSkillPrice__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unitName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillPrice_FieldNumber_UnitName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillPrice__storage_, unitName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillPrice class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillPrice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSimplePlayer

@implementation PB3BillSimplePlayer

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic playerId2;
@dynamic sex;
@dynamic billIcon;

typedef struct PB3BillSimplePlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  NSString *playerName;
  NSString *playerIcon;
  NSString *billIcon;
  int64_t playerId;
  int64_t playerId2;
} PB3BillSimplePlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSimplePlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSimplePlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSimplePlayer_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSimplePlayer__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSimplePlayer_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillSimplePlayer__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSimplePlayer_FieldNumber_PlayerId2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillSimplePlayer__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSimplePlayer_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillSimplePlayer__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSimplePlayer_FieldNumber_BillIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillSimplePlayer__storage_, billIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSimplePlayer class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSimplePlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderDetailInfo

@implementation PB3OrderDetailInfo

@dynamic title;
@dynamic tips;
@dynamic buttonsArray, buttonsArray_Count;
@dynamic arrow;

typedef struct PB3OrderDetailInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3BillArrowType arrow;
  NSString *title;
  NSString *tips;
  NSMutableArray *buttonsArray;
} PB3OrderDetailInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderDetailInfo_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderDetailInfo__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderDetailInfo_FieldNumber_Tips,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderDetailInfo__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderButton),
        .number = PB3OrderDetailInfo_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderDetailInfo__storage_, buttonsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "arrow",
        .dataTypeSpecific.enumDescFunc = PB3BillArrowType_EnumDescriptor,
        .number = PB3OrderDetailInfo_FieldNumber_Arrow,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderDetailInfo__storage_, arrow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderDetailInfo class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderDetailInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderDetailInfo_Arrow_RawValue(PB3OrderDetailInfo *message) {
  GPBDescriptor *descriptor = [PB3OrderDetailInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderDetailInfo_FieldNumber_Arrow];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderDetailInfo_Arrow_RawValue(PB3OrderDetailInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderDetailInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderDetailInfo_FieldNumber_Arrow];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillClanInfo

@implementation PB3BillClanInfo

@dynamic id_p;
@dynamic iconWord;
@dynamic levelName;
@dynamic name;
@dynamic level;
@dynamic iconType;

typedef struct PB3BillClanInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3ClanIconType iconType;
  NSString *iconWord;
  NSString *levelName;
  NSString *name;
  int64_t id_p;
  int64_t level;
} PB3BillClanInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillClanInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iconWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanInfo_FieldNumber_IconWord,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillClanInfo__storage_, iconWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levelName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanInfo_FieldNumber_LevelName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillClanInfo__storage_, levelName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanInfo_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillClanInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillClanInfo_FieldNumber_Level,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillClanInfo__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iconType",
        .dataTypeSpecific.enumDescFunc = PB3ClanIconType_EnumDescriptor,
        .number = PB3BillClanInfo_FieldNumber_IconType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillClanInfo__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillClanInfo class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillClanInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillClanInfo_IconType_RawValue(PB3BillClanInfo *message) {
  GPBDescriptor *descriptor = [PB3BillClanInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillClanInfo_FieldNumber_IconType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillClanInfo_IconType_RawValue(PB3BillClanInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillClanInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillClanInfo_FieldNumber_IconType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillNewOrder

@implementation PB3BillNewOrder

@dynamic id_p;
@dynamic hasPlayer, player;
@dynamic hasClan, clan;
@dynamic hasSkillInfo, skillInfo;
@dynamic num;
@dynamic status;
@dynamic hasPrices, prices;
@dynamic hasPriceItem, priceItem;
@dynamic gold;
@dynamic tick;
@dynamic role;
@dynamic type;
@dynamic progress;
@dynamic historyArray, historyArray_Count;
@dynamic orderTime;
@dynamic updateTime;
@dynamic counterDown;
@dynamic roomId;
@dynamic hasDetailInfo, detailInfo;
@dynamic hasRecordInfo, recordInfo;
@dynamic hasImRecordText, imRecordText;
@dynamic hasMsgInfo, msgInfo;
@dynamic hasImMsg, imMsg;
@dynamic hasPopMsg, popMsg;
@dynamic hasEvaluation, evaluation;

typedef struct PB3BillNewOrder__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  PB3BillOrder_Status status;
  int32_t gold;
  int32_t tick;
  PB3OrderRole role;
  PB3BillOrderType type;
  PB3BillServiceProgressType progress;
  NSString *id_p;
  PB3BillSimplePlayer *player;
  PB3BillClanInfo *clan;
  PB3BillSkillConf *skillInfo;
  PB3BillSkillPrice *prices;
  PB3BillSkillPriceItem *priceItem;
  NSMutableArray *historyArray;
  PB3OrderDetailInfo *detailInfo;
  PB3OrderDetailInfo *recordInfo;
  PB3OrderDetailInfo *imRecordText;
  PB3OrderDetailInfo *msgInfo;
  PB3OrderDetailInfo *imMsg;
  PB3OrderDetailInfo *popMsg;
  PB3Evaluation *evaluation;
  int64_t orderTime;
  int64_t updateTime;
  int64_t counterDown;
  int64_t roomId;
} PB3BillNewOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSimplePlayer),
        .number = PB3BillNewOrder_FieldNumber_Player,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clan",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillClanInfo),
        .number = PB3BillNewOrder_FieldNumber_Clan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, clan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "skillInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillConf),
        .number = PB3BillNewOrder_FieldNumber_SkillInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, skillInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_Num,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillOrder_Status_EnumDescriptor,
        .number = PB3BillNewOrder_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "prices",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillPrice),
        .number = PB3BillNewOrder_FieldNumber_Prices,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, prices),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceItem",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillPriceItem),
        .number = PB3BillNewOrder_FieldNumber_PriceItem,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, priceItem),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_Gold,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tick",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_Tick,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, tick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = PB3OrderRole_EnumDescriptor,
        .number = PB3BillNewOrder_FieldNumber_Role,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillOrderType_EnumDescriptor,
        .number = PB3BillNewOrder_FieldNumber_Type,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "progress",
        .dataTypeSpecific.enumDescFunc = PB3BillServiceProgressType_EnumDescriptor,
        .number = PB3BillNewOrder_FieldNumber_Progress,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, progress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "historyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillOrderHistory),
        .number = PB3BillNewOrder_FieldNumber_HistoryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, historyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_OrderTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, orderTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_UpdateTime,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, updateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "counterDown",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_CounterDown,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, counterDown),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewOrder_FieldNumber_RoomId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "detailInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderDetailInfo),
        .number = PB3BillNewOrder_FieldNumber_DetailInfo,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, detailInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "recordInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderDetailInfo),
        .number = PB3BillNewOrder_FieldNumber_RecordInfo,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, recordInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imRecordText",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderDetailInfo),
        .number = PB3BillNewOrder_FieldNumber_ImRecordText,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, imRecordText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderDetailInfo),
        .number = PB3BillNewOrder_FieldNumber_MsgInfo,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, msgInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imMsg",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderDetailInfo),
        .number = PB3BillNewOrder_FieldNumber_ImMsg,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, imMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "popMsg",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderDetailInfo),
        .number = PB3BillNewOrder_FieldNumber_PopMsg,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, popMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "evaluation",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Evaluation),
        .number = PB3BillNewOrder_FieldNumber_Evaluation,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3BillNewOrder__storage_, evaluation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillNewOrder class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillNewOrder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillNewOrder_Status_RawValue(PB3BillNewOrder *message) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillNewOrder_Status_RawValue(PB3BillNewOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillNewOrder_Role_RawValue(PB3BillNewOrder *message) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Role];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillNewOrder_Role_RawValue(PB3BillNewOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Role];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillNewOrder_Type_RawValue(PB3BillNewOrder *message) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillNewOrder_Type_RawValue(PB3BillNewOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BillNewOrder_Progress_RawValue(PB3BillNewOrder *message) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Progress];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillNewOrder_Progress_RawValue(PB3BillNewOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillNewOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillNewOrder_FieldNumber_Progress];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderLogsReq

@implementation PB3OrderLogsReq

@dynamic type;
@dynamic nextIndex;
@dynamic targetId;

typedef struct PB3OrderLogsReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillHistory type;
  int32_t nextIndex;
  int64_t targetId;
} PB3OrderLogsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillHistory_EnumDescriptor,
        .number = PB3OrderLogsReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderLogsReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderLogsReq_FieldNumber_NextIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderLogsReq__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderLogsReq_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderLogsReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderLogsReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderLogsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderLogsReq_Type_RawValue(PB3OrderLogsReq *message) {
  GPBDescriptor *descriptor = [PB3OrderLogsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderLogsReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderLogsReq_Type_RawValue(PB3OrderLogsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderLogsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderLogsReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderLogsRes

@implementation PB3OrderLogsRes

@dynamic type;
@dynamic progressListArray, progressListArray_Count;
@dynamic finishListArray, finishListArray_Count;
@dynamic nextIndex;

typedef struct PB3OrderLogsRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillHistory type;
  int32_t nextIndex;
  NSMutableArray *progressListArray;
  NSMutableArray *finishListArray;
} PB3OrderLogsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillHistory_EnumDescriptor,
        .number = PB3OrderLogsRes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderLogsRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "progressListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3OrderLogsRes_FieldNumber_ProgressListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderLogsRes__storage_, progressListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "finishListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3OrderLogsRes_FieldNumber_FinishListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderLogsRes__storage_, finishListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderLogsRes_FieldNumber_NextIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderLogsRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderLogsRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderLogsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderLogsRes_Type_RawValue(PB3OrderLogsRes *message) {
  GPBDescriptor *descriptor = [PB3OrderLogsRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderLogsRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderLogsRes_Type_RawValue(PB3OrderLogsRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderLogsRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderLogsRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderProfitReq

@implementation PB3OrderProfitReq


typedef struct PB3OrderProfitReq__storage_ {
  uint32_t _has_storage_[1];
} PB3OrderProfitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderProfitReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OrderProfitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderProfitRes

@implementation PB3OrderProfitRes

@dynamic tick;
@dynamic finishTick;
@dynamic progressTick;
@dynamic totalTick;
@dynamic refundTick;

typedef struct PB3OrderProfitRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t tick;
  int64_t finishTick;
  int64_t progressTick;
  int64_t totalTick;
  int64_t refundTick;
} PB3OrderProfitRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tick",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderProfitRes_FieldNumber_Tick,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderProfitRes__storage_, tick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "finishTick",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderProfitRes_FieldNumber_FinishTick,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderProfitRes__storage_, finishTick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "progressTick",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderProfitRes_FieldNumber_ProgressTick,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderProfitRes__storage_, progressTick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalTick",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderProfitRes_FieldNumber_TotalTick,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderProfitRes__storage_, totalTick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "refundTick",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderProfitRes_FieldNumber_RefundTick,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OrderProfitRes__storage_, refundTick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderProfitRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderProfitRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderComplaintReq

@implementation PB3OrderComplaintReq

@dynamic orderId;
@dynamic content;
@dynamic pictureArray, pictureArray_Count;
@dynamic complaintType;
@dynamic status;

typedef struct PB3OrderComplaintReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ComplaintType complaintType;
  PB3BillOrder_Status status;
  NSString *orderId;
  NSString *content;
  NSMutableArray *pictureArray;
} PB3OrderComplaintReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderComplaintReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderComplaintReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderComplaintReq_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderComplaintReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pictureArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderComplaintReq_FieldNumber_PictureArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderComplaintReq__storage_, pictureArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "complaintType",
        .dataTypeSpecific.enumDescFunc = PB3ComplaintType_EnumDescriptor,
        .number = PB3OrderComplaintReq_FieldNumber_ComplaintType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderComplaintReq__storage_, complaintType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillOrder_Status_EnumDescriptor,
        .number = PB3OrderComplaintReq_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderComplaintReq__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderComplaintReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderComplaintReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderComplaintReq_ComplaintType_RawValue(PB3OrderComplaintReq *message) {
  GPBDescriptor *descriptor = [PB3OrderComplaintReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderComplaintReq_FieldNumber_ComplaintType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderComplaintReq_ComplaintType_RawValue(PB3OrderComplaintReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderComplaintReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderComplaintReq_FieldNumber_ComplaintType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3OrderComplaintReq_Status_RawValue(PB3OrderComplaintReq *message) {
  GPBDescriptor *descriptor = [PB3OrderComplaintReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderComplaintReq_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderComplaintReq_Status_RawValue(PB3OrderComplaintReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderComplaintReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderComplaintReq_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderComplaintRes

@implementation PB3OrderComplaintRes


typedef struct PB3OrderComplaintRes__storage_ {
  uint32_t _has_storage_[1];
} PB3OrderComplaintRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderComplaintRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OrderComplaintRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ComplaintResult

@implementation PB3ComplaintResult

@dynamic num;
@dynamic content;
@dynamic pictureArray, pictureArray_Count;
@dynamic updateTime;
@dynamic status;
@dynamic replay;

typedef struct PB3ComplaintResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  PB3ComplaintStatus status;
  NSString *content;
  NSMutableArray *pictureArray;
  NSString *replay;
  int64_t updateTime;
} PB3ComplaintResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComplaintResult_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ComplaintResult__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComplaintResult_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ComplaintResult__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pictureArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComplaintResult_FieldNumber_PictureArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ComplaintResult__storage_, pictureArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComplaintResult_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ComplaintResult__storage_, updateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ComplaintStatus_EnumDescriptor,
        .number = PB3ComplaintResult_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ComplaintResult__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "replay",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComplaintResult_FieldNumber_Replay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ComplaintResult__storage_, replay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ComplaintResult class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ComplaintResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ComplaintResult_Status_RawValue(PB3ComplaintResult *message) {
  GPBDescriptor *descriptor = [PB3ComplaintResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ComplaintResult_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ComplaintResult_Status_RawValue(PB3ComplaintResult *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ComplaintResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ComplaintResult_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderComplaintResultReq

@implementation PB3OrderComplaintResultReq

@dynamic orderId;

typedef struct PB3OrderComplaintResultReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} PB3OrderComplaintResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderComplaintResultReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderComplaintResultReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderComplaintResultReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderComplaintResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderComplaintResultRes

@implementation PB3OrderComplaintResultRes

@dynamic hasOrder, order;
@dynamic resultsArray, resultsArray_Count;

typedef struct PB3OrderComplaintResultRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillNewOrder *order;
  NSMutableArray *resultsArray;
} PB3OrderComplaintResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3OrderComplaintResultRes_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderComplaintResultRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resultsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ComplaintResult),
        .number = PB3OrderComplaintResultRes_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderComplaintResultRes__storage_, resultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderComplaintResultRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderComplaintResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RefuseMsg

@implementation PB3RefuseMsg

@dynamic msg;

typedef struct PB3RefuseMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
} PB3RefuseMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3RefuseMsg_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RefuseMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RefuseMsg class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RefuseMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderOperationReq

@implementation PB3OrderOperationReq

@dynamic status;
@dynamic id_p;
@dynamic dataType;
@dynamic datas;

typedef struct PB3OrderOperationReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillOrder_Status status;
  PB3OrderOptExtraDataType dataType;
  NSString *id_p;
  NSData *datas;
} PB3OrderOperationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillOrder_Status_EnumDescriptor,
        .number = PB3OrderOperationReq_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderOperationReq__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderOperationReq_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderOperationReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = PB3OrderOptExtraDataType_EnumDescriptor,
        .number = PB3OrderOperationReq_FieldNumber_DataType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderOperationReq__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "datas",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderOperationReq_FieldNumber_Datas,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderOperationReq__storage_, datas),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderOperationReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderOperationReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderOperationReq_Status_RawValue(PB3OrderOperationReq *message) {
  GPBDescriptor *descriptor = [PB3OrderOperationReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderOperationReq_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderOperationReq_Status_RawValue(PB3OrderOperationReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderOperationReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderOperationReq_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3OrderOperationReq_DataType_RawValue(PB3OrderOperationReq *message) {
  GPBDescriptor *descriptor = [PB3OrderOperationReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderOperationReq_FieldNumber_DataType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderOperationReq_DataType_RawValue(PB3OrderOperationReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderOperationReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderOperationReq_FieldNumber_DataType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderOperationRes

@implementation PB3OrderOperationRes

@dynamic status;
@dynamic hasOrder, order;

typedef struct PB3OrderOperationRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillOrder_Status status;
  PB3BillNewOrder *order;
} PB3OrderOperationRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillOrder_Status_EnumDescriptor,
        .number = PB3OrderOperationRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderOperationRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3OrderOperationRes_FieldNumber_Order,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderOperationRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderOperationRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderOperationRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderOperationRes_Status_RawValue(PB3OrderOperationRes *message) {
  GPBDescriptor *descriptor = [PB3OrderOperationRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderOperationRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderOperationRes_Status_RawValue(PB3OrderOperationRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderOperationRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderOperationRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderDetailReq

@implementation PB3OrderDetailReq

@dynamic id_p;

typedef struct PB3OrderDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} PB3OrderDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderDetailReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderDetailReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderDetailReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderDetailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderDetailRes

@implementation PB3OrderDetailRes

@dynamic hasOrder, order;

typedef struct PB3OrderDetailRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillNewOrder *order;
} PB3OrderDetailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3OrderDetailRes_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderDetailRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderDetailRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderDetailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitBillPlayerV2Req

@implementation PB3VisitBillPlayerV2Req

@dynamic playerId;
@dynamic src;
@dynamic skillId;

typedef struct PB3VisitBillPlayerV2Req__storage_ {
  uint32_t _has_storage_[1];
  PB3VisitSource src;
  int32_t skillId;
  int64_t playerId;
} PB3VisitBillPlayerV2Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitBillPlayerV2Req_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitBillPlayerV2Req__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "src",
        .dataTypeSpecific.enumDescFunc = PB3VisitSource_EnumDescriptor,
        .number = PB3VisitBillPlayerV2Req_FieldNumber_Src,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitBillPlayerV2Req__storage_, src),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitBillPlayerV2Req_FieldNumber_SkillId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VisitBillPlayerV2Req__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitBillPlayerV2Req class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitBillPlayerV2Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VisitBillPlayerV2Req_Src_RawValue(PB3VisitBillPlayerV2Req *message) {
  GPBDescriptor *descriptor = [PB3VisitBillPlayerV2Req descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitBillPlayerV2Req_FieldNumber_Src];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VisitBillPlayerV2Req_Src_RawValue(PB3VisitBillPlayerV2Req *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VisitBillPlayerV2Req descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitBillPlayerV2Req_FieldNumber_Src];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VisitBillPlayerV2Res

@implementation PB3VisitBillPlayerV2Res

@dynamic skillDescTime;
@dynamic descSkillId;
@dynamic skillListVisible;
@dynamic skillDesc;

typedef struct PB3VisitBillPlayerV2Res__storage_ {
  uint32_t _has_storage_[1];
  int32_t descSkillId;
  NSString *skillDesc;
  int64_t skillDescTime;
} PB3VisitBillPlayerV2Res__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillDescTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitBillPlayerV2Res_FieldNumber_SkillDescTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitBillPlayerV2Res__storage_, skillDescTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "descSkillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitBillPlayerV2Res_FieldNumber_DescSkillId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitBillPlayerV2Res__storage_, descSkillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillListVisible",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitBillPlayerV2Res_FieldNumber_SkillListVisible,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "skillDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitBillPlayerV2Res_FieldNumber_SkillDesc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VisitBillPlayerV2Res__storage_, skillDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitBillPlayerV2Res class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitBillPlayerV2Res__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitPlayerInfoV2

@implementation PB3VisitPlayerInfoV2

@dynamic id_p;
@dynamic id2;
@dynamic sex;
@dynamic name;
@dynamic icon;
@dynamic lastVisitTime;
@dynamic visitCount;
@dynamic visitDesc;

typedef struct PB3VisitPlayerInfoV2__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  int32_t visitCount;
  NSString *name;
  NSString *icon;
  NSString *visitDesc;
  int64_t id_p;
  int64_t id2;
  int64_t lastVisitTime;
} PB3VisitPlayerInfoV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastVisitTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_LastVisitTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, lastVisitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "visitCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_VisitCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, visitCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "visitDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitPlayerInfoV2_FieldNumber_VisitDesc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VisitPlayerInfoV2__storage_, visitDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitPlayerInfoV2 class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitPlayerInfoV2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitLogV2Req

@implementation PB3VisitLogV2Req

@dynamic index;

typedef struct PB3VisitLogV2Req__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3VisitLogV2Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitLogV2Req_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitLogV2Req__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitLogV2Req class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitLogV2Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitLogV2Res

@implementation PB3VisitLogV2Res

@dynamic listArray, listArray_Count;
@dynamic nextIndex;

typedef struct PB3VisitLogV2Res__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3VisitLogV2Res__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VisitPlayerInfoV2),
        .number = PB3VisitLogV2Res_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VisitLogV2Res__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitLogV2Res_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitLogV2Res__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitLogV2Res class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitLogV2Res__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitLogV2RedReq

@implementation PB3VisitLogV2RedReq


typedef struct PB3VisitLogV2RedReq__storage_ {
  uint32_t _has_storage_[1];
} PB3VisitLogV2RedReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitLogV2RedReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VisitLogV2RedReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitLogV2RedRes

@implementation PB3VisitLogV2RedRes

@dynamic unreadNum;
@dynamic unreadDesc;

typedef struct PB3VisitLogV2RedRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t unreadNum;
  NSString *unreadDesc;
} PB3VisitLogV2RedRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unreadNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitLogV2RedRes_FieldNumber_UnreadNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitLogV2RedRes__storage_, unreadNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unreadDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitLogV2RedRes_FieldNumber_UnreadDesc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitLogV2RedRes__storage_, unreadDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitLogV2RedRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitLogV2RedRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderReq

@implementation PB3OrderReq

@dynamic toPlayerId;
@dynamic skillId;
@dynamic num;
@dynamic remark;
@dynamic hasPrice, price;
@dynamic trendId;
@dynamic origin;

typedef struct PB3OrderReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int32_t num;
  int32_t origin;
  NSString *remark;
  PB3BillSkillPrice *price;
  int64_t toPlayerId;
  int64_t trendId;
} PB3OrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderReq_FieldNumber_ToPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderReq__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderReq_FieldNumber_SkillId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderReq_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderReq_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillPrice),
        .number = PB3OrderReq_FieldNumber_Price,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OrderReq__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderReq_FieldNumber_TrendId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3OrderReq__storage_, trendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "origin",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderReq_FieldNumber_Origin,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3OrderReq__storage_, origin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderRes

@implementation PB3OrderRes

@dynamic hasOrder, order;

typedef struct PB3OrderRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillNewOrder *order;
} PB3OrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3OrderRes_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkillSortItem

@implementation PB3BillSkillSortItem

@dynamic skillId;
@dynamic sort;

typedef struct PB3BillSkillSortItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int32_t sort;
} PB3BillSkillSortItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillSortItem_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillSortItem__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillSortItem_FieldNumber_Sort,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillSortItem__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillSortItem class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillSortItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkillSortReq

@implementation PB3BillSkillSortReq

@dynamic skillsArray, skillsArray_Count;

typedef struct PB3BillSkillSortReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *skillsArray;
} PB3BillSkillSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillSkillSortItem),
        .number = PB3BillSkillSortReq_FieldNumber_SkillsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillSkillSortReq__storage_, skillsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillSortReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillSkillSortRes

@implementation PB3BillSkillSortRes


typedef struct PB3BillSkillSortRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillSkillSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillSortRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillSkillSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderServicingReq

@implementation PB3OrderServicingReq


typedef struct PB3OrderServicingReq__storage_ {
  uint32_t _has_storage_[1];
} PB3OrderServicingReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderServicingReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OrderServicingReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderServicingRes

@implementation PB3OrderServicingRes

@dynamic hasOrder, order;

typedef struct PB3OrderServicingRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillNewOrder *order;
} PB3OrderServicingRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3OrderServicingRes_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderServicingRes__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderServicingRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderServicingRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderInt

@implementation PB3OrderInt

@dynamic orderId;
@dynamic bossId;
@dynamic servantId;
@dynamic skillId;
@dynamic num;
@dynamic giftId;
@dynamic giftTotalNum;
@dynamic giftCostNum;
@dynamic goldTotal;
@dynamic goldCost;
@dynamic status;
@dynamic ticket;
@dynamic goldRemark;
@dynamic ticketRemark;
@dynamic roomId;
@dynamic roomGold;
@dynamic orderAt;
@dynamic updateAt;
@dynamic remark;
@dynamic serviceTimeout;
@dynamic type;
@dynamic logTime;

typedef struct PB3OrderInt__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
  int32_t num;
  int32_t giftTotalNum;
  int32_t giftCostNum;
  int32_t goldTotal;
  int32_t goldCost;
  int32_t status;
  int32_t type;
  NSString *orderId;
  NSString *goldRemark;
  NSString *ticketRemark;
  NSString *remark;
  NSString *logTime;
  int64_t bossId;
  int64_t servantId;
  int64_t giftId;
  int64_t ticket;
  int64_t roomId;
  int64_t roomGold;
  int64_t orderAt;
  int64_t updateAt;
  int64_t serviceTimeout;
} PB3OrderInt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_BossId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "servantId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_ServantId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, servantId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_SkillId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_Num,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_GiftId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftTotalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_GiftTotalNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, giftTotalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftCostNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_GiftCostNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, giftCostNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goldTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_GoldTotal,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, goldTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goldCost",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_GoldCost,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, goldCost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_Status,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_Ticket,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, ticket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "goldRemark",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_GoldRemark,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, goldRemark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ticketRemark",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_TicketRemark,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, ticketRemark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_RoomId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_RoomGold,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, roomGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orderAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_OrderAt,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, orderAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_UpdateAt,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, updateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_Remark,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceTimeout",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_ServiceTimeout,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, serviceTimeout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_Type,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "logTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderInt_FieldNumber_LogTime,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3OrderInt__storage_, logTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderInt class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderInt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillStatusIconReq

@implementation PB3BillStatusIconReq


typedef struct PB3BillStatusIconReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BillStatusIconReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillStatusIconReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillStatusIconReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillStatusIconRes

@implementation PB3BillStatusIconRes

@dynamic icon;
@dynamic status;

typedef struct PB3BillStatusIconRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillIconCheckStatus status;
  NSString *icon;
} PB3BillStatusIconRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillStatusIconRes_FieldNumber_Icon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillStatusIconRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BillIconCheckStatus_EnumDescriptor,
        .number = PB3BillStatusIconRes_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillStatusIconRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillStatusIconRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillStatusIconRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillStatusIconRes_Status_RawValue(PB3BillStatusIconRes *message) {
  GPBDescriptor *descriptor = [PB3BillStatusIconRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillStatusIconRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillStatusIconRes_Status_RawValue(PB3BillStatusIconRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillStatusIconRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillStatusIconRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Evaluation

@implementation PB3Evaluation

@dynamic evaluationStatus;
@dynamic overallScore;
@dynamic technicalScore;
@dynamic serviceScore;
@dynamic responseScore;
@dynamic evaluationTagArray, evaluationTagArray_Count;
@dynamic evaluation;
@dynamic evaluationTime;

typedef struct PB3Evaluation__storage_ {
  uint32_t _has_storage_[1];
  PB3EvaluationStatus evaluationStatus;
  int32_t overallScore;
  int32_t technicalScore;
  int32_t serviceScore;
  int32_t responseScore;
  GPBInt32Array *evaluationTagArray;
  NSString *evaluation;
  int64_t evaluationTime;
} PB3Evaluation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "evaluationStatus",
        .dataTypeSpecific.enumDescFunc = PB3EvaluationStatus_EnumDescriptor,
        .number = PB3Evaluation_FieldNumber_EvaluationStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, evaluationStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "overallScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluation_FieldNumber_OverallScore,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, overallScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "technicalScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluation_FieldNumber_TechnicalScore,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, technicalScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serviceScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluation_FieldNumber_ServiceScore,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, serviceScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "responseScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluation_FieldNumber_ResponseScore,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, responseScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "evaluationTagArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluation_FieldNumber_EvaluationTagArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, evaluationTagArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "evaluation",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluation_FieldNumber_Evaluation,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, evaluation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "evaluationTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluation_FieldNumber_EvaluationTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Evaluation__storage_, evaluationTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Evaluation class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Evaluation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Evaluation_EvaluationStatus_RawValue(PB3Evaluation *message) {
  GPBDescriptor *descriptor = [PB3Evaluation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Evaluation_FieldNumber_EvaluationStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Evaluation_EvaluationStatus_RawValue(PB3Evaluation *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Evaluation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Evaluation_FieldNumber_EvaluationStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3WaitEvaluationListReq

@implementation PB3WaitEvaluationListReq

@dynamic index;

typedef struct PB3WaitEvaluationListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3WaitEvaluationListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3WaitEvaluationListReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WaitEvaluationListReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WaitEvaluationListReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WaitEvaluationListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WaitEvaluationListRes

@implementation PB3WaitEvaluationListRes

@dynamic listArray, listArray_Count;
@dynamic evaluatedNum;
@dynamic nextIndex;

typedef struct PB3WaitEvaluationListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t evaluatedNum;
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3WaitEvaluationListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillNewOrder),
        .number = PB3WaitEvaluationListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WaitEvaluationListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "evaluatedNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WaitEvaluationListRes_FieldNumber_EvaluatedNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WaitEvaluationListRes__storage_, evaluatedNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3WaitEvaluationListRes_FieldNumber_NextIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WaitEvaluationListRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WaitEvaluationListRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WaitEvaluationListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EvaluationOptReq

@implementation PB3EvaluationOptReq

@dynamic orderId;
@dynamic hasEvaluation, evaluation;
@dynamic isAutoFocus;

typedef struct PB3EvaluationOptReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
  PB3Evaluation *evaluation;
} PB3EvaluationOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EvaluationOptReq_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EvaluationOptReq__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "evaluation",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Evaluation),
        .number = PB3EvaluationOptReq_FieldNumber_Evaluation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EvaluationOptReq__storage_, evaluation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isAutoFocus",
        .dataTypeSpecific.className = NULL,
        .number = PB3EvaluationOptReq_FieldNumber_IsAutoFocus,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EvaluationOptReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EvaluationOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EvaluationOptRes

@implementation PB3EvaluationOptRes


typedef struct PB3EvaluationOptRes__storage_ {
  uint32_t _has_storage_[1];
} PB3EvaluationOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EvaluationOptRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3EvaluationOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Evaluated

@implementation PB3Evaluated

@dynamic hasEvaluation, evaluation;
@dynamic icon;
@dynamic name;
@dynamic playerId;
@dynamic orderId;
@dynamic num;
@dynamic skillId;
@dynamic orderNum;
@dynamic unit;

typedef struct PB3Evaluated__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  int32_t skillId;
  int32_t orderNum;
  PB3Evaluation *evaluation;
  NSString *icon;
  NSString *name;
  NSString *orderId;
  NSString *unit;
  int64_t playerId;
} PB3Evaluated__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "evaluation",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Evaluation),
        .number = PB3Evaluated_FieldNumber_Evaluation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, evaluation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_Icon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_OrderId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, orderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_Num,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_SkillId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_OrderNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, orderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3Evaluated_FieldNumber_Unit,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Evaluated__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Evaluated class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Evaluated__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EvaluatedListReq

@implementation PB3EvaluatedListReq

@dynamic index;

typedef struct PB3EvaluatedListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3EvaluatedListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3EvaluatedListReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EvaluatedListReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EvaluatedListReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EvaluatedListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EvaluatedListRes

@implementation PB3EvaluatedListRes

@dynamic listArray, listArray_Count;
@dynamic evaluatedNum;
@dynamic nextIndex;

typedef struct PB3EvaluatedListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t evaluatedNum;
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3EvaluatedListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Evaluated),
        .number = PB3EvaluatedListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EvaluatedListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "evaluatedNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3EvaluatedListRes_FieldNumber_EvaluatedNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EvaluatedListRes__storage_, evaluatedNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3EvaluatedListRes_FieldNumber_NextIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EvaluatedListRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EvaluatedListRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EvaluatedListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SkillEvaluatedListReq

@implementation PB3SkillEvaluatedListReq

@dynamic index;
@dynamic tagId;
@dynamic playerId;
@dynamic skillId;

typedef struct PB3SkillEvaluatedListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int32_t tagId;
  int32_t skillId;
  int64_t playerId;
} PB3SkillEvaluatedListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedListReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedListReq_FieldNumber_TagId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListReq__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedListReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedListReq_FieldNumber_SkillId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillEvaluatedListReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillEvaluatedListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SkillEvaluatedListRes

@implementation PB3SkillEvaluatedListRes

@dynamic listArray, listArray_Count;
@dynamic hasEvaluation, evaluation;
@dynamic nextIndex;
@dynamic evaluatedNum;

typedef struct PB3SkillEvaluatedListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  int32_t evaluatedNum;
  NSMutableArray *listArray;
  PB3SkillEvaluated *evaluation;
} PB3SkillEvaluatedListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Evaluated),
        .number = PB3SkillEvaluatedListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "evaluation",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SkillEvaluated),
        .number = PB3SkillEvaluatedListRes_FieldNumber_Evaluation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListRes__storage_, evaluation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedListRes_FieldNumber_NextIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "evaluatedNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedListRes_FieldNumber_EvaluatedNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedListRes__storage_, evaluatedNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillEvaluatedListRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillEvaluatedListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SkillEvaluated

@implementation PB3SkillEvaluated

@dynamic overallScore;
@dynamic technicalScore;
@dynamic serviceScore;
@dynamic responseScore;
@dynamic tagsArray, tagsArray_Count;

typedef struct PB3SkillEvaluated__storage_ {
  uint32_t _has_storage_[1];
  int32_t overallScore;
  int32_t technicalScore;
  int32_t serviceScore;
  int32_t responseScore;
  NSMutableArray *tagsArray;
} PB3SkillEvaluated__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "overallScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluated_FieldNumber_OverallScore,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillEvaluated__storage_, overallScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "technicalScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluated_FieldNumber_TechnicalScore,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SkillEvaluated__storage_, technicalScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serviceScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluated_FieldNumber_ServiceScore,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SkillEvaluated__storage_, serviceScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "responseScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluated_FieldNumber_ResponseScore,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SkillEvaluated__storage_, responseScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SkillEvaluatedTag),
        .number = PB3SkillEvaluated_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SkillEvaluated__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillEvaluated class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillEvaluated__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SkillEvaluatedTag

@implementation PB3SkillEvaluatedTag

@dynamic tagId;
@dynamic num;

typedef struct PB3SkillEvaluatedTag__storage_ {
  uint32_t _has_storage_[1];
  int32_t tagId;
  int32_t num;
} PB3SkillEvaluatedTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedTag_FieldNumber_TagId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedTag__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillEvaluatedTag_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SkillEvaluatedTag__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillEvaluatedTag class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillEvaluatedTag__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WaitEvaluateNumReq

@implementation PB3WaitEvaluateNumReq


typedef struct PB3WaitEvaluateNumReq__storage_ {
  uint32_t _has_storage_[1];
} PB3WaitEvaluateNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WaitEvaluateNumReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3WaitEvaluateNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WaitEvaluateNumRes

@implementation PB3WaitEvaluateNumRes

@dynamic redNum;

typedef struct PB3WaitEvaluateNumRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t redNum;
} PB3WaitEvaluateNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WaitEvaluateNumRes_FieldNumber_RedNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WaitEvaluateNumRes__storage_, redNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WaitEvaluateNumRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WaitEvaluateNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillMasterRedPointReq

@implementation PB3BillMasterRedPointReq


typedef struct PB3BillMasterRedPointReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BillMasterRedPointReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillMasterRedPointReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillMasterRedPointReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillMasterRedPointRes

@implementation PB3BillMasterRedPointRes


typedef struct PB3BillMasterRedPointRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BillMasterRedPointRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillMasterRedPointRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillMasterRedPointRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderBossIdReq

@implementation PB3BillOrderBossIdReq

@dynamic playerId;

typedef struct PB3BillOrderBossIdReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3BillOrderBossIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderBossIdReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillOrderBossIdReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderBossIdReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderBossIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillOrderBossIdRes

@implementation PB3BillOrderBossIdRes

@dynamic bossIdArray, bossIdArray_Count;

typedef struct PB3BillOrderBossIdRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *bossIdArray;
} PB3BillOrderBossIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bossIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillOrderBossIdRes_FieldNumber_BossIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillOrderBossIdRes__storage_, bossIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillOrderBossIdRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillOrderBossIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillNewsRedReq

@implementation PB3BillNewsRedReq


typedef struct PB3BillNewsRedReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BillNewsRedReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillNewsRedReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BillNewsRedReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillNewsRedRes

@implementation PB3BillNewsRedRes

@dynamic num;

typedef struct PB3BillNewsRedRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
} PB3BillNewsRedRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillNewsRedRes_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillNewsRedRes__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillNewsRedRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillNewsRedRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearBillNewsRedReq

@implementation PB3ClearBillNewsRedReq


typedef struct PB3ClearBillNewsRedReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearBillNewsRedReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearBillNewsRedReq class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearBillNewsRedReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearBillNewsRedRes

@implementation PB3ClearBillNewsRedRes


typedef struct PB3ClearBillNewsRedRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearBillNewsRedRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearBillNewsRedRes class]
                                     rootClass:[PB3BillExtRoot class]
                                          file:PB3BillExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearBillNewsRedRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
