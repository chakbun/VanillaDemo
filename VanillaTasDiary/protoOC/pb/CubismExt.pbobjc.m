// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/cubism.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/CubismExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3CubismExtRoot

@implementation PB3CubismExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3CubismExtRoot_FileDescriptor

static GPBFileDescriptor *PB3CubismExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3CubismCmdId

GPBEnumDescriptor *PB3CubismCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CbZero\000CbCubismConfig\000CbCubismShop\000CbPla"
        "yerCubismChange\000CbBcCubismAction\000CbPlaye"
        "rCubismDelete\000";
    static const int32_t values[] = {
        PB3CubismCmdId_CbZero,
        PB3CubismCmdId_CbCubismConfig,
        PB3CubismCmdId_CbCubismShop,
        PB3CubismCmdId_CbPlayerCubismChange,
        PB3CubismCmdId_CbBcCubismAction,
        PB3CubismCmdId_CbPlayerCubismDelete,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismCmdId_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismCmdId_CbZero:
    case PB3CubismCmdId_CbCubismConfig:
    case PB3CubismCmdId_CbCubismShop:
    case PB3CubismCmdId_CbPlayerCubismChange:
    case PB3CubismCmdId_CbBcCubismAction:
    case PB3CubismCmdId_CbPlayerCubismDelete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CubismClassify

GPBEnumDescriptor *PB3CubismClassify_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CucNone\000CucEye\000CucNose\000CucEyebrow\000CucMou"
        "th\000CucHair\000CucFace\000CucEar\000CucSet\000CucTops"
        "\000CucBottoms\000CucDress\000CucShoes\000";
    static const int32_t values[] = {
        PB3CubismClassify_CucNone,
        PB3CubismClassify_CucEye,
        PB3CubismClassify_CucNose,
        PB3CubismClassify_CucEyebrow,
        PB3CubismClassify_CucMouth,
        PB3CubismClassify_CucHair,
        PB3CubismClassify_CucFace,
        PB3CubismClassify_CucEar,
        PB3CubismClassify_CucSet,
        PB3CubismClassify_CucTops,
        PB3CubismClassify_CucBottoms,
        PB3CubismClassify_CucDress,
        PB3CubismClassify_CucShoes,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismClassify)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismClassify_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismClassify_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismClassify_CucNone:
    case PB3CubismClassify_CucEye:
    case PB3CubismClassify_CucNose:
    case PB3CubismClassify_CucEyebrow:
    case PB3CubismClassify_CucMouth:
    case PB3CubismClassify_CucHair:
    case PB3CubismClassify_CucFace:
    case PB3CubismClassify_CucEar:
    case PB3CubismClassify_CucSet:
    case PB3CubismClassify_CucTops:
    case PB3CubismClassify_CucBottoms:
    case PB3CubismClassify_CucDress:
    case PB3CubismClassify_CucShoes:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CubismItemLevel

GPBEnumDescriptor *PB3CubismItemLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CilNone\000CilClothesN\000CilClothesR\000CilCloth"
        "esSr\000CilClothesSsr\000";
    static const int32_t values[] = {
        PB3CubismItemLevel_CilNone,
        PB3CubismItemLevel_CilClothesN,
        PB3CubismItemLevel_CilClothesR,
        PB3CubismItemLevel_CilClothesSr,
        PB3CubismItemLevel_CilClothesSsr,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismItemLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismItemLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismItemLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismItemLevel_CilNone:
    case PB3CubismItemLevel_CilClothesN:
    case PB3CubismItemLevel_CilClothesR:
    case PB3CubismItemLevel_CilClothesSr:
    case PB3CubismItemLevel_CilClothesSsr:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CubismShopShowType

GPBEnumDescriptor *PB3CubismShopShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CsstNone\000CsstShow\000CsstNotShow\000";
    static const int32_t values[] = {
        PB3CubismShopShowType_CsstNone,
        PB3CubismShopShowType_CsstShow,
        PB3CubismShopShowType_CsstNotShow,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismShopShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismShopShowType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismShopShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismShopShowType_CsstNone:
    case PB3CubismShopShowType_CsstShow:
    case PB3CubismShopShowType_CsstNotShow:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CubismShopQueryType

GPBEnumDescriptor *PB3CubismShopQueryType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CsqtNone\000CsqtAll\000CsqtMy\000";
    static const int32_t values[] = {
        PB3CubismShopQueryType_CsqtNone,
        PB3CubismShopQueryType_CsqtAll,
        PB3CubismShopQueryType_CsqtMy,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismShopQueryType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismShopQueryType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismShopQueryType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismShopQueryType_CsqtNone:
    case PB3CubismShopQueryType_CsqtAll:
    case PB3CubismShopQueryType_CsqtMy:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PavilionTypeEnum

GPBEnumDescriptor *PB3PavilionTypeEnum_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PteNone\000PteExclusive\000PteLimited\000";
    static const int32_t values[] = {
        PB3PavilionTypeEnum_PteNone,
        PB3PavilionTypeEnum_PteExclusive,
        PB3PavilionTypeEnum_PteLimited,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PavilionTypeEnum)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PavilionTypeEnum_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PavilionTypeEnum_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PavilionTypeEnum_PteNone:
    case PB3PavilionTypeEnum_PteExclusive:
    case PB3PavilionTypeEnum_PteLimited:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ClassifyBelongType

GPBEnumDescriptor *PB3ClassifyBelongType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CbtNone\000CbtFace\000CbtDress\000";
    static const int32_t values[] = {
        PB3ClassifyBelongType_CbtNone,
        PB3ClassifyBelongType_CbtFace,
        PB3ClassifyBelongType_CbtDress,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ClassifyBelongType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ClassifyBelongType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ClassifyBelongType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ClassifyBelongType_CbtNone:
    case PB3ClassifyBelongType_CbtFace:
    case PB3ClassifyBelongType_CbtDress:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CubismBuyLogType

GPBEnumDescriptor *PB3CubismBuyLogType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CbltNont\000CbltBuy\000CbltDyeing\000CbltDyeingDe"
        "fault\000";
    static const int32_t values[] = {
        PB3CubismBuyLogType_CbltNont,
        PB3CubismBuyLogType_CbltBuy,
        PB3CubismBuyLogType_CbltDyeing,
        PB3CubismBuyLogType_CbltDyeingDefault,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismBuyLogType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismBuyLogType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismBuyLogType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismBuyLogType_CbltNont:
    case PB3CubismBuyLogType_CbltBuy:
    case PB3CubismBuyLogType_CbltDyeing:
    case PB3CubismBuyLogType_CbltDyeingDefault:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SaveCubismReqType

GPBEnumDescriptor *PB3SaveCubismReqType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ScrtNont\000ScrtShop\000ScrtDyeing\000";
    static const int32_t values[] = {
        PB3SaveCubismReqType_ScrtNont,
        PB3SaveCubismReqType_ScrtShop,
        PB3SaveCubismReqType_ScrtDyeing,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SaveCubismReqType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SaveCubismReqType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SaveCubismReqType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SaveCubismReqType_ScrtNont:
    case PB3SaveCubismReqType_ScrtShop:
    case PB3SaveCubismReqType_ScrtDyeing:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CubismAction

GPBEnumDescriptor *PB3CubismAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CaNone\000CaKiss\000CaShy\000CaShowLove\000CaAngry\000C"
        "aWordless\000CaLaughing\000";
    static const int32_t values[] = {
        PB3CubismAction_CaNone,
        PB3CubismAction_CaKiss,
        PB3CubismAction_CaShy,
        PB3CubismAction_CaShowLove,
        PB3CubismAction_CaAngry,
        PB3CubismAction_CaWordless,
        PB3CubismAction_CaLaughing,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismAction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismAction_CaNone:
    case PB3CubismAction_CaKiss:
    case PB3CubismAction_CaShy:
    case PB3CubismAction_CaShowLove:
    case PB3CubismAction_CaAngry:
    case PB3CubismAction_CaWordless:
    case PB3CubismAction_CaLaughing:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3CubismConfig

@implementation PB3CubismConfig

@dynamic confURL;

typedef struct PB3CubismConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *confURL;
} PB3CubismConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismConfig_FieldNumber_ConfURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismConfig__storage_, confURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismConfig class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BC_CubismShop

@implementation PB3BC_CubismShop


typedef struct PB3BC_CubismShop__storage_ {
  uint32_t _has_storage_[1];
} PB3BC_CubismShop__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BC_CubismShop class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BC_CubismShop__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BC_PlayerCubismChange

@implementation PB3BC_PlayerCubismChange

@dynamic cubismIdsArray, cubismIdsArray_Count;
@dynamic hasSet, set;
@dynamic playerId;

typedef struct PB3BC_PlayerCubismChange__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cubismIdsArray;
  PB3CubismSet *set;
  int64_t playerId;
} PB3BC_PlayerCubismChange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BC_PlayerCubismChange_FieldNumber_CubismIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BC_PlayerCubismChange__storage_, cubismIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "set",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismSet),
        .number = PB3BC_PlayerCubismChange_FieldNumber_Set,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BC_PlayerCubismChange__storage_, set),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BC_PlayerCubismChange_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BC_PlayerCubismChange__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BC_PlayerCubismChange class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BC_PlayerCubismChange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismConfigItem

@implementation PB3CubismConfigItem

@dynamic cubismId;
@dynamic name;
@dynamic resourceURL;
@dynamic iconURL;
@dynamic level;
@dynamic classify;
@dynamic classifyId;

typedef struct PB3CubismConfigItem__storage_ {
  uint32_t _has_storage_[1];
  PB3CubismItemLevel level;
  PB3CubismClassify classify;
  int32_t classifyId;
  NSString *cubismId;
  NSString *name;
  NSString *resourceURL;
  NSString *iconURL;
} PB3CubismConfigItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismConfigItem_FieldNumber_CubismId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismConfigItem__storage_, cubismId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismConfigItem_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismConfigItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resourceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismConfigItem_FieldNumber_ResourceURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CubismConfigItem__storage_, resourceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismConfigItem_FieldNumber_IconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CubismConfigItem__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PB3CubismItemLevel_EnumDescriptor,
        .number = PB3CubismConfigItem_FieldNumber_Level,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CubismConfigItem__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "classify",
        .dataTypeSpecific.enumDescFunc = PB3CubismClassify_EnumDescriptor,
        .number = PB3CubismConfigItem_FieldNumber_Classify,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CubismConfigItem__storage_, classify),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "classifyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismConfigItem_FieldNumber_ClassifyId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CubismConfigItem__storage_, classifyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismConfigItem class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismConfigItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\010\241!!\000\004\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CubismConfigItem_Level_RawValue(PB3CubismConfigItem *message) {
  GPBDescriptor *descriptor = [PB3CubismConfigItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismConfigItem_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CubismConfigItem_Level_RawValue(PB3CubismConfigItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CubismConfigItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismConfigItem_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CubismConfigItem_Classify_RawValue(PB3CubismConfigItem *message) {
  GPBDescriptor *descriptor = [PB3CubismConfigItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismConfigItem_FieldNumber_Classify];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CubismConfigItem_Classify_RawValue(PB3CubismConfigItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CubismConfigItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismConfigItem_FieldNumber_Classify];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetCubismConfigCDNReq

@implementation PB3GetCubismConfigCDNReq


typedef struct PB3GetCubismConfigCDNReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetCubismConfigCDNReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCubismConfigCDNReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetCubismConfigCDNReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCubismConfigCDNRes

@implementation PB3GetCubismConfigCDNRes

@dynamic hasConfURL, confURL;

typedef struct PB3GetCubismConfigCDNRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CubismConfig *confURL;
} PB3GetCubismConfigCDNRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confURL",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismConfig),
        .number = PB3GetCubismConfigCDNRes_FieldNumber_ConfURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCubismConfigCDNRes__storage_, confURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCubismConfigCDNRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCubismConfigCDNRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckCubismGuidePopupReq

@implementation PB3CheckCubismGuidePopupReq


typedef struct PB3CheckCubismGuidePopupReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CheckCubismGuidePopupReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckCubismGuidePopupReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CheckCubismGuidePopupReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckCubismGuidePopupRes

@implementation PB3CheckCubismGuidePopupRes

@dynamic popup;

typedef struct PB3CheckCubismGuidePopupRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CheckCubismGuidePopupRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "popup",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckCubismGuidePopupRes_FieldNumber_Popup,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckCubismGuidePopupRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckCubismGuidePopupRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AckCubismGuideReq

@implementation PB3AckCubismGuideReq


typedef struct PB3AckCubismGuideReq__storage_ {
  uint32_t _has_storage_[1];
} PB3AckCubismGuideReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AckCubismGuideReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AckCubismGuideReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AckCubismGuideRes

@implementation PB3AckCubismGuideRes


typedef struct PB3AckCubismGuideRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AckCubismGuideRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AckCubismGuideRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AckCubismGuideRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerCubismReq

@implementation PB3PlayerCubismReq

@dynamic playerId;

typedef struct PB3PlayerCubismReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3PlayerCubismReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCubismReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerCubismReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerCubismReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerCubismReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerCubismRes

@implementation PB3PlayerCubismRes

@dynamic cubismIdsArray, cubismIdsArray_Count;
@dynamic hasSet, set;
@dynamic hasDefaultSet, defaultSet;
@dynamic defaultCubismIdsArray, defaultCubismIdsArray_Count;
@dynamic pavilionType;
@dynamic setCardURL;
@dynamic pavilionLevel;

typedef struct PB3PlayerCubismRes__storage_ {
  uint32_t _has_storage_[1];
  PB3PavilionTypeEnum pavilionType;
  PB3CubismItemLevel pavilionLevel;
  NSMutableArray *cubismIdsArray;
  PB3CubismSet *set;
  PB3CubismSet *defaultSet;
  NSMutableArray *defaultCubismIdsArray;
  NSString *setCardURL;
} PB3PlayerCubismRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCubismRes_FieldNumber_CubismIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerCubismRes__storage_, cubismIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "set",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismSet),
        .number = PB3PlayerCubismRes_FieldNumber_Set,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerCubismRes__storage_, set),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultSet",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismSet),
        .number = PB3PlayerCubismRes_FieldNumber_DefaultSet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerCubismRes__storage_, defaultSet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultCubismIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCubismRes_FieldNumber_DefaultCubismIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerCubismRes__storage_, defaultCubismIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pavilionType",
        .dataTypeSpecific.enumDescFunc = PB3PavilionTypeEnum_EnumDescriptor,
        .number = PB3PlayerCubismRes_FieldNumber_PavilionType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerCubismRes__storage_, pavilionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "setCardURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCubismRes_FieldNumber_SetCardURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerCubismRes__storage_, setCardURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pavilionLevel",
        .dataTypeSpecific.enumDescFunc = PB3CubismItemLevel_EnumDescriptor,
        .number = PB3PlayerCubismRes_FieldNumber_PavilionLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerCubismRes__storage_, pavilionLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerCubismRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerCubismRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\003\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerCubismRes_PavilionType_RawValue(PB3PlayerCubismRes *message) {
  GPBDescriptor *descriptor = [PB3PlayerCubismRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerCubismRes_FieldNumber_PavilionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerCubismRes_PavilionType_RawValue(PB3PlayerCubismRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerCubismRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerCubismRes_FieldNumber_PavilionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3PlayerCubismRes_PavilionLevel_RawValue(PB3PlayerCubismRes *message) {
  GPBDescriptor *descriptor = [PB3PlayerCubismRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerCubismRes_FieldNumber_PavilionLevel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerCubismRes_PavilionLevel_RawValue(PB3PlayerCubismRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerCubismRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerCubismRes_FieldNumber_PavilionLevel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CubismSet

@implementation PB3CubismSet

@dynamic setId;
@dynamic cubismIdsArray, cubismIdsArray_Count;
@dynamic isSplit;

typedef struct PB3CubismSet__storage_ {
  uint32_t _has_storage_[1];
  NSString *setId;
  NSMutableArray *cubismIdsArray;
} PB3CubismSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "setId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismSet_FieldNumber_SetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismSet__storage_, setId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismSet_FieldNumber_CubismIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CubismSet__storage_, cubismIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSplit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismSet_FieldNumber_IsSplit,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismSet class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismSet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismItem

@implementation PB3CubismItem

@dynamic productId;

typedef struct PB3CubismItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *productId;
} PB3CubismItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "productId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismItem_FieldNumber_ProductId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismItem__storage_, productId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismItem class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismShopItem

@implementation PB3CubismShopItem

@dynamic productId;
@dynamic price;
@dynamic isBuy;
@dynamic productIcon;
@dynamic hasSet, set;
@dynamic isShow;
@dynamic productName;
@dynamic isWear;
@dynamic level;
@dynamic belongSetId;
@dynamic validTime;
@dynamic classifyId;

typedef struct PB3CubismShopItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t price;
  PB3CubismItemLevel level;
  int32_t classifyId;
  NSString *productId;
  NSString *productIcon;
  PB3CubismSet *set;
  NSString *productName;
  NSString *belongSetId;
  int64_t validTime;
} PB3CubismShopItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "productId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_ProductId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, productId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_Price,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isBuy",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_IsBuy,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "productIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_ProductIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, productIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "set",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismSet),
        .number = PB3CubismShopItem_FieldNumber_Set,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, set),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_IsShow,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "productName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_ProductName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, productName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isWear",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_IsWear,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PB3CubismItemLevel_EnumDescriptor,
        .number = PB3CubismShopItem_FieldNumber_Level,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "belongSetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_BelongSetId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, belongSetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_ValidTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, validTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "classifyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopItem_FieldNumber_ClassifyId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3CubismShopItem__storage_, classifyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismShopItem class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismShopItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CubismShopItem_Level_RawValue(PB3CubismShopItem *message) {
  GPBDescriptor *descriptor = [PB3CubismShopItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismShopItem_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CubismShopItem_Level_RawValue(PB3CubismShopItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CubismShopItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismShopItem_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CubismShopClassify

@implementation PB3CubismShopClassify

@dynamic classifyId;
@dynamic classifyName;
@dynamic classifyIcon;
@dynamic highlightIconURL;
@dynamic cubismShopItemsArray, cubismShopItemsArray_Count;

typedef struct PB3CubismShopClassify__storage_ {
  uint32_t _has_storage_[1];
  int32_t classifyId;
  NSString *classifyName;
  NSString *classifyIcon;
  NSString *highlightIconURL;
  NSMutableArray *cubismShopItemsArray;
} PB3CubismShopClassify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "classifyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopClassify_FieldNumber_ClassifyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismShopClassify__storage_, classifyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "classifyName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopClassify_FieldNumber_ClassifyName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismShopClassify__storage_, classifyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "classifyIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopClassify_FieldNumber_ClassifyIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CubismShopClassify__storage_, classifyIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "highlightIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismShopClassify_FieldNumber_HighlightIconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CubismShopClassify__storage_, highlightIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismShopItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismShopItem),
        .number = PB3CubismShopClassify_FieldNumber_CubismShopItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CubismShopClassify__storage_, cubismShopItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismShopClassify class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismShopClassify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\t\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyCubismReq

@implementation PB3BuyCubismReq

@dynamic cubismItemsArray, cubismItemsArray_Count;
@dynamic wearCubismMap, wearCubismMap_Count;

typedef struct PB3BuyCubismReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cubismItemsArray;
  GPBInt32ObjectDictionary *wearCubismMap;
} PB3BuyCubismReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismItem),
        .number = PB3BuyCubismReq_FieldNumber_CubismItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BuyCubismReq__storage_, cubismItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wearCubismMap",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyCubismReq_FieldNumber_WearCubismMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BuyCubismReq__storage_, wearCubismMap),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyInt32 | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyCubismReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyCubismReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyCubismRes

@implementation PB3BuyCubismRes

@dynamic hasSet, set;

typedef struct PB3BuyCubismRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CubismSet *set;
} PB3BuyCubismRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "set",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismSet),
        .number = PB3BuyCubismRes_FieldNumber_Set,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyCubismRes__storage_, set),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyCubismRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyCubismRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveCubismReq

@implementation PB3SaveCubismReq

@dynamic wearCubismMap, wearCubismMap_Count;
@dynamic reqType;

typedef struct PB3SaveCubismReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SaveCubismReqType reqType;
  GPBInt32ObjectDictionary *wearCubismMap;
} PB3SaveCubismReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wearCubismMap",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveCubismReq_FieldNumber_WearCubismMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SaveCubismReq__storage_, wearCubismMap),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyInt32 | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reqType",
        .dataTypeSpecific.enumDescFunc = PB3SaveCubismReqType_EnumDescriptor,
        .number = PB3SaveCubismReq_FieldNumber_ReqType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaveCubismReq__storage_, reqType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveCubismReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaveCubismReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SaveCubismReq_ReqType_RawValue(PB3SaveCubismReq *message) {
  GPBDescriptor *descriptor = [PB3SaveCubismReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SaveCubismReq_FieldNumber_ReqType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SaveCubismReq_ReqType_RawValue(PB3SaveCubismReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SaveCubismReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SaveCubismReq_FieldNumber_ReqType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SaveCubismRes

@implementation PB3SaveCubismRes


typedef struct PB3SaveCubismRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SaveCubismRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveCubismRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SaveCubismRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DyeingCubismReq

@implementation PB3DyeingCubismReq

@dynamic cubismId;

typedef struct PB3DyeingCubismReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *cubismId;
} PB3DyeingCubismReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingCubismReq_FieldNumber_CubismId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DyeingCubismReq__storage_, cubismId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DyeingCubismReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DyeingCubismReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DyeingCubismRes

@implementation PB3DyeingCubismRes

@dynamic cubismItemsArray, cubismItemsArray_Count;

typedef struct PB3DyeingCubismRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cubismItemsArray;
} PB3DyeingCubismRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismItem),
        .number = PB3DyeingCubismRes_FieldNumber_CubismItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DyeingCubismRes__storage_, cubismItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DyeingCubismRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DyeingCubismRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryCubismShopReq

@implementation PB3QueryCubismShopReq

@dynamic classifyBelongType;
@dynamic queryType;

typedef struct PB3QueryCubismShopReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ClassifyBelongType classifyBelongType;
  PB3CubismShopQueryType queryType;
} PB3QueryCubismShopReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "classifyBelongType",
        .dataTypeSpecific.enumDescFunc = PB3ClassifyBelongType_EnumDescriptor,
        .number = PB3QueryCubismShopReq_FieldNumber_ClassifyBelongType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryCubismShopReq__storage_, classifyBelongType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "queryType",
        .dataTypeSpecific.enumDescFunc = PB3CubismShopQueryType_EnumDescriptor,
        .number = PB3QueryCubismShopReq_FieldNumber_QueryType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryCubismShopReq__storage_, queryType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismShopReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryCubismShopReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3QueryCubismShopReq_ClassifyBelongType_RawValue(PB3QueryCubismShopReq *message) {
  GPBDescriptor *descriptor = [PB3QueryCubismShopReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryCubismShopReq_FieldNumber_ClassifyBelongType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QueryCubismShopReq_ClassifyBelongType_RawValue(PB3QueryCubismShopReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QueryCubismShopReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryCubismShopReq_FieldNumber_ClassifyBelongType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3QueryCubismShopReq_QueryType_RawValue(PB3QueryCubismShopReq *message) {
  GPBDescriptor *descriptor = [PB3QueryCubismShopReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryCubismShopReq_FieldNumber_QueryType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QueryCubismShopReq_QueryType_RawValue(PB3QueryCubismShopReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QueryCubismShopReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryCubismShopReq_FieldNumber_QueryType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3QueryCubismShopRes

@implementation PB3QueryCubismShopRes

@dynamic cubismShopClassifyListArray, cubismShopClassifyListArray_Count;

typedef struct PB3QueryCubismShopRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cubismShopClassifyListArray;
} PB3QueryCubismShopRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismShopClassifyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismShopClassify),
        .number = PB3QueryCubismShopRes_FieldNumber_CubismShopClassifyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QueryCubismShopRes__storage_, cubismShopClassifyListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismShopRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryCubismShopRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryCubismSetReq

@implementation PB3QueryCubismSetReq

@dynamic setId;

typedef struct PB3QueryCubismSetReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *setId;
} PB3QueryCubismSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "setId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismSetReq_FieldNumber_SetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryCubismSetReq__storage_, setId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismSetReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryCubismSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryCubismSetRes

@implementation PB3QueryCubismSetRes

@dynamic itemsArray, itemsArray_Count;

typedef struct PB3QueryCubismSetRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} PB3QueryCubismSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismSetItem),
        .number = PB3QueryCubismSetRes_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QueryCubismSetRes__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismSetRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryCubismSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismSetItem

@implementation PB3CubismSetItem

@dynamic name;
@dynamic iconURL;
@dynamic cubismConfigsArray, cubismConfigsArray_Count;

typedef struct PB3CubismSetItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *iconURL;
  NSMutableArray *cubismConfigsArray;
} PB3CubismSetItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismSetItem_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismSetItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismSetItem_FieldNumber_IconURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismSetItem__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismConfigsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfigItem),
        .number = PB3CubismSetItem_FieldNumber_CubismConfigsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CubismSetItem__storage_, cubismConfigsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismSetItem class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismSetItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfigItem

@implementation PB3ConfigItem

@dynamic configId;
@dynamic classifyId;

typedef struct PB3ConfigItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t classifyId;
  NSString *configId;
} PB3ConfigItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "configId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfigItem_FieldNumber_ConfigId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfigItem__storage_, configId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "classifyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfigItem_FieldNumber_ClassifyId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfigItem__storage_, classifyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfigItem class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfigItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryDyeingPanelInfoReq

@implementation PB3QueryDyeingPanelInfoReq


typedef struct PB3QueryDyeingPanelInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryDyeingPanelInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryDyeingPanelInfoReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryDyeingPanelInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryDyeingPanelInfoRes

@implementation PB3QueryDyeingPanelInfoRes

@dynamic dyeingPartsInfoListArray, dyeingPartsInfoListArray_Count;

typedef struct PB3QueryDyeingPanelInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dyeingPartsInfoListArray;
} PB3QueryDyeingPanelInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dyeingPartsInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DyeingPartsInfo),
        .number = PB3QueryDyeingPanelInfoRes_FieldNumber_DyeingPartsInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QueryDyeingPanelInfoRes__storage_, dyeingPartsInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryDyeingPanelInfoRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryDyeingPanelInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DyeingPartsInfo

@implementation PB3DyeingPartsInfo

@dynamic classifyId;
@dynamic classifyName;
@dynamic classifyIcon;
@dynamic highlightIconURL;
@dynamic wearCubismId;
@dynamic cubismIdsArray, cubismIdsArray_Count;
@dynamic dyeingActualPrice;
@dynamic dyeingOriginPrice;

typedef struct PB3DyeingPartsInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t classifyId;
  int32_t dyeingActualPrice;
  int32_t dyeingOriginPrice;
  NSString *classifyName;
  NSString *classifyIcon;
  NSString *highlightIconURL;
  NSString *wearCubismId;
  NSMutableArray *cubismIdsArray;
} PB3DyeingPartsInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "classifyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_ClassifyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, classifyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "classifyName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_ClassifyName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, classifyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "classifyIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_ClassifyIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, classifyIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "highlightIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_HighlightIconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, highlightIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wearCubismId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_WearCubismId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, wearCubismId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_CubismIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, cubismIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dyeingActualPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_DyeingActualPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, dyeingActualPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dyeingOriginPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3DyeingPartsInfo_FieldNumber_DyeingOriginPrice,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3DyeingPartsInfo__storage_, dyeingOriginPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DyeingPartsInfo class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DyeingPartsInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\t\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastCubismActionReq

@implementation PB3BroadcastCubismActionReq

@dynamic action;

typedef struct PB3BroadcastCubismActionReq__storage_ {
  uint32_t _has_storage_[1];
  PB3CubismAction action;
} PB3BroadcastCubismActionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = PB3CubismAction_EnumDescriptor,
        .number = PB3BroadcastCubismActionReq_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastCubismActionReq__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastCubismActionReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastCubismActionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastCubismActionReq_Action_RawValue(PB3BroadcastCubismActionReq *message) {
  GPBDescriptor *descriptor = [PB3BroadcastCubismActionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastCubismActionReq_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastCubismActionReq_Action_RawValue(PB3BroadcastCubismActionReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastCubismActionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastCubismActionReq_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastCubismActionRes

@implementation PB3BroadcastCubismActionRes


typedef struct PB3BroadcastCubismActionRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastCubismActionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastCubismActionRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BroadcastCubismActionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastCubismAction

@implementation PB3BroadcastCubismAction

@dynamic action;

typedef struct PB3BroadcastCubismAction__storage_ {
  uint32_t _has_storage_[1];
  PB3CubismAction action;
} PB3BroadcastCubismAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = PB3CubismAction_EnumDescriptor,
        .number = PB3BroadcastCubismAction_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastCubismAction__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastCubismAction class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastCubismAction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastCubismAction_Action_RawValue(PB3BroadcastCubismAction *message) {
  GPBDescriptor *descriptor = [PB3BroadcastCubismAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastCubismAction_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastCubismAction_Action_RawValue(PB3BroadcastCubismAction *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastCubismAction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastCubismAction_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3QueryCubismBackgroundReq

@implementation PB3QueryCubismBackgroundReq


typedef struct PB3QueryCubismBackgroundReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryCubismBackgroundReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismBackgroundReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryCubismBackgroundReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryCubismBackgroundRes

@implementation PB3QueryCubismBackgroundRes

@dynamic cubismRoomBgURL;
@dynamic cubismHomepageBgURL;
@dynamic cubismSpaceBgURL;
@dynamic pcCubismRoomLeftBgURL;
@dynamic pcCubismRoomRightBgURL;
@dynamic pcCubismSpaceBgURL;
@dynamic cubismDressingCenterBgURL;

typedef struct PB3QueryCubismBackgroundRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *cubismRoomBgURL;
  NSString *cubismHomepageBgURL;
  NSString *cubismSpaceBgURL;
  NSString *pcCubismRoomLeftBgURL;
  NSString *pcCubismRoomRightBgURL;
  NSString *pcCubismSpaceBgURL;
  NSString *cubismDressingCenterBgURL;
} PB3QueryCubismBackgroundRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismRoomBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismBackgroundRes_FieldNumber_CubismRoomBgURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryCubismBackgroundRes__storage_, cubismRoomBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismHomepageBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismBackgroundRes_FieldNumber_CubismHomepageBgURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryCubismBackgroundRes__storage_, cubismHomepageBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismSpaceBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismBackgroundRes_FieldNumber_CubismSpaceBgURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QueryCubismBackgroundRes__storage_, cubismSpaceBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCubismRoomLeftBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismBackgroundRes_FieldNumber_PcCubismRoomLeftBgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3QueryCubismBackgroundRes__storage_, pcCubismRoomLeftBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCubismRoomRightBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismBackgroundRes_FieldNumber_PcCubismRoomRightBgURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3QueryCubismBackgroundRes__storage_, pcCubismRoomRightBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCubismSpaceBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismBackgroundRes_FieldNumber_PcCubismSpaceBgURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3QueryCubismBackgroundRes__storage_, pcCubismSpaceBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismDressingCenterBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismBackgroundRes_FieldNumber_CubismDressingCenterBgURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3QueryCubismBackgroundRes__storage_, cubismDressingCenterBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismBackgroundRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryCubismBackgroundRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\006\244\242\241!!\000\002\006\250\242\241!!\000\003\006\245\242\241!!\000\004\002\246\244\244\242\241!!\000\005\002\246\244\245"
        "\242\241!!\000\006\002\246\245\242\241!!\000\007\006\250\246\242\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryCubismModelReq

@implementation PB3QueryCubismModelReq


typedef struct PB3QueryCubismModelReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryCubismModelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismModelReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryCubismModelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryCubismModelRes

@implementation PB3QueryCubismModelRes

@dynamic cubismMaleModelURL;
@dynamic cubismFemaleModelURL;

typedef struct PB3QueryCubismModelRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *cubismMaleModelURL;
  NSString *cubismFemaleModelURL;
} PB3QueryCubismModelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismMaleModelURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismModelRes_FieldNumber_CubismMaleModelURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryCubismModelRes__storage_, cubismMaleModelURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismFemaleModelURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryCubismModelRes_FieldNumber_CubismFemaleModelURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryCubismModelRes__storage_, cubismFemaleModelURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryCubismModelRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryCubismModelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\244\245\241!!\000\002\006\246\245\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismPlayer

@implementation PB3CubismPlayer

@dynamic id_p;
@dynamic id2;
@dynamic nickname;
@dynamic icon;

typedef struct PB3CubismPlayer__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickname;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3CubismPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismPlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismPlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismPlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismPlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismPlayer_FieldNumber_Nickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CubismPlayer__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismPlayer_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CubismPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismPlayer class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismExclusivePavilionReq

@implementation PB3CubismExclusivePavilionReq

@dynamic sex;
@dynamic index;

typedef struct PB3CubismExclusivePavilionReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t index;
} PB3CubismExclusivePavilionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3CubismExclusivePavilionReq_FieldNumber_Sex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionReq__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismExclusivePavilionReq_FieldNumber_Index,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismExclusivePavilionReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismExclusivePavilionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CubismExclusivePavilionReq_Sex_RawValue(PB3CubismExclusivePavilionReq *message) {
  GPBDescriptor *descriptor = [PB3CubismExclusivePavilionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismExclusivePavilionReq_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CubismExclusivePavilionReq_Sex_RawValue(PB3CubismExclusivePavilionReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CubismExclusivePavilionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismExclusivePavilionReq_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CubismExclusivePavilionRes

@implementation PB3CubismExclusivePavilionRes

@dynamic listArray, listArray_Count;
@dynamic nextIndex;

typedef struct PB3CubismExclusivePavilionRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3CubismExclusivePavilionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismExclusivePavilionRes_item),
        .number = PB3CubismExclusivePavilionRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismExclusivePavilionRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismExclusivePavilionRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismExclusivePavilionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismExclusivePavilionRes_item

@implementation PB3CubismExclusivePavilionRes_item

@dynamic name;
@dynamic level;
@dynamic picURL;
@dynamic setCardURL;
@dynamic gainAt;
@dynamic produceWay;
@dynamic hasPlayer, player;

typedef struct PB3CubismExclusivePavilionRes_item__storage_ {
  uint32_t _has_storage_[1];
  PB3CubismItemLevel level;
  NSString *name;
  NSString *picURL;
  NSString *setCardURL;
  NSString *gainAt;
  NSString *produceWay;
  PB3CubismPlayer *player;
} PB3CubismExclusivePavilionRes_item__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismExclusivePavilionRes_item_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes_item__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PB3CubismItemLevel_EnumDescriptor,
        .number = PB3CubismExclusivePavilionRes_item_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes_item__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismExclusivePavilionRes_item_FieldNumber_PicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes_item__storage_, picURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "setCardURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismExclusivePavilionRes_item_FieldNumber_SetCardURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes_item__storage_, setCardURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gainAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismExclusivePavilionRes_item_FieldNumber_GainAt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes_item__storage_, gainAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "produceWay",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismExclusivePavilionRes_item_FieldNumber_ProduceWay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes_item__storage_, produceWay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismPlayer),
        .number = PB3CubismExclusivePavilionRes_item_FieldNumber_Player,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CubismExclusivePavilionRes_item__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismExclusivePavilionRes_item class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismExclusivePavilionRes_item__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\003\241!!\000\004\003\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PB3CubismExclusivePavilionRes)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CubismExclusivePavilionRes_item_Level_RawValue(PB3CubismExclusivePavilionRes_item *message) {
  GPBDescriptor *descriptor = [PB3CubismExclusivePavilionRes_item descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismExclusivePavilionRes_item_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CubismExclusivePavilionRes_item_Level_RawValue(PB3CubismExclusivePavilionRes_item *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CubismExclusivePavilionRes_item descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismExclusivePavilionRes_item_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CubismLimitedPavilionReq

@implementation PB3CubismLimitedPavilionReq

@dynamic sex;
@dynamic index;

typedef struct PB3CubismLimitedPavilionReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t index;
} PB3CubismLimitedPavilionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3CubismLimitedPavilionReq_FieldNumber_Sex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionReq__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismLimitedPavilionReq_FieldNumber_Index,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismLimitedPavilionReq class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismLimitedPavilionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CubismLimitedPavilionReq_Sex_RawValue(PB3CubismLimitedPavilionReq *message) {
  GPBDescriptor *descriptor = [PB3CubismLimitedPavilionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismLimitedPavilionReq_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CubismLimitedPavilionReq_Sex_RawValue(PB3CubismLimitedPavilionReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CubismLimitedPavilionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismLimitedPavilionReq_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CubismLimitedPavilionRes

@implementation PB3CubismLimitedPavilionRes

@dynamic listArray, listArray_Count;
@dynamic nextIndex;

typedef struct PB3CubismLimitedPavilionRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3CubismLimitedPavilionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CubismLimitedPavilionRes_item),
        .number = PB3CubismLimitedPavilionRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismLimitedPavilionRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismLimitedPavilionRes class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismLimitedPavilionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CubismLimitedPavilionRes_item

@implementation PB3CubismLimitedPavilionRes_item

@dynamic name;
@dynamic level;
@dynamic picURL;
@dynamic setCardURL;
@dynamic produceWay;

typedef struct PB3CubismLimitedPavilionRes_item__storage_ {
  uint32_t _has_storage_[1];
  PB3CubismItemLevel level;
  NSString *name;
  NSString *picURL;
  NSString *setCardURL;
  NSString *produceWay;
} PB3CubismLimitedPavilionRes_item__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismLimitedPavilionRes_item_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionRes_item__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PB3CubismItemLevel_EnumDescriptor,
        .number = PB3CubismLimitedPavilionRes_item_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionRes_item__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismLimitedPavilionRes_item_FieldNumber_PicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionRes_item__storage_, picURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "setCardURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismLimitedPavilionRes_item_FieldNumber_SetCardURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionRes_item__storage_, setCardURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "produceWay",
        .dataTypeSpecific.className = NULL,
        .number = PB3CubismLimitedPavilionRes_item_FieldNumber_ProduceWay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CubismLimitedPavilionRes_item__storage_, produceWay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CubismLimitedPavilionRes_item class]
                                     rootClass:[PB3CubismExtRoot class]
                                          file:PB3CubismExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CubismLimitedPavilionRes_item__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\003\241!!\000\004\003\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PB3CubismLimitedPavilionRes)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CubismLimitedPavilionRes_item_Level_RawValue(PB3CubismLimitedPavilionRes_item *message) {
  GPBDescriptor *descriptor = [PB3CubismLimitedPavilionRes_item descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismLimitedPavilionRes_item_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CubismLimitedPavilionRes_item_Level_RawValue(PB3CubismLimitedPavilionRes_item *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CubismLimitedPavilionRes_item descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CubismLimitedPavilionRes_item_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
