// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/activity.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/ActivityExt.pbobjc.h"
#import "pb/ActivityCommon.pbobjc.h"
#import "pb/ActivityCliExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ActivityExtRoot

@implementation PB3ActivityExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3ActivityExtRoot_FileDescriptor

static GPBFileDescriptor *PB3ActivityExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3BetStatusType

GPBEnumDescriptor *PB3BetStatusType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BetStatusTypeNone\000BetStatusTypeBet\000BetSt"
        "atusTypeWaitResult\000BetStatusTypeResult\000B"
        "etStatusTypeWaitNextRound\000BetStatusTypeC"
        "lose\000";
    static const int32_t values[] = {
        PB3BetStatusType_BetStatusTypeNone,
        PB3BetStatusType_BetStatusTypeBet,
        PB3BetStatusType_BetStatusTypeWaitResult,
        PB3BetStatusType_BetStatusTypeResult,
        PB3BetStatusType_BetStatusTypeWaitNextRound,
        PB3BetStatusType_BetStatusTypeClose,
    };
    static const char *extraTextFormatInfo = "\006\000\021\000\001\020\000\002\027\000\003\023\000\004\032\000\005\022\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BetStatusType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BetStatusType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BetStatusType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BetStatusType_BetStatusTypeNone:
    case PB3BetStatusType_BetStatusTypeBet:
    case PB3BetStatusType_BetStatusTypeWaitResult:
    case PB3BetStatusType_BetStatusTypeResult:
    case PB3BetStatusType_BetStatusTypeWaitNextRound:
    case PB3BetStatusType_BetStatusTypeClose:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DeiceGridRewardType

GPBEnumDescriptor *PB3DeiceGridRewardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RewardNone\000Gift\000TreasureBox\000Gold\000RewardE"
        "ffect\000Point\000Entity\000";
    static const int32_t values[] = {
        PB3DeiceGridRewardType_RewardNone,
        PB3DeiceGridRewardType_Gift,
        PB3DeiceGridRewardType_TreasureBox,
        PB3DeiceGridRewardType_Gold,
        PB3DeiceGridRewardType_RewardEffect,
        PB3DeiceGridRewardType_Point,
        PB3DeiceGridRewardType_Entity,
    };
    static const char *extraTextFormatInfo = "\007\000\n\000\001\004\000\002\013\000\003\004\000\004\014\000\005\005\000\006\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DeiceGridRewardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DeiceGridRewardType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DeiceGridRewardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DeiceGridRewardType_RewardNone:
    case PB3DeiceGridRewardType_Gift:
    case PB3DeiceGridRewardType_TreasureBox:
    case PB3DeiceGridRewardType_Gold:
    case PB3DeiceGridRewardType_RewardEffect:
    case PB3DeiceGridRewardType_Point:
    case PB3DeiceGridRewardType_Entity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CpsPlayerRoleEnum

GPBEnumDescriptor *PB3CpsPlayerRoleEnum_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Guest\000ClanPlayer\000ClanOwner\000LeagueOwner\000";
    static const int32_t values[] = {
        PB3CpsPlayerRoleEnum_Guest,
        PB3CpsPlayerRoleEnum_ClanPlayer,
        PB3CpsPlayerRoleEnum_ClanOwner,
        PB3CpsPlayerRoleEnum_LeagueOwner,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CpsPlayerRoleEnum)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CpsPlayerRoleEnum_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CpsPlayerRoleEnum_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CpsPlayerRoleEnum_Guest:
    case PB3CpsPlayerRoleEnum_ClanPlayer:
    case PB3CpsPlayerRoleEnum_ClanOwner:
    case PB3CpsPlayerRoleEnum_LeagueOwner:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3StockGiftRetStatus

GPBEnumDescriptor *PB3StockGiftRetStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OptNull\000OptReceived\000OptSend\000OptRefuse\000Op"
        "tActEnd\000";
    static const int32_t values[] = {
        PB3StockGiftRetStatus_OptNull,
        PB3StockGiftRetStatus_OptReceived,
        PB3StockGiftRetStatus_OptSend,
        PB3StockGiftRetStatus_OptRefuse,
        PB3StockGiftRetStatus_OptActEnd,
    };
    static const char *extraTextFormatInfo = "\005\000\003\204\000\001\003\210\000\002\003\204\000\003\003\206\000\004\003\203\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3StockGiftRetStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3StockGiftRetStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3StockGiftRetStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3StockGiftRetStatus_OptNull:
    case PB3StockGiftRetStatus_OptReceived:
    case PB3StockGiftRetStatus_OptSend:
    case PB3StockGiftRetStatus_OptRefuse:
    case PB3StockGiftRetStatus_OptActEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3StockGiftOptType

GPBEnumDescriptor *PB3StockGiftOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StockGiftNul\000StockGiftAdd\000StockGiftDec\000";
    static const int32_t values[] = {
        PB3StockGiftOptType_StockGiftNul,
        PB3StockGiftOptType_StockGiftAdd,
        PB3StockGiftOptType_StockGiftDec,
    };
    static const char *extraTextFormatInfo = "\001\000e\344\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3StockGiftOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3StockGiftOptType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3StockGiftOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3StockGiftOptType_StockGiftNul:
    case PB3StockGiftOptType_StockGiftAdd:
    case PB3StockGiftOptType_StockGiftDec:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3StockGiftRelateType

GPBEnumDescriptor *PB3StockGiftRelateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RelateTypeNull\000RelateTypeWelfare\000RelateT"
        "ypeLottery\000RelateTypeSend\000RelateTypeRece"
        "ive\000RelateTypeExchange\000";
    static const int32_t values[] = {
        PB3StockGiftRelateType_RelateTypeNull,
        PB3StockGiftRelateType_RelateTypeWelfare,
        PB3StockGiftRelateType_RelateTypeLottery,
        PB3StockGiftRelateType_RelateTypeSend,
        PB3StockGiftRelateType_RelateTypeReceive,
        PB3StockGiftRelateType_RelateTypeExchange,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3StockGiftRelateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3StockGiftRelateType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3StockGiftRelateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3StockGiftRelateType_RelateTypeNull:
    case PB3StockGiftRelateType_RelateTypeWelfare:
    case PB3StockGiftRelateType_RelateTypeLottery:
    case PB3StockGiftRelateType_RelateTypeSend:
    case PB3StockGiftRelateType_RelateTypeReceive:
    case PB3StockGiftRelateType_RelateTypeExchange:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityUserType

GPBEnumDescriptor *PB3ActivityUserType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UtNone\000UtOxygen\000UtWechat\000UtQq\000";
    static const int32_t values[] = {
        PB3ActivityUserType_UtNone,
        PB3ActivityUserType_UtOxygen,
        PB3ActivityUserType_UtWechat,
        PB3ActivityUserType_UtQq,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityUserType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityUserType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityUserType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityUserType_UtNone:
    case PB3ActivityUserType_UtOxygen:
    case PB3ActivityUserType_UtWechat:
    case PB3ActivityUserType_UtQq:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3MissionIds

GPBEnumDescriptor *PB3MissionIds_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MissionZero\000MissionGetLike\000MissionPublis"
        "h\000MissionFollow\000MissionLike\000";
    static const int32_t values[] = {
        PB3MissionIds_MissionZero,
        PB3MissionIds_MissionGetLike,
        PB3MissionIds_MissionPublish,
        PB3MissionIds_MissionFollow,
        PB3MissionIds_MissionLike,
    };
    static const char *extraTextFormatInfo = "\005\000\013\000\001\016\000\002\016\000\003\r\000\004\013\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3MissionIds)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3MissionIds_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3MissionIds_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3MissionIds_MissionZero:
    case PB3MissionIds_MissionGetLike:
    case PB3MissionIds_MissionPublish:
    case PB3MissionIds_MissionFollow:
    case PB3MissionIds_MissionLike:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3QuizType

GPBEnumDescriptor *PB3QuizType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "QtNone\000QtJudge\000QtSingleChoice\000QtMultiCho"
        "ice\000QtCompletion\000";
    static const int32_t values[] = {
        PB3QuizType_QtNone,
        PB3QuizType_QtJudge,
        PB3QuizType_QtSingleChoice,
        PB3QuizType_QtMultiChoice,
        PB3QuizType_QtCompletion,
    };
    static const char *extraTextFormatInfo = "\005\000b\204\000\001b\205\000\002b\214\000\003b\213\000\004b\212\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3QuizType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3QuizType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3QuizType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3QuizType_QtNone:
    case PB3QuizType_QtJudge:
    case PB3QuizType_QtSingleChoice:
    case PB3QuizType_QtMultiChoice:
    case PB3QuizType_QtCompletion:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OptType

GPBEnumDescriptor *PB3OptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OtNone\000OtNormal\000OtOther\000";
    static const int32_t values[] = {
        PB3OptType_OtNone,
        PB3OptType_OtNormal,
        PB3OptType_OtOther,
    };
    static const char *extraTextFormatInfo = "\003\000b\204\000\001b\206\000\002b\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OptType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OptType_OtNone:
    case PB3OptType_OtNormal:
    case PB3OptType_OtOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NumType

GPBEnumDescriptor *PB3NumType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Num\000Hour\000Day\000Minute\000";
    static const int32_t values[] = {
        PB3NumType_Num,
        PB3NumType_Hour,
        PB3NumType_Day,
        PB3NumType_Minute,
    };
    static const char *extraTextFormatInfo = "\004\000\003\000\001\004\000\002\003\000\003\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NumType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NumType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NumType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NumType_Num:
    case PB3NumType_Hour:
    case PB3NumType_Day:
    case PB3NumType_Minute:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LuckFunType

GPBEnumDescriptor *PB3LuckFunType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LuckFunTypeNone\000LuckFunTypeNormal\000LuckFu"
        "nTypeFirstCharge\000";
    static const int32_t values[] = {
        PB3LuckFunType_LuckFunTypeNone,
        PB3LuckFunType_LuckFunTypeNormal,
        PB3LuckFunType_LuckFunTypeFirstCharge,
    };
    static const char *extraTextFormatInfo = "\003\000\004\203\204\204\000\001\004\203\204\206\000\002\004\203\204\205\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LuckFunType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LuckFunType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LuckFunType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LuckFunType_LuckFunTypeNone:
    case PB3LuckFunType_LuckFunTypeNormal:
    case PB3LuckFunType_LuckFunTypeFirstCharge:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LuckFunZoneType

GPBEnumDescriptor *PB3LuckFunZoneType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LfztZero\000LfztLimited\000LfztService\000LfztGem"
        "\000LfztEntity\000";
    static const int32_t values[] = {
        PB3LuckFunZoneType_LfztZero,
        PB3LuckFunZoneType_LfztLimited,
        PB3LuckFunZoneType_LfztService,
        PB3LuckFunZoneType_LfztGem,
        PB3LuckFunZoneType_LfztEntity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LuckFunZoneType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LuckFunZoneType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LuckFunZoneType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LuckFunZoneType_LfztZero:
    case PB3LuckFunZoneType_LfztLimited:
    case PB3LuckFunZoneType_LfztService:
    case PB3LuckFunZoneType_LfztGem:
    case PB3LuckFunZoneType_LfztEntity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3GetActConfReq

@implementation PB3GetActConfReq

@dynamic actId;
@dynamic confsArray, confsArray_Count;

typedef struct PB3GetActConfReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  GPBEnumArray *confsArray;
} PB3GetActConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetActConfReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetActConfReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confsArray",
        .dataTypeSpecific.enumDescFunc = PB3ActivityConfType_EnumDescriptor,
        .number = PB3GetActConfReq_FieldNumber_ConfsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfReq__storage_, confsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetActConfReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetActConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetActConfRes

@implementation PB3GetActConfRes

@dynamic activityArray, activityArray_Count;
@dynamic welfareArray, welfareArray_Count;
@dynamic confPuzzleArray, confPuzzleArray_Count;
@dynamic hasVote, vote;
@dynamic cultivateArray, cultivateArray_Count;
@dynamic goldBackArray, goldBackArray_Count;
@dynamic compoundArray, compoundArray_Count;
@dynamic drawCardArray, drawCardArray_Count;
@dynamic lotteryArray, lotteryArray_Count;
@dynamic confActFormCarrierArray, confActFormCarrierArray_Count;

typedef struct PB3GetActConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *activityArray;
  NSMutableArray *welfareArray;
  NSMutableArray *confPuzzleArray;
  PB3ConfVote *vote;
  NSMutableArray *cultivateArray;
  NSMutableArray *goldBackArray;
  NSMutableArray *compoundArray;
  NSMutableArray *drawCardArray;
  NSMutableArray *lotteryArray;
  NSMutableArray *confActFormCarrierArray;
} PB3GetActConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Activity),
        .number = PB3GetActConfRes_FieldNumber_ActivityArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, activityArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "welfareArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfWelfare),
        .number = PB3GetActConfRes_FieldNumber_WelfareArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, welfareArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confPuzzleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfPuzzle),
        .number = PB3GetActConfRes_FieldNumber_ConfPuzzleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, confPuzzleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "vote",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfVote),
        .number = PB3GetActConfRes_FieldNumber_Vote,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cultivateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfCultivate),
        .number = PB3GetActConfRes_FieldNumber_CultivateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, cultivateArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "goldBackArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfGoldBack),
        .number = PB3GetActConfRes_FieldNumber_GoldBackArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, goldBackArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "compoundArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfCompound),
        .number = PB3GetActConfRes_FieldNumber_CompoundArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, compoundArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "drawCardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfDrawCard),
        .number = PB3GetActConfRes_FieldNumber_DrawCardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, drawCardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lotteryArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfLottery),
        .number = PB3GetActConfRes_FieldNumber_LotteryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, lotteryArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confActFormCarrierArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActFormCarrier),
        .number = PB3GetActConfRes_FieldNumber_ConfActFormCarrierArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActConfRes__storage_, confActFormCarrierArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetActConfRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetActConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CountSortReq

@implementation PB3CountSortReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic giftId;
@dynamic cate;

typedef struct PB3CountSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int32_t giftId;
  NSString *cate;
} PB3CountSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountSortReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CountSortReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountSortReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CountSortReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountSortReq_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CountSortReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountSortReq_FieldNumber_Cate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CountSortReq__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CountSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CountSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CountSortRes

@implementation PB3CountSortRes


typedef struct PB3CountSortRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CountSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CountSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CountSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerSortReq

@implementation PB3PlayerSortReq

@dynamic hasParam, param;
@dynamic type;
@dynamic playerId;

typedef struct PB3PlayerSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  PB3SortParam *param;
  int64_t playerId;
} PB3PlayerSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortParam),
        .number = PB3PlayerSortReq_FieldNumber_Param,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerSortReq__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerSortReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerSortReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerSortRes

@implementation PB3PlayerSortRes

@dynamic listArray, listArray_Count;
@dynamic hasPlayer, player;
@dynamic total;

typedef struct PB3PlayerSortRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  PB3SortResult *player;
  int64_t total;
} PB3PlayerSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortResult),
        .number = PB3PlayerSortRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerSortRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortResult),
        .number = PB3PlayerSortRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerSortRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerSortRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ManyPlayerSortReq

@implementation PB3ManyPlayerSortReq

@dynamic hasParam, param;
@dynamic type;
@dynamic playerId;
@dynamic isFilterSelf;

typedef struct PB3ManyPlayerSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  PB3SortParam *param;
  int64_t playerId;
} PB3ManyPlayerSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortParam),
        .number = PB3ManyPlayerSortReq_FieldNumber_Param,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ManyPlayerSortReq__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManyPlayerSortReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ManyPlayerSortReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManyPlayerSortReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ManyPlayerSortReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isFilterSelf",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManyPlayerSortReq_FieldNumber_IsFilterSelf,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ManyPlayerSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ManyPlayerSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ManyPlayerSortRes

@implementation PB3ManyPlayerSortRes

@dynamic listArray, listArray_Count;
@dynamic total;
@dynamic hasPlayer, player;

typedef struct PB3ManyPlayerSortRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  PB3ManySortResult *player;
  int64_t total;
} PB3ManyPlayerSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ManySortResult),
        .number = PB3ManyPlayerSortRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ManyPlayerSortRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManyPlayerSortRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ManyPlayerSortRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ManySortResult),
        .number = PB3ManyPlayerSortRes_FieldNumber_Player,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ManyPlayerSortRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ManyPlayerSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ManyPlayerSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetManyPlayerSortNoAuthReq

@implementation PB3GetManyPlayerSortNoAuthReq

@dynamic hasParam, param;
@dynamic type;
@dynamic playerId;
@dynamic isFilterSelf;

typedef struct PB3GetManyPlayerSortNoAuthReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  PB3SortParam *param;
  int64_t playerId;
} PB3GetManyPlayerSortNoAuthReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortParam),
        .number = PB3GetManyPlayerSortNoAuthReq_FieldNumber_Param,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetManyPlayerSortNoAuthReq__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetManyPlayerSortNoAuthReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetManyPlayerSortNoAuthReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetManyPlayerSortNoAuthReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetManyPlayerSortNoAuthReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isFilterSelf",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetManyPlayerSortNoAuthReq_FieldNumber_IsFilterSelf,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetManyPlayerSortNoAuthReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetManyPlayerSortNoAuthReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetManyPlayerSortNoAuthRes

@implementation PB3GetManyPlayerSortNoAuthRes

@dynamic listArray, listArray_Count;
@dynamic total;
@dynamic hasPlayer, player;

typedef struct PB3GetManyPlayerSortNoAuthRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  PB3ManySortResult *player;
  int64_t total;
} PB3GetManyPlayerSortNoAuthRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ManySortResult),
        .number = PB3GetManyPlayerSortNoAuthRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetManyPlayerSortNoAuthRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetManyPlayerSortNoAuthRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetManyPlayerSortNoAuthRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ManySortResult),
        .number = PB3GetManyPlayerSortNoAuthRes_FieldNumber_Player,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetManyPlayerSortNoAuthRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetManyPlayerSortNoAuthRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetManyPlayerSortNoAuthRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ManyRoomSortReq

@implementation PB3ManyRoomSortReq

@dynamic hasParam, param;
@dynamic type;
@dynamic playerId;

typedef struct PB3ManyRoomSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  PB3SortParam *param;
  int64_t playerId;
} PB3ManyRoomSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortParam),
        .number = PB3ManyRoomSortReq_FieldNumber_Param,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ManyRoomSortReq__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManyRoomSortReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ManyRoomSortReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManyRoomSortReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ManyRoomSortReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ManyRoomSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ManyRoomSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ManyRoomSortRes

@implementation PB3ManyRoomSortRes

@dynamic listArray, listArray_Count;
@dynamic total;
@dynamic hasRoom, room;

typedef struct PB3ManyRoomSortRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  PB3ManySortResult *room;
  int64_t total;
} PB3ManyRoomSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ManySortResult),
        .number = PB3ManyRoomSortRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ManyRoomSortRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManyRoomSortRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ManyRoomSortRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "room",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ManySortResult),
        .number = PB3ManyRoomSortRes_FieldNumber_Room,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ManyRoomSortRes__storage_, room),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ManyRoomSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ManyRoomSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSortReq

@implementation PB3RoomSortReq

@dynamic hasParam, param;
@dynamic roomId;

typedef struct PB3RoomSortReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SortParam *param;
  int64_t roomId;
} PB3RoomSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortParam),
        .number = PB3RoomSortReq_FieldNumber_Param,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomSortReq__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomSortReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomSortReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSortRes

@implementation PB3RoomSortRes

@dynamic listArray, listArray_Count;
@dynamic hasRoom, room;
@dynamic total;

typedef struct PB3RoomSortRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  PB3SortResult *room;
  int64_t total;
} PB3RoomSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortResult),
        .number = PB3RoomSortRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomSortRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "room",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortResult),
        .number = PB3RoomSortRes_FieldNumber_Room,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomSortRes__storage_, room),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomSortRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomSortRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGoodNumReq

@implementation PB3GetGoodNumReq

@dynamic playerId;
@dynamic activityId;
@dynamic relActivityId;

typedef struct PB3GetGoodNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int64_t playerId;
} PB3GetGoodNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGoodNumReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGoodNumReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGoodNumReq_FieldNumber_ActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetGoodNumReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGoodNumReq_FieldNumber_RelActivityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetGoodNumReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGoodNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGoodNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGoodNumRes

@implementation PB3GetGoodNumRes

@dynamic number;

typedef struct PB3GetGoodNumRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t number;
} PB3GetGoodNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGoodNumRes_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGoodNumRes__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGoodNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGoodNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RandGoodNumReq

@implementation PB3RandGoodNumReq

@dynamic playerId;
@dynamic activityId;
@dynamic relActivityId;

typedef struct PB3RandGoodNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int64_t playerId;
} PB3RandGoodNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandGoodNumReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RandGoodNumReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandGoodNumReq_FieldNumber_ActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RandGoodNumReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandGoodNumReq_FieldNumber_RelActivityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RandGoodNumReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RandGoodNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RandGoodNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RandGoodNumRes

@implementation PB3RandGoodNumRes

@dynamic number;
@dynamic guaranteedAward;

typedef struct PB3RandGoodNumRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t number;
} PB3RandGoodNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandGoodNumRes_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RandGoodNumRes__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "guaranteedAward",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandGoodNumRes_FieldNumber_GuaranteedAward,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RandGoodNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RandGoodNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BindGoodNumReq

@implementation PB3BindGoodNumReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic number;
@dynamic oldNumber;
@dynamic used;

typedef struct PB3BindGoodNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int64_t number;
  int64_t oldNumber;
} PB3BindGoodNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindGoodNumReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BindGoodNumReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindGoodNumReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BindGoodNumReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindGoodNumReq_FieldNumber_Number,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BindGoodNumReq__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "oldNumber",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindGoodNumReq_FieldNumber_OldNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BindGoodNumReq__storage_, oldNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "used",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindGoodNumReq_FieldNumber_Used,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindGoodNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BindGoodNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BindGoodNumRes

@implementation PB3BindGoodNumRes


typedef struct PB3BindGoodNumRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BindGoodNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindGoodNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BindGoodNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyRockGoodNumReq

@implementation PB3BuyRockGoodNumReq

@dynamic activityId;
@dynamic relActivityId;

typedef struct PB3BuyRockGoodNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
} PB3BuyRockGoodNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyRockGoodNumReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyRockGoodNumReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyRockGoodNumReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BuyRockGoodNumReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyRockGoodNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyRockGoodNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyRockGoodNumRes

@implementation PB3BuyRockGoodNumRes


typedef struct PB3BuyRockGoodNumRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BuyRockGoodNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyRockGoodNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BuyRockGoodNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPlayerPayRes

@implementation PB3GetPlayerPayRes

@dynamic payCount;
@dynamic times;
@dynamic countTimes;
@dynamic bindNumTimes;
@dynamic guaranteedUsed;
@dynamic guaranteedPlan;

typedef struct PB3GetPlayerPayRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t times;
  int32_t countTimes;
  int32_t bindNumTimes;
  int32_t guaranteedUsed;
  int32_t guaranteedPlan;
  int64_t payCount;
} PB3GetPlayerPayRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerPayRes_FieldNumber_PayCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPlayerPayRes__storage_, payCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "times",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerPayRes_FieldNumber_Times,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetPlayerPayRes__storage_, times),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "countTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerPayRes_FieldNumber_CountTimes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetPlayerPayRes__storage_, countTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bindNumTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerPayRes_FieldNumber_BindNumTimes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetPlayerPayRes__storage_, bindNumTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "guaranteedUsed",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerPayRes_FieldNumber_GuaranteedUsed,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetPlayerPayRes__storage_, guaranteedUsed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "guaranteedPlan",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerPayRes_FieldNumber_GuaranteedPlan,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GetPlayerPayRes__storage_, guaranteedPlan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPlayerPayRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPlayerPayRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetThemeReq

@implementation PB3GetThemeReq


typedef struct PB3GetThemeReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetThemeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetThemeReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetThemeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetThemeRes

@implementation PB3GetThemeRes

@dynamic themesArray, themesArray_Count;

typedef struct PB3GetThemeRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *themesArray;
} PB3GetThemeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "themesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Theme),
        .number = PB3GetThemeRes_FieldNumber_ThemesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetThemeRes__storage_, themesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetThemeRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetThemeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuaranteedAwardReq

@implementation PB3GuaranteedAwardReq

@dynamic activityId;
@dynamic relActivityId;

typedef struct PB3GuaranteedAwardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
} PB3GuaranteedAwardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuaranteedAwardReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GuaranteedAwardReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuaranteedAwardReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GuaranteedAwardReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuaranteedAwardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GuaranteedAwardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuaranteedAwardRes

@implementation PB3GuaranteedAwardRes

@dynamic giftId;
@dynamic num;

typedef struct PB3GuaranteedAwardRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int64_t num;
} PB3GuaranteedAwardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuaranteedAwardRes_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GuaranteedAwardRes__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuaranteedAwardRes_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GuaranteedAwardRes__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuaranteedAwardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GuaranteedAwardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PublishCommentReq

@implementation PB3PublishCommentReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic notice;
@dynamic showName;

typedef struct PB3PublishCommentReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  NSString *notice;
} PB3PublishCommentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PublishCommentReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PublishCommentReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PublishCommentReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PublishCommentReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "notice",
        .dataTypeSpecific.className = NULL,
        .number = PB3PublishCommentReq_FieldNumber_Notice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PublishCommentReq__storage_, notice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PublishCommentReq_FieldNumber_ShowName,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PublishCommentReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PublishCommentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PublishCommentRes

@implementation PB3PublishCommentRes


typedef struct PB3PublishCommentRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PublishCommentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PublishCommentRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PublishCommentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListCommentReq

@implementation PB3ListCommentReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3ListCommentReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int64_t page;
  int64_t pageSize;
} PB3ListCommentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCommentReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListCommentReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCommentReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListCommentReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCommentReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListCommentReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCommentReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListCommentReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListCommentReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListCommentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListCommentRes

@implementation PB3ListCommentRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListCommentRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListCommentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Comment),
        .number = PB3ListCommentRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListCommentRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListCommentRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListCommentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNameListReq

@implementation PB3ListNameListReq

@dynamic relId;

typedef struct PB3ListNameListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3ListNameListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNameListReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListNameListReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNameListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNameListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNameListRes

@implementation PB3ListNameListRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListNameListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListNameListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NameListResult),
        .number = PB3ListNameListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListNameListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNameListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNameListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiveALikeReq

@implementation PB3GiveALikeReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic playerIdArray, playerIdArray_Count;
@dynamic type;

typedef struct PB3GiveALikeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int32_t type;
  GPBInt64Array *playerIdArray;
} PB3GiveALikeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveALikeReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiveALikeReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveALikeReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiveALikeReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveALikeReq_FieldNumber_PlayerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiveALikeReq__storage_, playerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveALikeReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiveALikeReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiveALikeReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiveALikeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiveALikeRes

@implementation PB3GiveALikeRes

@dynamic award;

typedef struct PB3GiveALikeRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *award;
} PB3GiveALikeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "award",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveALikeRes_FieldNumber_Award,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiveALikeRes__storage_, award),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiveALikeRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiveALikeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UploadFileReq

@implementation PB3UploadFileReq

@dynamic file;
@dynamic fileName;
@dynamic path;

typedef struct PB3UploadFileReq__storage_ {
  uint32_t _has_storage_[1];
  NSData *file;
  NSString *fileName;
  NSString *path;
} PB3UploadFileReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "file",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadFileReq_FieldNumber_File,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UploadFileReq__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadFileReq_FieldNumber_FileName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UploadFileReq__storage_, fileName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "path",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadFileReq_FieldNumber_Path,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UploadFileReq__storage_, path),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UploadFileReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UploadFileReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UploadFileRes

@implementation PB3UploadFileRes

@dynamic URL;

typedef struct PB3UploadFileRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} PB3UploadFileRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadFileRes_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UploadFileRes__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UploadFileRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UploadFileRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveWelfareReq

@implementation PB3ReceiveWelfareReq

@dynamic welfareId;
@dynamic targetId;
@dynamic selectAwardIdArray, selectAwardIdArray_Count;

typedef struct PB3ReceiveWelfareReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t welfareId;
  GPBInt32Array *selectAwardIdArray;
  int64_t targetId;
} PB3ReceiveWelfareReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWelfareReq_FieldNumber_WelfareId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveWelfareReq__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWelfareReq_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveWelfareReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selectAwardIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWelfareReq_FieldNumber_SelectAwardIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReceiveWelfareReq__storage_, selectAwardIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveWelfareReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveWelfareReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveWelfareRes

@implementation PB3ReceiveWelfareRes

@dynamic award;
@dynamic awardsArray, awardsArray_Count;

typedef struct PB3ReceiveWelfareRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *award;
  NSMutableArray *awardsArray;
} PB3ReceiveWelfareRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "award",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWelfareRes_FieldNumber_Award,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveWelfareRes__storage_, award),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3ReceiveWelfareRes_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReceiveWelfareRes__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveWelfareRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveWelfareRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FinishWelfareReq

@implementation PB3FinishWelfareReq

@dynamic welfareId;

typedef struct PB3FinishWelfareReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t welfareId;
} PB3FinishWelfareReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FinishWelfareReq_FieldNumber_WelfareId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FinishWelfareReq__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FinishWelfareReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FinishWelfareReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FinishWelfareRes

@implementation PB3FinishWelfareRes


typedef struct PB3FinishWelfareRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FinishWelfareRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FinishWelfareRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FinishWelfareRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetUsePointReq

@implementation PB3GetUsePointReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic playerId;

typedef struct PB3GetUsePointReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int64_t playerId;
} PB3GetUsePointReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetUsePointReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetUsePointReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetUsePointReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetUsePointReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetUsePointReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetUsePointReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetUsePointReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetUsePointReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetUsePointRes

@implementation PB3GetUsePointRes

@dynamic point;
@dynamic usePoint;

typedef struct PB3GetUsePointRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t point;
  int64_t usePoint;
} PB3GetUsePointRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetUsePointRes_FieldNumber_Point,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetUsePointRes__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usePoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetUsePointRes_FieldNumber_UsePoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetUsePointRes__storage_, usePoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetUsePointRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetUsePointRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DoTaskReq

@implementation PB3DoTaskReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic type;
@dynamic dayTime;
@dynamic welfareId;

typedef struct PB3DoTaskReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int32_t type;
  int32_t welfareId;
  int64_t dayTime;
} PB3DoTaskReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DoTaskReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DoTaskReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DoTaskReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DoTaskReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3DoTaskReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DoTaskReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3DoTaskReq_FieldNumber_DayTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DoTaskReq__storage_, dayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DoTaskReq_FieldNumber_WelfareId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DoTaskReq__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DoTaskReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DoTaskReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DoTaskRes

@implementation PB3DoTaskRes

@dynamic welfareIdArray, welfareIdArray_Count;

typedef struct PB3DoTaskRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *welfareIdArray;
} PB3DoTaskRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "welfareIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DoTaskRes_FieldNumber_WelfareIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DoTaskRes__storage_, welfareIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DoTaskRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DoTaskRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListSignReq

@implementation PB3ListSignReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic playerId;

typedef struct PB3ListSignReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int64_t playerId;
} PB3ListSignReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListSignReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListSignReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListSignReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListSignReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListSignReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListSignReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListSignReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListSignReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListSignRes

@implementation PB3ListSignRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListSignRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListSignRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SignInfo),
        .number = PB3ListSignRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListSignRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListSignRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListSignRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawLuckyReq

@implementation PB3DrawLuckyReq

@dynamic relId;
@dynamic num;
@dynamic lotteryId;
@dynamic assignId;
@dynamic isAutoBuy;
@dynamic extraLottery;

typedef struct PB3DrawLuckyReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t num;
  int32_t lotteryId;
  int32_t assignId;
  int32_t extraLottery;
} PB3DrawLuckyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawLuckyReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawLuckyReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawLuckyReq_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawLuckyReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawLuckyReq_FieldNumber_LotteryId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawLuckyReq__storage_, lotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assignId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawLuckyReq_FieldNumber_AssignId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DrawLuckyReq__storage_, assignId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAutoBuy",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawLuckyReq_FieldNumber_IsAutoBuy,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "extraLottery",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawLuckyReq_FieldNumber_ExtraLottery,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3DrawLuckyReq__storage_, extraLottery),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawLuckyReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawLuckyReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawLuckyRes

@implementation PB3DrawLuckyRes

@dynamic awards, awards_Count;
@dynamic deductAwards, deductAwards_Count;

typedef struct PB3DrawLuckyRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32ObjectDictionary *awards;
  GPBInt32ObjectDictionary *deductAwards;
} PB3DrawLuckyRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awards",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAwards),
        .number = PB3DrawLuckyRes_FieldNumber_Awards,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawLuckyRes__storage_, awards),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deductAwards",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAwards),
        .number = PB3DrawLuckyRes_FieldNumber_DeductAwards,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawLuckyRes__storage_, deductAwards),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyInt32 | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawLuckyRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawLuckyRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListGiftShowReq

@implementation PB3ListGiftShowReq

@dynamic activityId;
@dynamic relActivityId;

typedef struct PB3ListGiftShowReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
} PB3ListGiftShowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShowReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListGiftShowReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShowReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListGiftShowReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListGiftShowReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListGiftShowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListGiftShowRes

@implementation PB3ListGiftShowRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListGiftShowRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListGiftShowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ListGiftShow),
        .number = PB3ListGiftShowRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListGiftShowRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListGiftShowRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListGiftShowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActVoteReq

@implementation PB3ActVoteReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic targetId;
@dynamic giftId;
@dynamic num;

typedef struct PB3ActVoteReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int32_t giftId;
  int64_t targetId;
  int64_t num;
} PB3ActVoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActVoteReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActVoteReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActVoteReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActVoteReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActVoteReq_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActVoteReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActVoteReq_FieldNumber_GiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActVoteReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActVoteReq_FieldNumber_Num,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActVoteReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActVoteReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActVoteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActVoteRes

@implementation PB3ActVoteRes


typedef struct PB3ActVoteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ActVoteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActVoteRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ActVoteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RandNumberReq

@implementation PB3RandNumberReq

@dynamic relActivityId;
@dynamic cate;

typedef struct PB3RandNumberReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActivityId;
  int32_t cate;
} PB3RandNumberReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandNumberReq_FieldNumber_RelActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RandNumberReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandNumberReq_FieldNumber_Cate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RandNumberReq__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RandNumberReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RandNumberReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RandNumberRes

@implementation PB3RandNumberRes

@dynamic number;

typedef struct PB3RandNumberRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
} PB3RandNumberRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandNumberRes_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RandNumberRes__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RandNumberRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RandNumberRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNumberReq

@implementation PB3ListNumberReq

@dynamic relActivityId;

typedef struct PB3ListNumberReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActivityId;
} PB3ListNumberReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNumberReq_FieldNumber_RelActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListNumberReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNumberReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNumberReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNumberRes

@implementation PB3ListNumberRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListNumberRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListNumberRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Number),
        .number = PB3ListNumberRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListNumberRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNumberRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNumberRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNumberAwardReq

@implementation PB3ListNumberAwardReq

@dynamic relActivityId;

typedef struct PB3ListNumberAwardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActivityId;
} PB3ListNumberAwardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNumberAwardReq_FieldNumber_RelActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListNumberAwardReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNumberAwardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNumberAwardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNumberAwardRes

@implementation PB3ListNumberAwardRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListNumberAwardRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListNumberAwardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NumberAwardPlayer),
        .number = PB3ListNumberAwardRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListNumberAwardRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNumberAwardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNumberAwardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListSpecialAwardReq

@implementation PB3ListSpecialAwardReq

@dynamic relActivityId;

typedef struct PB3ListSpecialAwardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActivityId;
} PB3ListSpecialAwardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListSpecialAwardReq_FieldNumber_RelActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListSpecialAwardReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListSpecialAwardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListSpecialAwardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListSpecialAwardRes

@implementation PB3ListSpecialAwardRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListSpecialAwardRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListSpecialAwardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SpecialAward),
        .number = PB3ListSpecialAwardRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListSpecialAwardRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListSpecialAwardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListSpecialAwardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CountInviteReq

@implementation PB3CountInviteReq

@dynamic relActivityId;
@dynamic playerId;

typedef struct PB3CountInviteReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActivityId;
  int64_t playerId;
} PB3CountInviteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountInviteReq_FieldNumber_RelActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CountInviteReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountInviteReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CountInviteReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CountInviteReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CountInviteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CountInviteRes

@implementation PB3CountInviteRes

@dynamic inviteNum;

typedef struct PB3CountInviteRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t inviteNum;
} PB3CountInviteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountInviteRes_FieldNumber_InviteNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CountInviteRes__storage_, inviteNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CountInviteRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CountInviteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPlayerSummaryReq

@implementation PB3GetPlayerSummaryReq

@dynamic relId;
@dynamic playerId;

typedef struct PB3GetPlayerSummaryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int64_t playerId;
} PB3GetPlayerSummaryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPlayerSummaryReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPlayerSummaryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListPlayerActAwardReq

@implementation PB3ListPlayerActAwardReq

@dynamic relId;
@dynamic stage;
@dynamic playerId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3ListPlayerActAwardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t page;
  int32_t pageSize;
  int64_t stage;
  int64_t playerId;
} PB3ListPlayerActAwardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListPlayerActAwardReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListPlayerActAwardReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stage",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListPlayerActAwardReq_FieldNumber_Stage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListPlayerActAwardReq__storage_, stage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListPlayerActAwardReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListPlayerActAwardReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListPlayerActAwardReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListPlayerActAwardReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListPlayerActAwardReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ListPlayerActAwardReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListPlayerActAwardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListPlayerActAwardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListPlayerActAwardRes

@implementation PB3ListPlayerActAwardRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListPlayerActAwardRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListPlayerActAwardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerActAwardInfo),
        .number = PB3ListPlayerActAwardRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListPlayerActAwardRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListPlayerActAwardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListPlayerActAwardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerActAwardInfo

@implementation PB3PlayerActAwardInfo

@dynamic playerId;
@dynamic relId;
@dynamic awardId;
@dynamic num;
@dynamic type;
@dynamic value;
@dynamic name;
@dynamic imageURL;

typedef struct PB3PlayerActAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t num;
  PB3ActAwardType type;
  int32_t value;
  NSString *name;
  NSString *imageURL;
  int64_t playerId;
  int64_t awardId;
} PB3PlayerActAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActAwardInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActAwardInfo_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActAwardInfo_FieldNumber_AwardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActAwardInfo_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ActAwardType_EnumDescriptor,
        .number = PB3PlayerActAwardInfo_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActAwardInfo_FieldNumber_Value,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActAwardInfo_FieldNumber_Name,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActAwardInfo_FieldNumber_ImageURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PlayerActAwardInfo__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerActAwardInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerActAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\t\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerActAwardInfo_Type_RawValue(PB3PlayerActAwardInfo *message) {
  GPBDescriptor *descriptor = [PB3PlayerActAwardInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerActAwardInfo_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerActAwardInfo_Type_RawValue(PB3PlayerActAwardInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerActAwardInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerActAwardInfo_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetPlayerSummaryRes

@implementation PB3GetPlayerSummaryRes

@dynamic playerId;
@dynamic registerTime;
@dynamic registerRate;
@dynamic onlineAmountTime;
@dynamic followNum;
@dynamic followIntimateNum;
@dynamic intimateNum;
@dynamic hasLongestPlayer, longestPlayer;
@dynamic hasDissLongestPlayer, dissLongestPlayer;
@dynamic receiveGiftNum;
@dynamic receiveGiftAmount;
@dynamic receiveExpensiveGiftId;
@dynamic crackEggAmount;
@dynamic crackEggRate;
@dynamic keyWord;
@dynamic longestDay;
@dynamic logestDayTime;
@dynamic friendsArray, friendsArray_Count;
@dynamic intimatesArray, intimatesArray_Count;
@dynamic wealth;
@dynamic wealthRate;
@dynamic visitorSummary;
@dynamic beFollowNum;
@dynamic visitTimeFrequency;
@dynamic lastestVisitTime;
@dynamic buddyNum;
@dynamic sendGiftPlayerNum;
@dynamic sendGiftAmount;
@dynamic sendMostGiftPlayerId;
@dynamic sendMostGiftNum;
@dynamic receiveMostGiftsPlayerId;
@dynamic receiveMostGiftsAmount;
@dynamic receiveMostGiftsNum;
@dynamic rareGiftListArray, rareGiftListArray_Count;
@dynamic firstWaterFlowersTime;
@dynamic waterFlowerGiftListArray, waterFlowerGiftListArray_Count;
@dynamic billAmount;
@dynamic billDataArray, billDataArray_Count;
@dynamic hasAnnualTitle, annualTitle;
@dynamic annualLevel;
@dynamic fansNumDoc;
@dynamic lastVisitTimeDoc;
@dynamic buddyNumDoc;
@dynamic sendGiftNumDoc;
@dynamic diamondCarNumDoc;
@dynamic billTypeMostDoc;
@dynamic fansNumPercent;
@dynamic sendGiftGoldPercent;
@dynamic receiveGiftNumPercent;
@dynamic waterFlowerCarNumPercent;
@dynamic billNumPercent;

typedef struct PB3GetPlayerSummaryRes__storage_ {
  uint32_t _has_storage_[2];
  int32_t registerRate;
  int32_t onlineAmountTime;
  int32_t followNum;
  int32_t followIntimateNum;
  int32_t intimateNum;
  int32_t receiveGiftNum;
  int32_t receiveExpensiveGiftId;
  int32_t crackEggRate;
  int32_t keyWord;
  int32_t wealthRate;
  int32_t visitorSummary;
  int32_t beFollowNum;
  int32_t buddyNum;
  int32_t billAmount;
  int32_t annualLevel;
  int32_t fansNumPercent;
  int32_t sendGiftGoldPercent;
  int32_t receiveGiftNumPercent;
  int32_t waterFlowerCarNumPercent;
  int32_t billNumPercent;
  PB3PlayerTime *longestPlayer;
  PB3PlayerTime *dissLongestPlayer;
  NSMutableArray *friendsArray;
  NSMutableArray *intimatesArray;
  NSString *visitTimeFrequency;
  NSString *lastestVisitTime;
  NSMutableArray *rareGiftListArray;
  NSString *firstWaterFlowersTime;
  NSMutableArray *waterFlowerGiftListArray;
  NSMutableArray *billDataArray;
  PB3SummaryAnnualTitle *annualTitle;
  NSString *fansNumDoc;
  NSString *lastVisitTimeDoc;
  NSString *buddyNumDoc;
  NSString *sendGiftNumDoc;
  NSString *diamondCarNumDoc;
  NSString *billTypeMostDoc;
  int64_t playerId;
  int64_t registerTime;
  int64_t receiveGiftAmount;
  int64_t crackEggAmount;
  int64_t longestDay;
  int64_t logestDayTime;
  int64_t wealth;
  int64_t sendGiftPlayerNum;
  int64_t sendGiftAmount;
  int64_t sendMostGiftPlayerId;
  int64_t sendMostGiftNum;
  int64_t receiveMostGiftsPlayerId;
  int64_t receiveMostGiftsAmount;
  int64_t receiveMostGiftsNum;
} PB3GetPlayerSummaryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "registerTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_RegisterTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, registerTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "registerRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_RegisterRate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, registerRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "onlineAmountTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_OnlineAmountTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, onlineAmountTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_FollowNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, followNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followIntimateNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_FollowIntimateNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, followIntimateNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_IntimateNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, intimateNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "longestPlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTime),
        .number = PB3GetPlayerSummaryRes_FieldNumber_LongestPlayer,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, longestPlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dissLongestPlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTime),
        .number = PB3GetPlayerSummaryRes_FieldNumber_DissLongestPlayer,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, dissLongestPlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiveGiftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_ReceiveGiftNum,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, receiveGiftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "receiveGiftAmount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_ReceiveGiftAmount,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, receiveGiftAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiveExpensiveGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_ReceiveExpensiveGiftId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, receiveExpensiveGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "crackEggAmount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_CrackEggAmount,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, crackEggAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "crackEggRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_CrackEggRate,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, crackEggRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "keyWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_KeyWord,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, keyWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "longestDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_LongestDay,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, longestDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "logestDayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_LogestDayTime,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, logestDayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTime),
        .number = PB3GetPlayerSummaryRes_FieldNumber_FriendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, friendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimatesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTime),
        .number = PB3GetPlayerSummaryRes_FieldNumber_IntimatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, intimatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_Wealth,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wealthRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_WealthRate,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, wealthRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "visitorSummary",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_VisitorSummary,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, visitorSummary),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "beFollowNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_BeFollowNum,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, beFollowNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "visitTimeFrequency",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_VisitTimeFrequency,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, visitTimeFrequency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastestVisitTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_LastestVisitTime,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, lastestVisitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buddyNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_BuddyNum,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, buddyNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sendGiftPlayerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_SendGiftPlayerNum,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, sendGiftPlayerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sendGiftAmount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_SendGiftAmount,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, sendGiftAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sendMostGiftPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_SendMostGiftPlayerId,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, sendMostGiftPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sendMostGiftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_SendMostGiftNum,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, sendMostGiftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiveMostGiftsPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_ReceiveMostGiftsPlayerId,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, receiveMostGiftsPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiveMostGiftsAmount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_ReceiveMostGiftsAmount,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, receiveMostGiftsAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiveMostGiftsNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_ReceiveMostGiftsNum,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, receiveMostGiftsNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rareGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SummaryGift),
        .number = PB3GetPlayerSummaryRes_FieldNumber_RareGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, rareGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstWaterFlowersTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_FirstWaterFlowersTime,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, firstWaterFlowersTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "waterFlowerGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SummaryGift),
        .number = PB3GetPlayerSummaryRes_FieldNumber_WaterFlowerGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, waterFlowerGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "billAmount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_BillAmount,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, billAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SummaryBill),
        .number = PB3GetPlayerSummaryRes_FieldNumber_BillDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, billDataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "annualTitle",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SummaryAnnualTitle),
        .number = PB3GetPlayerSummaryRes_FieldNumber_AnnualTitle,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, annualTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "annualLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_AnnualLevel,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, annualLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fansNumDoc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_FansNumDoc,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, fansNumDoc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastVisitTimeDoc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_LastVisitTimeDoc,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, lastVisitTimeDoc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buddyNumDoc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_BuddyNumDoc,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, buddyNumDoc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendGiftNumDoc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_SendGiftNumDoc,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, sendGiftNumDoc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "diamondCarNumDoc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_DiamondCarNumDoc,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, diamondCarNumDoc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "billTypeMostDoc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_BillTypeMostDoc,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, billTypeMostDoc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansNumPercent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_FansNumPercent,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, fansNumPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sendGiftGoldPercent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_SendGiftGoldPercent,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, sendGiftGoldPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "receiveGiftNumPercent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_ReceiveGiftNumPercent,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, receiveGiftNumPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "waterFlowerCarNumPercent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_WaterFlowerCarNumPercent,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, waterFlowerCarNumPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billNumPercent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerSummaryRes_FieldNumber_BillNumPercent,
        .hasIndex = 45,
        .offset = (uint32_t)offsetof(PB3GetPlayerSummaryRes__storage_, billNumPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPlayerSummaryRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPlayerSummaryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SummaryAnnualTitle

@implementation PB3SummaryAnnualTitle

@dynamic title;
@dynamic titleType;

typedef struct PB3SummaryAnnualTitle__storage_ {
  uint32_t _has_storage_[1];
  int32_t titleType;
  NSString *title;
} PB3SummaryAnnualTitle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryAnnualTitle_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SummaryAnnualTitle__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryAnnualTitle_FieldNumber_TitleType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SummaryAnnualTitle__storage_, titleType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SummaryAnnualTitle class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SummaryAnnualTitle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SummaryGift

@implementation PB3SummaryGift

@dynamic giftId;
@dynamic giftNum;
@dynamic type;

typedef struct PB3SummaryGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int64_t giftId;
  int64_t giftNum;
} PB3SummaryGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryGift_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SummaryGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryGift_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SummaryGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryGift_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SummaryGift__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SummaryGift class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SummaryGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SummaryBill

@implementation PB3SummaryBill

@dynamic billId;
@dynamic billTypeNum;
@dynamic billTypeName;
@dynamic billTypeIcon;

typedef struct PB3SummaryBill__storage_ {
  uint32_t _has_storage_[1];
  int32_t billTypeNum;
  NSString *billTypeName;
  NSString *billTypeIcon;
  int64_t billId;
} PB3SummaryBill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "billId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryBill_FieldNumber_BillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SummaryBill__storage_, billId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "billTypeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryBill_FieldNumber_BillTypeNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SummaryBill__storage_, billTypeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billTypeName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryBill_FieldNumber_BillTypeName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SummaryBill__storage_, billTypeName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "billTypeIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SummaryBill_FieldNumber_BillTypeIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SummaryBill__storage_, billTypeIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SummaryBill class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SummaryBill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InviteCpReq

@implementation PB3InviteCpReq

@dynamic relId;
@dynamic targetId;
@dynamic msg;
@dynamic URL;

typedef struct PB3InviteCpReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  NSString *msg;
  NSString *URL;
  int64_t targetId;
} PB3InviteCpReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InviteCpReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReq_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InviteCpReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReq_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3InviteCpReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReq_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3InviteCpReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InviteCpReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InviteCpReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InviteCpRes

@implementation PB3InviteCpRes


typedef struct PB3InviteCpRes__storage_ {
  uint32_t _has_storage_[1];
} PB3InviteCpRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InviteCpRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3InviteCpRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InviteCpReplyReq

@implementation PB3InviteCpReplyReq

@dynamic relId;
@dynamic playerId;
@dynamic accept;
@dynamic msg;
@dynamic URL;

typedef struct PB3InviteCpReplyReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  NSString *msg;
  NSString *URL;
  int64_t playerId;
} PB3InviteCpReplyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReplyReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InviteCpReplyReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReplyReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InviteCpReplyReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "accept",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReplyReq_FieldNumber_Accept,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReplyReq_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3InviteCpReplyReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpReplyReq_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3InviteCpReplyReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InviteCpReplyReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InviteCpReplyReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InviteCpReplyRes

@implementation PB3InviteCpReplyRes


typedef struct PB3InviteCpReplyRes__storage_ {
  uint32_t _has_storage_[1];
} PB3InviteCpReplyRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InviteCpReplyRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3InviteCpReplyRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InviteCpPlayerReq

@implementation PB3InviteCpPlayerReq

@dynamic relId;

typedef struct PB3InviteCpPlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3InviteCpPlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpPlayerReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InviteCpPlayerReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InviteCpPlayerReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InviteCpPlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InviteCpPlayerRes

@implementation PB3InviteCpPlayerRes

@dynamic hasPlayer, player;
@dynamic playerListArray, playerListArray_Count;

typedef struct PB3InviteCpPlayerRes__storage_ {
  uint32_t _has_storage_[1];
  PB3PlayerSortMsg *player;
  GPBInt64Array *playerListArray;
} PB3InviteCpPlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerSortMsg),
        .number = PB3InviteCpPlayerRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InviteCpPlayerRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playerListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCpPlayerRes_FieldNumber_PlayerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InviteCpPlayerRes__storage_, playerListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InviteCpPlayerRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InviteCpPlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendCpInfoReq

@implementation PB3FriendCpInfoReq

@dynamic relActivityId;
@dynamic playerListArray, playerListArray_Count;

typedef struct PB3FriendCpInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActivityId;
  GPBInt64Array *playerListArray;
} PB3FriendCpInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendCpInfoReq_FieldNumber_RelActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendCpInfoReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendCpInfoReq_FieldNumber_PlayerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FriendCpInfoReq__storage_, playerListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendCpInfoReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendCpInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendCpInfoRes

@implementation PB3FriendCpInfoRes

@dynamic listArray, listArray_Count;

typedef struct PB3FriendCpInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3FriendCpInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FriendCpInfo),
        .number = PB3FriendCpInfoRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FriendCpInfoRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendCpInfoRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendCpInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendCpInfo

@implementation PB3FriendCpInfo

@dynamic playerId;
@dynamic isCp;

typedef struct PB3FriendCpInfo__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3FriendCpInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendCpInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendCpInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isCp",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendCpInfo_FieldNumber_IsCp,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendCpInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendCpInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPuzzlePlayerReq

@implementation PB3GetPuzzlePlayerReq

@dynamic relId;
@dynamic playerId;

typedef struct PB3GetPuzzlePlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int64_t playerId;
} PB3GetPuzzlePlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPuzzlePlayerReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPuzzlePlayerReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPuzzlePlayerReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetPuzzlePlayerReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPuzzlePlayerReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPuzzlePlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPuzzlePlayerRes

@implementation PB3GetPuzzlePlayerRes

@dynamic puzzleArray, puzzleArray_Count;

typedef struct PB3GetPuzzlePlayerRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *puzzleArray;
} PB3GetPuzzlePlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "puzzleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Puzzle),
        .number = PB3GetPuzzlePlayerRes_FieldNumber_PuzzleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetPuzzlePlayerRes__storage_, puzzleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPuzzlePlayerRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPuzzlePlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LightUpPuzzleReq

@implementation PB3LightUpPuzzleReq

@dynamic relId;
@dynamic puzzleId;

typedef struct PB3LightUpPuzzleReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t puzzleId;
} PB3LightUpPuzzleReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LightUpPuzzleReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LightUpPuzzleReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "puzzleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LightUpPuzzleReq_FieldNumber_PuzzleId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LightUpPuzzleReq__storage_, puzzleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LightUpPuzzleReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LightUpPuzzleReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LightUpPuzzleRes

@implementation PB3LightUpPuzzleRes

@dynamic awardsArray, awardsArray_Count;

typedef struct PB3LightUpPuzzleRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *awardsArray;
} PB3LightUpPuzzleRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3LightUpPuzzleRes_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LightUpPuzzleRes__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LightUpPuzzleRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LightUpPuzzleRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNoticeRecordReq

@implementation PB3ListNoticeRecordReq

@dynamic relId;
@dynamic playerId;
@dynamic confNoticeId;
@dynamic page;
@dynamic pageSize;
@dynamic startTime;
@dynamic endTime;

typedef struct PB3ListNoticeRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t playerId;
  int32_t confNoticeId;
  int32_t page;
  int32_t pageSize;
  int64_t startTime;
  int64_t endTime;
} PB3ListNoticeRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confNoticeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordReq_FieldNumber_ConfNoticeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordReq__storage_, confNoticeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordReq_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordReq_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNoticeRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNoticeRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNoticeRecordRes

@implementation PB3ListNoticeRecordRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3ListNoticeRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3ListNoticeRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NoticeRecord),
        .number = PB3ListNoticeRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListNoticeRecordRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNoticeRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNoticeRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNoticeMarqueeReq

@implementation PB3ListNoticeMarqueeReq

@dynamic relId;
@dynamic msgId;
@dynamic size;

typedef struct PB3ListNoticeMarqueeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t msgId;
  int32_t size;
} PB3ListNoticeMarqueeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeMarqueeReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListNoticeMarqueeReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeMarqueeReq_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListNoticeMarqueeReq__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListNoticeMarqueeReq_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListNoticeMarqueeReq__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNoticeMarqueeReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNoticeMarqueeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListNoticeMarqueeRes

@implementation PB3ListNoticeMarqueeRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListNoticeMarqueeRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListNoticeMarqueeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NoticeRecord),
        .number = PB3ListNoticeMarqueeRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListNoticeMarqueeRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListNoticeMarqueeRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListNoticeMarqueeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListLotteryRecordReq

@implementation PB3ListLotteryRecordReq

@dynamic relId;
@dynamic weight;
@dynamic page;
@dynamic pageSize;
@dynamic confId;
@dynamic playerId;

typedef struct PB3ListLotteryRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t weight;
  int32_t page;
  int32_t pageSize;
  int32_t confId;
  int64_t playerId;
} PB3ListLotteryRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLotteryRecordReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLotteryRecordReq_FieldNumber_Weight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordReq__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLotteryRecordReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLotteryRecordReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLotteryRecordReq_FieldNumber_ConfId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordReq__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLotteryRecordReq_FieldNumber_PlayerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListLotteryRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListLotteryRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListLotteryRecordRes

@implementation PB3ListLotteryRecordRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3ListLotteryRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3ListLotteryRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LotteryRecord),
        .number = PB3ListLotteryRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLotteryRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListLotteryRecordRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListLotteryRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListLotteryRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetLotteryPointReq

@implementation PB3GetLotteryPointReq

@dynamic relId;
@dynamic confLotteryId;

typedef struct PB3GetLotteryPointReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t confLotteryId;
} PB3GetLotteryPointReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLotteryPointReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetLotteryPointReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confLotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLotteryPointReq_FieldNumber_ConfLotteryId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetLotteryPointReq__storage_, confLotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLotteryPointReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetLotteryPointReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetLotteryPointRes

@implementation PB3GetLotteryPointRes

@dynamic point;
@dynamic serverPoint;

typedef struct PB3GetLotteryPointRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t point;
  int32_t serverPoint;
} PB3GetLotteryPointRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLotteryPointRes_FieldNumber_Point,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetLotteryPointRes__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serverPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLotteryPointRes_FieldNumber_ServerPoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetLotteryPointRes__storage_, serverPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLotteryPointRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetLotteryPointRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CountLotteryPointReq

@implementation PB3CountLotteryPointReq

@dynamic relId;
@dynamic confLotteryId;

typedef struct PB3CountLotteryPointReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t confLotteryId;
} PB3CountLotteryPointReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountLotteryPointReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CountLotteryPointReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confLotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountLotteryPointReq_FieldNumber_ConfLotteryId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CountLotteryPointReq__storage_, confLotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CountLotteryPointReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CountLotteryPointReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CountLotteryPointRes

@implementation PB3CountLotteryPointRes

@dynamic point;
@dynamic serverPoint;

typedef struct PB3CountLotteryPointRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t point;
  int32_t serverPoint;
} PB3CountLotteryPointRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountLotteryPointRes_FieldNumber_Point,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CountLotteryPointRes__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serverPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3CountLotteryPointRes_FieldNumber_ServerPoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CountLotteryPointRes__storage_, serverPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CountLotteryPointRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CountLotteryPointRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyDrawLotteryReq

@implementation PB3BuyDrawLotteryReq

@dynamic relId;
@dynamic buyId;
@dynamic num;

typedef struct PB3BuyDrawLotteryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t buyId;
  int32_t num;
} PB3BuyDrawLotteryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyDrawLotteryReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyDrawLotteryReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyDrawLotteryReq_FieldNumber_BuyId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BuyDrawLotteryReq__storage_, buyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyDrawLotteryReq_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BuyDrawLotteryReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyDrawLotteryReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyDrawLotteryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyDrawLotteryRes

@implementation PB3BuyDrawLotteryRes

@dynamic reward;

typedef struct PB3BuyDrawLotteryRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *reward;
} PB3BuyDrawLotteryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reward",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyDrawLotteryRes_FieldNumber_Reward,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyDrawLotteryRes__storage_, reward),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyDrawLotteryRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyDrawLotteryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewVoteReq

@implementation PB3NewVoteReq

@dynamic relId;
@dynamic targetIdArray, targetIdArray_Count;
@dynamic num;

typedef struct PB3NewVoteReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t num;
  GPBInt64Array *targetIdArray;
} PB3NewVoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewVoteReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteReq_FieldNumber_TargetIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewVoteReq__storage_, targetIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteReq_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewVoteReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewVoteReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewVoteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewVoteRes

@implementation PB3NewVoteRes


typedef struct PB3NewVoteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3NewVoteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewVoteRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NewVoteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewVoteRecordReq

@implementation PB3NewVoteRecordReq

@dynamic relId;
@dynamic playerId;
@dynamic startTime;
@dynamic endTime;
@dynamic page;
@dynamic pageSize;

typedef struct PB3NewVoteRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t page;
  int32_t pageSize;
  int64_t playerId;
  int64_t startTime;
  int64_t endTime;
} PB3NewVoteRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteRecordReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteRecordReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteRecordReq_FieldNumber_StartTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteRecordReq_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteRecordReq_FieldNumber_Page,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteRecordReq_FieldNumber_PageSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewVoteRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewVoteRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewVoteRecordRes

@implementation PB3NewVoteRecordRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3NewVoteRecordRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  int64_t total;
} PB3NewVoteRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteRecord),
        .number = PB3NewVoteRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewVoteRecordRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewVoteRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewVoteRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewVoteResultReq

@implementation PB3NewVoteResultReq

@dynamic actId;
@dynamic relId;
@dynamic type;
@dynamic page;
@dynamic pageSize;

typedef struct PB3NewVoteResultReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t type;
  int32_t page;
  int32_t pageSize;
} PB3NewVoteResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteResultReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewVoteResultReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteResultReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewVoteResultReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteResultReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewVoteResultReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteResultReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewVoteResultReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteResultReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewVoteResultReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewVoteResultReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewVoteResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewVoteResultRes

@implementation PB3NewVoteResultRes

@dynamic listArray, listArray_Count;
@dynamic total;
@dynamic selfTicketsNum;

typedef struct PB3NewVoteResultRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t selfTicketsNum;
  NSMutableArray *listArray;
  int64_t total;
} PB3NewVoteResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteResult),
        .number = PB3NewVoteResultRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewVoteResultRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteResultRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewVoteResultRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selfTicketsNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVoteResultRes_FieldNumber_SelfTicketsNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewVoteResultRes__storage_, selfTicketsNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewVoteResultRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewVoteResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetNewVoteResultListReq

@implementation PB3GetNewVoteResultListReq

@dynamic actId;
@dynamic relId;
@dynamic page;
@dynamic pageSize;
@dynamic playerId;

typedef struct PB3GetNewVoteResultListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t page;
  int32_t pageSize;
  int64_t playerId;
} PB3GetNewVoteResultListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNewVoteResultListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNewVoteResultListReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNewVoteResultListReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNewVoteResultListReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNewVoteResultListReq_FieldNumber_PlayerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetNewVoteResultListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetNewVoteResultListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetNewVoteResultListRes

@implementation PB3GetNewVoteResultListRes

@dynamic listArray, listArray_Count;
@dynamic total;
@dynamic selfTicketsNum;

typedef struct PB3GetNewVoteResultListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t selfTicketsNum;
  NSMutableArray *listArray;
  int64_t total;
} PB3GetNewVoteResultListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteResult),
        .number = PB3GetNewVoteResultListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNewVoteResultListRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selfTicketsNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNewVoteResultListRes_FieldNumber_SelfTicketsNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetNewVoteResultListRes__storage_, selfTicketsNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetNewVoteResultListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetNewVoteResultListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveVoteAwardReq

@implementation PB3ReceiveVoteAwardReq

@dynamic actId;
@dynamic confVoteAwardId;

typedef struct PB3ReceiveVoteAwardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t confVoteAwardId;
} PB3ReceiveVoteAwardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveVoteAwardReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveVoteAwardReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confVoteAwardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveVoteAwardReq_FieldNumber_ConfVoteAwardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveVoteAwardReq__storage_, confVoteAwardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveVoteAwardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveVoteAwardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveVoteAwardRes

@implementation PB3ReceiveVoteAwardRes

@dynamic awardArray, awardArray_Count;

typedef struct PB3ReceiveVoteAwardRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *awardArray;
} PB3ReceiveVoteAwardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3ReceiveVoteAwardRes_FieldNumber_AwardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReceiveVoteAwardRes__storage_, awardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveVoteAwardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveVoteAwardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListMyVoteAwardReq

@implementation PB3ListMyVoteAwardReq

@dynamic actId;

typedef struct PB3ListMyVoteAwardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
} PB3ListMyVoteAwardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListMyVoteAwardReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListMyVoteAwardReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListMyVoteAwardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListMyVoteAwardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListMyVoteAwardRes

@implementation PB3ListMyVoteAwardRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListMyVoteAwardRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListMyVoteAwardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteAwardInfo),
        .number = PB3ListMyVoteAwardRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListMyVoteAwardRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListMyVoteAwardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListMyVoteAwardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteAwardInfo

@implementation PB3VoteAwardInfo

@dynamic confVoteAwardId;
@dynamic actId;
@dynamic status;

typedef struct PB3VoteAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t confVoteAwardId;
  int32_t actId;
  int32_t status;
} PB3VoteAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confVoteAwardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteAwardInfo_FieldNumber_ConfVoteAwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteAwardInfo__storage_, confVoteAwardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteAwardInfo_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoteAwardInfo__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteAwardInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoteAwardInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteAwardInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetAllRewarderTotalReq

@implementation PB3GetAllRewarderTotalReq

@dynamic actId;
@dynamic voteAwardId;

typedef struct PB3GetAllRewarderTotalReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t voteAwardId;
} PB3GetAllRewarderTotalReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetAllRewarderTotalReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetAllRewarderTotalReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voteAwardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetAllRewarderTotalReq_FieldNumber_VoteAwardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetAllRewarderTotalReq__storage_, voteAwardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetAllRewarderTotalReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetAllRewarderTotalReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetAllRewarderTotalRes

@implementation PB3GetAllRewarderTotalRes

@dynamic list, list_Count;

typedef struct PB3GetAllRewarderTotalRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Int32Dictionary *list;
} PB3GetAllRewarderTotalRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "list",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetAllRewarderTotalRes_FieldNumber_List,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetAllRewarderTotalRes__storage_, list),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetAllRewarderTotalRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetAllRewarderTotalRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReadCultivateDataReq

@implementation PB3ReadCultivateDataReq

@dynamic relId;

typedef struct PB3ReadCultivateDataReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3ReadCultivateDataReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReadCultivateDataReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReadCultivateDataReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReadCultivateDataReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReadCultivateDataReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReadCultivateDataRes

@implementation PB3ReadCultivateDataRes

@dynamic hasData_p, data_p;

typedef struct PB3ReadCultivateDataRes__storage_ {
  uint32_t _has_storage_[1];
  PB3Cultivate *data_p;
} PB3ReadCultivateDataRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Cultivate),
        .number = PB3ReadCultivateDataRes_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReadCultivateDataRes__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReadCultivateDataRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReadCultivateDataRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpgradeCultivateReq

@implementation PB3UpgradeCultivateReq

@dynamic relId;
@dynamic upgradeType;
@dynamic giftId;
@dynamic num;

typedef struct PB3UpgradeCultivateReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t upgradeType;
  int32_t giftId;
  int32_t num;
} PB3UpgradeCultivateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpgradeCultivateReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpgradeCultivateReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "upgradeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpgradeCultivateReq_FieldNumber_UpgradeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpgradeCultivateReq__storage_, upgradeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpgradeCultivateReq_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UpgradeCultivateReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpgradeCultivateReq_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UpgradeCultivateReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpgradeCultivateReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpgradeCultivateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpgradeCultivateRes

@implementation PB3UpgradeCultivateRes


typedef struct PB3UpgradeCultivateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UpgradeCultivateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpgradeCultivateRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UpgradeCultivateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListLogCultivateReq

@implementation PB3ListLogCultivateReq

@dynamic relId;
@dynamic playerId;
@dynamic startTime;
@dynamic endTime;

typedef struct PB3ListLogCultivateReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int64_t playerId;
  int64_t startTime;
  int64_t endTime;
} PB3ListLogCultivateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLogCultivateReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListLogCultivateReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLogCultivateReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListLogCultivateReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLogCultivateReq_FieldNumber_StartTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListLogCultivateReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListLogCultivateReq_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListLogCultivateReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListLogCultivateReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListLogCultivateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListLogCultivateRes

@implementation PB3ListLogCultivateRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListLogCultivateRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListLogCultivateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LogCultivate),
        .number = PB3ListLogCultivateRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListLogCultivateRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListLogCultivateRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListLogCultivateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveGiftFeedbackAwardReq

@implementation PB3ReceiveGiftFeedbackAwardReq

@dynamic relId;
@dynamic giftFeedbackId;
@dynamic giftFeedbackType;
@dynamic relatedId;
@dynamic open;

typedef struct PB3ReceiveGiftFeedbackAwardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t giftFeedbackId;
  int32_t giftFeedbackType;
  int32_t relatedId;
} PB3ReceiveGiftFeedbackAwardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveGiftFeedbackAwardReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveGiftFeedbackAwardReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftFeedbackId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveGiftFeedbackAwardReq_FieldNumber_GiftFeedbackId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveGiftFeedbackAwardReq__storage_, giftFeedbackId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftFeedbackType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveGiftFeedbackAwardReq_FieldNumber_GiftFeedbackType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReceiveGiftFeedbackAwardReq__storage_, giftFeedbackType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relatedId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveGiftFeedbackAwardReq_FieldNumber_RelatedId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ReceiveGiftFeedbackAwardReq__storage_, relatedId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "open",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveGiftFeedbackAwardReq_FieldNumber_Open,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveGiftFeedbackAwardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveGiftFeedbackAwardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveGiftFeedbackAwardRes

@implementation PB3ReceiveGiftFeedbackAwardRes

@dynamic awardArray, awardArray_Count;

typedef struct PB3ReceiveGiftFeedbackAwardRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *awardArray;
} PB3ReceiveGiftFeedbackAwardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3ReceiveGiftFeedbackAwardRes_FieldNumber_AwardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReceiveGiftFeedbackAwardRes__storage_, awardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveGiftFeedbackAwardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveGiftFeedbackAwardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReadPlayerGoldBackReq

@implementation PB3ReadPlayerGoldBackReq

@dynamic relId;
@dynamic cate;

typedef struct PB3ReadPlayerGoldBackReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t cate;
} PB3ReadPlayerGoldBackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReadPlayerGoldBackReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReadPlayerGoldBackReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReadPlayerGoldBackReq_FieldNumber_Cate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReadPlayerGoldBackReq__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReadPlayerGoldBackReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReadPlayerGoldBackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReadPlayerGoldBackRes

@implementation PB3ReadPlayerGoldBackRes

@dynamic hasData_p, data_p;

typedef struct PB3ReadPlayerGoldBackRes__storage_ {
  uint32_t _has_storage_[1];
  PB3GoldBackData *data_p;
} PB3ReadPlayerGoldBackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GoldBackData),
        .number = PB3ReadPlayerGoldBackRes_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReadPlayerGoldBackRes__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReadPlayerGoldBackRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReadPlayerGoldBackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceivePlayerGoldBackReq

@implementation PB3ReceivePlayerGoldBackReq

@dynamic relId;
@dynamic cate;

typedef struct PB3ReceivePlayerGoldBackReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t cate;
} PB3ReceivePlayerGoldBackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceivePlayerGoldBackReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceivePlayerGoldBackReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceivePlayerGoldBackReq_FieldNumber_Cate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceivePlayerGoldBackReq__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceivePlayerGoldBackReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceivePlayerGoldBackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGoldBackLogReq

@implementation PB3GetGoldBackLogReq

@dynamic relId;

typedef struct PB3GetGoldBackLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3GetGoldBackLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGoldBackLogReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGoldBackLogReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGoldBackLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGoldBackLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGoldBackLogRes

@implementation PB3GetGoldBackLogRes

@dynamic goldBackLogListArray, goldBackLogListArray_Count;

typedef struct PB3GetGoldBackLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *goldBackLogListArray;
} PB3GetGoldBackLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "goldBackLogListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GoldBackLog),
        .number = PB3GetGoldBackLogRes_FieldNumber_GoldBackLogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetGoldBackLogRes__storage_, goldBackLogListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGoldBackLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGoldBackLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceivePlayerGoldBackRes

@implementation PB3ReceivePlayerGoldBackRes

@dynamic hasData_p, data_p;

typedef struct PB3ReceivePlayerGoldBackRes__storage_ {
  uint32_t _has_storage_[1];
  PB3GoldBackData *data_p;
} PB3ReceivePlayerGoldBackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GoldBackData),
        .number = PB3ReceivePlayerGoldBackRes_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceivePlayerGoldBackRes__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceivePlayerGoldBackRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceivePlayerGoldBackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SortSumPointReq

@implementation PB3SortSumPointReq

@dynamic relId;

typedef struct PB3SortSumPointReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3SortSumPointReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortSumPointReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SortSumPointReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SortSumPointReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SortSumPointReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SortSumPointRes

@implementation PB3SortSumPointRes

@dynamic countPoint;
@dynamic playerPoint;

typedef struct PB3SortSumPointRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t countPoint;
  int64_t playerPoint;
} PB3SortSumPointRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "countPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortSumPointRes_FieldNumber_CountPoint,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SortSumPointRes__storage_, countPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortSumPointRes_FieldNumber_PlayerPoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SortSumPointRes__storage_, playerPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SortSumPointRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SortSumPointRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendNoticeHandleReq

@implementation PB3SendNoticeHandleReq

@dynamic relId;
@dynamic triggerId;
@dynamic toPlayerIdArray, toPlayerIdArray_Count;

typedef struct PB3SendNoticeHandleReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t triggerId;
  GPBInt64Array *toPlayerIdArray;
} PB3SendNoticeHandleReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendNoticeHandleReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendNoticeHandleReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "triggerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendNoticeHandleReq_FieldNumber_TriggerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendNoticeHandleReq__storage_, triggerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "toPlayerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendNoticeHandleReq_FieldNumber_ToPlayerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SendNoticeHandleReq__storage_, toPlayerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendNoticeHandleReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendNoticeHandleReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendNoticeHandleRes

@implementation PB3SendNoticeHandleRes


typedef struct PB3SendNoticeHandleRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendNoticeHandleRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendNoticeHandleRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendNoticeHandleRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CompoundReq

@implementation PB3CompoundReq

@dynamic relId;
@dynamic compoundId;
@dynamic assetArray, assetArray_Count;
@dynamic lotteryId;

typedef struct PB3CompoundReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t compoundId;
  int32_t lotteryId;
  NSMutableArray *assetArray;
} PB3CompoundReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CompoundReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "compoundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundReq_FieldNumber_CompoundId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CompoundReq__storage_, compoundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CompoundAsset),
        .number = PB3CompoundReq_FieldNumber_AssetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CompoundReq__storage_, assetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundReq_FieldNumber_LotteryId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CompoundReq__storage_, lotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CompoundReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CompoundReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CompoundRes

@implementation PB3CompoundRes

@dynamic status;
@dynamic awardsArray, awardsArray_Count;
@dynamic consumeAssetArray, consumeAssetArray_Count;

typedef struct PB3CompoundRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *awardsArray;
  NSMutableArray *consumeAssetArray;
} PB3CompoundRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3CompoundRes_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CompoundRes__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consumeAssetArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CompoundAsset),
        .number = PB3CompoundRes_FieldNumber_ConsumeAssetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CompoundRes__storage_, consumeAssetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CompoundRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CompoundRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CompoundRecordReq

@implementation PB3CompoundRecordReq

@dynamic relId;

typedef struct PB3CompoundRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3CompoundRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundRecordReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CompoundRecordReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CompoundRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CompoundRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CompoundRecordRes

@implementation PB3CompoundRecordRes

@dynamic listArray, listArray_Count;

typedef struct PB3CompoundRecordRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3CompoundRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LogCompound),
        .number = PB3CompoundRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CompoundRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CompoundRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CompoundRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawCardCheckReq

@implementation PB3DrawCardCheckReq

@dynamic relId;

typedef struct PB3DrawCardCheckReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3DrawCardCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardCheckReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawCardCheckReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawCardCheckReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawCardCheckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawCardCheckRes

@implementation PB3DrawCardCheckRes


typedef struct PB3DrawCardCheckRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DrawCardCheckRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawCardCheckRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DrawCardCheckRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawCardReq

@implementation PB3DrawCardReq

@dynamic relId;
@dynamic confDrawCardId;
@dynamic timestamp;

typedef struct PB3DrawCardReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t confDrawCardId;
  int64_t timestamp;
} PB3DrawCardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawCardReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confDrawCardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardReq_FieldNumber_ConfDrawCardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawCardReq__storage_, confDrawCardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardReq_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawCardReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawCardReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawCardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawCardRes

@implementation PB3DrawCardRes

@dynamic awardArray, awardArray_Count;
@dynamic win;
@dynamic luckNumber;

typedef struct PB3DrawCardRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t luckNumber;
  NSMutableArray *awardArray;
} PB3DrawCardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3DrawCardRes_FieldNumber_AwardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawCardRes__storage_, awardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "win",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardRes_FieldNumber_Win,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "luckNumber",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardRes_FieldNumber_LuckNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawCardRes__storage_, luckNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawCardRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawCardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawCardRecordReq

@implementation PB3DrawCardRecordReq

@dynamic relId;
@dynamic confDrawCardId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3DrawCardRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t confDrawCardId;
  int32_t page;
  int32_t pageSize;
} PB3DrawCardRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardRecordReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawCardRecordReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confDrawCardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardRecordReq_FieldNumber_ConfDrawCardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawCardRecordReq__storage_, confDrawCardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardRecordReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawCardRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardRecordReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DrawCardRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawCardRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawCardRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawCardRecordRes

@implementation PB3DrawCardRecordRes

@dynamic recordArray, recordArray_Count;

typedef struct PB3DrawCardRecordRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recordArray;
} PB3DrawCardRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LogDrawCard),
        .number = PB3DrawCardRecordRes_FieldNumber_RecordArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawCardRecordRes__storage_, recordArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawCardRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawCardRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPlayerChargeReq

@implementation PB3GetPlayerChargeReq

@dynamic playerId;

typedef struct PB3GetPlayerChargeReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GetPlayerChargeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerChargeReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPlayerChargeReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPlayerChargeReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPlayerChargeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPlayerChargeRes

@implementation PB3GetPlayerChargeRes

@dynamic charge;

typedef struct PB3GetPlayerChargeRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t charge;
} PB3GetPlayerChargeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "charge",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerChargeRes_FieldNumber_Charge,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPlayerChargeRes__storage_, charge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPlayerChargeRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPlayerChargeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldReq

@implementation PB3TakeGoldReq

@dynamic actId;
@dynamic relId;
@dynamic takeOutNum;

typedef struct PB3TakeGoldReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t takeOutNum;
} PB3TakeGoldReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TakeGoldReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "takeOutNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldReq_FieldNumber_TakeOutNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TakeGoldReq__storage_, takeOutNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldRes

@implementation PB3TakeGoldRes


typedef struct PB3TakeGoldRes__storage_ {
  uint32_t _has_storage_[1];
} PB3TakeGoldRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3TakeGoldRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetTakeGoldLogReq

@implementation PB3GetTakeGoldLogReq

@dynamic relId;
@dynamic page;

typedef struct PB3GetTakeGoldLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t page;
} PB3GetTakeGoldLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTakeGoldLogReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTakeGoldLogReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTakeGoldLogReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetTakeGoldLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTakeGoldLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTakeGoldLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetTakeGoldLogRes

@implementation PB3GetTakeGoldLogRes

@dynamic takeGoldLogListArray, takeGoldLogListArray_Count;

typedef struct PB3GetTakeGoldLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *takeGoldLogListArray;
} PB3GetTakeGoldLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "takeGoldLogListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TakeGoldLog),
        .number = PB3GetTakeGoldLogRes_FieldNumber_TakeGoldLogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetTakeGoldLogRes__storage_, takeGoldLogListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTakeGoldLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTakeGoldLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetTakeGoldGiftConfReq

@implementation PB3GetTakeGoldGiftConfReq

@dynamic relId;
@dynamic takeOutNum;

typedef struct PB3GetTakeGoldGiftConfReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t takeOutNum;
} PB3GetTakeGoldGiftConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTakeGoldGiftConfReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTakeGoldGiftConfReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "takeOutNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTakeGoldGiftConfReq_FieldNumber_TakeOutNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetTakeGoldGiftConfReq__storage_, takeOutNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTakeGoldGiftConfReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTakeGoldGiftConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetTakeGoldGiftConfRes

@implementation PB3GetTakeGoldGiftConfRes

@dynamic hasTakeGoldGiftConf, takeGoldGiftConf;

typedef struct PB3GetTakeGoldGiftConfRes__storage_ {
  uint32_t _has_storage_[1];
  PB3TakeGoldGiftConf *takeGoldGiftConf;
} PB3GetTakeGoldGiftConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "takeGoldGiftConf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TakeGoldGiftConf),
        .number = PB3GetTakeGoldGiftConfRes_FieldNumber_TakeGoldGiftConf,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTakeGoldGiftConfRes__storage_, takeGoldGiftConf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTakeGoldGiftConfRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTakeGoldGiftConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldTemPointReq

@implementation PB3TakeGoldTemPointReq

@dynamic relId;

typedef struct PB3TakeGoldTemPointReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3TakeGoldTemPointReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldTemPointReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldTemPointReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldTemPointReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldTemPointReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldTemPointRes

@implementation PB3TakeGoldTemPointRes

@dynamic gold;

typedef struct PB3TakeGoldTemPointRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t gold;
} PB3TakeGoldTemPointRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldTemPointRes_FieldNumber_Gold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldTemPointRes__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldTemPointRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldTemPointRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldTemPointRecordReq

@implementation PB3TakeGoldTemPointRecordReq

@dynamic relId;

typedef struct PB3TakeGoldTemPointRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3TakeGoldTemPointRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldTemPointRecordReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldTemPointRecordReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldTemPointRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldTemPointRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldTemPointRecordRes

@implementation PB3TakeGoldTemPointRecordRes

@dynamic listArray, listArray_Count;

typedef struct PB3TakeGoldTemPointRecordRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3TakeGoldTemPointRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TemPointRecord),
        .number = PB3TakeGoldTemPointRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TakeGoldTemPointRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldTemPointRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldTemPointRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckLimitReq

@implementation PB3CheckLimitReq

@dynamic actId;
@dynamic relId;
@dynamic confId;
@dynamic type;

typedef struct PB3CheckLimitReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t confId;
  int32_t type;
} PB3CheckLimitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckLimitReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CheckLimitReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckLimitReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CheckLimitReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckLimitReq_FieldNumber_ConfId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CheckLimitReq__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckLimitReq_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CheckLimitReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckLimitReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckLimitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckLimitRes

@implementation PB3CheckLimitRes

@dynamic num;
@dynamic status;
@dynamic tips;

typedef struct PB3CheckLimitRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  int32_t status;
  NSString *tips;
} PB3CheckLimitRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckLimitRes_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CheckLimitRes__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckLimitRes_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CheckLimitRes__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckLimitRes_FieldNumber_Tips,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CheckLimitRes__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckLimitRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckLimitRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SignInReq

@implementation PB3SignInReq

@dynamic relActId;
@dynamic playerId;
@dynamic signDay;

typedef struct PB3SignInReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  int64_t playerId;
  int64_t signDay;
} PB3SignInReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SignInReq__storage_, relActId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SignInReq__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "signDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInReq_FieldNumber_SignDay,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SignInReq__storage_, signDay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SignInReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SignInReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002H\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SignInRes

@implementation PB3SignInRes


typedef struct PB3SignInRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SignInRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SignInRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SignInRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SignInLogReq

@implementation PB3SignInLogReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3SignInLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3SignInLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInLogReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SignInLogReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInLogReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SignInLogReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SignInLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SignInLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SignInLogRes

@implementation PB3SignInLogRes

@dynamic logsArray, logsArray_Count;

typedef struct PB3SignInLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logsArray;
} PB3SignInLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SignInLog),
        .number = PB3SignInLogRes_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SignInLogRes__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SignInLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SignInLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SignInLog

@implementation PB3SignInLog

@dynamic dayTime;
@dynamic type;

typedef struct PB3SignInLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int64_t dayTime;
} PB3SignInLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInLog_FieldNumber_DayTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SignInLog__storage_, dayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInLog_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SignInLog__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SignInLog class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SignInLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UnbindCpReq

@implementation PB3UnbindCpReq

@dynamic relId;
@dynamic msg;
@dynamic URL;

typedef struct PB3UnbindCpReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  NSString *msg;
  NSString *URL;
} PB3UnbindCpReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UnbindCpReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReq_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UnbindCpReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReq_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UnbindCpReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UnbindCpReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UnbindCpReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UnbindCpRes

@implementation PB3UnbindCpRes


typedef struct PB3UnbindCpRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UnbindCpRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UnbindCpRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UnbindCpRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UnbindCpReplyReq

@implementation PB3UnbindCpReplyReq

@dynamic relId;
@dynamic playerId;
@dynamic accept;
@dynamic msg;
@dynamic URL;

typedef struct PB3UnbindCpReplyReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  NSString *msg;
  NSString *URL;
  int64_t playerId;
} PB3UnbindCpReplyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReplyReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UnbindCpReplyReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReplyReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UnbindCpReplyReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "accept",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReplyReq_FieldNumber_Accept,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReplyReq_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UnbindCpReplyReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3UnbindCpReplyReq_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UnbindCpReplyReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UnbindCpReplyReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UnbindCpReplyReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UnbindCpReplyRes

@implementation PB3UnbindCpReplyRes


typedef struct PB3UnbindCpReplyRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UnbindCpReplyRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UnbindCpReplyRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UnbindCpReplyRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActSendGiftReq

@implementation PB3ActSendGiftReq

@dynamic relId;
@dynamic giftId;
@dynamic targetId;
@dynamic num;

typedef struct PB3ActSendGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t giftId;
  int32_t num;
  int64_t targetId;
} PB3ActSendGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActSendGiftReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActSendGiftReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActSendGiftReq_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActSendGiftReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActSendGiftReq_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActSendGiftReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActSendGiftReq_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActSendGiftReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActSendGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActSendGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActSendGiftRes

@implementation PB3ActSendGiftRes


typedef struct PB3ActSendGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ActSendGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActSendGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ActSendGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActHeartBeatReq

@implementation PB3ActHeartBeatReq

@dynamic relActId;
@dynamic millisecond;

typedef struct PB3ActHeartBeatReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  int32_t millisecond;
} PB3ActHeartBeatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActHeartBeatReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActHeartBeatReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "millisecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActHeartBeatReq_FieldNumber_Millisecond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActHeartBeatReq__storage_, millisecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActHeartBeatReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActHeartBeatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActHeartBeatRes

@implementation PB3ActHeartBeatRes


typedef struct PB3ActHeartBeatRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ActHeartBeatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActHeartBeatRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ActHeartBeatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowHeartBeatExcellentNumReq

@implementation PB3ShowHeartBeatExcellentNumReq

@dynamic relActId;

typedef struct PB3ShowHeartBeatExcellentNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
} PB3ShowHeartBeatExcellentNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowHeartBeatExcellentNumReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowHeartBeatExcellentNumReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowHeartBeatExcellentNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowHeartBeatExcellentNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowHeartBeatExcellentNumRes

@implementation PB3ShowHeartBeatExcellentNumRes

@dynamic num;

typedef struct PB3ShowHeartBeatExcellentNumRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
} PB3ShowHeartBeatExcellentNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowHeartBeatExcellentNumRes_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowHeartBeatExcellentNumRes__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowHeartBeatExcellentNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowHeartBeatExcellentNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BetGiftReq

@implementation PB3BetGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic giftId;
@dynamic giftNum;

typedef struct PB3BetGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t giftId;
  int32_t giftNum;
} PB3BetGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BetGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BetGiftReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BetGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BetGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BetGiftReq_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BetGiftReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BetGiftReq_FieldNumber_GiftNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BetGiftReq__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BetGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BetGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BetGiftRes

@implementation PB3BetGiftRes


typedef struct PB3BetGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BetGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BetGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BetGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureInfoListReq

@implementation PB3TreasureInfoListReq

@dynamic actId;
@dynamic relActId;
@dynamic treasureId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3TreasureInfoListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t treasureId;
  int32_t page;
  int32_t pageSize;
} PB3TreasureInfoListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfoListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureInfoListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfoListReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureInfoListReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfoListReq_FieldNumber_TreasureId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureInfoListReq__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfoListReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureInfoListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfoListReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TreasureInfoListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureInfoListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureInfoListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureInfoListRes

@implementation PB3TreasureInfoListRes

@dynamic infoListArray, infoListArray_Count;

typedef struct PB3TreasureInfoListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *infoListArray;
} PB3TreasureInfoListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TreasureInfo),
        .number = PB3TreasureInfoListRes_FieldNumber_InfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TreasureInfoListRes__storage_, infoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureInfoListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureInfoListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000infoList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureInfo

@implementation PB3TreasureInfo

@dynamic treasureId;
@dynamic periodNum;
@dynamic prizeId;
@dynamic poolSize;
@dynamic stock;
@dynamic countPlayer;
@dynamic giftId;
@dynamic giftNum;
@dynamic status;
@dynamic startTime;
@dynamic endTime;
@dynamic playerListArray, playerListArray_Count;
@dynamic winnersArray, winnersArray_Count;

typedef struct PB3TreasureInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t treasureId;
  int32_t prizeId;
  int32_t poolSize;
  int32_t stock;
  int32_t giftId;
  int32_t giftNum;
  int32_t status;
  NSString *periodNum;
  NSMutableArray *playerListArray;
  NSMutableArray *winnersArray;
  int64_t countPlayer;
  int64_t startTime;
  int64_t endTime;
} PB3TreasureInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_TreasureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_PeriodNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_PrizeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "poolSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_PoolSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, poolSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stock",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_Stock,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, stock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "countPlayer",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_CountPlayer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, countPlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_GiftId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_GiftNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_Status,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_StartTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureInfo_FieldNumber_EndTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TreasurePlayerInfo),
        .number = PB3TreasureInfo_FieldNumber_PlayerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, playerListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "winnersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TreasurePlayerInfo),
        .number = PB3TreasureInfo_FieldNumber_WinnersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TreasureInfo__storage_, winnersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasurePlayerInfo

@implementation PB3TreasurePlayerInfo

@dynamic playerId;
@dynamic code;
@dynamic nickName;
@dynamic picture;

typedef struct PB3TreasurePlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *picture;
  int64_t playerId;
  int64_t code;
} PB3TreasurePlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasurePlayerInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasurePlayerInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasurePlayerInfo_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasurePlayerInfo__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasurePlayerInfo_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasurePlayerInfo__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasurePlayerInfo_FieldNumber_Picture,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasurePlayerInfo__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasurePlayerInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasurePlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerBetNumReq

@implementation PB3PlayerBetNumReq

@dynamic treasureId;
@dynamic periodNum;

typedef struct PB3PlayerBetNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t treasureId;
  NSString *periodNum;
} PB3PlayerBetNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetNumReq_FieldNumber_TreasureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerBetNumReq__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetNumReq_FieldNumber_PeriodNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerBetNumReq__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerBetNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerBetNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerBetNumRes

@implementation PB3PlayerBetNumRes

@dynamic betNum;

typedef struct PB3PlayerBetNumRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t betNum;
} PB3PlayerBetNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "betNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetNumRes_FieldNumber_BetNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerBetNumRes__storage_, betNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerBetNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerBetNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerBetOrderListReq

@implementation PB3PlayerBetOrderListReq

@dynamic treasureId;
@dynamic periodNum;
@dynamic page;
@dynamic pageSize;

typedef struct PB3PlayerBetOrderListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t treasureId;
  int32_t page;
  int32_t pageSize;
  NSString *periodNum;
} PB3PlayerBetOrderListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrderListReq_FieldNumber_TreasureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrderListReq__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrderListReq_FieldNumber_PeriodNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrderListReq__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrderListReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrderListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrderListReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrderListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerBetOrderListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerBetOrderListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerBetOrderListRes

@implementation PB3PlayerBetOrderListRes

@dynamic orderListArray, orderListArray_Count;

typedef struct PB3PlayerBetOrderListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *orderListArray;
} PB3PlayerBetOrderListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerBetOrder),
        .number = PB3PlayerBetOrderListRes_FieldNumber_OrderListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrderListRes__storage_, orderListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerBetOrderListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerBetOrderListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerBetOrder

@implementation PB3PlayerBetOrder

@dynamic periodNum;
@dynamic confGiftId;
@dynamic betGiftId;
@dynamic betGiftNum;
@dynamic betNum;
@dynamic prizeId;
@dynamic created;

typedef struct PB3PlayerBetOrder__storage_ {
  uint32_t _has_storage_[1];
  int32_t confGiftId;
  int32_t betGiftId;
  int32_t betGiftNum;
  int32_t betNum;
  int32_t prizeId;
  NSString *periodNum;
  int64_t created;
} PB3PlayerBetOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrder_FieldNumber_PeriodNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrder__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrder_FieldNumber_ConfGiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrder__storage_, confGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "betGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrder_FieldNumber_BetGiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrder__storage_, betGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "betGiftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrder_FieldNumber_BetGiftNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrder__storage_, betGiftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "betNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrder_FieldNumber_BetNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrder__storage_, betNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrder_FieldNumber_PrizeId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrder__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerBetOrder_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerBetOrder__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerBetOrder class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerBetOrder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerTreasureRecordReq

@implementation PB3PlayerTreasureRecordReq

@dynamic page;
@dynamic pageSize;
@dynamic treasureId;

typedef struct PB3PlayerTreasureRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  int32_t treasureId;
} PB3PlayerTreasureRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordReq_FieldNumber_TreasureId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordReq__storage_, treasureId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerTreasureRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerTreasureRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\010\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerTreasureRecordRes

@implementation PB3PlayerTreasureRecordRes

@dynamic recordListArray, recordListArray_Count;

typedef struct PB3PlayerTreasureRecordRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recordListArray;
} PB3PlayerTreasureRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTreasureRecordInfo),
        .number = PB3PlayerTreasureRecordRes_FieldNumber_RecordListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordRes__storage_, recordListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerTreasureRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerTreasureRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000recordList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerTreasureRecordInfo

@implementation PB3PlayerTreasureRecordInfo

@dynamic id_p;
@dynamic treasureId;
@dynamic periodNum;
@dynamic playerId;
@dynamic betNumCount;
@dynamic prizeId;
@dynamic status;
@dynamic giftListArray, giftListArray_Count;
@dynamic winnerListArray, winnerListArray_Count;
@dynamic periodStatus;

typedef struct PB3PlayerTreasureRecordInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t treasureId;
  int32_t betNumCount;
  int32_t prizeId;
  int32_t status;
  int32_t periodStatus;
  NSString *periodNum;
  NSMutableArray *giftListArray;
  NSMutableArray *winnerListArray;
  int64_t playerId;
} PB3PlayerTreasureRecordInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_TreasureId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_PeriodNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "betNumCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_BetNumCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, betNumCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_PrizeId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftInfo),
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_GiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, giftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "winnerListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TreasurePlayerInfo),
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_WinnerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, winnerListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "periodStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTreasureRecordInfo_FieldNumber_PeriodStatus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PlayerTreasureRecordInfo__storage_, periodStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerTreasureRecordInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerTreasureRecordInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftInfo

@implementation PB3GiftInfo

@dynamic giftId;
@dynamic giftNum;
@dynamic awardId;

typedef struct PB3GiftInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
  int32_t awardId;
} PB3GiftInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftInfo_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftInfo__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftInfo_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftInfo__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftInfo_FieldNumber_AwardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftInfo__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActFormRecordReq

@implementation PB3ActFormRecordReq

@dynamic actId;
@dynamic relActId;
@dynamic carrierId;
@dynamic playerId;
@dynamic playerName;
@dynamic page;
@dynamic pageSize;
@dynamic useGroup;
@dynamic sortType;

typedef struct PB3ActFormRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t carrierId;
  int32_t page;
  int32_t pageSize;
  int32_t sortType;
  NSString *playerName;
  int64_t playerId;
} PB3ActFormRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "carrierId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_CarrierId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, carrierId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_PlayerName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_Page,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_PageSize,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "useGroup",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_UseGroup,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sortType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordReq_FieldNumber_SortType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ActFormRecordReq__storage_, sortType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActFormRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActFormRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActFormRecord

@implementation PB3ActFormRecord

@dynamic data_p;
@dynamic remark;
@dynamic created;
@dynamic flag;
@dynamic recordId;
@dynamic carrierId;
@dynamic likeCount;
@dynamic isMyLike;
@dynamic status;

typedef struct PB3ActFormRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t recordId;
  int32_t carrierId;
  int32_t status;
  NSString *data_p;
  NSString *remark;
  NSString *flag;
  int64_t created;
  int64_t likeCount;
} PB3ActFormRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_Remark,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_Flag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, flag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recordId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_RecordId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, recordId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "carrierId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_CarrierId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, carrierId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "likeCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_LikeCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, likeCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isMyLike",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_IsMyLike,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecord_FieldNumber_Status,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ActFormRecord__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActFormRecord class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActFormRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActFormResult

@implementation PB3ActFormResult

@dynamic flag;
@dynamic recordsArray, recordsArray_Count;

typedef struct PB3ActFormResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *flag;
  NSMutableArray *recordsArray;
} PB3ActFormResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormResult_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActFormResult__storage_, flag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recordsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActFormRecord),
        .number = PB3ActFormResult_FieldNumber_RecordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActFormResult__storage_, recordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActFormResult class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActFormResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActFormRecordRes

@implementation PB3ActFormRecordRes

@dynamic resultListArray, resultListArray_Count;
@dynamic total;
@dynamic playerRecordArray, playerRecordArray_Count;

typedef struct PB3ActFormRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *resultListArray;
  NSMutableArray *playerRecordArray;
} PB3ActFormRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActFormResult),
        .number = PB3ActFormRecordRes_FieldNumber_ResultListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActFormRecordRes__storage_, resultListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActFormRecordRes__storage_, total),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerRecordArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActFormRecord),
        .number = PB3ActFormRecordRes_FieldNumber_PlayerRecordArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActFormRecordRes__storage_, playerRecordArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActFormRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActFormRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaleForBetGiftReq

@implementation PB3SaleForBetGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic exchangeId;
@dynamic giftInfoListArray, giftInfoListArray_Count;
@dynamic num;
@dynamic remark;

typedef struct PB3SaleForBetGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t exchangeId;
  int32_t num;
  int32_t remark;
  NSMutableArray *giftInfoListArray;
} PB3SaleForBetGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleForBetGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftReq__storage_, actId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleForBetGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftReq__storage_, relActId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exchangeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleForBetGiftReq_FieldNumber_ExchangeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftReq__storage_, exchangeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SaleGiftItem),
        .number = PB3SaleForBetGiftReq_FieldNumber_GiftInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftReq__storage_, giftInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleForBetGiftReq_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleForBetGiftReq_FieldNumber_Remark,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaleForBetGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaleForBetGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaleForBetGiftRes

@implementation PB3SaleForBetGiftRes

@dynamic saleGiftListArray, saleGiftListArray_Count;
@dynamic gainGiftListArray, gainGiftListArray_Count;
@dynamic hasLossGift, lossGift;

typedef struct PB3SaleForBetGiftRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *saleGiftListArray;
  NSMutableArray *gainGiftListArray;
  PB3SaleGiftItem *lossGift;
} PB3SaleForBetGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "saleGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SaleGiftItem),
        .number = PB3SaleForBetGiftRes_FieldNumber_SaleGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftRes__storage_, saleGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gainGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SaleGiftItem),
        .number = PB3SaleForBetGiftRes_FieldNumber_GainGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftRes__storage_, gainGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lossGift",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SaleGiftItem),
        .number = PB3SaleForBetGiftRes_FieldNumber_LossGift,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaleForBetGiftRes__storage_, lossGift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaleForBetGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaleForBetGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaleGiftItem

@implementation PB3SaleGiftItem

@dynamic giftId;
@dynamic giftNum;
@dynamic price;

typedef struct PB3SaleGiftItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  uint32_t price;
  int64_t giftNum;
} PB3SaleGiftItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleGiftItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaleGiftItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleGiftItem_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SaleGiftItem__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaleGiftItem_FieldNumber_Price,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SaleGiftItem__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaleGiftItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaleGiftItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawCardWithGoldReq

@implementation PB3DrawCardWithGoldReq

@dynamic actId;
@dynamic relActId;
@dynamic selectNumsArray, selectNumsArray_Count;
@dynamic confDrawCardId;
@dynamic timestamp;

typedef struct PB3DrawCardWithGoldReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t confDrawCardId;
  GPBInt32Array *selectNumsArray;
  int64_t timestamp;
} PB3DrawCardWithGoldReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardWithGoldReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawCardWithGoldReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardWithGoldReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawCardWithGoldReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "selectNumsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardWithGoldReq_FieldNumber_SelectNumsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawCardWithGoldReq__storage_, selectNumsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confDrawCardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardWithGoldReq_FieldNumber_ConfDrawCardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawCardWithGoldReq__storage_, confDrawCardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawCardWithGoldReq_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DrawCardWithGoldReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawCardWithGoldReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawCardWithGoldReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveActFormRecordReq

@implementation PB3SaveActFormRecordReq

@dynamic actId;
@dynamic relActId;
@dynamic carrierId;
@dynamic recordData;

typedef struct PB3SaveActFormRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t carrierId;
  NSString *recordData;
} PB3SaveActFormRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveActFormRecordReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaveActFormRecordReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveActFormRecordReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SaveActFormRecordReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "carrierId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveActFormRecordReq_FieldNumber_CarrierId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SaveActFormRecordReq__storage_, carrierId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "recordData",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveActFormRecordReq_FieldNumber_RecordData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SaveActFormRecordReq__storage_, recordData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveActFormRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaveActFormRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveActFormRecordRes

@implementation PB3SaveActFormRecordRes


typedef struct PB3SaveActFormRecordRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SaveActFormRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveActFormRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SaveActFormRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateActFormRecordReq

@implementation PB3UpdateActFormRecordReq

@dynamic recordId;
@dynamic recordData;
@dynamic actId;
@dynamic relActId;
@dynamic carrierId;

typedef struct PB3UpdateActFormRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t recordId;
  int32_t actId;
  int32_t relActId;
  int32_t carrierId;
  NSString *recordData;
} PB3UpdateActFormRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateActFormRecordReq_FieldNumber_RecordId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdateActFormRecordReq__storage_, recordId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "recordData",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateActFormRecordReq_FieldNumber_RecordData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpdateActFormRecordReq__storage_, recordData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateActFormRecordReq_FieldNumber_ActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UpdateActFormRecordReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateActFormRecordReq_FieldNumber_RelActId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UpdateActFormRecordReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "carrierId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateActFormRecordReq_FieldNumber_CarrierId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UpdateActFormRecordReq__storage_, carrierId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateActFormRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdateActFormRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateActFormRecordRes

@implementation PB3UpdateActFormRecordRes


typedef struct PB3UpdateActFormRecordRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UpdateActFormRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateActFormRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UpdateActFormRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendInviteCodeReq

@implementation PB3SendInviteCodeReq

@dynamic actId;
@dynamic relActId;
@dynamic inviteCode;

typedef struct PB3SendInviteCodeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  NSString *inviteCode;
} PB3SendInviteCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendInviteCodeReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendInviteCodeReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendInviteCodeReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendInviteCodeReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviteCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendInviteCodeReq_FieldNumber_InviteCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SendInviteCodeReq__storage_, inviteCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendInviteCodeReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendInviteCodeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendInviteCodeRes

@implementation PB3SendInviteCodeRes


typedef struct PB3SendInviteCodeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendInviteCodeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendInviteCodeRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendInviteCodeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListInviteCodeRecordReq

@implementation PB3ListInviteCodeRecordReq

@dynamic actId;
@dynamic relActId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3ListInviteCodeRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t page;
  int32_t pageSize;
} PB3ListInviteCodeRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListInviteCodeRecordReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListInviteCodeRecordReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListInviteCodeRecordReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListInviteCodeRecordReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListInviteCodeRecordReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListInviteCodeRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListInviteCodeRecordReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListInviteCodeRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListInviteCodeRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListInviteCodeRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InviteCodeRecord

@implementation PB3InviteCodeRecord

@dynamic playerName;
@dynamic playerId;
@dynamic created;

typedef struct PB3InviteCodeRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  int64_t playerId;
  int64_t created;
} PB3InviteCodeRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCodeRecord_FieldNumber_PlayerName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InviteCodeRecord__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCodeRecord_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InviteCodeRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3InviteCodeRecord_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3InviteCodeRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InviteCodeRecord class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InviteCodeRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListInviteCodeRecordRes

@implementation PB3ListInviteCodeRecordRes

@dynamic recordListArray, recordListArray_Count;
@dynamic totalNum;

typedef struct PB3ListInviteCodeRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t totalNum;
  NSMutableArray *recordListArray;
} PB3ListInviteCodeRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InviteCodeRecord),
        .number = PB3ListInviteCodeRecordRes_FieldNumber_RecordListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListInviteCodeRecordRes__storage_, recordListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListInviteCodeRecordRes_FieldNumber_TotalNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListInviteCodeRecordRes__storage_, totalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListInviteCodeRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListInviteCodeRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RankItem

@implementation PB3RankItem

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic goldSum;
@dynamic pointSum;
@dynamic sort;
@dynamic hasPromotion, promotion;
@dynamic cornet;

typedef struct PB3RankItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  NSString *playerName;
  NSString *playerIcon;
  PB3RankPromotion *promotion;
  int64_t playerId;
  int64_t goldSum;
  int64_t pointSum;
  int64_t cornet;
} PB3RankItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankItem_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankItem_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, playerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankItem_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, playerIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goldSum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankItem_FieldNumber_GoldSum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, goldSum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pointSum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankItem_FieldNumber_PointSum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, pointSum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankItem_FieldNumber_Sort,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, sort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "promotion",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankPromotion),
        .number = PB3RankItem_FieldNumber_Promotion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, promotion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cornet",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankItem_FieldNumber_Cornet,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RankItem__storage_, cornet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001H\000\002J\000\003J\000\004G\000\005H\000\006D\000\010F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RankPromotion

@implementation PB3RankPromotion

@dynamic relActId;

typedef struct PB3RankPromotion__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
} PB3RankPromotion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPromotion_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RankPromotion__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankPromotion class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankPromotion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RankListReq

@implementation PB3RankListReq

@dynamic actId;
@dynamic relActId;
@dynamic page;
@dynamic pageSize;
@dynamic timeZeroPoint;

typedef struct PB3RankListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t page;
  int32_t pageSize;
  int64_t timeZeroPoint;
} PB3RankListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RankListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankListReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RankListReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankListReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RankListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankListReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RankListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timeZeroPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankListReq_FieldNumber_TimeZeroPoint,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RankListReq__storage_, timeZeroPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomPlayerRankListRes

@implementation PB3RoomPlayerRankListRes

@dynamic rankListArray, rankListArray_Count;
@dynamic hasMyRank, myRank;
@dynamic total;

typedef struct PB3RoomPlayerRankListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankListArray;
  PB3RankItem *myRank;
  uint64_t total;
} PB3RoomPlayerRankListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankItem),
        .number = PB3RoomPlayerRankListRes_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListRes__storage_, rankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankItem),
        .number = PB3RoomPlayerRankListRes_FieldNumber_MyRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerRankListRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPlayerRankListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomPlayerRankListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomPlayerRankListReq

@implementation PB3RoomPlayerRankListReq

@dynamic actId;
@dynamic relActId;
@dynamic searchType;
@dynamic page;
@dynamic pageSize;
@dynamic roomId;

typedef struct PB3RoomPlayerRankListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  uint32_t searchType;
  uint32_t page;
  uint32_t pageSize;
  int64_t roomId;
} PB3RoomPlayerRankListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerRankListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerRankListReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "searchType",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerRankListReq_FieldNumber_SearchType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListReq__storage_, searchType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerRankListReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerRankListReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerRankListReq_FieldNumber_RoomId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomPlayerRankListReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPlayerRankListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomPlayerRankListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerRankListRes

@implementation PB3PlayerRankListRes

@dynamic rankListArray, rankListArray_Count;
@dynamic hasMyRank, myRank;
@dynamic total;

typedef struct PB3PlayerRankListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankListArray;
  PB3RankItem *myRank;
  uint64_t total;
} PB3PlayerRankListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankItem),
        .number = PB3PlayerRankListRes_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerRankListRes__storage_, rankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankItem),
        .number = PB3PlayerRankListRes_FieldNumber_MyRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerRankListRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRankListRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerRankListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerRankListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerRankListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomRankItem

@implementation PB3RoomRankItem

@dynamic hasRank, rank;
@dynamic guildMemberListArray, guildMemberListArray_Count;

typedef struct PB3RoomRankItem__storage_ {
  uint32_t _has_storage_[1];
  PB3RankItem *rank;
  NSMutableArray *guildMemberListArray;
} PB3RoomRankItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankItem),
        .number = PB3RoomRankItem_FieldNumber_Rank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomRankItem__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "guildMemberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankItem),
        .number = PB3RoomRankItem_FieldNumber_GuildMemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomRankItem__storage_, guildMemberListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomRankItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomRankItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomRankListRes

@implementation PB3RoomRankListRes

@dynamic rankListArray, rankListArray_Count;
@dynamic hasMyRank, myRank;
@dynamic total;

typedef struct PB3RoomRankListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankListArray;
  PB3RankItem *myRank;
  uint64_t total;
} PB3RoomRankListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomRankItem),
        .number = PB3RoomRankListRes_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomRankListRes__storage_, rankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankItem),
        .number = PB3RoomRankListRes_FieldNumber_MyRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomRankListRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankListRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomRankListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomRankListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomRankListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BannerDetonatedBox

@implementation PB3BannerDetonatedBox

@dynamic playerId;
@dynamic roomId;
@dynamic detonatedTime;
@dynamic endTime;

typedef struct PB3BannerDetonatedBox__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t roomId;
  int64_t detonatedTime;
  int64_t endTime;
} PB3BannerDetonatedBox__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BannerDetonatedBox_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBox__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BannerDetonatedBox_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBox__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "detonatedTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BannerDetonatedBox_FieldNumber_DetonatedTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBox__storage_, detonatedTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BannerDetonatedBox_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBox__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BannerDetonatedBox class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BannerDetonatedBox__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BannerDetonatedBoxReq

@implementation PB3BannerDetonatedBoxReq

@dynamic actId;
@dynamic relActId;
@dynamic roomIdListArray, roomIdListArray_Count;

typedef struct PB3BannerDetonatedBoxReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  GPBInt64Array *roomIdListArray;
} PB3BannerDetonatedBoxReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BannerDetonatedBoxReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBoxReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BannerDetonatedBoxReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBoxReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BannerDetonatedBoxReq_FieldNumber_RoomIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBoxReq__storage_, roomIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BannerDetonatedBoxReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BannerDetonatedBoxReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BannerDetonatedBoxRes

@implementation PB3BannerDetonatedBoxRes

@dynamic detonatedBoxListArray, detonatedBoxListArray_Count;

typedef struct PB3BannerDetonatedBoxRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *detonatedBoxListArray;
} PB3BannerDetonatedBoxRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "detonatedBoxListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BannerDetonatedBox),
        .number = PB3BannerDetonatedBoxRes_FieldNumber_DetonatedBoxListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BannerDetonatedBoxRes__storage_, detonatedBoxListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BannerDetonatedBoxRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BannerDetonatedBoxRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SurplusBannerBoxInfo

@implementation PB3SurplusBannerBoxInfo

@dynamic roomId;
@dynamic surplusBoxNum;
@dynamic hasDetonatedBox, detonatedBox;

typedef struct PB3SurplusBannerBoxInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t surplusBoxNum;
  PB3BannerDetonatedBox *detonatedBox;
  int64_t roomId;
} PB3SurplusBannerBoxInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SurplusBannerBoxInfo_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SurplusBannerBoxInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "surplusBoxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SurplusBannerBoxInfo_FieldNumber_SurplusBoxNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SurplusBannerBoxInfo__storage_, surplusBoxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "detonatedBox",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BannerDetonatedBox),
        .number = PB3SurplusBannerBoxInfo_FieldNumber_DetonatedBox,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SurplusBannerBoxInfo__storage_, detonatedBox),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SurplusBannerBoxInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SurplusBannerBoxInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SurplusBannerBoxRes

@implementation PB3SurplusBannerBoxRes

@dynamic surplusBoxListArray, surplusBoxListArray_Count;

typedef struct PB3SurplusBannerBoxRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *surplusBoxListArray;
} PB3SurplusBannerBoxRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "surplusBoxListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SurplusBannerBoxInfo),
        .number = PB3SurplusBannerBoxRes_FieldNumber_SurplusBoxListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SurplusBannerBoxRes__storage_, surplusBoxListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SurplusBannerBoxRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SurplusBannerBoxRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogTreasureSaleGiftReq

@implementation PB3LogTreasureSaleGiftReq

@dynamic treasureId;
@dynamic periodNum;
@dynamic page;
@dynamic pageSize;

typedef struct PB3LogTreasureSaleGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t treasureId;
  int32_t page;
  int32_t pageSize;
  NSString *periodNum;
} PB3LogTreasureSaleGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogTreasureSaleGiftReq_FieldNumber_TreasureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGiftReq__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogTreasureSaleGiftReq_FieldNumber_PeriodNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGiftReq__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogTreasureSaleGiftReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGiftReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogTreasureSaleGiftReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGiftReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogTreasureSaleGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogTreasureSaleGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogTreasureSaleGift

@implementation PB3LogTreasureSaleGift

@dynamic saleGiftListArray, saleGiftListArray_Count;
@dynamic hasBetGift, betGift;
@dynamic created;

typedef struct PB3LogTreasureSaleGift__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *saleGiftListArray;
  PB3SaleGiftItem *betGift;
  int64_t created;
} PB3LogTreasureSaleGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "saleGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SaleGiftItem),
        .number = PB3LogTreasureSaleGift_FieldNumber_SaleGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGift__storage_, saleGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "betGift",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SaleGiftItem),
        .number = PB3LogTreasureSaleGift_FieldNumber_BetGift,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGift__storage_, betGift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogTreasureSaleGift_FieldNumber_Created,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGift__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogTreasureSaleGift class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogTreasureSaleGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogTreasureSaleGiftRes

@implementation PB3LogTreasureSaleGiftRes

@dynamic logListArray, logListArray_Count;

typedef struct PB3LogTreasureSaleGiftRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logListArray;
} PB3LogTreasureSaleGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LogTreasureSaleGift),
        .number = PB3LogTreasureSaleGiftRes_FieldNumber_LogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LogTreasureSaleGiftRes__storage_, logListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogTreasureSaleGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogTreasureSaleGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyTreasureLotteryRecordReq

@implementation PB3MyTreasureLotteryRecordReq

@dynamic treasureId;
@dynamic periodNum;

typedef struct PB3MyTreasureLotteryRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t treasureId;
  NSString *periodNum;
} PB3MyTreasureLotteryRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyTreasureLotteryRecordReq_FieldNumber_TreasureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MyTreasureLotteryRecordReq__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyTreasureLotteryRecordReq_FieldNumber_PeriodNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MyTreasureLotteryRecordReq__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyTreasureLotteryRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MyTreasureLotteryRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyTreasureLotteryRecordRes

@implementation PB3MyTreasureLotteryRecordRes

@dynamic hasRecord, record;

typedef struct PB3MyTreasureLotteryRecordRes__storage_ {
  uint32_t _has_storage_[1];
  PB3PlayerTreasureRecordInfo *record;
} PB3MyTreasureLotteryRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "record",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTreasureRecordInfo),
        .number = PB3MyTreasureLotteryRecordRes_FieldNumber_Record,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MyTreasureLotteryRecordRes__storage_, record),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyTreasureLotteryRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MyTreasureLotteryRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ExchangeGiftReq

@implementation PB3ExchangeGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic exchangeId;
@dynamic num;
@dynamic premiumsId;

typedef struct PB3ExchangeGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t exchangeId;
  int32_t num;
  int32_t premiumsId;
} PB3ExchangeGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ExchangeGiftReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ExchangeGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exchangeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeGiftReq_FieldNumber_ExchangeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ExchangeGiftReq__storage_, exchangeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeGiftReq_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ExchangeGiftReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "premiumsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeGiftReq_FieldNumber_PremiumsId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ExchangeGiftReq__storage_, premiumsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ExchangeGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ExchangeGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ExchangeGiftRes

@implementation PB3ExchangeGiftRes

@dynamic exchangeNum;

typedef struct PB3ExchangeGiftRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t exchangeNum;
} PB3ExchangeGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchangeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeGiftRes_FieldNumber_ExchangeNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ExchangeGiftRes__storage_, exchangeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ExchangeGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ExchangeGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActPlayerCommentReq

@implementation PB3ActPlayerCommentReq

@dynamic actId;
@dynamic relActId;
@dynamic commentStr;

typedef struct PB3ActPlayerCommentReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  NSString *commentStr;
} PB3ActPlayerCommentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPlayerCommentReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActPlayerCommentReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPlayerCommentReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActPlayerCommentReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "commentStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPlayerCommentReq_FieldNumber_CommentStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActPlayerCommentReq__storage_, commentStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActPlayerCommentReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActPlayerCommentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActPlayerCommentRes

@implementation PB3ActPlayerCommentRes


typedef struct PB3ActPlayerCommentRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ActPlayerCommentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActPlayerCommentRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ActPlayerCommentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListActPlayerCommentReq

@implementation PB3ListActPlayerCommentReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3ListActPlayerCommentReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3ListActPlayerCommentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListActPlayerCommentReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListActPlayerCommentReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListActPlayerCommentReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListActPlayerCommentReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListActPlayerCommentReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListActPlayerCommentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerCommentInfo

@implementation PB3PlayerCommentInfo

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic commentStr;

typedef struct PB3PlayerCommentInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  NSString *commentStr;
  int64_t playerId;
} PB3PlayerCommentInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCommentInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerCommentInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCommentInfo_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerCommentInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCommentInfo_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerCommentInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCommentInfo_FieldNumber_CommentStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerCommentInfo__storage_, commentStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerCommentInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerCommentInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListActPlayerCommentRes

@implementation PB3ListActPlayerCommentRes

@dynamic commentListArray, commentListArray_Count;

typedef struct PB3ListActPlayerCommentRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commentListArray;
} PB3ListActPlayerCommentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerCommentInfo),
        .number = PB3ListActPlayerCommentRes_FieldNumber_CommentListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListActPlayerCommentRes__storage_, commentListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListActPlayerCommentRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListActPlayerCommentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchByVotePlayerReq

@implementation PB3SearchByVotePlayerReq

@dynamic actId;
@dynamic relActId;
@dynamic searchPlayerId;

typedef struct PB3SearchByVotePlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int64_t searchPlayerId;
} PB3SearchByVotePlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchByVotePlayerReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchByVotePlayerReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchByVotePlayerReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchByVotePlayerReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "searchPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchByVotePlayerReq_FieldNumber_SearchPlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SearchByVotePlayerReq__storage_, searchPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchByVotePlayerReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchByVotePlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchByVotePlayerRes

@implementation PB3SearchByVotePlayerRes

@dynamic hasByVoteInfo, byVoteInfo;

typedef struct PB3SearchByVotePlayerRes__storage_ {
  uint32_t _has_storage_[1];
  PB3VoteResult *byVoteInfo;
} PB3SearchByVotePlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "byVoteInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteResult),
        .number = PB3SearchByVotePlayerRes_FieldNumber_ByVoteInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchByVotePlayerRes__storage_, byVoteInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchByVotePlayerRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchByVotePlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ComponentConfReq

@implementation PB3ComponentConfReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3ComponentConfReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3ComponentConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComponentConfReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ComponentConfReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComponentConfReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ComponentConfReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ComponentConfReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ComponentConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ComponentConfRes

@implementation PB3ComponentConfRes

@dynamic id_p;
@dynamic actId;
@dynamic relActId;
@dynamic name;
@dynamic conf;

typedef struct PB3ComponentConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t actId;
  int32_t relActId;
  NSString *name;
  NSString *conf;
} PB3ComponentConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComponentConfRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ComponentConfRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComponentConfRes_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ComponentConfRes__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComponentConfRes_FieldNumber_RelActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ComponentConfRes__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComponentConfRes_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ComponentConfRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "conf",
        .dataTypeSpecific.className = NULL,
        .number = PB3ComponentConfRes_FieldNumber_Conf,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ComponentConfRes__storage_, conf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ComponentConfRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ComponentConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawSeqLotteryReq

@implementation PB3DrawSeqLotteryReq

@dynamic actId;
@dynamic relActId;
@dynamic seqLotteryId;
@dynamic assignAwardId;
@dynamic drawNum;
@dynamic isAutoBuy;

typedef struct PB3DrawSeqLotteryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t seqLotteryId;
  int32_t assignAwardId;
  int32_t drawNum;
} PB3DrawSeqLotteryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawSeqLotteryReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawSeqLotteryReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawSeqLotteryReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawSeqLotteryReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "seqLotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawSeqLotteryReq_FieldNumber_SeqLotteryId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawSeqLotteryReq__storage_, seqLotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assignAwardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawSeqLotteryReq_FieldNumber_AssignAwardId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DrawSeqLotteryReq__storage_, assignAwardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "drawNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawSeqLotteryReq_FieldNumber_DrawNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DrawSeqLotteryReq__storage_, drawNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAutoBuy",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawSeqLotteryReq_FieldNumber_IsAutoBuy,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawSeqLotteryReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawSeqLotteryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawSeqLotteryRes

@implementation PB3DrawSeqLotteryRes

@dynamic prizeListArray, prizeListArray_Count;

typedef struct PB3DrawSeqLotteryRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *prizeListArray;
} PB3DrawSeqLotteryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prizeListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SeqLotteryPrize),
        .number = PB3DrawSeqLotteryRes_FieldNumber_PrizeListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawSeqLotteryRes__storage_, prizeListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawSeqLotteryRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawSeqLotteryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SeqLotteryPrize

@implementation PB3SeqLotteryPrize

@dynamic giftId;
@dynamic awardId;
@dynamic num;

typedef struct PB3SeqLotteryPrize__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t awardId;
  int64_t num;
} PB3SeqLotteryPrize__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SeqLotteryPrize_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SeqLotteryPrize__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SeqLotteryPrize_FieldNumber_AwardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SeqLotteryPrize__storage_, awardId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SeqLotteryPrize_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SeqLotteryPrize__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SeqLotteryPrize class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SeqLotteryPrize__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetSaveCpsInviteeReq

@implementation PB3GetSaveCpsInviteeReq

@dynamic inviterIdSign;
@dynamic phoneNum;

typedef struct PB3GetSaveCpsInviteeReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviterIdSign;
  NSString *phoneNum;
} PB3GetSaveCpsInviteeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviterIdSign",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSaveCpsInviteeReq_FieldNumber_InviterIdSign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetSaveCpsInviteeReq__storage_, inviterIdSign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSaveCpsInviteeReq_FieldNumber_PhoneNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetSaveCpsInviteeReq__storage_, phoneNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSaveCpsInviteeReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetSaveCpsInviteeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetSaveCpsInviteeRes

@implementation PB3GetSaveCpsInviteeRes


typedef struct PB3GetSaveCpsInviteeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3GetSaveCpsInviteeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSaveCpsInviteeRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetSaveCpsInviteeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowCpsInviterSignReq

@implementation PB3ShowCpsInviterSignReq


typedef struct PB3ShowCpsInviterSignReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowCpsInviterSignReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowCpsInviterSignReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowCpsInviterSignReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowCpsInviterSignRes

@implementation PB3ShowCpsInviterSignRes

@dynamic sign;

typedef struct PB3ShowCpsInviterSignRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *sign;
} PB3ShowCpsInviterSignRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowCpsInviterSignRes_FieldNumber_Sign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowCpsInviterSignRes__storage_, sign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowCpsInviterSignRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowCpsInviterSignRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckCpsPlayerRoleReq

@implementation PB3CheckCpsPlayerRoleReq


typedef struct PB3CheckCpsPlayerRoleReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CheckCpsPlayerRoleReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckCpsPlayerRoleReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CheckCpsPlayerRoleReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckCpsPlayerRoleRes

@implementation PB3CheckCpsPlayerRoleRes

@dynamic role;

typedef struct PB3CheckCpsPlayerRoleRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CpsPlayerRoleEnum role;
} PB3CheckCpsPlayerRoleRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = PB3CpsPlayerRoleEnum_EnumDescriptor,
        .number = PB3CheckCpsPlayerRoleRes_FieldNumber_Role,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CheckCpsPlayerRoleRes__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckCpsPlayerRoleRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckCpsPlayerRoleRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CheckCpsPlayerRoleRes_Role_RawValue(PB3CheckCpsPlayerRoleRes *message) {
  GPBDescriptor *descriptor = [PB3CheckCpsPlayerRoleRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CheckCpsPlayerRoleRes_FieldNumber_Role];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CheckCpsPlayerRoleRes_Role_RawValue(PB3CheckCpsPlayerRoleRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CheckCpsPlayerRoleRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CheckCpsPlayerRoleRes_FieldNumber_Role];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindCpsInviteeListReq

@implementation PB3FindCpsInviteeListReq

@dynamic playerId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindCpsInviteeListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  int64_t playerId;
} PB3FindCpsInviteeListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeListReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeListReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeListReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpsInviteeListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCpsInviteeListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCpsInviteeListRes

@implementation PB3FindCpsInviteeListRes

@dynamic cpsInviteeInfoListArray, cpsInviteeInfoListArray_Count;
@dynamic total;

typedef struct PB3FindCpsInviteeListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cpsInviteeInfoListArray;
  int64_t total;
} PB3FindCpsInviteeListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cpsInviteeInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpsInviteeInfo),
        .number = PB3FindCpsInviteeListRes_FieldNumber_CpsInviteeInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeListRes__storage_, cpsInviteeInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeListRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpsInviteeListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCpsInviteeListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsInviteeInfo

@implementation PB3CpsInviteeInfo

@dynamic playerId;
@dynamic registTime;
@dynamic status;

typedef struct PB3CpsInviteeInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *registTime;
  int64_t playerId;
} PB3CpsInviteeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsInviteeInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsInviteeInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "registTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsInviteeInfo_FieldNumber_RegistTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsInviteeInfo__storage_, registTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsInviteeInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpsInviteeInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsInviteeInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsInviteeInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCpsInviteeRechargeLogReq

@implementation PB3FindCpsInviteeRechargeLogReq

@dynamic startTime;
@dynamic endTime;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindCpsInviteeRechargeLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  NSString *startTime;
  NSString *endTime;
} PB3FindCpsInviteeRechargeLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeRechargeLogReq_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeRechargeLogReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeRechargeLogReq_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeRechargeLogReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeRechargeLogReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeRechargeLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeRechargeLogReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeRechargeLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpsInviteeRechargeLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCpsInviteeRechargeLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsInviteeRechargeLog

@implementation PB3CpsInviteeRechargeLog

@dynamic playerId;
@dynamic createDay;
@dynamic gold;

typedef struct PB3CpsInviteeRechargeLog__storage_ {
  uint32_t _has_storage_[1];
  NSString *createDay;
  int64_t playerId;
  int64_t gold;
} PB3CpsInviteeRechargeLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsInviteeRechargeLog_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsInviteeRechargeLog__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsInviteeRechargeLog_FieldNumber_CreateDay,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsInviteeRechargeLog__storage_, createDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsInviteeRechargeLog_FieldNumber_Gold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpsInviteeRechargeLog__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsInviteeRechargeLog class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsInviteeRechargeLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCpsInviteeRechargeLogRes

@implementation PB3FindCpsInviteeRechargeLogRes

@dynamic logsArray, logsArray_Count;
@dynamic totalGold;
@dynamic total;

typedef struct PB3FindCpsInviteeRechargeLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logsArray;
  int64_t totalGold;
  int64_t total;
} PB3FindCpsInviteeRechargeLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpsInviteeRechargeLog),
        .number = PB3FindCpsInviteeRechargeLogRes_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeRechargeLogRes__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeRechargeLogRes_FieldNumber_TotalGold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeRechargeLogRes__storage_, totalGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsInviteeRechargeLogRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindCpsInviteeRechargeLogRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpsInviteeRechargeLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCpsInviteeRechargeLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCpsClanInviteeLogReq

@implementation PB3FindCpsClanInviteeLogReq

@dynamic inviterId;
@dynamic inviteStartTime;
@dynamic inviteEndTime;
@dynamic rechargeStartTime;
@dynamic rechargeEndTime;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindCpsClanInviteeLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  NSString *inviteStartTime;
  NSString *inviteEndTime;
  NSString *rechargeStartTime;
  NSString *rechargeEndTime;
  int64_t inviterId;
} PB3FindCpsClanInviteeLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogReq_FieldNumber_InviterId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogReq__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteStartTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogReq_FieldNumber_InviteStartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogReq__storage_, inviteStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviteEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogReq_FieldNumber_InviteEndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogReq__storage_, inviteEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rechargeStartTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogReq_FieldNumber_RechargeStartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogReq__storage_, rechargeStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rechargeEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogReq_FieldNumber_RechargeEndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogReq__storage_, rechargeEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogReq_FieldNumber_Page,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogReq_FieldNumber_PageSize,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpsClanInviteeLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCpsClanInviteeLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsClanInviteeLogInfo

@implementation PB3CpsClanInviteeLogInfo

@dynamic inviterId;
@dynamic inviteeId;
@dynamic registTime;
@dynamic status;
@dynamic gold;
@dynamic rechargeDay;

typedef struct PB3CpsClanInviteeLogInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *registTime;
  NSString *rechargeDay;
  int64_t inviterId;
  int64_t inviteeId;
  int64_t gold;
} PB3CpsClanInviteeLogInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsClanInviteeLogInfo_FieldNumber_InviterId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsClanInviteeLogInfo__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsClanInviteeLogInfo_FieldNumber_InviteeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsClanInviteeLogInfo__storage_, inviteeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "registTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsClanInviteeLogInfo_FieldNumber_RegistTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpsClanInviteeLogInfo__storage_, registTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsClanInviteeLogInfo_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CpsClanInviteeLogInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsClanInviteeLogInfo_FieldNumber_Gold,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CpsClanInviteeLogInfo__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rechargeDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsClanInviteeLogInfo_FieldNumber_RechargeDay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CpsClanInviteeLogInfo__storage_, rechargeDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsClanInviteeLogInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsClanInviteeLogInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCpsClanInviteeLogRes

@implementation PB3FindCpsClanInviteeLogRes

@dynamic logsArray, logsArray_Count;
@dynamic total;
@dynamic goldSum;
@dynamic inviteeCount;

typedef struct PB3FindCpsClanInviteeLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logsArray;
  int64_t total;
  int64_t goldSum;
  int64_t inviteeCount;
} PB3FindCpsClanInviteeLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpsClanInviteeLogInfo),
        .number = PB3FindCpsClanInviteeLogRes_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogRes__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "goldSum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogRes_FieldNumber_GoldSum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogRes__storage_, goldSum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteeCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpsClanInviteeLogRes_FieldNumber_InviteeCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindCpsClanInviteeLogRes__storage_, inviteeCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpsClanInviteeLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCpsClanInviteeLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetInviteeUrlRes

@implementation PB3GetInviteeUrlRes

@dynamic URL;

typedef struct PB3GetInviteeUrlRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} PB3GetInviteeUrlRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetInviteeUrlRes_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetInviteeUrlRes__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetInviteeUrlRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetInviteeUrlRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WelfareRankInfo

@implementation PB3WelfareRankInfo

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;

typedef struct PB3WelfareRankInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
} PB3WelfareRankInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareRankInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WelfareRankInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareRankInfo_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WelfareRankInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareRankInfo_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WelfareRankInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WelfareRankInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WelfareRankInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListWelfareCompleteRankReq

@implementation PB3ListWelfareCompleteRankReq

@dynamic welfareId;

typedef struct PB3ListWelfareCompleteRankReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t welfareId;
} PB3ListWelfareCompleteRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListWelfareCompleteRankReq_FieldNumber_WelfareId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListWelfareCompleteRankReq__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListWelfareCompleteRankReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListWelfareCompleteRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListWelfareCompleteRankRes

@implementation PB3ListWelfareCompleteRankRes

@dynamic welfareListArray, welfareListArray_Count;

typedef struct PB3ListWelfareCompleteRankRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *welfareListArray;
} PB3ListWelfareCompleteRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "welfareListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WelfareRankInfo),
        .number = PB3ListWelfareCompleteRankRes_FieldNumber_WelfareListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListWelfareCompleteRankRes__storage_, welfareListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListWelfareCompleteRankRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListWelfareCompleteRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000welfareList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardPlayer

@implementation PB3TransferAwardPlayer

@dynamic playerId;
@dynamic playerIcon;
@dynamic playerNickName;
@dynamic playerId2;

typedef struct PB3TransferAwardPlayer__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerIcon;
  NSString *playerNickName;
  int64_t playerId;
  int64_t playerId2;
} PB3TransferAwardPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardPlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardPlayer_FieldNumber_PlayerIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayer__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerNickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardPlayer_FieldNumber_PlayerNickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayer__storage_, playerNickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardPlayer_FieldNumber_PlayerId2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayer__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardPlayer class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferAwardPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListTransferAwardPlayerReq

@implementation PB3ListTransferAwardPlayerReq

@dynamic actId;
@dynamic relActId;
@dynamic playerIdArray, playerIdArray_Count;

typedef struct PB3ListTransferAwardPlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  GPBInt64Array *playerIdArray;
} PB3ListTransferAwardPlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardPlayerReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardPlayerReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardPlayerReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardPlayerReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardPlayerReq_FieldNumber_PlayerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardPlayerReq__storage_, playerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListTransferAwardPlayerReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListTransferAwardPlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListTransferAwardPlayerRes

@implementation PB3ListTransferAwardPlayerRes

@dynamic listInfoArray, listInfoArray_Count;

typedef struct PB3ListTransferAwardPlayerRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listInfoArray;
} PB3ListTransferAwardPlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TransferAwardPlayer),
        .number = PB3ListTransferAwardPlayerRes_FieldNumber_ListInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardPlayerRes__storage_, listInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListTransferAwardPlayerRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListTransferAwardPlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardToOtherReq

@implementation PB3TransferAwardToOtherReq

@dynamic actId;
@dynamic relActId;
@dynamic toPlayerId;
@dynamic awardNum;

typedef struct PB3TransferAwardToOtherReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t awardNum;
  int64_t toPlayerId;
} PB3TransferAwardToOtherReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardToOtherReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferAwardToOtherReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardToOtherReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TransferAwardToOtherReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardToOtherReq_FieldNumber_ToPlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TransferAwardToOtherReq__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardToOtherReq_FieldNumber_AwardNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TransferAwardToOtherReq__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardToOtherReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferAwardToOtherReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardToOtherRes

@implementation PB3TransferAwardToOtherRes


typedef struct PB3TransferAwardToOtherRes__storage_ {
  uint32_t _has_storage_[1];
} PB3TransferAwardToOtherRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardToOtherRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3TransferAwardToOtherRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardRank

@implementation PB3TransferAwardRank

@dynamic playerId;
@dynamic playerIcon;
@dynamic playerNickName;
@dynamic awardNum;
@dynamic rank;
@dynamic lessScore;
@dynamic playerId2;

typedef struct PB3TransferAwardRank__storage_ {
  uint32_t _has_storage_[1];
  int32_t rank;
  int32_t lessScore;
  NSString *playerIcon;
  NSString *playerNickName;
  int64_t playerId;
  int64_t awardNum;
  int64_t playerId2;
} PB3TransferAwardRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRank_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferAwardRank__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRank_FieldNumber_PlayerIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TransferAwardRank__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerNickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRank_FieldNumber_PlayerNickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TransferAwardRank__storage_, playerNickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRank_FieldNumber_AwardNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TransferAwardRank__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRank_FieldNumber_Rank,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TransferAwardRank__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lessScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRank_FieldNumber_LessScore,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TransferAwardRank__storage_, lessScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRank_FieldNumber_PlayerId2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3TransferAwardRank__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardRank class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferAwardRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListTransferAwardRankReq

@implementation PB3ListTransferAwardRankReq

@dynamic actId;
@dynamic relActId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3ListTransferAwardRankReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t page;
  int32_t pageSize;
} PB3ListTransferAwardRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardRankReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardRankReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardRankReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardRankReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardRankReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardRankReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardRankReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardRankReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListTransferAwardRankReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListTransferAwardRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListTransferAwardRankRes

@implementation PB3ListTransferAwardRankRes

@dynamic listInfoArray, listInfoArray_Count;
@dynamic total;

typedef struct PB3ListTransferAwardRankRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listInfoArray;
} PB3ListTransferAwardRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TransferAwardRank),
        .number = PB3ListTransferAwardRankRes_FieldNumber_ListInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardRankRes__storage_, listInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListTransferAwardRankRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListTransferAwardRankRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListTransferAwardRankRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListTransferAwardRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardPlayerRankReq

@implementation PB3TransferAwardPlayerRankReq

@dynamic actId;
@dynamic relActId;
@dynamic playerId;

typedef struct PB3TransferAwardPlayerRankReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int64_t playerId;
} PB3TransferAwardPlayerRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardPlayerRankReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayerRankReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardPlayerRankReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayerRankReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardPlayerRankReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayerRankReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardPlayerRankReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferAwardPlayerRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardPlayerRankRes

@implementation PB3TransferAwardPlayerRankRes

@dynamic hasRankInfo, rankInfo;

typedef struct PB3TransferAwardPlayerRankRes__storage_ {
  uint32_t _has_storage_[1];
  PB3TransferAwardRank *rankInfo;
} PB3TransferAwardPlayerRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TransferAwardRank),
        .number = PB3TransferAwardPlayerRankRes_FieldNumber_RankInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferAwardPlayerRankRes__storage_, rankInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardPlayerRankRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferAwardPlayerRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardRankRoomIdReq

@implementation PB3TransferAwardRankRoomIdReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3TransferAwardRankRoomIdReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3TransferAwardRankRoomIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRankRoomIdReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferAwardRankRoomIdReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRankRoomIdReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TransferAwardRankRoomIdReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardRankRoomIdReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferAwardRankRoomIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferAwardRankRoomIdRes

@implementation PB3TransferAwardRankRoomIdRes

@dynamic roomId;

typedef struct PB3TransferAwardRankRoomIdRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3TransferAwardRankRoomIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferAwardRankRoomIdRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferAwardRankRoomIdRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferAwardRankRoomIdRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferAwardRankRoomIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsPlayerCountSortReq

@implementation PB3CpsPlayerCountSortReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3CpsPlayerCountSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3CpsPlayerCountSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerCountSortReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSortReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerCountSortReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSortReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsPlayerCountSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsPlayerCountSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsPlayerCountSortRes

@implementation PB3CpsPlayerCountSortRes

@dynamic sortListArray, sortListArray_Count;
@dynamic hasMySort, mySort;
@dynamic total;

typedef struct PB3CpsPlayerCountSortRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *sortListArray;
  PB3CpsPlayerCountSort *mySort;
} PB3CpsPlayerCountSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sortListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpsPlayerCountSort),
        .number = PB3CpsPlayerCountSortRes_FieldNumber_SortListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSortRes__storage_, sortListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mySort",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpsPlayerCountSort),
        .number = PB3CpsPlayerCountSortRes_FieldNumber_MySort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSortRes__storage_, mySort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerCountSortRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSortRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsPlayerCountSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsPlayerCountSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsPlayerCountSort

@implementation PB3CpsPlayerCountSort

@dynamic sort;
@dynamic inviterId;
@dynamic inviteeNum;

typedef struct PB3CpsPlayerCountSort__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  int32_t inviteeNum;
  int64_t inviterId;
} PB3CpsPlayerCountSort__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerCountSort_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSort__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerCountSort_FieldNumber_InviterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSort__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerCountSort_FieldNumber_InviteeNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpsPlayerCountSort__storage_, inviteeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsPlayerCountSort class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsPlayerCountSort__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsPlayerGoldSortReq

@implementation PB3CpsPlayerGoldSortReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3CpsPlayerGoldSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3CpsPlayerGoldSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerGoldSortReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSortReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerGoldSortReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSortReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsPlayerGoldSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsPlayerGoldSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsPlayerGoldSortRes

@implementation PB3CpsPlayerGoldSortRes

@dynamic sortListArray, sortListArray_Count;
@dynamic hasMySort, mySort;
@dynamic total;

typedef struct PB3CpsPlayerGoldSortRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *sortListArray;
  PB3CpsPlayerGoldSort *mySort;
} PB3CpsPlayerGoldSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sortListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpsPlayerGoldSort),
        .number = PB3CpsPlayerGoldSortRes_FieldNumber_SortListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSortRes__storage_, sortListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mySort",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpsPlayerGoldSort),
        .number = PB3CpsPlayerGoldSortRes_FieldNumber_MySort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSortRes__storage_, mySort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerGoldSortRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSortRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsPlayerGoldSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsPlayerGoldSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpsPlayerGoldSort

@implementation PB3CpsPlayerGoldSort

@dynamic sort;
@dynamic inviterId;
@dynamic gold;

typedef struct PB3CpsPlayerGoldSort__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  int64_t inviterId;
  int64_t gold;
} PB3CpsPlayerGoldSort__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerGoldSort_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSort__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerGoldSort_FieldNumber_InviterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSort__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpsPlayerGoldSort_FieldNumber_Gold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpsPlayerGoldSort__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpsPlayerGoldSort class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpsPlayerGoldSort__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewActFormRecordReq

@implementation PB3NewActFormRecordReq

@dynamic actId;
@dynamic relActId;
@dynamic carrierId;
@dynamic playerIdsArray, playerIdsArray_Count;
@dynamic playerName;
@dynamic page;
@dynamic pageSize;
@dynamic useGroup;
@dynamic useShuffle;
@dynamic weightLimit;
@dynamic sortType;
@dynamic isSingleSearch;
@dynamic isVerify;

typedef struct PB3NewActFormRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t carrierId;
  int32_t page;
  int32_t pageSize;
  int32_t weightLimit;
  int32_t sortType;
  int32_t isVerify;
  GPBInt64Array *playerIdsArray;
  NSString *playerName;
} PB3NewActFormRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "carrierId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_CarrierId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, carrierId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_PlayerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, playerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_Page,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_PageSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "useGroup",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_UseGroup,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "useShuffle",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_UseShuffle,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "weightLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_WeightLimit,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, weightLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sortType",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_SortType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, sortType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isSingleSearch",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_IsSingleSearch,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isVerify",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewActFormRecordReq_FieldNumber_IsVerify,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3NewActFormRecordReq__storage_, isVerify),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewActFormRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewActFormRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewSearchByVotePlayerReq

@implementation PB3NewSearchByVotePlayerReq

@dynamic actId;
@dynamic relActId;
@dynamic searchPlayerIdArray, searchPlayerIdArray_Count;
@dynamic searchPlayerName;

typedef struct PB3NewSearchByVotePlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  GPBInt64Array *searchPlayerIdArray;
  NSString *searchPlayerName;
} PB3NewSearchByVotePlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSearchByVotePlayerReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewSearchByVotePlayerReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSearchByVotePlayerReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewSearchByVotePlayerReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "searchPlayerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSearchByVotePlayerReq_FieldNumber_SearchPlayerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewSearchByVotePlayerReq__storage_, searchPlayerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "searchPlayerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSearchByVotePlayerReq_FieldNumber_SearchPlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewSearchByVotePlayerReq__storage_, searchPlayerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewSearchByVotePlayerReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewSearchByVotePlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewSearchByVotePlayerRes

@implementation PB3NewSearchByVotePlayerRes

@dynamic byVoteInfoArray, byVoteInfoArray_Count;

typedef struct PB3NewSearchByVotePlayerRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *byVoteInfoArray;
} PB3NewSearchByVotePlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "byVoteInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteResult),
        .number = PB3NewSearchByVotePlayerRes_FieldNumber_ByVoteInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewSearchByVotePlayerRes__storage_, byVoteInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewSearchByVotePlayerRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewSearchByVotePlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchVoteResultReq

@implementation PB3SearchVoteResultReq

@dynamic actId;
@dynamic relId;
@dynamic type;
@dynamic page;
@dynamic pageSize;
@dynamic playerIdsArray, playerIdsArray_Count;
@dynamic playerName;

typedef struct PB3SearchVoteResultReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t type;
  int32_t page;
  int32_t pageSize;
  GPBInt64Array *playerIdsArray;
  NSString *playerName;
} PB3SearchVoteResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchVoteResultReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchVoteResultReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchVoteResultReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchVoteResultReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchVoteResultReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SearchVoteResultReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchVoteResultReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SearchVoteResultReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchVoteResultReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SearchVoteResultReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchVoteResultReq_FieldNumber_PlayerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SearchVoteResultReq__storage_, playerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchVoteResultReq_FieldNumber_PlayerName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SearchVoteResultReq__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchVoteResultReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchVoteResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindSelfTicketsNumReq

@implementation PB3FindSelfTicketsNumReq

@dynamic relId;

typedef struct PB3FindSelfTicketsNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
} PB3FindSelfTicketsNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSelfTicketsNumReq_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindSelfTicketsNumReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindSelfTicketsNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindSelfTicketsNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindSelfTicketsNumRes

@implementation PB3FindSelfTicketsNumRes

@dynamic selfTicketsNum;

typedef struct PB3FindSelfTicketsNumRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t selfTicketsNum;
} PB3FindSelfTicketsNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selfTicketsNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSelfTicketsNumRes_FieldNumber_SelfTicketsNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindSelfTicketsNumRes__storage_, selfTicketsNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindSelfTicketsNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindSelfTicketsNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansSupportReq

@implementation PB3FansSupportReq

@dynamic actId;
@dynamic relId;

typedef struct PB3FansSupportReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
} PB3FansSupportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansSupportReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansSupportReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansSupportReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FansSupportReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansSupportReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansSupportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansSupportRes

@implementation PB3FansSupportRes


typedef struct PB3FansSupportRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FansSupportRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansSupportRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FansSupportRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindFansSupportNumReq

@implementation PB3FindFansSupportNumReq

@dynamic actId;
@dynamic relId;

typedef struct PB3FindFansSupportNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
} PB3FindFansSupportNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindFansSupportNumReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindFansSupportNumReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindFansSupportNumReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindFansSupportNumReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindFansSupportNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindFansSupportNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindFansSupportNumRes

@implementation PB3FindFansSupportNumRes

@dynamic supportNum;
@dynamic selfSupportNum;
@dynamic selfSendNum;

typedef struct PB3FindFansSupportNumRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t supportNum;
  int64_t selfSupportNum;
  int64_t selfSendNum;
} PB3FindFansSupportNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "supportNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindFansSupportNumRes_FieldNumber_SupportNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindFansSupportNumRes__storage_, supportNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selfSupportNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindFansSupportNumRes_FieldNumber_SelfSupportNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindFansSupportNumRes__storage_, selfSupportNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selfSendNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindFansSupportNumRes_FieldNumber_SelfSendNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindFansSupportNumRes__storage_, selfSendNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindFansSupportNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindFansSupportNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindRoomMaxHotScoreReq

@implementation PB3FindRoomMaxHotScoreReq

@dynamic actId;
@dynamic relId;
@dynamic roomId;
@dynamic dataType;

typedef struct PB3FindRoomMaxHotScoreReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t dataType;
  int64_t roomId;
} PB3FindRoomMaxHotScoreReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRoomMaxHotScoreReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRoomMaxHotScoreReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRoomMaxHotScoreReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindRoomMaxHotScoreReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRoomMaxHotScoreReq_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindRoomMaxHotScoreReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRoomMaxHotScoreReq_FieldNumber_DataType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindRoomMaxHotScoreReq__storage_, dataType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRoomMaxHotScoreReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRoomMaxHotScoreReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindRoomMaxHotScoreRes

@implementation PB3FindRoomMaxHotScoreRes

@dynamic hotScore;

typedef struct PB3FindRoomMaxHotScoreRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t hotScore;
} PB3FindRoomMaxHotScoreRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hotScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRoomMaxHotScoreRes_FieldNumber_HotScore,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRoomMaxHotScoreRes__storage_, hotScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRoomMaxHotScoreRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRoomMaxHotScoreRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WelfareLogData

@implementation PB3WelfareLogData

@dynamic logTime;
@dynamic welfareId;
@dynamic welfareName;
@dynamic awardId;
@dynamic awardNum;

typedef struct PB3WelfareLogData__storage_ {
  uint32_t _has_storage_[1];
  int32_t logTime;
  int32_t welfareId;
  int32_t awardId;
  int32_t awardNum;
  NSString *welfareName;
} PB3WelfareLogData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareLogData_FieldNumber_LogTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WelfareLogData__storage_, logTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareLogData_FieldNumber_WelfareId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WelfareLogData__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "welfareName",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareLogData_FieldNumber_WelfareName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WelfareLogData__storage_, welfareName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareLogData_FieldNumber_AwardId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WelfareLogData__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareLogData_FieldNumber_AwardNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3WelfareLogData__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WelfareLogData class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WelfareLogData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerWelfareLogReq

@implementation PB3FindPlayerWelfareLogReq

@dynamic actId;
@dynamic relId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindPlayerWelfareLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t page;
  int32_t pageSize;
} PB3FindPlayerWelfareLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerWelfareLogReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindPlayerWelfareLogReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerWelfareLogReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindPlayerWelfareLogReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerWelfareLogReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindPlayerWelfareLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerWelfareLogReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindPlayerWelfareLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerWelfareLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerWelfareLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerWelfareLogRes

@implementation PB3FindPlayerWelfareLogRes

@dynamic logListArray, logListArray_Count;

typedef struct PB3FindPlayerWelfareLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logListArray;
} PB3FindPlayerWelfareLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WelfareLogData),
        .number = PB3FindPlayerWelfareLogRes_FieldNumber_LogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindPlayerWelfareLogRes__storage_, logListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerWelfareLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerWelfareLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowRandomRoomRes

@implementation PB3ShowRandomRoomRes

@dynamic roomIdArray, roomIdArray_Count;

typedef struct PB3ShowRandomRoomRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *roomIdArray;
} PB3ShowRandomRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowRandomRoomRes_FieldNumber_RoomIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowRandomRoomRes__storage_, roomIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowRandomRoomRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowRandomRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowRandomRoomReq

@implementation PB3ShowRandomRoomReq

@dynamic actId;
@dynamic relActId;
@dynamic userStintId;
@dynamic reqNum;

typedef struct PB3ShowRandomRoomReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t userStintId;
  int32_t reqNum;
} PB3ShowRandomRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowRandomRoomReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowRandomRoomReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowRandomRoomReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowRandomRoomReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userStintId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowRandomRoomReq_FieldNumber_UserStintId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowRandomRoomReq__storage_, userStintId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reqNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowRandomRoomReq_FieldNumber_ReqNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowRandomRoomReq__storage_, reqNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowRandomRoomReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowRandomRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GainOnTimeWelfareReq

@implementation PB3GainOnTimeWelfareReq

@dynamic confId;
@dynamic actId;
@dynamic relActId;
@dynamic gainIndex;

typedef struct PB3GainOnTimeWelfareReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t gainIndex;
  int64_t confId;
} PB3GainOnTimeWelfareReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GainOnTimeWelfareReq_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GainOnTimeWelfareReq__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GainOnTimeWelfareReq_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GainOnTimeWelfareReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GainOnTimeWelfareReq_FieldNumber_RelActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GainOnTimeWelfareReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gainIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3GainOnTimeWelfareReq_FieldNumber_GainIndex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GainOnTimeWelfareReq__storage_, gainIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GainOnTimeWelfareReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GainOnTimeWelfareReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GainOnTimeWelfareRes

@implementation PB3GainOnTimeWelfareRes

@dynamic rewardListArray, rewardListArray_Count;

typedef struct PB3GainOnTimeWelfareRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rewardListArray;
} PB3GainOnTimeWelfareRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EventBoxReward),
        .number = PB3GainOnTimeWelfareRes_FieldNumber_RewardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GainOnTimeWelfareRes__storage_, rewardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GainOnTimeWelfareRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GainOnTimeWelfareRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindOnTimeWelfareLogReq

@implementation PB3FindOnTimeWelfareLogReq

@dynamic confId;
@dynamic actId;
@dynamic relActId;

typedef struct PB3FindOnTimeWelfareLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int64_t confId;
} PB3FindOnTimeWelfareLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindOnTimeWelfareLogReq_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindOnTimeWelfareLogReq__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindOnTimeWelfareLogReq_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindOnTimeWelfareLogReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindOnTimeWelfareLogReq_FieldNumber_RelActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindOnTimeWelfareLogReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindOnTimeWelfareLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindOnTimeWelfareLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindOnTimeWelfareLogRes

@implementation PB3FindOnTimeWelfareLogRes

@dynamic gainIndex;
@dynamic rewardListArray, rewardListArray_Count;

typedef struct PB3FindOnTimeWelfareLogRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t gainIndex;
  NSMutableArray *rewardListArray;
} PB3FindOnTimeWelfareLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gainIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindOnTimeWelfareLogRes_FieldNumber_GainIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindOnTimeWelfareLogRes__storage_, gainIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rewardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EventBoxReward),
        .number = PB3FindOnTimeWelfareLogRes_FieldNumber_RewardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindOnTimeWelfareLogRes__storage_, rewardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindOnTimeWelfareLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindOnTimeWelfareLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActBoxGameRank

@implementation PB3ActBoxGameRank

@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic gameScore;

typedef struct PB3ActBoxGameRank__storage_ {
  uint32_t _has_storage_[1];
  int32_t gameScore;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerId2;
} PB3ActBoxGameRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActBoxGameRank_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActBoxGameRank__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActBoxGameRank_FieldNumber_PlayerId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActBoxGameRank__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActBoxGameRank_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActBoxGameRank__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActBoxGameRank_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActBoxGameRank__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActBoxGameRank_FieldNumber_GameScore,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActBoxGameRank__storage_, gameScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActBoxGameRank class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActBoxGameRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActBoxGameSelLog

@implementation PB3ActBoxGameSelLog

@dynamic timeStr;
@dynamic gameScore;
@dynamic rewardListArray, rewardListArray_Count;

typedef struct PB3ActBoxGameSelLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t gameScore;
  NSString *timeStr;
  NSMutableArray *rewardListArray;
} PB3ActBoxGameSelLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timeStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActBoxGameSelLog_FieldNumber_TimeStr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActBoxGameSelLog__storage_, timeStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActBoxGameSelLog_FieldNumber_GameScore,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActBoxGameSelLog__storage_, gameScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rewardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EventBoxReward),
        .number = PB3ActBoxGameSelLog_FieldNumber_RewardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActBoxGameSelLog__storage_, rewardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActBoxGameSelLog class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActBoxGameSelLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindActBoxGameRankReq

@implementation PB3FindActBoxGameRankReq

@dynamic actId;
@dynamic relId;
@dynamic dayDot;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindActBoxGameRankReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t dayDot;
  int32_t page;
  int32_t pageSize;
} PB3FindActBoxGameRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameRankReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameRankReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameRankReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameRankReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dayDot",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameRankReq_FieldNumber_DayDot,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameRankReq__storage_, dayDot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameRankReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameRankReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameRankReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameRankReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActBoxGameRankReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActBoxGameRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindActBoxGameRankRes

@implementation PB3FindActBoxGameRankRes

@dynamic rankListArray, rankListArray_Count;

typedef struct PB3FindActBoxGameRankRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankListArray;
} PB3FindActBoxGameRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActBoxGameRank),
        .number = PB3FindActBoxGameRankRes_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameRankRes__storage_, rankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActBoxGameRankRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActBoxGameRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindActBoxGameSelfLogReq

@implementation PB3FindActBoxGameSelfLogReq

@dynamic actId;
@dynamic relId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindActBoxGameSelfLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t page;
  int32_t pageSize;
} PB3FindActBoxGameSelfLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameSelfLogReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameSelfLogReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameSelfLogReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameSelfLogReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameSelfLogReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameSelfLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActBoxGameSelfLogReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameSelfLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActBoxGameSelfLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActBoxGameSelfLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindActBoxGameSelfLogRes

@implementation PB3FindActBoxGameSelfLogRes

@dynamic logListArray, logListArray_Count;

typedef struct PB3FindActBoxGameSelfLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logListArray;
} PB3FindActBoxGameSelfLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActBoxGameSelLog),
        .number = PB3FindActBoxGameSelfLogRes_FieldNumber_LogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindActBoxGameSelfLogRes__storage_, logListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActBoxGameSelfLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActBoxGameSelfLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerGiftAskOrSendReq

@implementation PB3FindPlayerGiftAskOrSendReq

@dynamic actId;
@dynamic relActId;
@dynamic askOrSend;
@dynamic uniqueStr;

typedef struct PB3FindPlayerGiftAskOrSendReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t askOrSend;
  NSString *uniqueStr;
} PB3FindPlayerGiftAskOrSendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerGiftAskOrSendReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindPlayerGiftAskOrSendReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerGiftAskOrSendReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindPlayerGiftAskOrSendReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "askOrSend",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerGiftAskOrSendReq_FieldNumber_AskOrSend,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindPlayerGiftAskOrSendReq__storage_, askOrSend),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uniqueStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerGiftAskOrSendReq_FieldNumber_UniqueStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindPlayerGiftAskOrSendReq__storage_, uniqueStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerGiftAskOrSendReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerGiftAskOrSendReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerGiftAskOrSendRes

@implementation PB3FindPlayerGiftAskOrSendRes

@dynamic retStatus;

typedef struct PB3FindPlayerGiftAskOrSendRes__storage_ {
  uint32_t _has_storage_[1];
  PB3StockGiftRetStatus retStatus;
} PB3FindPlayerGiftAskOrSendRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retStatus",
        .dataTypeSpecific.enumDescFunc = PB3StockGiftRetStatus_EnumDescriptor,
        .number = PB3FindPlayerGiftAskOrSendRes_FieldNumber_RetStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindPlayerGiftAskOrSendRes__storage_, retStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerGiftAskOrSendRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerGiftAskOrSendRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindPlayerGiftAskOrSendRes_RetStatus_RawValue(PB3FindPlayerGiftAskOrSendRes *message) {
  GPBDescriptor *descriptor = [PB3FindPlayerGiftAskOrSendRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindPlayerGiftAskOrSendRes_FieldNumber_RetStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindPlayerGiftAskOrSendRes_RetStatus_RawValue(PB3FindPlayerGiftAskOrSendRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindPlayerGiftAskOrSendRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindPlayerGiftAskOrSendRes_FieldNumber_RetStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AskForFriendGiftReq

@implementation PB3AskForFriendGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic friendId;
@dynamic giftId;
@dynamic giftNum;
@dynamic askURL;
@dynamic uniqueStr;

typedef struct PB3AskForFriendGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t giftId;
  int32_t giftNum;
  NSString *askURL;
  NSString *uniqueStr;
  int64_t friendId;
} PB3AskForFriendGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AskForFriendGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AskForFriendGiftReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AskForFriendGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AskForFriendGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AskForFriendGiftReq_FieldNumber_FriendId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AskForFriendGiftReq__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AskForFriendGiftReq_FieldNumber_GiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3AskForFriendGiftReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3AskForFriendGiftReq_FieldNumber_GiftNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3AskForFriendGiftReq__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "askURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3AskForFriendGiftReq_FieldNumber_AskURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3AskForFriendGiftReq__storage_, askURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uniqueStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3AskForFriendGiftReq_FieldNumber_UniqueStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3AskForFriendGiftReq__storage_, uniqueStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AskForFriendGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AskForFriendGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AskForFriendGiftRes

@implementation PB3AskForFriendGiftRes


typedef struct PB3AskForFriendGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AskForFriendGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AskForFriendGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AskForFriendGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendFriendGiftReq

@implementation PB3SendFriendGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic friendId;
@dynamic giftId;
@dynamic giftNum;
@dynamic sendURL;
@dynamic uniqueStr;

typedef struct PB3SendFriendGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t giftId;
  int32_t giftNum;
  NSString *sendURL;
  NSString *uniqueStr;
  int64_t friendId;
} PB3SendFriendGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendFriendGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendFriendGiftReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendFriendGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendFriendGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendFriendGiftReq_FieldNumber_FriendId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SendFriendGiftReq__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendFriendGiftReq_FieldNumber_GiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SendFriendGiftReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendFriendGiftReq_FieldNumber_GiftNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SendFriendGiftReq__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sendURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendFriendGiftReq_FieldNumber_SendURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SendFriendGiftReq__storage_, sendURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uniqueStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendFriendGiftReq_FieldNumber_UniqueStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SendFriendGiftReq__storage_, uniqueStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendFriendGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendFriendGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendFriendGiftRes

@implementation PB3SendFriendGiftRes


typedef struct PB3SendFriendGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendFriendGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendFriendGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendFriendGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveFriendGiftReq

@implementation PB3ReceiveFriendGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic uniqueStr;

typedef struct PB3ReceiveFriendGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  NSString *uniqueStr;
} PB3ReceiveFriendGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveFriendGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveFriendGiftReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveFriendGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveFriendGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uniqueStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveFriendGiftReq_FieldNumber_UniqueStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReceiveFriendGiftReq__storage_, uniqueStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveFriendGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveFriendGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveFriendGiftRes

@implementation PB3ReceiveFriendGiftRes


typedef struct PB3ReceiveFriendGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ReceiveFriendGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveFriendGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReceiveFriendGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RefuseFriendAskForGiftReq

@implementation PB3RefuseFriendAskForGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic uniqueStr;

typedef struct PB3RefuseFriendAskForGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  NSString *uniqueStr;
} PB3RefuseFriendAskForGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RefuseFriendAskForGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RefuseFriendAskForGiftReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RefuseFriendAskForGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RefuseFriendAskForGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uniqueStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3RefuseFriendAskForGiftReq_FieldNumber_UniqueStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RefuseFriendAskForGiftReq__storage_, uniqueStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RefuseFriendAskForGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RefuseFriendAskForGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RefuseFriendAskForGiftRes

@implementation PB3RefuseFriendAskForGiftRes


typedef struct PB3RefuseFriendAskForGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RefuseFriendAskForGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RefuseFriendAskForGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RefuseFriendAskForGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AcceptSendFriendAskForGiftReq

@implementation PB3AcceptSendFriendAskForGiftReq

@dynamic actId;
@dynamic relActId;
@dynamic uniqueStr;

typedef struct PB3AcceptSendFriendAskForGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  NSString *uniqueStr;
} PB3AcceptSendFriendAskForGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AcceptSendFriendAskForGiftReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AcceptSendFriendAskForGiftReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AcceptSendFriendAskForGiftReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AcceptSendFriendAskForGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uniqueStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3AcceptSendFriendAskForGiftReq_FieldNumber_UniqueStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AcceptSendFriendAskForGiftReq__storage_, uniqueStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AcceptSendFriendAskForGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AcceptSendFriendAskForGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AcceptSendFriendAskForGiftRes

@implementation PB3AcceptSendFriendAskForGiftRes


typedef struct PB3AcceptSendFriendAskForGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AcceptSendFriendAskForGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AcceptSendFriendAskForGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AcceptSendFriendAskForGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListFriendGiftSortReq

@implementation PB3ListFriendGiftSortReq

@dynamic actId;
@dynamic relActId;
@dynamic dayDot;
@dynamic friendIdListArray, friendIdListArray_Count;

typedef struct PB3ListFriendGiftSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t dayDot;
  GPBInt64Array *friendIdListArray;
} PB3ListFriendGiftSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListFriendGiftSortReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListFriendGiftSortReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListFriendGiftSortReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListFriendGiftSortReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dayDot",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListFriendGiftSortReq_FieldNumber_DayDot,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListFriendGiftSortReq__storage_, dayDot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListFriendGiftSortReq_FieldNumber_FriendIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListFriendGiftSortReq__storage_, friendIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListFriendGiftSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListFriendGiftSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3StockGiftSortResult

@implementation PB3StockGiftSortResult

@dynamic sort;
@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic point;
@dynamic sendStatus;
@dynamic askStatus;

typedef struct PB3StockGiftSortResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t sendStatus;
  int32_t askStatus;
  NSString *name;
  NSString *icon;
  int64_t sort;
  int64_t id_p;
  int64_t id2;
  int64_t point;
} PB3StockGiftSortResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_Id2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_Point,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sendStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_SendStatus,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, sendStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "askStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3StockGiftSortResult_FieldNumber_AskStatus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3StockGiftSortResult__storage_, askStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StockGiftSortResult class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3StockGiftSortResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListFriendGiftSortRes

@implementation PB3ListFriendGiftSortRes

@dynamic listArray, listArray_Count;
@dynamic hasPlayer, player;

typedef struct PB3ListFriendGiftSortRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  PB3StockGiftSortResult *player;
} PB3ListFriendGiftSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3StockGiftSortResult),
        .number = PB3ListFriendGiftSortRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListFriendGiftSortRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3StockGiftSortResult),
        .number = PB3ListFriendGiftSortRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListFriendGiftSortRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListFriendGiftSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListFriendGiftSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActGiftLogData

@implementation PB3ActGiftLogData

@dynamic relateType;
@dynamic optType;
@dynamic relateName;
@dynamic createdTime;
@dynamic hasRewardData, rewardData;

typedef struct PB3ActGiftLogData__storage_ {
  uint32_t _has_storage_[1];
  PB3StockGiftRelateType relateType;
  PB3StockGiftOptType optType;
  NSString *relateName;
  NSString *createdTime;
  PB3EventBoxReward *rewardData;
} PB3ActGiftLogData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relateType",
        .dataTypeSpecific.enumDescFunc = PB3StockGiftRelateType_EnumDescriptor,
        .number = PB3ActGiftLogData_FieldNumber_RelateType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActGiftLogData__storage_, relateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3StockGiftOptType_EnumDescriptor,
        .number = PB3ActGiftLogData_FieldNumber_OptType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActGiftLogData__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "relateName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGiftLogData_FieldNumber_RelateName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActGiftLogData__storage_, relateName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGiftLogData_FieldNumber_CreatedTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActGiftLogData__storage_, createdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rewardData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EventBoxReward),
        .number = PB3ActGiftLogData_FieldNumber_RewardData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActGiftLogData__storage_, rewardData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActGiftLogData class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActGiftLogData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ActGiftLogData_RelateType_RawValue(PB3ActGiftLogData *message) {
  GPBDescriptor *descriptor = [PB3ActGiftLogData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActGiftLogData_FieldNumber_RelateType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActGiftLogData_RelateType_RawValue(PB3ActGiftLogData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActGiftLogData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActGiftLogData_FieldNumber_RelateType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ActGiftLogData_OptType_RawValue(PB3ActGiftLogData *message) {
  GPBDescriptor *descriptor = [PB3ActGiftLogData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActGiftLogData_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActGiftLogData_OptType_RawValue(PB3ActGiftLogData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActGiftLogData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActGiftLogData_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindPlayerActGiftLogReq

@implementation PB3FindPlayerActGiftLogReq

@dynamic actId;
@dynamic relActIdArray, relActIdArray_Count;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindPlayerActGiftLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t page;
  int32_t pageSize;
  GPBInt32Array *relActIdArray;
} PB3FindPlayerActGiftLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActGiftLogReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindPlayerActGiftLogReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActGiftLogReq_FieldNumber_RelActIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindPlayerActGiftLogReq__storage_, relActIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActGiftLogReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindPlayerActGiftLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActGiftLogReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindPlayerActGiftLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerActGiftLogReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerActGiftLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerActGiftLogRes

@implementation PB3FindPlayerActGiftLogRes

@dynamic logListArray, logListArray_Count;

typedef struct PB3FindPlayerActGiftLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logListArray;
} PB3FindPlayerActGiftLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActGiftLogData),
        .number = PB3FindPlayerActGiftLogRes_FieldNumber_LogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindPlayerActGiftLogRes__storage_, logListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerActGiftLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerActGiftLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerActGiftCollectStatusReq

@implementation PB3PlayerActGiftCollectStatusReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3PlayerActGiftCollectStatusReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3PlayerActGiftCollectStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActGiftCollectStatusReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerActGiftCollectStatusReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActGiftCollectStatusReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerActGiftCollectStatusReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerActGiftCollectStatusReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerActGiftCollectStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerActGiftCollectStatusRes

@implementation PB3PlayerActGiftCollectStatusRes

@dynamic isFirst;
@dynamic collectRank;
@dynamic isCollectAll;

typedef struct PB3PlayerActGiftCollectStatusRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t isFirst;
  int32_t collectRank;
} PB3PlayerActGiftCollectStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isFirst",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActGiftCollectStatusRes_FieldNumber_IsFirst,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerActGiftCollectStatusRes__storage_, isFirst),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActGiftCollectStatusRes_FieldNumber_CollectRank,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerActGiftCollectStatusRes__storage_, collectRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isCollectAll",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerActGiftCollectStatusRes_FieldNumber_IsCollectAll,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerActGiftCollectStatusRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerActGiftCollectStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CollectAllActGiftPlayerNumReq

@implementation PB3CollectAllActGiftPlayerNumReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3CollectAllActGiftPlayerNumReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3CollectAllActGiftPlayerNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CollectAllActGiftPlayerNumReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CollectAllActGiftPlayerNumReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CollectAllActGiftPlayerNumReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CollectAllActGiftPlayerNumReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CollectAllActGiftPlayerNumReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CollectAllActGiftPlayerNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CollectAllActGiftPlayerNumRes

@implementation PB3CollectAllActGiftPlayerNumRes

@dynamic collectRankNum;

typedef struct PB3CollectAllActGiftPlayerNumRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t collectRankNum;
} PB3CollectAllActGiftPlayerNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "collectRankNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CollectAllActGiftPlayerNumRes_FieldNumber_CollectRankNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CollectAllActGiftPlayerNumRes__storage_, collectRankNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CollectAllActGiftPlayerNumRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CollectAllActGiftPlayerNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerTotalSortReq

@implementation PB3FindPlayerTotalSortReq

@dynamic actId;
@dynamic relId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindPlayerTotalSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t page;
  int32_t pageSize;
} PB3FindPlayerTotalSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerTotalSortReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindPlayerTotalSortReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerTotalSortReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindPlayerTotalSortReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerTotalSortReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindPlayerTotalSortReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerTotalSortReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindPlayerTotalSortReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerTotalSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerTotalSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerTotalSortRes

@implementation PB3FindPlayerTotalSortRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3FindPlayerTotalSortRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  int64_t total;
} PB3FindPlayerTotalSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SortResult),
        .number = PB3FindPlayerTotalSortRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindPlayerTotalSortRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerTotalSortRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindPlayerTotalSortRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerTotalSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerTotalSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActFormLikeReq

@implementation PB3ActFormLikeReq

@dynamic recordId;
@dynamic carrierId;

typedef struct PB3ActFormLikeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t recordId;
  int32_t carrierId;
} PB3ActFormLikeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormLikeReq_FieldNumber_RecordId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActFormLikeReq__storage_, recordId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "carrierId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormLikeReq_FieldNumber_CarrierId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActFormLikeReq__storage_, carrierId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActFormLikeReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActFormLikeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActFormLikeRes

@implementation PB3ActFormLikeRes

@dynamic isSetLiked;

typedef struct PB3ActFormLikeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ActFormLikeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSetLiked",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActFormLikeRes_FieldNumber_IsSetLiked,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActFormLikeRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActFormLikeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerActFormDataReq

@implementation PB3FindPlayerActFormDataReq

@dynamic actId;
@dynamic relActId;
@dynamic carrierId;
@dynamic playerIdArray, playerIdArray_Count;
@dynamic page;
@dynamic pageSize;
@dynamic isVerify;
@dynamic isSingleSearch;

typedef struct PB3FindPlayerActFormDataReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t carrierId;
  int32_t page;
  int32_t pageSize;
  int32_t isVerify;
  GPBInt64Array *playerIdArray;
} PB3FindPlayerActFormDataReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "carrierId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_CarrierId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataReq__storage_, carrierId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_PlayerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataReq__storage_, playerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isVerify",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_IsVerify,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataReq__storage_, isVerify),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isSingleSearch",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindPlayerActFormDataReq_FieldNumber_IsSingleSearch,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerActFormDataReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerActFormDataReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindPlayerActFormDataRes

@implementation PB3FindPlayerActFormDataRes

@dynamic recordListArray, recordListArray_Count;

typedef struct PB3FindPlayerActFormDataRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recordListArray;
} PB3FindPlayerActFormDataRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActFormRecord),
        .number = PB3FindPlayerActFormDataRes_FieldNumber_RecordListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindPlayerActFormDataRes__storage_, recordListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindPlayerActFormDataRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindPlayerActFormDataRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendGiftPlayer

@implementation PB3SendGiftPlayer

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;

typedef struct PB3SendGiftPlayer__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3SendGiftPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendGiftPlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendGiftPlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendGiftPlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendGiftPlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendGiftPlayer_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SendGiftPlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendGiftPlayer_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SendGiftPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendGiftPlayer class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendGiftPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindSendGiftListReq

@implementation PB3FindSendGiftListReq

@dynamic relActId;
@dynamic playerId;
@dynamic giftId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindSendGiftListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  int32_t giftId;
  int32_t page;
  int64_t playerId;
  int64_t pageSize;
} PB3FindSendGiftListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListReq_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindSendGiftListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindSendGiftListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindSendGiftListRes

@implementation PB3FindSendGiftListRes

@dynamic playerId;
@dynamic giftId;
@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3FindSendGiftListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  NSMutableArray *listArray;
  int64_t playerId;
  int64_t total;
} PB3FindSendGiftListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListRes_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListRes__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SendGiftPlayer),
        .number = PB3FindSendGiftListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindSendGiftListRes_FieldNumber_Total,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindSendGiftListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindSendGiftListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindSendGiftListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckSendGiftReq

@implementation PB3CheckSendGiftReq

@dynamic relActId;
@dynamic giftId;
@dynamic playerIdsArray, playerIdsArray_Count;

typedef struct PB3CheckSendGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  int32_t giftId;
  GPBInt64Array *playerIdsArray;
} PB3CheckSendGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckSendGiftReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CheckSendGiftReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckSendGiftReq_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CheckSendGiftReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckSendGiftReq_FieldNumber_PlayerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CheckSendGiftReq__storage_, playerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckSendGiftReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckSendGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckSendGiftRes

@implementation PB3CheckSendGiftRes

@dynamic playerIdsArray, playerIdsArray_Count;

typedef struct PB3CheckSendGiftRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *playerIdsArray;
} PB3CheckSendGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckSendGiftRes_FieldNumber_PlayerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CheckSendGiftRes__storage_, playerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckSendGiftRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckSendGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindActScoreReq

@implementation PB3FindActScoreReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3FindActScoreReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3FindActScoreReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActScoreReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindActScoreReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActScoreReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindActScoreReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActScoreReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActScoreReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindActScoreRes

@implementation PB3FindActScoreRes

@dynamic score;

typedef struct PB3FindActScoreRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t score;
} PB3FindActScoreRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindActScoreRes_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindActScoreRes__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActScoreRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActScoreRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindReceiveGiftScoreReq

@implementation PB3FindReceiveGiftScoreReq

@dynamic relActId;

typedef struct PB3FindReceiveGiftScoreReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
} PB3FindReceiveGiftScoreReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindReceiveGiftScoreReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindReceiveGiftScoreReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindReceiveGiftScoreReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindReceiveGiftScoreReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindReceiveGiftScoreRes

@implementation PB3FindReceiveGiftScoreRes

@dynamic score;
@dynamic hasReceiveGift;

typedef struct PB3FindReceiveGiftScoreRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t score;
} PB3FindReceiveGiftScoreRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindReceiveGiftScoreRes_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindReceiveGiftScoreRes__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hasReceiveGift",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindReceiveGiftScoreRes_FieldNumber_HasReceiveGift,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindReceiveGiftScoreRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindReceiveGiftScoreRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindBuildingBattleResultReq

@implementation PB3FindBuildingBattleResultReq

@dynamic relActId;
@dynamic floor;

typedef struct PB3FindBuildingBattleResultReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  int64_t floor;
} PB3FindBuildingBattleResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBuildingBattleResultReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindBuildingBattleResultReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "floor",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBuildingBattleResultReq_FieldNumber_Floor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindBuildingBattleResultReq__storage_, floor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindBuildingBattleResultReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindBuildingBattleResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindBuildingBattleResultRes

@implementation PB3FindBuildingBattleResultRes

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic floor;

typedef struct PB3FindBuildingBattleResultRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
  int64_t floor;
} PB3FindBuildingBattleResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBuildingBattleResultRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindBuildingBattleResultRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBuildingBattleResultRes_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindBuildingBattleResultRes__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBuildingBattleResultRes_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindBuildingBattleResultRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBuildingBattleResultRes_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindBuildingBattleResultRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "floor",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBuildingBattleResultRes_FieldNumber_Floor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindBuildingBattleResultRes__storage_, floor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindBuildingBattleResultRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindBuildingBattleResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityUser

@implementation PB3ActivityUser

@dynamic userId;
@dynamic userType;
@dynamic nickName;
@dynamic avatar;

typedef struct PB3ActivityUser__storage_ {
  uint32_t _has_storage_[1];
  PB3ActivityUserType userType;
  NSString *userId;
  NSString *nickName;
  NSString *avatar;
} PB3ActivityUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityUser_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityUser__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3ActivityUser_FieldNumber_UserType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityUser__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityUser_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityUser__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityUser_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActivityUser__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityUser class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ActivityUser_UserType_RawValue(PB3ActivityUser *message) {
  GPBDescriptor *descriptor = [PB3ActivityUser descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityUser_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityUser_UserType_RawValue(PB3ActivityUser *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityUser descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityUser_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetActivityUserInfoReq

@implementation PB3GetActivityUserInfoReq

@dynamic userId;
@dynamic userType;
@dynamic token;
@dynamic appId;

typedef struct PB3GetActivityUserInfoReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ActivityUserType userType;
  NSString *userId;
  NSString *token;
  NSString *appId;
} PB3GetActivityUserInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetActivityUserInfoReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetActivityUserInfoReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetActivityUserInfoReq_FieldNumber_UserType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetActivityUserInfoReq__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetActivityUserInfoReq_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetActivityUserInfoReq__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetActivityUserInfoReq_FieldNumber_AppId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetActivityUserInfoReq__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetActivityUserInfoReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetActivityUserInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetActivityUserInfoReq_UserType_RawValue(PB3GetActivityUserInfoReq *message) {
  GPBDescriptor *descriptor = [PB3GetActivityUserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetActivityUserInfoReq_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetActivityUserInfoReq_UserType_RawValue(PB3GetActivityUserInfoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetActivityUserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetActivityUserInfoReq_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetActivityUserInfoRes

@implementation PB3GetActivityUserInfoRes

@dynamic hasUser, user;

typedef struct PB3GetActivityUserInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ActivityUser *user;
} PB3GetActivityUserInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActivityUser),
        .number = PB3GetActivityUserInfoRes_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetActivityUserInfoRes__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetActivityUserInfoRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetActivityUserInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuizQuestionOption

@implementation PB3QuizQuestionOption

@dynamic optId;
@dynamic optVal;
@dynamic isAnswer;
@dynamic score;

typedef struct PB3QuizQuestionOption__storage_ {
  uint32_t _has_storage_[1];
  int32_t optId;
  int32_t score;
  NSString *optVal;
} PB3QuizQuestionOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestionOption_FieldNumber_OptId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizQuestionOption__storage_, optId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "optVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestionOption_FieldNumber_OptVal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QuizQuestionOption__storage_, optVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAnswer",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestionOption_FieldNumber_IsAnswer,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestionOption_FieldNumber_Score,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3QuizQuestionOption__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizQuestionOption class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizQuestionOption__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuizQuestion

@implementation PB3QuizQuestion

@dynamic id_p;
@dynamic questType;
@dynamic title;
@dynamic optionsArray, optionsArray_Count;
@dynamic score;

typedef struct PB3QuizQuestion__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t questType;
  int32_t score;
  NSString *title;
  NSMutableArray *optionsArray;
} PB3QuizQuestion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestion_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizQuestion__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "questType",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestion_FieldNumber_QuestType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QuizQuestion__storage_, questType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestion_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QuizQuestion__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizQuestionOption),
        .number = PB3QuizQuestion_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QuizQuestion__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizQuestion_FieldNumber_Score,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3QuizQuestion__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizQuestion class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizQuestion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuizPlayerQuestionOption

@implementation PB3QuizPlayerQuestionOption

@dynamic optId;
@dynamic isAnswer;

typedef struct PB3QuizPlayerQuestionOption__storage_ {
  uint32_t _has_storage_[1];
  int32_t optId;
} PB3QuizPlayerQuestionOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizPlayerQuestionOption_FieldNumber_OptId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizPlayerQuestionOption__storage_, optId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAnswer",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizPlayerQuestionOption_FieldNumber_IsAnswer,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizPlayerQuestionOption class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizPlayerQuestionOption__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuizPlayerQuestion

@implementation PB3QuizPlayerQuestion

@dynamic questionId;
@dynamic optionsArray, optionsArray_Count;

typedef struct PB3QuizPlayerQuestion__storage_ {
  uint32_t _has_storage_[1];
  int32_t questionId;
  NSMutableArray *optionsArray;
} PB3QuizPlayerQuestion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "questionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizPlayerQuestion_FieldNumber_QuestionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizPlayerQuestion__storage_, questionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizPlayerQuestionOption),
        .number = PB3QuizPlayerQuestion_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QuizPlayerQuestion__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizPlayerQuestion class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizPlayerQuestion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuizAnswer

@implementation PB3QuizAnswer

@dynamic questionId;
@dynamic optionIdsArray, optionIdsArray_Count;

typedef struct PB3QuizAnswer__storage_ {
  uint32_t _has_storage_[1];
  int32_t questionId;
  GPBInt32Array *optionIdsArray;
} PB3QuizAnswer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "questionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizAnswer_FieldNumber_QuestionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizAnswer__storage_, questionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "optionIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizAnswer_FieldNumber_OptionIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QuizAnswer__storage_, optionIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizAnswer class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizAnswer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuizRankPlayer

@implementation PB3QuizRankPlayer

@dynamic rank;
@dynamic score;
@dynamic hasPlayer, player;

typedef struct PB3QuizRankPlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t rank;
  int32_t score;
  PB3ActivityUser *player;
} PB3QuizRankPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizRankPlayer_FieldNumber_Rank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizRankPlayer__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizRankPlayer_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QuizRankPlayer__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActivityUser),
        .number = PB3QuizRankPlayer_FieldNumber_Player,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QuizRankPlayer__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizRankPlayer class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizRankPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuizPaper

@implementation PB3QuizPaper

@dynamic paperId;
@dynamic creatorId;
@dynamic creatorType;
@dynamic calcType;
@dynamic questionsArray, questionsArray_Count;
@dynamic maxScore;

typedef struct PB3QuizPaper__storage_ {
  uint32_t _has_storage_[1];
  int32_t paperId;
  PB3ActivityUserType creatorType;
  int32_t calcType;
  int32_t maxScore;
  NSString *creatorId;
  NSMutableArray *questionsArray;
} PB3QuizPaper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paperId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizPaper_FieldNumber_PaperId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizPaper__storage_, paperId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "creatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizPaper_FieldNumber_CreatorId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QuizPaper__storage_, creatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "creatorType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3QuizPaper_FieldNumber_CreatorType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QuizPaper__storage_, creatorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "calcType",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizPaper_FieldNumber_CalcType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3QuizPaper__storage_, calcType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "questionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizQuestion),
        .number = PB3QuizPaper_FieldNumber_QuestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QuizPaper__storage_, questionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizPaper_FieldNumber_MaxScore,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3QuizPaper__storage_, maxScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizPaper class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizPaper__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3QuizPaper_CreatorType_RawValue(PB3QuizPaper *message) {
  GPBDescriptor *descriptor = [PB3QuizPaper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuizPaper_FieldNumber_CreatorType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QuizPaper_CreatorType_RawValue(PB3QuizPaper *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QuizPaper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuizPaper_FieldNumber_CreatorType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetCheckIfCreateQuizReq

@implementation PB3GetCheckIfCreateQuizReq

@dynamic actId;
@dynamic relActId;
@dynamic playerId;
@dynamic userType;

typedef struct PB3GetCheckIfCreateQuizReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType userType;
  NSString *playerId;
} PB3GetCheckIfCreateQuizReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCheckIfCreateQuizReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCheckIfCreateQuizReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCheckIfCreateQuizReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetCheckIfCreateQuizReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCheckIfCreateQuizReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetCheckIfCreateQuizReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetCheckIfCreateQuizReq_FieldNumber_UserType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetCheckIfCreateQuizReq__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCheckIfCreateQuizReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCheckIfCreateQuizReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetCheckIfCreateQuizReq_UserType_RawValue(PB3GetCheckIfCreateQuizReq *message) {
  GPBDescriptor *descriptor = [PB3GetCheckIfCreateQuizReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetCheckIfCreateQuizReq_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetCheckIfCreateQuizReq_UserType_RawValue(PB3GetCheckIfCreateQuizReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetCheckIfCreateQuizReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetCheckIfCreateQuizReq_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetCheckIfCreateQuizRes

@implementation PB3GetCheckIfCreateQuizRes

@dynamic paperId;

typedef struct PB3GetCheckIfCreateQuizRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t paperId;
} PB3GetCheckIfCreateQuizRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paperId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCheckIfCreateQuizRes_FieldNumber_PaperId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCheckIfCreateQuizRes__storage_, paperId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCheckIfCreateQuizRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCheckIfCreateQuizRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetQuizQuestionsReq

@implementation PB3GetQuizQuestionsReq

@dynamic actId;
@dynamic relActId;
@dynamic playerId;
@dynamic userType;
@dynamic count;
@dynamic chosenArray, chosenArray_Count;

typedef struct PB3GetQuizQuestionsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType userType;
  int32_t count;
  NSString *playerId;
  GPBInt32Array *chosenArray;
} PB3GetQuizQuestionsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizQuestionsReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetQuizQuestionsReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizQuestionsReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetQuizQuestionsReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizQuestionsReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetQuizQuestionsReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetQuizQuestionsReq_FieldNumber_UserType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetQuizQuestionsReq__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizQuestionsReq_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetQuizQuestionsReq__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chosenArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizQuestionsReq_FieldNumber_ChosenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetQuizQuestionsReq__storage_, chosenArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizQuestionsReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizQuestionsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetQuizQuestionsReq_UserType_RawValue(PB3GetQuizQuestionsReq *message) {
  GPBDescriptor *descriptor = [PB3GetQuizQuestionsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizQuestionsReq_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetQuizQuestionsReq_UserType_RawValue(PB3GetQuizQuestionsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetQuizQuestionsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizQuestionsReq_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetQuizQuestionsRes

@implementation PB3GetQuizQuestionsRes

@dynamic questionsArray, questionsArray_Count;

typedef struct PB3GetQuizQuestionsRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *questionsArray;
} PB3GetQuizQuestionsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "questionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizQuestion),
        .number = PB3GetQuizQuestionsRes_FieldNumber_QuestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetQuizQuestionsRes__storage_, questionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizQuestionsRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizQuestionsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCreateQuizPaperReq

@implementation PB3GetCreateQuizPaperReq

@dynamic actId;
@dynamic relActId;
@dynamic playerId;
@dynamic userType;
@dynamic paperCalcType;
@dynamic questionsArray, questionsArray_Count;

typedef struct PB3GetCreateQuizPaperReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType userType;
  int32_t paperCalcType;
  NSString *playerId;
  NSMutableArray *questionsArray;
} PB3GetCreateQuizPaperReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCreateQuizPaperReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCreateQuizPaperReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCreateQuizPaperReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetCreateQuizPaperReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCreateQuizPaperReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetCreateQuizPaperReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetCreateQuizPaperReq_FieldNumber_UserType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetCreateQuizPaperReq__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "paperCalcType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCreateQuizPaperReq_FieldNumber_PaperCalcType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetCreateQuizPaperReq__storage_, paperCalcType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "questionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizPlayerQuestion),
        .number = PB3GetCreateQuizPaperReq_FieldNumber_QuestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetCreateQuizPaperReq__storage_, questionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCreateQuizPaperReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCreateQuizPaperReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetCreateQuizPaperReq_UserType_RawValue(PB3GetCreateQuizPaperReq *message) {
  GPBDescriptor *descriptor = [PB3GetCreateQuizPaperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetCreateQuizPaperReq_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetCreateQuizPaperReq_UserType_RawValue(PB3GetCreateQuizPaperReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetCreateQuizPaperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetCreateQuizPaperReq_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetCreateQuizPaperRes

@implementation PB3GetCreateQuizPaperRes

@dynamic paperId;

typedef struct PB3GetCreateQuizPaperRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t paperId;
} PB3GetCreateQuizPaperRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paperId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCreateQuizPaperRes_FieldNumber_PaperId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCreateQuizPaperRes__storage_, paperId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCreateQuizPaperRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCreateQuizPaperRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetQuizPaperReq

@implementation PB3GetQuizPaperReq

@dynamic actId;
@dynamic relActId;
@dynamic creatorId;
@dynamic creatorType;
@dynamic paperId;

typedef struct PB3GetQuizPaperReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType creatorType;
  int32_t paperId;
  NSString *creatorId;
} PB3GetQuizPaperReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizPaperReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetQuizPaperReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizPaperReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetQuizPaperReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "creatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizPaperReq_FieldNumber_CreatorId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetQuizPaperReq__storage_, creatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "creatorType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetQuizPaperReq_FieldNumber_CreatorType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetQuizPaperReq__storage_, creatorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "paperId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizPaperReq_FieldNumber_PaperId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetQuizPaperReq__storage_, paperId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizPaperReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizPaperReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetQuizPaperReq_CreatorType_RawValue(PB3GetQuizPaperReq *message) {
  GPBDescriptor *descriptor = [PB3GetQuizPaperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizPaperReq_FieldNumber_CreatorType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetQuizPaperReq_CreatorType_RawValue(PB3GetQuizPaperReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetQuizPaperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizPaperReq_FieldNumber_CreatorType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetQuizPaperRes

@implementation PB3GetQuizPaperRes

@dynamic hasPaper, paper;

typedef struct PB3GetQuizPaperRes__storage_ {
  uint32_t _has_storage_[1];
  PB3QuizPaper *paper;
} PB3GetQuizPaperRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paper",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizPaper),
        .number = PB3GetQuizPaperRes_FieldNumber_Paper,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetQuizPaperRes__storage_, paper),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizPaperRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizPaperRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SubmitQuizResultReq

@implementation PB3SubmitQuizResultReq

@dynamic actId;
@dynamic relActId;
@dynamic playerId;
@dynamic userType;
@dynamic score;

typedef struct PB3SubmitQuizResultReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType userType;
  int32_t score;
  NSString *playerId;
} PB3SubmitQuizResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubmitQuizResultReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SubmitQuizResultReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubmitQuizResultReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SubmitQuizResultReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubmitQuizResultReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SubmitQuizResultReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3SubmitQuizResultReq_FieldNumber_UserType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SubmitQuizResultReq__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubmitQuizResultReq_FieldNumber_Score,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SubmitQuizResultReq__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SubmitQuizResultReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SubmitQuizResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SubmitQuizResultReq_UserType_RawValue(PB3SubmitQuizResultReq *message) {
  GPBDescriptor *descriptor = [PB3SubmitQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SubmitQuizResultReq_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SubmitQuizResultReq_UserType_RawValue(PB3SubmitQuizResultReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SubmitQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SubmitQuizResultReq_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SubmitQuizResultRes

@implementation PB3SubmitQuizResultRes


typedef struct PB3SubmitQuizResultRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SubmitQuizResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SubmitQuizResultRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SubmitQuizResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetSubmitQuizResultReq

@implementation PB3GetSubmitQuizResultReq

@dynamic actId;
@dynamic relActId;
@dynamic playerId;
@dynamic userType;
@dynamic paperId;
@dynamic answersArray, answersArray_Count;

typedef struct PB3GetSubmitQuizResultReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType userType;
  int32_t paperId;
  NSString *playerId;
  NSMutableArray *answersArray;
} PB3GetSubmitQuizResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSubmitQuizResultReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetSubmitQuizResultReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSubmitQuizResultReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetSubmitQuizResultReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSubmitQuizResultReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetSubmitQuizResultReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetSubmitQuizResultReq_FieldNumber_UserType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetSubmitQuizResultReq__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "paperId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSubmitQuizResultReq_FieldNumber_PaperId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetSubmitQuizResultReq__storage_, paperId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "answersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizAnswer),
        .number = PB3GetSubmitQuizResultReq_FieldNumber_AnswersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetSubmitQuizResultReq__storage_, answersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSubmitQuizResultReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetSubmitQuizResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetSubmitQuizResultReq_UserType_RawValue(PB3GetSubmitQuizResultReq *message) {
  GPBDescriptor *descriptor = [PB3GetSubmitQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetSubmitQuizResultReq_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetSubmitQuizResultReq_UserType_RawValue(PB3GetSubmitQuizResultReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetSubmitQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetSubmitQuizResultReq_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetSubmitQuizResultRes

@implementation PB3GetSubmitQuizResultRes


typedef struct PB3GetSubmitQuizResultRes__storage_ {
  uint32_t _has_storage_[1];
} PB3GetSubmitQuizResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSubmitQuizResultRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetSubmitQuizResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetQuizResultReq

@implementation PB3GetQuizResultReq

@dynamic actId;
@dynamic relActId;
@dynamic playerId;
@dynamic userType;
@dynamic creatorId;
@dynamic creatorType;

typedef struct PB3GetQuizResultReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType userType;
  PB3ActivityUserType creatorType;
  NSString *playerId;
  NSString *creatorId;
} PB3GetQuizResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizResultReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetQuizResultReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizResultReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetQuizResultReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizResultReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetQuizResultReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetQuizResultReq_FieldNumber_UserType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetQuizResultReq__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "creatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizResultReq_FieldNumber_CreatorId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetQuizResultReq__storage_, creatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "creatorType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetQuizResultReq_FieldNumber_CreatorType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GetQuizResultReq__storage_, creatorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizResultReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetQuizResultReq_UserType_RawValue(PB3GetQuizResultReq *message) {
  GPBDescriptor *descriptor = [PB3GetQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizResultReq_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetQuizResultReq_UserType_RawValue(PB3GetQuizResultReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizResultReq_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GetQuizResultReq_CreatorType_RawValue(PB3GetQuizResultReq *message) {
  GPBDescriptor *descriptor = [PB3GetQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizResultReq_FieldNumber_CreatorType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetQuizResultReq_CreatorType_RawValue(PB3GetQuizResultReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetQuizResultReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizResultReq_FieldNumber_CreatorType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetQuizResultRes

@implementation PB3GetQuizResultRes

@dynamic hasSubmit;
@dynamic score;
@dynamic hasCreator, creator;
@dynamic comment;

typedef struct PB3GetQuizResultRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  PB3ActivityUser *creator;
  NSString *comment;
} PB3GetQuizResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hasSubmit",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizResultRes_FieldNumber_HasSubmit,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizResultRes_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetQuizResultRes__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "creator",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActivityUser),
        .number = PB3GetQuizResultRes_FieldNumber_Creator,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetQuizResultRes__storage_, creator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizResultRes_FieldNumber_Comment,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetQuizResultRes__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizResultRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetQuizRankReq

@implementation PB3GetQuizRankReq

@dynamic actId;
@dynamic relActId;
@dynamic creatorId;
@dynamic creatorType;
@dynamic page;
@dynamic pageSize;

typedef struct PB3GetQuizRankReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  PB3ActivityUserType creatorType;
  int32_t page;
  int32_t pageSize;
  NSString *creatorId;
} PB3GetQuizRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizRankReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetQuizRankReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizRankReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetQuizRankReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "creatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizRankReq_FieldNumber_CreatorId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetQuizRankReq__storage_, creatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "creatorType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityUserType_EnumDescriptor,
        .number = PB3GetQuizRankReq_FieldNumber_CreatorType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetQuizRankReq__storage_, creatorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizRankReq_FieldNumber_Page,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetQuizRankReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizRankReq_FieldNumber_PageSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GetQuizRankReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizRankReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetQuizRankReq_CreatorType_RawValue(PB3GetQuizRankReq *message) {
  GPBDescriptor *descriptor = [PB3GetQuizRankReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizRankReq_FieldNumber_CreatorType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetQuizRankReq_CreatorType_RawValue(PB3GetQuizRankReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetQuizRankReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetQuizRankReq_FieldNumber_CreatorType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetQuizRankRes

@implementation PB3GetQuizRankRes

@dynamic hasCreator, creator;
@dynamic ranksArray, ranksArray_Count;
@dynamic total;

typedef struct PB3GetQuizRankRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  PB3ActivityUser *creator;
  NSMutableArray *ranksArray;
} PB3GetQuizRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creator",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActivityUser),
        .number = PB3GetQuizRankRes_FieldNumber_Creator,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetQuizRankRes__storage_, creator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ranksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizRankPlayer),
        .number = PB3GetQuizRankRes_FieldNumber_RanksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetQuizRankRes__storage_, ranksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetQuizRankRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetQuizRankRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetQuizRankRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetQuizRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetWechatJSSDKSignatureReq

@implementation PB3GetWechatJSSDKSignatureReq

@dynamic appId;
@dynamic URL;

typedef struct PB3GetWechatJSSDKSignatureReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *URL;
} PB3GetWechatJSSDKSignatureReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWechatJSSDKSignatureReq_FieldNumber_AppId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetWechatJSSDKSignatureReq__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWechatJSSDKSignatureReq_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetWechatJSSDKSignatureReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetWechatJSSDKSignatureReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetWechatJSSDKSignatureReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetWechatJSSDKSignatureRes

@implementation PB3GetWechatJSSDKSignatureRes

@dynamic timestamp;
@dynamic nonceStr;
@dynamic signature;

typedef struct PB3GetWechatJSSDKSignatureRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *nonceStr;
  NSString *signature;
  int64_t timestamp;
} PB3GetWechatJSSDKSignatureRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWechatJSSDKSignatureRes_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetWechatJSSDKSignatureRes__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nonceStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWechatJSSDKSignatureRes_FieldNumber_NonceStr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetWechatJSSDKSignatureRes__storage_, nonceStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWechatJSSDKSignatureRes_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetWechatJSSDKSignatureRes__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetWechatJSSDKSignatureRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetWechatJSSDKSignatureRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindBlindLotteryInfoReq

@implementation PB3FindBlindLotteryInfoReq

@dynamic actId;
@dynamic relActId;
@dynamic lotteryId;

typedef struct PB3FindBlindLotteryInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t lotteryId;
} PB3FindBlindLotteryInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoReq_FieldNumber_LotteryId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoReq__storage_, lotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindBlindLotteryInfoReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindBlindLotteryInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindBlindLotteryInfoRes

@implementation PB3FindBlindLotteryInfoRes

@dynamic remainTime;
@dynamic luckNum;
@dynamic openedInfoArray, openedInfoArray_Count;
@dynamic haveUnusual;
@dynamic unusualGiftName;
@dynamic confLuckNum;
@dynamic roomId;
@dynamic roomName;
@dynamic cantLottery;

typedef struct PB3FindBlindLotteryInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t remainTime;
  int32_t luckNum;
  int32_t haveUnusual;
  int32_t confLuckNum;
  int32_t cantLottery;
  NSMutableArray *openedInfoArray;
  NSString *unusualGiftName;
  NSString *roomName;
  int64_t roomId;
} PB3FindBlindLotteryInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remainTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_RemainTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, remainTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "luckNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_LuckNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, luckNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "openedInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BlindAwardInfo),
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_OpenedInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, openedInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "haveUnusual",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_HaveUnusual,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, haveUnusual),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unusualGiftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_UnusualGiftName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, unusualGiftName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confLuckNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_ConfLuckNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, confLuckNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_RoomId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_RoomName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cantLottery",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryInfoRes_FieldNumber_CantLottery,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryInfoRes__storage_, cantLottery),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindBlindLotteryInfoRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindBlindLotteryInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\007\250\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawBlindLotteryReq

@implementation PB3DrawBlindLotteryReq

@dynamic actId;
@dynamic relActId;
@dynamic lotteryId;
@dynamic drawTimes;

typedef struct PB3DrawBlindLotteryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t lotteryId;
  int32_t drawTimes;
} PB3DrawBlindLotteryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawBlindLotteryReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawBlindLotteryReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawBlindLotteryReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawBlindLotteryReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawBlindLotteryReq_FieldNumber_LotteryId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawBlindLotteryReq__storage_, lotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "drawTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawBlindLotteryReq_FieldNumber_DrawTimes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DrawBlindLotteryReq__storage_, drawTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawBlindLotteryReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawBlindLotteryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawBlindLotteryRes

@implementation PB3DrawBlindLotteryRes

@dynamic retAwardArray, retAwardArray_Count;

typedef struct PB3DrawBlindLotteryRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *retAwardArray;
} PB3DrawBlindLotteryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retAwardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActivityAwardInfo),
        .number = PB3DrawBlindLotteryRes_FieldNumber_RetAwardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawBlindLotteryRes__storage_, retAwardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawBlindLotteryRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawBlindLotteryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListBlindLotteryRecordReq

@implementation PB3ListBlindLotteryRecordReq

@dynamic actId;
@dynamic relId;
@dynamic weightArray, weightArray_Count;
@dynamic page;
@dynamic pageSize;
@dynamic confId;
@dynamic playerId;

typedef struct PB3ListBlindLotteryRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t page;
  int32_t pageSize;
  int32_t confId;
  GPBInt32Array *weightArray;
  int64_t playerId;
} PB3ListBlindLotteryRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "weightArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordReq_FieldNumber_WeightArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordReq__storage_, weightArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordReq_FieldNumber_ConfId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordReq__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordReq_FieldNumber_PlayerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListBlindLotteryRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListBlindLotteryRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListBlindLotteryRecordRes

@implementation PB3ListBlindLotteryRecordRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3ListBlindLotteryRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3ListBlindLotteryRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LotteryRecord),
        .number = PB3ListBlindLotteryRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBlindLotteryRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListBlindLotteryRecordRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListBlindLotteryRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListBlindLotteryRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindBlindLotteryRoomListReq

@implementation PB3FindBlindLotteryRoomListReq

@dynamic actId;
@dynamic relId;
@dynamic confLotteryId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindBlindLotteryRoomListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t confLotteryId;
  int32_t page;
  int32_t pageSize;
} PB3FindBlindLotteryRoomListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryRoomListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryRoomListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryRoomListReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryRoomListReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confLotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryRoomListReq_FieldNumber_ConfLotteryId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryRoomListReq__storage_, confLotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryRoomListReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryRoomListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindBlindLotteryRoomListReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryRoomListReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindBlindLotteryRoomListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindBlindLotteryRoomListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindBlindLotteryRoomListRes

@implementation PB3FindBlindLotteryRoomListRes

@dynamic roomListArray, roomListArray_Count;

typedef struct PB3FindBlindLotteryRoomListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *roomListArray;
} PB3FindBlindLotteryRoomListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BlindRoomInfo),
        .number = PB3FindBlindLotteryRoomListRes_FieldNumber_RoomListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindBlindLotteryRoomListRes__storage_, roomListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindBlindLotteryRoomListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindBlindLotteryRoomListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCustomAwardConfReq

@implementation PB3FindCustomAwardConfReq

@dynamic awardIdsArray, awardIdsArray_Count;

typedef struct PB3FindCustomAwardConfReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *awardIdsArray;
} PB3FindCustomAwardConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCustomAwardConfReq_FieldNumber_AwardIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindCustomAwardConfReq__storage_, awardIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCustomAwardConfReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCustomAwardConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCustomAwardConfRes

@implementation PB3FindCustomAwardConfRes

@dynamic confListArray, confListArray_Count;

typedef struct PB3FindCustomAwardConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *confListArray;
} PB3FindCustomAwardConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfNewAwardCustomAward),
        .number = PB3FindCustomAwardConfRes_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindCustomAwardConfRes__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCustomAwardConfRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCustomAwardConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3StudentSort

@implementation PB3StudentSort

@dynamic sort;
@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic point;

typedef struct PB3StudentSort__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t point;
} PB3StudentSort__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3StudentSort_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3StudentSort__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3StudentSort_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3StudentSort__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3StudentSort_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3StudentSort__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3StudentSort_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3StudentSort__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3StudentSort_FieldNumber_Point,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3StudentSort__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StudentSort class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3StudentSort__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindTeacherStudentGiftSortReq

@implementation PB3FindTeacherStudentGiftSortReq

@dynamic relActId;
@dynamic teacherId;
@dynamic size;

typedef struct PB3FindTeacherStudentGiftSortReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  int32_t size;
  int64_t teacherId;
} PB3FindTeacherStudentGiftSortReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindTeacherStudentGiftSortReq_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindTeacherStudentGiftSortReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "teacherId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindTeacherStudentGiftSortReq_FieldNumber_TeacherId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindTeacherStudentGiftSortReq__storage_, teacherId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindTeacherStudentGiftSortReq_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindTeacherStudentGiftSortReq__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindTeacherStudentGiftSortReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindTeacherStudentGiftSortReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindTeacherStudentGiftSortRes

@implementation PB3FindTeacherStudentGiftSortRes

@dynamic studentsArray, studentsArray_Count;

typedef struct PB3FindTeacherStudentGiftSortRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *studentsArray;
} PB3FindTeacherStudentGiftSortRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "studentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3StudentSort),
        .number = PB3FindTeacherStudentGiftSortRes_FieldNumber_StudentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindTeacherStudentGiftSortRes__storage_, studentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindTeacherStudentGiftSortRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindTeacherStudentGiftSortRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntegralReq

@implementation PB3IntegralReq

@dynamic lang;

typedef struct PB3IntegralReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *lang;
} PB3IntegralReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lang",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralReq_FieldNumber_Lang,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntegralReq__storage_, lang),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntegralReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntegralReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntegralRes

@implementation PB3IntegralRes

@dynamic integral;

typedef struct PB3IntegralRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t integral;
} PB3IntegralRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "integral",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralRes_FieldNumber_Integral,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntegralRes__storage_, integral),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntegralRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntegralRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIntegralBonusListReq

@implementation PB3GetIntegralBonusListReq

@dynamic lang;

typedef struct PB3GetIntegralBonusListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *lang;
} PB3GetIntegralBonusListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lang",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetIntegralBonusListReq_FieldNumber_Lang,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetIntegralBonusListReq__storage_, lang),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIntegralBonusListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetIntegralBonusListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntegralBonusItem

@implementation PB3IntegralBonusItem

@dynamic icon;
@dynamic bonusText;
@dynamic conditionText;
@dynamic status;
@dynamic id_p;
@dynamic condition;

typedef struct PB3IntegralBonusItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t condition;
  NSString *icon;
  NSString *bonusText;
  NSString *conditionText;
} PB3IntegralBonusItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralBonusItem_FieldNumber_Icon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntegralBonusItem__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bonusText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralBonusItem_FieldNumber_BonusText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntegralBonusItem__storage_, bonusText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "conditionText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralBonusItem_FieldNumber_ConditionText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntegralBonusItem__storage_, conditionText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralBonusItem_FieldNumber_Status,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralBonusItem_FieldNumber_Id_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntegralBonusItem__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "condition",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralBonusItem_FieldNumber_Condition,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntegralBonusItem__storage_, condition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntegralBonusItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntegralBonusItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIntegralBonusListRes

@implementation PB3GetIntegralBonusListRes

@dynamic listArray, listArray_Count;

typedef struct PB3GetIntegralBonusListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GetIntegralBonusListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntegralBonusItem),
        .number = PB3GetIntegralBonusListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetIntegralBonusListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIntegralBonusListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetIntegralBonusListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIntegralMissionListReq

@implementation PB3GetIntegralMissionListReq

@dynamic lang;

typedef struct PB3GetIntegralMissionListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *lang;
} PB3GetIntegralMissionListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lang",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetIntegralMissionListReq_FieldNumber_Lang,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetIntegralMissionListReq__storage_, lang),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIntegralMissionListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetIntegralMissionListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntegralMissionItem

@implementation PB3IntegralMissionItem

@dynamic icon;
@dynamic bonusText;
@dynamic missionText;
@dynamic total;
@dynamic progress;
@dynamic status;
@dynamic id_p;

typedef struct PB3IntegralMissionItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  int32_t progress;
  int32_t id_p;
  NSString *icon;
  NSString *bonusText;
  NSString *missionText;
} PB3IntegralMissionItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralMissionItem_FieldNumber_Icon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntegralMissionItem__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bonusText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralMissionItem_FieldNumber_BonusText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntegralMissionItem__storage_, bonusText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "missionText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralMissionItem_FieldNumber_MissionText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntegralMissionItem__storage_, missionText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralMissionItem_FieldNumber_Total,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntegralMissionItem__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "progress",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralMissionItem_FieldNumber_Progress,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntegralMissionItem__storage_, progress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralMissionItem_FieldNumber_Status,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntegralMissionItem_FieldNumber_Id_p,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntegralMissionItem__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntegralMissionItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntegralMissionItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIntegralMissionListRes

@implementation PB3GetIntegralMissionListRes

@dynamic listArray, listArray_Count;

typedef struct PB3GetIntegralMissionListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GetIntegralMissionListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntegralMissionItem),
        .number = PB3GetIntegralMissionListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetIntegralMissionListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIntegralMissionListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetIntegralMissionListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveIntegralMissionBonusReq

@implementation PB3ReceiveIntegralMissionBonusReq

@dynamic missionId;
@dynamic lang;

typedef struct PB3ReceiveIntegralMissionBonusReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t missionId;
  NSString *lang;
} PB3ReceiveIntegralMissionBonusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "missionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIntegralMissionBonusReq_FieldNumber_MissionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveIntegralMissionBonusReq__storage_, missionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lang",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIntegralMissionBonusReq_FieldNumber_Lang,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveIntegralMissionBonusReq__storage_, lang),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveIntegralMissionBonusReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveIntegralMissionBonusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveIntegralMissionBonusRes

@implementation PB3ReceiveIntegralMissionBonusRes

@dynamic integral;

typedef struct PB3ReceiveIntegralMissionBonusRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t integral;
} PB3ReceiveIntegralMissionBonusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "integral",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIntegralMissionBonusRes_FieldNumber_Integral,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveIntegralMissionBonusRes__storage_, integral),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveIntegralMissionBonusRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveIntegralMissionBonusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveIntegralBonusReq

@implementation PB3ReceiveIntegralBonusReq

@dynamic bonusId;
@dynamic lang;

typedef struct PB3ReceiveIntegralBonusReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t bonusId;
  NSString *lang;
} PB3ReceiveIntegralBonusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bonusId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIntegralBonusReq_FieldNumber_BonusId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveIntegralBonusReq__storage_, bonusId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lang",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIntegralBonusReq_FieldNumber_Lang,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveIntegralBonusReq__storage_, lang),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveIntegralBonusReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveIntegralBonusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveIntegralBonusRes

@implementation PB3ReceiveIntegralBonusRes


typedef struct PB3ReceiveIntegralBonusRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ReceiveIntegralBonusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveIntegralBonusRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReceiveIntegralBonusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FetchUserQuizQuestionsReq

@implementation PB3FetchUserQuizQuestionsReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3FetchUserQuizQuestionsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3FetchUserQuizQuestionsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FetchUserQuizQuestionsReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FetchUserQuizQuestionsReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FetchUserQuizQuestionsReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FetchUserQuizQuestionsReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FetchUserQuizQuestionsReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FetchUserQuizQuestionsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FetchUserQuizQuestionsRes

@implementation PB3FetchUserQuizQuestionsRes

@dynamic listArray, listArray_Count;
@dynamic done;
@dynamic bankName;
@dynamic bankRemark;
@dynamic typeListArray, typeListArray_Count;

typedef struct PB3FetchUserQuizQuestionsRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  NSString *bankName;
  NSString *bankRemark;
  NSMutableArray *typeListArray;
} PB3FetchUserQuizQuestionsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserQuizQuestion),
        .number = PB3FetchUserQuizQuestionsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FetchUserQuizQuestionsRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "done",
        .dataTypeSpecific.className = NULL,
        .number = PB3FetchUserQuizQuestionsRes_FieldNumber_Done,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bankName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FetchUserQuizQuestionsRes_FieldNumber_BankName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FetchUserQuizQuestionsRes__storage_, bankName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankRemark",
        .dataTypeSpecific.className = NULL,
        .number = PB3FetchUserQuizQuestionsRes_FieldNumber_BankRemark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FetchUserQuizQuestionsRes__storage_, bankRemark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typeListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuizTypeData),
        .number = PB3FetchUserQuizQuestionsRes_FieldNumber_TypeListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FetchUserQuizQuestionsRes__storage_, typeListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FetchUserQuizQuestionsRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FetchUserQuizQuestionsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserQuizQuestion

@implementation PB3UserQuizQuestion

@dynamic quesId;
@dynamic quizType;
@dynamic title;
@dynamic optionsArray, optionsArray_Count;
@dynamic maxSelect;
@dynamic minSelect;
@dynamic hasOther;

typedef struct PB3UserQuizQuestion__storage_ {
  uint32_t _has_storage_[1];
  int32_t quesId;
  PB3QuizType quizType;
  int32_t maxSelect;
  int32_t minSelect;
  NSString *title;
  NSMutableArray *optionsArray;
} PB3UserQuizQuestion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quesId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizQuestion_FieldNumber_QuesId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserQuizQuestion__storage_, quesId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "quizType",
        .dataTypeSpecific.enumDescFunc = PB3QuizType_EnumDescriptor,
        .number = PB3UserQuizQuestion_FieldNumber_QuizType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserQuizQuestion__storage_, quizType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizQuestion_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserQuizQuestion__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserQuizOption),
        .number = PB3UserQuizQuestion_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3UserQuizQuestion__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxSelect",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizQuestion_FieldNumber_MaxSelect,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserQuizQuestion__storage_, maxSelect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minSelect",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizQuestion_FieldNumber_MinSelect,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UserQuizQuestion__storage_, minSelect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hasOther",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizQuestion_FieldNumber_HasOther,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserQuizQuestion class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserQuizQuestion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UserQuizQuestion_QuizType_RawValue(PB3UserQuizQuestion *message) {
  GPBDescriptor *descriptor = [PB3UserQuizQuestion descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserQuizQuestion_FieldNumber_QuizType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserQuizQuestion_QuizType_RawValue(PB3UserQuizQuestion *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserQuizQuestion descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserQuizQuestion_FieldNumber_QuizType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3QuizTypeData

@implementation PB3QuizTypeData

@dynamic quizType;
@dynamic typeName;

typedef struct PB3QuizTypeData__storage_ {
  uint32_t _has_storage_[1];
  PB3QuizType quizType;
  NSString *typeName;
} PB3QuizTypeData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quizType",
        .dataTypeSpecific.enumDescFunc = PB3QuizType_EnumDescriptor,
        .number = PB3QuizTypeData_FieldNumber_QuizType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuizTypeData__storage_, quizType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "typeName",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuizTypeData_FieldNumber_TypeName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QuizTypeData__storage_, typeName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuizTypeData class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuizTypeData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3QuizTypeData_QuizType_RawValue(PB3QuizTypeData *message) {
  GPBDescriptor *descriptor = [PB3QuizTypeData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuizTypeData_FieldNumber_QuizType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QuizTypeData_QuizType_RawValue(PB3QuizTypeData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QuizTypeData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuizTypeData_FieldNumber_QuizType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UserQuizOption

@implementation PB3UserQuizOption

@dynamic optId;
@dynamic optVal;
@dynamic optType;

typedef struct PB3UserQuizOption__storage_ {
  uint32_t _has_storage_[1];
  int32_t optId;
  PB3OptType optType;
  NSString *optVal;
} PB3UserQuizOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizOption_FieldNumber_OptId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserQuizOption__storage_, optId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "optVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizOption_FieldNumber_OptVal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserQuizOption__storage_, optVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3OptType_EnumDescriptor,
        .number = PB3UserQuizOption_FieldNumber_OptType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserQuizOption__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserQuizOption class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserQuizOption__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UserQuizOption_OptType_RawValue(PB3UserQuizOption *message) {
  GPBDescriptor *descriptor = [PB3UserQuizOption descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserQuizOption_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserQuizOption_OptType_RawValue(PB3UserQuizOption *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserQuizOption descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserQuizOption_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SubmitUserQuizReq

@implementation PB3SubmitUserQuizReq

@dynamic actId;
@dynamic relActId;
@dynamic listArray, listArray_Count;

typedef struct PB3SubmitUserQuizReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  NSMutableArray *listArray;
} PB3SubmitUserQuizReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubmitUserQuizReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SubmitUserQuizReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubmitUserQuizReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SubmitUserQuizReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserQuizAns),
        .number = PB3SubmitUserQuizReq_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SubmitUserQuizReq__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SubmitUserQuizReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SubmitUserQuizReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SubmitUserQuizRes

@implementation PB3SubmitUserQuizRes


typedef struct PB3SubmitUserQuizRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SubmitUserQuizRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SubmitUserQuizRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SubmitUserQuizRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ScratchOffLotteryStatusReq

@implementation PB3ScratchOffLotteryStatusReq

@dynamic actId;
@dynamic actRelId;

typedef struct PB3ScratchOffLotteryStatusReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actId;
  uint32_t actRelId;
} PB3ScratchOffLotteryStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScratchOffLotteryStatusReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ScratchOffLotteryStatusReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScratchOffLotteryStatusReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ScratchOffLotteryStatusReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ScratchOffLotteryStatusReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ScratchOffLotteryStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ScratchOffLotteryStatusRes

@implementation PB3ScratchOffLotteryStatusRes

@dynamic totalWinGold;

typedef struct PB3ScratchOffLotteryStatusRes__storage_ {
  uint32_t _has_storage_[1];
  uint64_t totalWinGold;
} PB3ScratchOffLotteryStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalWinGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScratchOffLotteryStatusRes_FieldNumber_TotalWinGold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ScratchOffLotteryStatusRes__storage_, totalWinGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ScratchOffLotteryStatusRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ScratchOffLotteryStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PartitionRecordsReq

@implementation PB3PartitionRecordsReq

@dynamic actId;
@dynamic actRelId;
@dynamic page;
@dynamic pageSize;
@dynamic isAll;

typedef struct PB3PartitionRecordsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
  int32_t page;
  int32_t pageSize;
} PB3PartitionRecordsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionRecordsReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PartitionRecordsReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionRecordsReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PartitionRecordsReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionRecordsReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PartitionRecordsReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionRecordsReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PartitionRecordsReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAll",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionRecordsReq_FieldNumber_IsAll,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PartitionRecordsReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PartitionRecordsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PartitionRecordsRes

@implementation PB3PartitionRecordsRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3PartitionRecordsRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3PartitionRecordsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PartitionData),
        .number = PB3PartitionRecordsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PartitionRecordsRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionRecordsRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PartitionRecordsRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PartitionRecordsRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PartitionRecordsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineBetConfigItem

@implementation PB3SlotMachineBetConfigItem

@dynamic betId;
@dynamic betImg;
@dynamic betName;
@dynamic betMultiples;
@dynamic description_p;
@dynamic betMaxNum;

typedef struct PB3SlotMachineBetConfigItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t betId;
  float betMultiples;
  uint32_t betMaxNum;
  NSString *betImg;
  NSString *betName;
  NSString *description_p;
} PB3SlotMachineBetConfigItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "betId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetConfigItem_FieldNumber_BetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetConfigItem__storage_, betId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "betImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetConfigItem_FieldNumber_BetImg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetConfigItem__storage_, betImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "betName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetConfigItem_FieldNumber_BetName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetConfigItem__storage_, betName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "betMultiples",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetConfigItem_FieldNumber_BetMultiples,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetConfigItem__storage_, betMultiples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetConfigItem_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetConfigItem__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "betMaxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetConfigItem_FieldNumber_BetMaxNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetConfigItem__storage_, betMaxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetConfigItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineBetConfigItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachinePriceItem

@implementation PB3SlotMachinePriceItem

@dynamic priceId;
@dynamic priceType;
@dynamic priceNum;
@dynamic priceImg;
@dynamic priceInvalidImg;
@dynamic goodsId;

typedef struct PB3SlotMachinePriceItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceId;
  PB3DeiceGridRewardType priceType;
  uint32_t goodsId;
  NSString *priceImg;
  NSString *priceInvalidImg;
  uint64_t priceNum;
} PB3SlotMachinePriceItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachinePriceItem_FieldNumber_PriceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachinePriceItem__storage_, priceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceType",
        .dataTypeSpecific.enumDescFunc = PB3DeiceGridRewardType_EnumDescriptor,
        .number = PB3SlotMachinePriceItem_FieldNumber_PriceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachinePriceItem__storage_, priceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachinePriceItem_FieldNumber_PriceNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachinePriceItem__storage_, priceNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachinePriceItem_FieldNumber_PriceImg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SlotMachinePriceItem__storage_, priceImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceInvalidImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachinePriceItem_FieldNumber_PriceInvalidImg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SlotMachinePriceItem__storage_, priceInvalidImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachinePriceItem_FieldNumber_GoodsId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SlotMachinePriceItem__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachinePriceItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachinePriceItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SlotMachinePriceItem_PriceType_RawValue(PB3SlotMachinePriceItem *message) {
  GPBDescriptor *descriptor = [PB3SlotMachinePriceItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SlotMachinePriceItem_FieldNumber_PriceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SlotMachinePriceItem_PriceType_RawValue(PB3SlotMachinePriceItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SlotMachinePriceItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SlotMachinePriceItem_FieldNumber_PriceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SlotMachineBetItem

@implementation PB3SlotMachineBetItem

@dynamic betId;
@dynamic betNum;
@dynamic betGold;

typedef struct PB3SlotMachineBetItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t betId;
  uint32_t betNum;
  uint64_t betGold;
} PB3SlotMachineBetItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "betId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetItem_FieldNumber_BetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetItem__storage_, betId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "betNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetItem_FieldNumber_BetNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetItem__storage_, betNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "betGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetItem_FieldNumber_BetGold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetItem__storage_, betGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineBetItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineDataReq

@implementation PB3SlotMachineDataReq

@dynamic actId;
@dynamic actRelId;

typedef struct PB3SlotMachineDataReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actId;
  uint32_t actRelId;
} PB3SlotMachineDataReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineDataReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineDataReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineDataReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineDataReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineDataRes

@implementation PB3SlotMachineDataRes

@dynamic roundId;
@dynamic countDown;
@dynamic status;
@dynamic betConfigDataArray, betConfigDataArray_Count;
@dynamic priceDataArray, priceDataArray_Count;
@dynamic betData, betData_Count;
@dynamic roundTime;

typedef struct PB3SlotMachineDataRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t countDown;
  PB3BetStatusType status;
  NSMutableArray *betConfigDataArray;
  NSMutableArray *priceDataArray;
  GPBUInt32ObjectDictionary *betData;
  uint64_t roundId;
  int64_t roundTime;
} PB3SlotMachineDataRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineDataRes_FieldNumber_RoundId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataRes__storage_, roundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "countDown",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineDataRes_FieldNumber_CountDown,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataRes__storage_, countDown),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BetStatusType_EnumDescriptor,
        .number = PB3SlotMachineDataRes_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "betConfigDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineBetConfigItem),
        .number = PB3SlotMachineDataRes_FieldNumber_BetConfigDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataRes__storage_, betConfigDataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachinePriceItem),
        .number = PB3SlotMachineDataRes_FieldNumber_PriceDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataRes__storage_, priceDataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "betData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineBetItem),
        .number = PB3SlotMachineDataRes_FieldNumber_BetData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataRes__storage_, betData),
        .flags = GPBFieldMapKeyUInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roundTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineDataRes_FieldNumber_RoundTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SlotMachineDataRes__storage_, roundTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineDataRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineDataRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SlotMachineDataRes_Status_RawValue(PB3SlotMachineDataRes *message) {
  GPBDescriptor *descriptor = [PB3SlotMachineDataRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SlotMachineDataRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SlotMachineDataRes_Status_RawValue(PB3SlotMachineDataRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SlotMachineDataRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SlotMachineDataRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SlotMachineBetPriceItem

@implementation PB3SlotMachineBetPriceItem

@dynamic priceData, priceData_Count;

typedef struct PB3SlotMachineBetPriceItem__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32UInt32Dictionary *priceData;
} PB3SlotMachineBetPriceItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceData",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetPriceItem_FieldNumber_PriceData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetPriceItem__storage_, priceData),
        .flags = GPBFieldMapKeyUInt32,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetPriceItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineBetPriceItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineOpenRecordItem

@implementation PB3SlotMachineOpenRecordItem

@dynamic hasBetData, betData;

typedef struct PB3SlotMachineOpenRecordItem__storage_ {
  uint32_t _has_storage_[1];
  PB3SlotMachineBetConfigItem *betData;
} PB3SlotMachineOpenRecordItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "betData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineBetConfigItem),
        .number = PB3SlotMachineOpenRecordItem_FieldNumber_BetData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineOpenRecordItem__storage_, betData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineOpenRecordItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineOpenRecordItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineBetRecordItem

@implementation PB3SlotMachineBetRecordItem

@dynamic roundId;
@dynamic betTime;
@dynamic choseBetListArray, choseBetListArray_Count;
@dynamic hasResultBet, resultBet;
@dynamic getNum;
@dynamic spendNum;

typedef struct PB3SlotMachineBetRecordItem__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *choseBetListArray;
  PB3SlotMachineBetConfigItem *resultBet;
  uint64_t roundId;
  int64_t betTime;
  uint64_t getNum;
  uint64_t spendNum;
} PB3SlotMachineBetRecordItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordItem_FieldNumber_RoundId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordItem__storage_, roundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "betTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordItem_FieldNumber_BetTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordItem__storage_, betTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "choseBetListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineBetConfigItem),
        .number = PB3SlotMachineBetRecordItem_FieldNumber_ChoseBetListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordItem__storage_, choseBetListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resultBet",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineBetConfigItem),
        .number = PB3SlotMachineBetRecordItem_FieldNumber_ResultBet,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordItem__storage_, resultBet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordItem_FieldNumber_GetNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordItem__storage_, getNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "spendNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordItem_FieldNumber_SpendNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordItem__storage_, spendNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetRecordItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineBetRecordItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineBetReq

@implementation PB3SlotMachineBetReq

@dynamic actId;
@dynamic actRelId;
@dynamic betLit, betLit_Count;

typedef struct PB3SlotMachineBetReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actId;
  uint32_t actRelId;
  GPBUInt32ObjectDictionary *betLit;
} PB3SlotMachineBetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "betLit",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineBetPriceItem),
        .number = PB3SlotMachineBetReq_FieldNumber_BetLit,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetReq__storage_, betLit),
        .flags = GPBFieldMapKeyUInt32,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineBetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineBetRes

@implementation PB3SlotMachineBetRes


typedef struct PB3SlotMachineBetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SlotMachineBetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SlotMachineBetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineOpenRecordsReq

@implementation PB3SlotMachineOpenRecordsReq

@dynamic actId;
@dynamic actRelId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3SlotMachineOpenRecordsReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actId;
  uint32_t actRelId;
  uint32_t page;
  uint32_t pageSize;
} PB3SlotMachineOpenRecordsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineOpenRecordsReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineOpenRecordsReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineOpenRecordsReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineOpenRecordsReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineOpenRecordsReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachineOpenRecordsReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineOpenRecordsReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SlotMachineOpenRecordsReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineOpenRecordsReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineOpenRecordsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineOpenRecordsRes

@implementation PB3SlotMachineOpenRecordsRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3SlotMachineOpenRecordsRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t total;
  NSMutableArray *listArray;
} PB3SlotMachineOpenRecordsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineOpenRecordItem),
        .number = PB3SlotMachineOpenRecordsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineOpenRecordsRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineOpenRecordsRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineOpenRecordsRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineOpenRecordsRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineOpenRecordsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineBetRecordsReq

@implementation PB3SlotMachineBetRecordsReq

@dynamic actId;
@dynamic actRelId;
@dynamic page;
@dynamic pageSize;
@dynamic roundId;

typedef struct PB3SlotMachineBetRecordsReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actId;
  uint32_t actRelId;
  uint32_t page;
  uint32_t pageSize;
  uint64_t roundId;
} PB3SlotMachineBetRecordsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordsReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordsReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordsReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordsReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordsReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordsReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordsReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordsReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "roundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordsReq_FieldNumber_RoundId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordsReq__storage_, roundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetRecordsReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineBetRecordsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineBetRecordsRes

@implementation PB3SlotMachineBetRecordsRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3SlotMachineBetRecordsRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t total;
  NSMutableArray *listArray;
} PB3SlotMachineBetRecordsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SlotMachineBetRecordItem),
        .number = PB3SlotMachineBetRecordsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordsRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineBetRecordsRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineBetRecordsRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineBetRecordsRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineBetRecordsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserQuizAns

@implementation PB3UserQuizAns

@dynamic quesId;
@dynamic answerListArray, answerListArray_Count;

typedef struct PB3UserQuizAns__storage_ {
  uint32_t _has_storage_[1];
  int32_t quesId;
  NSMutableArray *answerListArray;
} PB3UserQuizAns__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quesId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizAns_FieldNumber_QuesId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserQuizAns__storage_, quesId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "answerListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserQuizAns_FieldNumber_AnswerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3UserQuizAns__storage_, answerListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserQuizAns class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserQuizAns__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunGoodsListReq

@implementation PB3LuckFunGoodsListReq

@dynamic actId;
@dynamic actRelId;
@dynamic funType;

typedef struct PB3LuckFunGoodsListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
  PB3LuckFunType funType;
} PB3LuckFunGoodsListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoodsListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunGoodsListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoodsListReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunGoodsListReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "funType",
        .dataTypeSpecific.enumDescFunc = PB3LuckFunType_EnumDescriptor,
        .number = PB3LuckFunGoodsListReq_FieldNumber_FunType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LuckFunGoodsListReq__storage_, funType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunGoodsListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunGoodsListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LuckFunGoodsListReq_FunType_RawValue(PB3LuckFunGoodsListReq *message) {
  GPBDescriptor *descriptor = [PB3LuckFunGoodsListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoodsListReq_FieldNumber_FunType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LuckFunGoodsListReq_FunType_RawValue(PB3LuckFunGoodsListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LuckFunGoodsListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoodsListReq_FieldNumber_FunType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LuckFunGoods

@implementation PB3LuckFunGoods

@dynamic name;
@dynamic residualNum;
@dynamic curReachNum;
@dynamic totalReachNum;
@dynamic participationNum;
@dynamic goodsImg;
@dynamic goodsId;
@dynamic roundId;
@dynamic storeId;
@dynamic funType;
@dynamic rewardType;
@dynamic weight;
@dynamic gold;
@dynamic isShow;
@dynamic zoneType;
@dynamic wealthLevel;
@dynamic timesLimit;

typedef struct PB3LuckFunGoods__storage_ {
  uint32_t _has_storage_[1];
  int32_t residualNum;
  int32_t goodsId;
  int32_t roundId;
  int32_t storeId;
  PB3LuckFunType funType;
  PB3DeiceGridRewardType rewardType;
  int32_t weight;
  PB3LuckFunZoneType zoneType;
  NSString *name;
  NSString *goodsImg;
  int64_t curReachNum;
  int64_t totalReachNum;
  int64_t participationNum;
  uint64_t gold;
  int64_t wealthLevel;
  int64_t timesLimit;
} PB3LuckFunGoods__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "residualNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_ResidualNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, residualNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "curReachNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_CurReachNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, curReachNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalReachNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_TotalReachNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, totalReachNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "participationNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_ParticipationNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, participationNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "goodsImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_GoodsImg,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, goodsImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_GoodsId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_RoundId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, roundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_StoreId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, storeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "funType",
        .dataTypeSpecific.enumDescFunc = PB3LuckFunType_EnumDescriptor,
        .number = PB3LuckFunGoods_FieldNumber_FunType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, funType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rewardType",
        .dataTypeSpecific.enumDescFunc = PB3DeiceGridRewardType_EnumDescriptor,
        .number = PB3LuckFunGoods_FieldNumber_RewardType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, rewardType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_Weight,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_Gold,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_IsShow,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "zoneType",
        .dataTypeSpecific.enumDescFunc = PB3LuckFunZoneType_EnumDescriptor,
        .number = PB3LuckFunGoods_FieldNumber_ZoneType,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, zoneType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_WealthLevel,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timesLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunGoods_FieldNumber_TimesLimit,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3LuckFunGoods__storage_, timesLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunGoods class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunGoods__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LuckFunGoods_FunType_RawValue(PB3LuckFunGoods *message) {
  GPBDescriptor *descriptor = [PB3LuckFunGoods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoods_FieldNumber_FunType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LuckFunGoods_FunType_RawValue(PB3LuckFunGoods *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LuckFunGoods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoods_FieldNumber_FunType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3LuckFunGoods_RewardType_RawValue(PB3LuckFunGoods *message) {
  GPBDescriptor *descriptor = [PB3LuckFunGoods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoods_FieldNumber_RewardType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LuckFunGoods_RewardType_RawValue(PB3LuckFunGoods *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LuckFunGoods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoods_FieldNumber_RewardType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3LuckFunGoods_ZoneType_RawValue(PB3LuckFunGoods *message) {
  GPBDescriptor *descriptor = [PB3LuckFunGoods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoods_FieldNumber_ZoneType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LuckFunGoods_ZoneType_RawValue(PB3LuckFunGoods *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LuckFunGoods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckFunGoods_FieldNumber_ZoneType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LuckFunGoodsListRes

@implementation PB3LuckFunGoodsListRes

@dynamic listArray, listArray_Count;
@dynamic winListArray, winListArray_Count;

typedef struct PB3LuckFunGoodsListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  NSMutableArray *winListArray;
} PB3LuckFunGoodsListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LuckFunGoods),
        .number = PB3LuckFunGoodsListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckFunGoodsListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "winListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LuckFunWinGoodsInfoData),
        .number = PB3LuckFunGoodsListRes_FieldNumber_WinListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckFunGoodsListRes__storage_, winListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunGoodsListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunGoodsListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunSnatchTreasureReq

@implementation PB3LuckFunSnatchTreasureReq

@dynamic actId;
@dynamic actRelId;
@dynamic snatchNum;
@dynamic goodsId;

typedef struct PB3LuckFunSnatchTreasureReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
  int32_t snatchNum;
  int32_t goodsId;
} PB3LuckFunSnatchTreasureReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunSnatchTreasureReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunSnatchTreasureReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunSnatchTreasureReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunSnatchTreasureReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "snatchNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunSnatchTreasureReq_FieldNumber_SnatchNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LuckFunSnatchTreasureReq__storage_, snatchNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunSnatchTreasureReq_FieldNumber_GoodsId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LuckFunSnatchTreasureReq__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunSnatchTreasureReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunSnatchTreasureReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunSnatchTreasureRes

@implementation PB3LuckFunSnatchTreasureRes

@dynamic isOver;

typedef struct PB3LuckFunSnatchTreasureRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckFunSnatchTreasureRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isOver",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunSnatchTreasureRes_FieldNumber_IsOver,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunSnatchTreasureRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunSnatchTreasureRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunRankItem

@implementation PB3LuckFunRankItem

@dynamic hasPlayerData, playerData;
@dynamic num;
@dynamic index;
@dynamic awardListArray, awardListArray_Count;

typedef struct PB3LuckFunRankItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t num;
  uint32_t index;
  PB3PlayerSortMsg *playerData;
  NSMutableArray *awardListArray;
} PB3LuckFunRankItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerSortMsg),
        .number = PB3LuckFunRankItem_FieldNumber_PlayerData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunRankItem__storage_, playerData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunRankItem_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunRankItem__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunRankItem_FieldNumber_Index,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LuckFunRankItem__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "awardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BoxAward),
        .number = PB3LuckFunRankItem_FieldNumber_AwardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckFunRankItem__storage_, awardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunRankItem class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunRankItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BoxAward

@implementation PB3BoxAward

@dynamic giftId;
@dynamic giftName;
@dynamic giftNum;
@dynamic giftURL;
@dynamic gold;

typedef struct PB3BoxAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
  NSString *giftName;
  NSString *giftURL;
  uint64_t gold;
} PB3BoxAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoxAward_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BoxAward__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoxAward_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BoxAward__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoxAward_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BoxAward__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoxAward_FieldNumber_GiftURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BoxAward__storage_, giftURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoxAward_FieldNumber_Gold,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BoxAward__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BoxAward class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BoxAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunRankListReq

@implementation PB3LuckFunRankListReq

@dynamic actId;
@dynamic actRelId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3LuckFunRankListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actId;
  uint32_t actRelId;
  uint32_t page;
  uint32_t pageSize;
} PB3LuckFunRankListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunRankListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunRankListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunRankListReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunRankListReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunRankListReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LuckFunRankListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunRankListReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LuckFunRankListReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunRankListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunRankListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunRankListRes

@implementation PB3LuckFunRankListRes

@dynamic listArray, listArray_Count;
@dynamic hasMyRank, myRank;
@dynamic total;

typedef struct PB3LuckFunRankListRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t total;
  NSMutableArray *listArray;
  PB3LuckFunRankItem *myRank;
} PB3LuckFunRankListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LuckFunRankItem),
        .number = PB3LuckFunRankListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckFunRankListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LuckFunRankItem),
        .number = PB3LuckFunRankListRes_FieldNumber_MyRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunRankListRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunRankListRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunRankListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunRankListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunRankListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunOpenRecordReq

@implementation PB3LuckFunOpenRecordReq

@dynamic actId;
@dynamic actRelId;
@dynamic page;
@dynamic pageSize;
@dynamic isFilterMyself;
@dynamic goodsId;

typedef struct PB3LuckFunOpenRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
  int32_t page;
  int32_t pageSize;
  int32_t goodsId;
} PB3LuckFunOpenRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunOpenRecordReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunOpenRecordReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunOpenRecordReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunOpenRecordReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunOpenRecordReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LuckFunOpenRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunOpenRecordReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LuckFunOpenRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isFilterMyself",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunOpenRecordReq_FieldNumber_IsFilterMyself,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunOpenRecordReq_FieldNumber_GoodsId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LuckFunOpenRecordReq__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunOpenRecordReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunOpenRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunOpenRecordRes

@implementation PB3LuckFunOpenRecordRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3LuckFunOpenRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3LuckFunOpenRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WinGoodsRecord),
        .number = PB3LuckFunOpenRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckFunOpenRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunOpenRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunOpenRecordRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunOpenRecordRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunOpenRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunWinGoodsInfoData

@implementation PB3LuckFunWinGoodsInfoData

@dynamic name;
@dynamic goodsImg;

typedef struct PB3LuckFunWinGoodsInfoData__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *goodsImg;
} PB3LuckFunWinGoodsInfoData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunWinGoodsInfoData_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunWinGoodsInfoData__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goodsImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunWinGoodsInfoData_FieldNumber_GoodsImg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunWinGoodsInfoData__storage_, goodsImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunWinGoodsInfoData class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunWinGoodsInfoData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunWinGoodsInfo

@implementation PB3LuckFunWinGoodsInfo

@dynamic listArray, listArray_Count;

typedef struct PB3LuckFunWinGoodsInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3LuckFunWinGoodsInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LuckFunWinGoodsInfoData),
        .number = PB3LuckFunWinGoodsInfo_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckFunWinGoodsInfo__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunWinGoodsInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunWinGoodsInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunReadMsgReq

@implementation PB3LuckFunReadMsgReq

@dynamic actId;
@dynamic actRelId;

typedef struct PB3LuckFunReadMsgReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
} PB3LuckFunReadMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunReadMsgReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckFunReadMsgReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckFunReadMsgReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckFunReadMsgReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunReadMsgReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckFunReadMsgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckFunReadMsgRes

@implementation PB3LuckFunReadMsgRes


typedef struct PB3LuckFunReadMsgRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckFunReadMsgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckFunReadMsgRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckFunReadMsgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WinGoodsRecordsReq

@implementation PB3WinGoodsRecordsReq

@dynamic actId;
@dynamic actRelId;
@dynamic page;
@dynamic pageSize;
@dynamic isGetAll;
@dynamic goodsId;

typedef struct PB3WinGoodsRecordsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
  int32_t page;
  int32_t pageSize;
  int32_t goodsId;
} PB3WinGoodsRecordsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecordsReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecordsReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecordsReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecordsReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecordsReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecordsReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecordsReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecordsReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isGetAll",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecordsReq_FieldNumber_IsGetAll,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecordsReq_FieldNumber_GoodsId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecordsReq__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WinGoodsRecordsReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WinGoodsRecordsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WinGoodsRecord

@implementation PB3WinGoodsRecord

@dynamic playerId;
@dynamic playerName;
@dynamic goodsName;
@dynamic num;
@dynamic giftId;
@dynamic goodNumType;
@dynamic rewardType;
@dynamic createdTime;

typedef struct PB3WinGoodsRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  PB3NumType goodNumType;
  PB3DeiceGridRewardType rewardType;
  NSString *playerName;
  NSString *goodsName;
  int64_t playerId;
  int64_t num;
  int64_t createdTime;
} PB3WinGoodsRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecord_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecord_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goodsName",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecord_FieldNumber_GoodsName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, goodsName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecord_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecord_FieldNumber_GiftId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goodNumType",
        .dataTypeSpecific.enumDescFunc = PB3NumType_EnumDescriptor,
        .number = PB3WinGoodsRecord_FieldNumber_GoodNumType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, goodNumType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rewardType",
        .dataTypeSpecific.enumDescFunc = PB3DeiceGridRewardType_EnumDescriptor,
        .number = PB3WinGoodsRecord_FieldNumber_RewardType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, rewardType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "createdTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecord_FieldNumber_CreatedTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecord__storage_, createdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WinGoodsRecord class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WinGoodsRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WinGoodsRecord_GoodNumType_RawValue(PB3WinGoodsRecord *message) {
  GPBDescriptor *descriptor = [PB3WinGoodsRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WinGoodsRecord_FieldNumber_GoodNumType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WinGoodsRecord_GoodNumType_RawValue(PB3WinGoodsRecord *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WinGoodsRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WinGoodsRecord_FieldNumber_GoodNumType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3WinGoodsRecord_RewardType_RawValue(PB3WinGoodsRecord *message) {
  GPBDescriptor *descriptor = [PB3WinGoodsRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WinGoodsRecord_FieldNumber_RewardType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WinGoodsRecord_RewardType_RawValue(PB3WinGoodsRecord *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WinGoodsRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WinGoodsRecord_FieldNumber_RewardType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3WinGoodsRecordsRes

@implementation PB3WinGoodsRecordsRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3WinGoodsRecordsRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3WinGoodsRecordsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WinGoodsRecord),
        .number = PB3WinGoodsRecordsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecordsRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3WinGoodsRecordsRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WinGoodsRecordsRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WinGoodsRecordsRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WinGoodsRecordsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PartitionData

@implementation PB3PartitionData

@dynamic playerId;
@dynamic num;
@dynamic createTime;
@dynamic hasPlayerData, playerData;
@dynamic actId;
@dynamic actRelId;
@dynamic remark;

typedef struct PB3PartitionData__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
  PB3Player *playerData;
  NSString *remark;
  int64_t playerId;
  int64_t num;
  int64_t createTime;
} PB3PartitionData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionData_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PartitionData__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionData_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PartitionData__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionData_FieldNumber_CreateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PartitionData__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3PartitionData_FieldNumber_PlayerData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PartitionData__storage_, playerData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionData_FieldNumber_ActId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PartitionData__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionData_FieldNumber_ActRelId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PartitionData__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3PartitionData_FieldNumber_Remark,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PartitionData__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PartitionData class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PartitionData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarRefreshListReq

@implementation PB3SportCarRefreshListReq

@dynamic actId;
@dynamic actRelId;

typedef struct PB3SportCarRefreshListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
} PB3SportCarRefreshListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshListReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshListReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshListReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshListReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarRefreshListReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarRefreshListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarRefreshInfo

@implementation PB3SportCarRefreshInfo

@dynamic refreshTime;
@dynamic giftPrice1;
@dynamic giftRate1;
@dynamic giftPrice2;
@dynamic giftRate2;

typedef struct PB3SportCarRefreshInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t refreshTime;
  int32_t giftRate1;
  int32_t giftRate2;
  int64_t giftPrice1;
  int64_t giftPrice2;
} PB3SportCarRefreshInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "refreshTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshInfo_FieldNumber_RefreshTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshInfo__storage_, refreshTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftPrice1",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshInfo_FieldNumber_GiftPrice1,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshInfo__storage_, giftPrice1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftRate1",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshInfo_FieldNumber_GiftRate1,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshInfo__storage_, giftRate1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftPrice2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshInfo_FieldNumber_GiftPrice2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshInfo__storage_, giftPrice2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftRate2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshInfo_FieldNumber_GiftRate2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshInfo__storage_, giftRate2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarRefreshInfo class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarRefreshInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarRefreshListRes

@implementation PB3SportCarRefreshListRes

@dynamic listArray, listArray_Count;
@dynamic cost;

typedef struct PB3SportCarRefreshListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t cost;
  NSMutableArray *listArray;
} PB3SportCarRefreshListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SportCarRefreshInfo),
        .number = PB3SportCarRefreshListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cost",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarRefreshListRes_FieldNumber_Cost,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SportCarRefreshListRes__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarRefreshListRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarRefreshListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarAwardPool

@implementation PB3SportCarAwardPool

@dynamic stage;
@dynamic giftId;
@dynamic num;
@dynamic image;
@dynamic price;
@dynamic name;
@dynamic poolId;

typedef struct PB3SportCarAwardPool__storage_ {
  uint32_t _has_storage_[1];
  int32_t stage;
  int32_t num;
  int32_t poolId;
  NSString *image;
  NSString *name;
  int64_t giftId;
  int64_t price;
} PB3SportCarAwardPool__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stage",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarAwardPool_FieldNumber_Stage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SportCarAwardPool__storage_, stage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarAwardPool_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SportCarAwardPool__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarAwardPool_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SportCarAwardPool__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarAwardPool_FieldNumber_Image,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SportCarAwardPool__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarAwardPool_FieldNumber_Price,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SportCarAwardPool__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarAwardPool_FieldNumber_Name,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SportCarAwardPool__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "poolId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarAwardPool_FieldNumber_PoolId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SportCarAwardPool__storage_, poolId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarAwardPool class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarAwardPool__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarPlayerRefreshInfoRes

@implementation PB3SportCarPlayerRefreshInfoRes

@dynamic refreshTime;
@dynamic refreshTotal;
@dynamic grand;
@dynamic awardListArray, awardListArray_Count;
@dynamic nextCost;
@dynamic lastUpdated;

typedef struct PB3SportCarPlayerRefreshInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t refreshTime;
  int32_t refreshTotal;
  int32_t grand;
  int32_t nextCost;
  NSMutableArray *awardListArray;
  int64_t lastUpdated;
} PB3SportCarPlayerRefreshInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "refreshTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarPlayerRefreshInfoRes_FieldNumber_RefreshTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SportCarPlayerRefreshInfoRes__storage_, refreshTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "refreshTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarPlayerRefreshInfoRes_FieldNumber_RefreshTotal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SportCarPlayerRefreshInfoRes__storage_, refreshTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "grand",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarPlayerRefreshInfoRes_FieldNumber_Grand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SportCarPlayerRefreshInfoRes__storage_, grand),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SportCarAwardPool),
        .number = PB3SportCarPlayerRefreshInfoRes_FieldNumber_AwardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SportCarPlayerRefreshInfoRes__storage_, awardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextCost",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarPlayerRefreshInfoRes_FieldNumber_NextCost,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SportCarPlayerRefreshInfoRes__storage_, nextCost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lastUpdated",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarPlayerRefreshInfoRes_FieldNumber_LastUpdated,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SportCarPlayerRefreshInfoRes__storage_, lastUpdated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarPlayerRefreshInfoRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarPlayerRefreshInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarPlayerGrandRes

@implementation PB3SportCarPlayerGrandRes


typedef struct PB3SportCarPlayerGrandRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SportCarPlayerGrandRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarPlayerGrandRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SportCarPlayerGrandRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarDrawLotteryReq

@implementation PB3SportCarDrawLotteryReq

@dynamic actId;
@dynamic actRelId;
@dynamic num;

typedef struct PB3SportCarDrawLotteryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t actRelId;
  uint32_t num;
} PB3SportCarDrawLotteryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarDrawLotteryReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SportCarDrawLotteryReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarDrawLotteryReq_FieldNumber_ActRelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SportCarDrawLotteryReq__storage_, actRelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarDrawLotteryReq_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SportCarDrawLotteryReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarDrawLotteryReq class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarDrawLotteryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarDrawLotteryRes

@implementation PB3SportCarDrawLotteryRes

@dynamic awardListArray, awardListArray_Count;
@dynamic getTime;
@dynamic cost;

typedef struct PB3SportCarDrawLotteryRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *awardListArray;
  int64_t getTime;
  int64_t cost;
} PB3SportCarDrawLotteryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SportCarAwardPool),
        .number = PB3SportCarDrawLotteryRes_FieldNumber_AwardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SportCarDrawLotteryRes__storage_, awardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarDrawLotteryRes_FieldNumber_GetTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SportCarDrawLotteryRes__storage_, getTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cost",
        .dataTypeSpecific.className = NULL,
        .number = PB3SportCarDrawLotteryRes_FieldNumber_Cost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SportCarDrawLotteryRes__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarDrawLotteryRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarDrawLotteryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SportCarDrawLogRes

@implementation PB3SportCarDrawLogRes

@dynamic listArray, listArray_Count;

typedef struct PB3SportCarDrawLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3SportCarDrawLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SportCarDrawLotteryRes),
        .number = PB3SportCarDrawLogRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SportCarDrawLogRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SportCarDrawLogRes class]
                                     rootClass:[PB3ActivityExtRoot class]
                                          file:PB3ActivityExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SportCarDrawLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
