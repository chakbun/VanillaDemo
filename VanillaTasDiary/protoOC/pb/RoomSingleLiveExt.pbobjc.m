// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/room_single_live.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/RoomSingleLiveExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3RoomSingleLiveExtRoot

@implementation PB3RoomSingleLiveExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3RoomSingleLiveExtRoot_FileDescriptor

static GPBFileDescriptor *PB3RoomSingleLiveExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3SingleLiveRankType

GPBEnumDescriptor *PB3SingleLiveRankType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SingleLiveRankNone\000SingleLiveRankThis\000Si"
        "ngleLiveRankGuard\000SingleLiveRankCharm\000";
    static const int32_t values[] = {
        PB3SingleLiveRankType_SingleLiveRankNone,
        PB3SingleLiveRankType_SingleLiveRankThis,
        PB3SingleLiveRankType_SingleLiveRankGuard,
        PB3SingleLiveRankType_SingleLiveRankCharm,
    };
    static const char *extraTextFormatInfo = "\004\000\006\204\204\204\000\001\006\204\204\204\000\002\006\204\204\205\000\003\006\204\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLiveRankType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLiveRankType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLiveRankType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLiveRankType_SingleLiveRankNone:
    case PB3SingleLiveRankType_SingleLiveRankThis:
    case PB3SingleLiveRankType_SingleLiveRankGuard:
    case PB3SingleLiveRankType_SingleLiveRankCharm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLiveFlagType

GPBEnumDescriptor *PB3SingleLiveFlagType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SingleLiveFlagNone\000SingleLiveFlagWeek\000Si"
        "ngleLiveFlagMouth\000SingleLiveFlagYear\000";
    static const int32_t values[] = {
        PB3SingleLiveFlagType_SingleLiveFlagNone,
        PB3SingleLiveFlagType_SingleLiveFlagWeek,
        PB3SingleLiveFlagType_SingleLiveFlagMouth,
        PB3SingleLiveFlagType_SingleLiveFlagYear,
    };
    static const char *extraTextFormatInfo = "\004\000\006\204\204\204\000\001\006\204\204\204\000\002\006\204\204\205\000\003\006\204\204\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLiveFlagType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLiveFlagType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLiveFlagType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLiveFlagType_SingleLiveFlagNone:
    case PB3SingleLiveFlagType_SingleLiveFlagWeek:
    case PB3SingleLiveFlagType_SingleLiveFlagMouth:
    case PB3SingleLiveFlagType_SingleLiveFlagYear:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLiveOptType

GPBEnumDescriptor *PB3SingleLiveOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlotStop\000SlotStart\000";
    static const int32_t values[] = {
        PB3SingleLiveOptType_SlotStop,
        PB3SingleLiveOptType_SlotStart,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLiveOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLiveOptType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLiveOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLiveOptType_SlotStop:
    case PB3SingleLiveOptType_SlotStart:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLiveStatus

GPBEnumDescriptor *PB3SingleLiveStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlsOffline\000SlsOnline\000";
    static const int32_t values[] = {
        PB3SingleLiveStatus_SlsOffline,
        PB3SingleLiveStatus_SlsOnline,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLiveStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLiveStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLiveStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLiveStatus_SlsOffline:
    case PB3SingleLiveStatus_SlsOnline:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomProgramShowDayType

GPBEnumDescriptor *PB3RoomProgramShowDayType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RpsdtNone\000RpsdtToday\000RpsdtTomorrow\000Rpsdt"
        "Yesterday\000";
    static const int32_t values[] = {
        PB3RoomProgramShowDayType_RpsdtNone,
        PB3RoomProgramShowDayType_RpsdtToday,
        PB3RoomProgramShowDayType_RpsdtTomorrow,
        PB3RoomProgramShowDayType_RpsdtYesterday,
    };
    static const char *extraTextFormatInfo = "\004\000\005\204\000\001\005\205\000\002\005\210\000\003\005\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomProgramShowDayType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomProgramShowDayType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomProgramShowDayType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomProgramShowDayType_RpsdtNone:
    case PB3RoomProgramShowDayType_RpsdtToday:
    case PB3RoomProgramShowDayType_RpsdtTomorrow:
    case PB3RoomProgramShowDayType_RpsdtYesterday:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomProgramRepeatDay

GPBEnumDescriptor *PB3RoomProgramRepeatDay_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RprdSun\000RprdMon\000RprdTues\000RprdWed\000RprdThu"
        "r\000RprdFri\000RprdSat\000";
    static const int32_t values[] = {
        PB3RoomProgramRepeatDay_RprdSun,
        PB3RoomProgramRepeatDay_RprdMon,
        PB3RoomProgramRepeatDay_RprdTues,
        PB3RoomProgramRepeatDay_RprdWed,
        PB3RoomProgramRepeatDay_RprdThur,
        PB3RoomProgramRepeatDay_RprdFri,
        PB3RoomProgramRepeatDay_RprdSat,
    };
    static const char *extraTextFormatInfo = "\007\000\004\203\000\001\004\203\000\002\004\204\000\003\004\203\000\004\004\204\000\005\004\203\000\006\004\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomProgramRepeatDay)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomProgramRepeatDay_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomProgramRepeatDay_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomProgramRepeatDay_RprdSun:
    case PB3RoomProgramRepeatDay_RprdMon:
    case PB3RoomProgramRepeatDay_RprdTues:
    case PB3RoomProgramRepeatDay_RprdWed:
    case PB3RoomProgramRepeatDay_RprdThur:
    case PB3RoomProgramRepeatDay_RprdFri:
    case PB3RoomProgramRepeatDay_RprdSat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OrderRoomProgramShowAction

GPBEnumDescriptor *PB3OrderRoomProgramShowAction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrpsaNone\000OrpsaOrder\000OrpsaCancel\000";
    static const int32_t values[] = {
        PB3OrderRoomProgramShowAction_OrpsaNone,
        PB3OrderRoomProgramShowAction_OrpsaOrder,
        PB3OrderRoomProgramShowAction_OrpsaCancel,
    };
    static const char *extraTextFormatInfo = "\003\000\005\204\000\001\005\205\000\002\005\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OrderRoomProgramShowAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OrderRoomProgramShowAction_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OrderRoomProgramShowAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OrderRoomProgramShowAction_OrpsaNone:
    case PB3OrderRoomProgramShowAction_OrpsaOrder:
    case PB3OrderRoomProgramShowAction_OrpsaCancel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLiveTplType

GPBEnumDescriptor *PB3SingleLiveTplType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlttNone\000SlttSingle\000SlttDouble\000";
    static const int32_t values[] = {
        PB3SingleLiveTplType_SlttNone,
        PB3SingleLiveTplType_SlttSingle,
        PB3SingleLiveTplType_SlttDouble,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLiveTplType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLiveTplType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLiveTplType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLiveTplType_SlttNone:
    case PB3SingleLiveTplType_SlttSingle:
    case PB3SingleLiveTplType_SlttDouble:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ShowSingleLiveTplType

GPBEnumDescriptor *PB3ShowSingleLiveTplType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SslttNone\000SslttSingle\000SslttDouble\000";
    static const int32_t values[] = {
        PB3ShowSingleLiveTplType_SslttNone,
        PB3ShowSingleLiveTplType_SslttSingle,
        PB3ShowSingleLiveTplType_SslttDouble,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ShowSingleLiveTplType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ShowSingleLiveTplType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ShowSingleLiveTplType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ShowSingleLiveTplType_SslttNone:
    case PB3ShowSingleLiveTplType_SslttSingle:
    case PB3ShowSingleLiveTplType_SslttDouble:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLivePermStatus

GPBEnumDescriptor *PB3SingleLivePermStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlNotApply\000SlNotAudit\000SlPass\000SlNotPass\000S"
        "lLaborFreeze\000SlAutoFreeze\000";
    static const int32_t values[] = {
        PB3SingleLivePermStatus_SlNotApply,
        PB3SingleLivePermStatus_SlNotAudit,
        PB3SingleLivePermStatus_SlPass,
        PB3SingleLivePermStatus_SlNotPass,
        PB3SingleLivePermStatus_SlLaborFreeze,
        PB3SingleLivePermStatus_SlAutoFreeze,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLivePermStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLivePermStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLivePermStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLivePermStatus_SlNotApply:
    case PB3SingleLivePermStatus_SlNotAudit:
    case PB3SingleLivePermStatus_SlPass:
    case PB3SingleLivePermStatus_SlNotPass:
    case PB3SingleLivePermStatus_SlLaborFreeze:
    case PB3SingleLivePermStatus_SlAutoFreeze:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FreezeReqType

GPBEnumDescriptor *PB3FreezeReqType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Timer\000Unlive\000Admin\000";
    static const int32_t values[] = {
        PB3FreezeReqType_Timer,
        PB3FreezeReqType_Unlive,
        PB3FreezeReqType_Admin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FreezeReqType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FreezeReqType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FreezeReqType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FreezeReqType_Timer:
    case PB3FreezeReqType_Unlive:
    case PB3FreezeReqType_Admin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FreezeResCode

GPBEnumDescriptor *PB3FreezeResCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FreezeSuc\000FreezeLive\000";
    static const int32_t values[] = {
        PB3FreezeResCode_FreezeSuc,
        PB3FreezeResCode_FreezeLive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FreezeResCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FreezeResCode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FreezeResCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FreezeResCode_FreezeSuc:
    case PB3FreezeResCode_FreezeLive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingLiveDataTrendTime

GPBEnumDescriptor *PB3SingLiveDataTrendTime_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SldttZero\000SldttThisWeek\000SldttLastWeek\000Sl"
        "dttLastMonth\000";
    static const int32_t values[] = {
        PB3SingLiveDataTrendTime_SldttZero,
        PB3SingLiveDataTrendTime_SldttThisWeek,
        PB3SingLiveDataTrendTime_SldttLastWeek,
        PB3SingLiveDataTrendTime_SldttLastMonth,
    };
    static const char *extraTextFormatInfo = "\003\001e\210\000\002e\210\000\003e\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingLiveDataTrendTime)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingLiveDataTrendTime_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingLiveDataTrendTime_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingLiveDataTrendTime_SldttZero:
    case PB3SingLiveDataTrendTime_SldttThisWeek:
    case PB3SingLiveDataTrendTime_SldttLastWeek:
    case PB3SingLiveDataTrendTime_SldttLastMonth:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3SingleLiveRankReq

@implementation PB3SingleLiveRankReq

@dynamic type;
@dynamic rankFlag;
@dynamic thisTime;
@dynamic liveId;

typedef struct PB3SingleLiveRankReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SingleLiveRankType type;
  PB3SingleLiveFlagType rankFlag;
  int64_t thisTime;
  int64_t liveId;
} PB3SingleLiveRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveRankType_EnumDescriptor,
        .number = PB3SingleLiveRankReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rankFlag",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveFlagType_EnumDescriptor,
        .number = PB3SingleLiveRankReq_FieldNumber_RankFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankReq__storage_, rankFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "thisTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveRankReq_FieldNumber_ThisTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankReq__storage_, thisTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "liveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveRankReq_FieldNumber_LiveId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankReq__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveRankReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SingleLiveRankReq_Type_RawValue(PB3SingleLiveRankReq *message) {
  GPBDescriptor *descriptor = [PB3SingleLiveRankReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveRankReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingleLiveRankReq_Type_RawValue(PB3SingleLiveRankReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingleLiveRankReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveRankReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SingleLiveRankReq_RankFlag_RawValue(PB3SingleLiveRankReq *message) {
  GPBDescriptor *descriptor = [PB3SingleLiveRankReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveRankReq_FieldNumber_RankFlag];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingleLiveRankReq_RankFlag_RawValue(PB3SingleLiveRankReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingleLiveRankReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveRankReq_FieldNumber_RankFlag];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SingleLiveRankRes

@implementation PB3SingleLiveRankRes

@dynamic roomRankListArray, roomRankListArray_Count;
@dynamic hasMyRank, myRank;
@dynamic thisTime;
@dynamic giftId;

typedef struct PB3SingleLiveRankRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  NSMutableArray *roomRankListArray;
  PB3Rank1 *myRank;
  int64_t thisTime;
} PB3SingleLiveRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomRankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Rank),
        .number = PB3SingleLiveRankRes_FieldNumber_RoomRankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankRes__storage_, roomRankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Rank1),
        .number = PB3SingleLiveRankRes_FieldNumber_MyRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thisTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveRankRes_FieldNumber_ThisTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankRes__storage_, thisTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveRankRes_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLiveRankRes__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveRankRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveInfo

@implementation PB3SingleLiveInfo

@dynamic status;
@dynamic onlineTime;

typedef struct PB3SingleLiveInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3SingleLiveStatus status;
  int64_t onlineTime;
} PB3SingleLiveInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveStatus_EnumDescriptor,
        .number = PB3SingleLiveInfo_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "onlineTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveInfo_FieldNumber_OnlineTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveInfo__storage_, onlineTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveInfo class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SingleLiveInfo_Status_RawValue(PB3SingleLiveInfo *message) {
  GPBDescriptor *descriptor = [PB3SingleLiveInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingleLiveInfo_Status_RawValue(PB3SingleLiveInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingleLiveInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SingleLiveOptReq

@implementation PB3SingleLiveOptReq

@dynamic optType;

typedef struct PB3SingleLiveOptReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SingleLiveOptType optType;
} PB3SingleLiveOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveOptType_EnumDescriptor,
        .number = PB3SingleLiveOptReq_FieldNumber_OptType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveOptReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveOptReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SingleLiveOptReq_OptType_RawValue(PB3SingleLiveOptReq *message) {
  GPBDescriptor *descriptor = [PB3SingleLiveOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveOptReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingleLiveOptReq_OptType_RawValue(PB3SingleLiveOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingleLiveOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveOptReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SingleLiveOptRes

@implementation PB3SingleLiveOptRes


typedef struct PB3SingleLiveOptRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SingleLiveOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveOptRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SingleLiveOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveTimeStats

@implementation PB3SingleLiveTimeStats

@dynamic URL;

typedef struct PB3SingleLiveTimeStats__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} PB3SingleLiveTimeStats__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStats_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStats__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveTimeStats class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveTimeStats__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveTimeStatsReq

@implementation PB3SingleLiveTimeStatsReq

@dynamic id_p;

typedef struct PB3SingleLiveTimeStatsReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3SingleLiveTimeStatsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStatsReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStatsReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveTimeStatsReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveTimeStatsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveTimeStatsRes

@implementation PB3SingleLiveTimeStatsRes

@dynamic liveTime;
@dynamic liveTicket;
@dynamic consumerNum;
@dynamic audienceNum;
@dynamic topAudienceNum;
@dynamic newFansNum;

typedef struct PB3SingleLiveTimeStatsRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t liveTime;
  int64_t liveTicket;
  int64_t consumerNum;
  int64_t audienceNum;
  int64_t topAudienceNum;
  int64_t newFansNum;
} PB3SingleLiveTimeStatsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStatsRes_FieldNumber_LiveTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStatsRes__storage_, liveTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "liveTicket",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStatsRes_FieldNumber_LiveTicket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStatsRes__storage_, liveTicket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "consumerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStatsRes_FieldNumber_ConsumerNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStatsRes__storage_, consumerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "audienceNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStatsRes_FieldNumber_AudienceNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStatsRes__storage_, audienceNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "topAudienceNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStatsRes_FieldNumber_TopAudienceNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStatsRes__storage_, topAudienceNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "newFansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeStatsRes_FieldNumber_NewFansNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeStatsRes__storage_, newFansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveTimeStatsRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveTimeStatsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveTimeRank

@implementation PB3SingleLiveTimeRank

@dynamic playerId;
@dynamic playerSid;
@dynamic name;
@dynamic icon;
@dynamic wealthLev;
@dynamic charmLev;
@dynamic val;
@dynamic hasMaskInfo, maskInfo;

typedef struct PB3SingleLiveTimeRank__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealthLev;
  int32_t charmLev;
  NSString *name;
  NSString *icon;
  PB3MaskInfo *maskInfo;
  int64_t playerId;
  int64_t playerSid;
  int64_t val;
} PB3SingleLiveTimeRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRank_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerSid",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRank_FieldNumber_PlayerSid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, playerSid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRank_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRank_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRank_FieldNumber_WealthLev,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, wealthLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRank_FieldNumber_CharmLev,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, charmLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRank_FieldNumber_Val,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, val),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskInfo),
        .number = PB3SingleLiveTimeRank_FieldNumber_MaskInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRank__storage_, maskInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveTimeRank class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveTimeRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveTimeRankReq

@implementation PB3SingleLiveTimeRankReq

@dynamic page;
@dynamic pageSize;
@dynamic id_p;

typedef struct PB3SingleLiveTimeRankReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  int64_t id_p;
} PB3SingleLiveTimeRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRankReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRankReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRankReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRankReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveTimeRankReq_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRankReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveTimeRankReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveTimeRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveTimeRankRes

@implementation PB3SingleLiveTimeRankRes

@dynamic rankListArray, rankListArray_Count;

typedef struct PB3SingleLiveTimeRankRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankListArray;
} PB3SingleLiveTimeRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SingleLiveTimeRank),
        .number = PB3SingleLiveTimeRankRes_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SingleLiveTimeRankRes__storage_, rankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveTimeRankRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveTimeRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansInfo

@implementation PB3IntimateFansInfo

@dynamic lev;
@dynamic hostIconName;
@dynamic isFan;

typedef struct PB3IntimateFansInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  NSString *hostIconName;
} PB3IntimateFansInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansInfo_FieldNumber_Lev,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansInfo__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hostIconName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansInfo_FieldNumber_HostIconName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansInfo__storage_, hostIconName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isFan",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansInfo_FieldNumber_IsFan,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansInfo class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramItem

@implementation PB3RoomProgramItem

@dynamic title;
@dynamic subTitle;
@dynamic programPic;
@dynamic titleStatus;
@dynamic subTitleStatus;
@dynamic programPicStatus;
@dynamic lastTitle;
@dynamic programPicWidth;
@dynamic programPicHeight;

typedef struct PB3RoomProgramItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t titleStatus;
  int32_t subTitleStatus;
  int32_t programPicStatus;
  int32_t programPicWidth;
  int32_t programPicHeight;
  NSString *title;
  NSString *subTitle;
  NSString *programPic;
  NSString *lastTitle;
} PB3RoomProgramItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_SubTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, subTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "programPic",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_ProgramPic,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, programPic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_TitleStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, titleStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "subTitleStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_SubTitleStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, subTitleStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "programPicStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_ProgramPicStatus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, programPicStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lastTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_LastTitle,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, lastTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "programPicWidth",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_ProgramPicWidth,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, programPicWidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "programPicHeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramItem_FieldNumber_ProgramPicHeight,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RoomProgramItem__storage_, programPicHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramItem class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomProgramItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AddRoomProgramReq

@implementation PB3AddRoomProgramReq

@dynamic hasProgram, program;

typedef struct PB3AddRoomProgramReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomProgramItem *program;
} PB3AddRoomProgramReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "program",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomProgramItem),
        .number = PB3AddRoomProgramReq_FieldNumber_Program,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AddRoomProgramReq__storage_, program),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddRoomProgramReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AddRoomProgramReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AddRoomProgramRes

@implementation PB3AddRoomProgramRes


typedef struct PB3AddRoomProgramRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AddRoomProgramRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddRoomProgramRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AddRoomProgramRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramAnchor

@implementation PB3RoomProgramAnchor

@dynamic id_p;
@dynamic id2;
@dynamic nickname;
@dynamic icon;

typedef struct PB3RoomProgramAnchor__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickname;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3RoomProgramAnchor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramAnchor_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomProgramAnchor__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramAnchor_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomProgramAnchor__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramAnchor_FieldNumber_Nickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomProgramAnchor__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramAnchor_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomProgramAnchor__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramAnchor class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomProgramAnchor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramShow

@implementation PB3RoomProgramShow

@dynamic id_p;
@dynamic subject;
@dynamic intro;
@dynamic startTime;
@dynamic endTime;
@dynamic startTimeSeconds;
@dynamic endTimeSeconds;
@dynamic daysArray, daysArray_Count;
@dynamic playerIdsArray, playerIdsArray_Count;
@dynamic anchorsArray, anchorsArray_Count;
@dynamic isNotice;
@dynamic isOrder;
@dynamic dayType;
@dynamic subjectStatus;
@dynamic introStatus;
@dynamic coverStatus;
@dynamic cover;
@dynamic coverWidth;
@dynamic coverHeight;

typedef struct PB3RoomProgramShow__storage_ {
  uint32_t _has_storage_[1];
  int32_t startTimeSeconds;
  int32_t endTimeSeconds;
  PB3RoomProgramShowDayType dayType;
  PB3AuditStatus subjectStatus;
  PB3AuditStatus introStatus;
  PB3AuditStatus coverStatus;
  int32_t coverWidth;
  int32_t coverHeight;
  NSString *subject;
  NSString *intro;
  GPBEnumArray *daysArray;
  GPBInt64Array *playerIdsArray;
  NSMutableArray *anchorsArray;
  NSString *cover;
  int64_t id_p;
  int64_t startTime;
  int64_t endTime;
} PB3RoomProgramShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_Subject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intro",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_Intro,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, intro),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_StartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "startTimeSeconds",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_StartTimeSeconds,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, startTimeSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTimeSeconds",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_EndTimeSeconds,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, endTimeSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "daysArray",
        .dataTypeSpecific.enumDescFunc = PB3RoomProgramRepeatDay_EnumDescriptor,
        .number = PB3RoomProgramShow_FieldNumber_DaysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, daysArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_PlayerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, playerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "anchorsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomProgramAnchor),
        .number = PB3RoomProgramShow_FieldNumber_AnchorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, anchorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isNotice",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_IsNotice,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isOrder",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_IsOrder,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dayType",
        .dataTypeSpecific.enumDescFunc = PB3RoomProgramShowDayType_EnumDescriptor,
        .number = PB3RoomProgramShow_FieldNumber_DayType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, dayType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "subjectStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3RoomProgramShow_FieldNumber_SubjectStatus,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, subjectStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "introStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3RoomProgramShow_FieldNumber_IntroStatus,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, introStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "coverStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3RoomProgramShow_FieldNumber_CoverStatus,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, coverStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cover",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_Cover,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, cover),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coverWidth",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_CoverWidth,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, coverWidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "coverHeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramShow_FieldNumber_CoverHeight,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3RoomProgramShow__storage_, coverHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramShow class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomProgramShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomProgramShow_DayType_RawValue(PB3RoomProgramShow *message) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_DayType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomProgramShow_DayType_RawValue(PB3RoomProgramShow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_DayType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3RoomProgramShow_SubjectStatus_RawValue(PB3RoomProgramShow *message) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_SubjectStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomProgramShow_SubjectStatus_RawValue(PB3RoomProgramShow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_SubjectStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3RoomProgramShow_IntroStatus_RawValue(PB3RoomProgramShow *message) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_IntroStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomProgramShow_IntroStatus_RawValue(PB3RoomProgramShow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_IntroStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3RoomProgramShow_CoverStatus_RawValue(PB3RoomProgramShow *message) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_CoverStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomProgramShow_CoverStatus_RawValue(PB3RoomProgramShow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomProgramShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomProgramShow_FieldNumber_CoverStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AddRoomProgramShowReq

@implementation PB3AddRoomProgramShowReq

@dynamic hasShow, show;

typedef struct PB3AddRoomProgramShowReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomProgramShow *show;
} PB3AddRoomProgramShowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "show",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomProgramShow),
        .number = PB3AddRoomProgramShowReq_FieldNumber_Show,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AddRoomProgramShowReq__storage_, show),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddRoomProgramShowReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AddRoomProgramShowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AddRoomProgramShowRes

@implementation PB3AddRoomProgramShowRes


typedef struct PB3AddRoomProgramShowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AddRoomProgramShowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddRoomProgramShowRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AddRoomProgramShowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelRoomProgramShowReq

@implementation PB3DelRoomProgramShowReq

@dynamic id_p;

typedef struct PB3DelRoomProgramShowReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3DelRoomProgramShowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelRoomProgramShowReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DelRoomProgramShowReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelRoomProgramShowReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelRoomProgramShowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelRoomProgramShowRes

@implementation PB3DelRoomProgramShowRes


typedef struct PB3DelRoomProgramShowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DelRoomProgramShowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelRoomProgramShowRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DelRoomProgramShowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderRoomProgramShowReq

@implementation PB3OrderRoomProgramShowReq

@dynamic id_p;
@dynamic dayType;
@dynamic action;
@dynamic roomId;

typedef struct PB3OrderRoomProgramShowReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomProgramShowDayType dayType;
  PB3OrderRoomProgramShowAction action;
  int64_t id_p;
  int64_t roomId;
} PB3OrderRoomProgramShowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderRoomProgramShowReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderRoomProgramShowReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dayType",
        .dataTypeSpecific.enumDescFunc = PB3RoomProgramShowDayType_EnumDescriptor,
        .number = PB3OrderRoomProgramShowReq_FieldNumber_DayType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderRoomProgramShowReq__storage_, dayType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = PB3OrderRoomProgramShowAction_EnumDescriptor,
        .number = PB3OrderRoomProgramShowReq_FieldNumber_Action,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderRoomProgramShowReq__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderRoomProgramShowReq_FieldNumber_RoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderRoomProgramShowReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderRoomProgramShowReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderRoomProgramShowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OrderRoomProgramShowReq_DayType_RawValue(PB3OrderRoomProgramShowReq *message) {
  GPBDescriptor *descriptor = [PB3OrderRoomProgramShowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderRoomProgramShowReq_FieldNumber_DayType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderRoomProgramShowReq_DayType_RawValue(PB3OrderRoomProgramShowReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderRoomProgramShowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderRoomProgramShowReq_FieldNumber_DayType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3OrderRoomProgramShowReq_Action_RawValue(PB3OrderRoomProgramShowReq *message) {
  GPBDescriptor *descriptor = [PB3OrderRoomProgramShowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderRoomProgramShowReq_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OrderRoomProgramShowReq_Action_RawValue(PB3OrderRoomProgramShowReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OrderRoomProgramShowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OrderRoomProgramShowReq_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OrderRoomProgramShowRes

@implementation PB3OrderRoomProgramShowRes


typedef struct PB3OrderRoomProgramShowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3OrderRoomProgramShowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderRoomProgramShowRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OrderRoomProgramShowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderRoomProgramShowListReq

@implementation PB3OrderRoomProgramShowListReq

@dynamic roomId;

typedef struct PB3OrderRoomProgramShowListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3OrderRoomProgramShowListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderRoomProgramShowListReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderRoomProgramShowListReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderRoomProgramShowListReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderRoomProgramShowListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderRoomProgramShowListRes

@implementation PB3OrderRoomProgramShowListRes

@dynamic showsArray, showsArray_Count;

typedef struct PB3OrderRoomProgramShowListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *showsArray;
} PB3OrderRoomProgramShowListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomProgramShow),
        .number = PB3OrderRoomProgramShowListRes_FieldNumber_ShowsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderRoomProgramShowListRes__storage_, showsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderRoomProgramShowListRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderRoomProgramShowListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramReq

@implementation PB3RoomProgramReq


typedef struct PB3RoomProgramReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomProgramReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomProgramReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramRes

@implementation PB3RoomProgramRes

@dynamic hasProgram, program;
@dynamic noticePushTime;
@dynamic fansCount;
@dynamic showsArray, showsArray_Count;

typedef struct PB3RoomProgramRes__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomProgramItem *program;
  NSMutableArray *showsArray;
  int64_t noticePushTime;
  int64_t fansCount;
} PB3RoomProgramRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "program",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomProgramItem),
        .number = PB3RoomProgramRes_FieldNumber_Program,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomProgramRes__storage_, program),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "noticePushTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramRes_FieldNumber_NoticePushTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomProgramRes__storage_, noticePushTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fansCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramRes_FieldNumber_FansCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomProgramRes__storage_, fansCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomProgramShow),
        .number = PB3RoomProgramRes_FieldNumber_ShowsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomProgramRes__storage_, showsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomProgramRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramOnlineInfo

@implementation PB3RoomProgramOnlineInfo


typedef struct PB3RoomProgramOnlineInfo__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomProgramOnlineInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramOnlineInfo class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomProgramOnlineInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramOnlineInfoReq

@implementation PB3RoomProgramOnlineInfoReq


typedef struct PB3RoomProgramOnlineInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomProgramOnlineInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramOnlineInfoReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomProgramOnlineInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramOnlineInfoRes

@implementation PB3RoomProgramOnlineInfoRes

@dynamic roomId;
@dynamic subject;
@dynamic title;
@dynamic endTime;

typedef struct PB3RoomProgramOnlineInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *subject;
  NSString *title;
  int64_t roomId;
  int64_t endTime;
} PB3RoomProgramOnlineInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramOnlineInfoRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomProgramOnlineInfoRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramOnlineInfoRes_FieldNumber_Subject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomProgramOnlineInfoRes__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramOnlineInfoRes_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomProgramOnlineInfoRes__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramOnlineInfoRes_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomProgramOnlineInfoRes__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramOnlineInfoRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomProgramOnlineInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramStateReq

@implementation PB3RoomProgramStateReq

@dynamic roomId;
@dynamic showId;
@dynamic endTime;

typedef struct PB3RoomProgramStateReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
  int64_t showId;
  int64_t endTime;
} PB3RoomProgramStateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramStateReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomProgramStateReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramStateReq_FieldNumber_ShowId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomProgramStateReq__storage_, showId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomProgramStateReq_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomProgramStateReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramStateReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomProgramStateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomProgramStateRes

@implementation PB3RoomProgramStateRes


typedef struct PB3RoomProgramStateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomProgramStateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomProgramStateRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomProgramStateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ApplySLPermissionReq

@implementation PB3ApplySLPermissionReq

@dynamic playerId;

typedef struct PB3ApplySLPermissionReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3ApplySLPermissionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ApplySLPermissionReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ApplySLPermissionReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ApplySLPermissionReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ApplySLPermissionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ApplySLPermissionRes

@implementation PB3ApplySLPermissionRes

@dynamic isAuto;
@dynamic message;

typedef struct PB3ApplySLPermissionRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
} PB3ApplySLPermissionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAuto",
        .dataTypeSpecific.className = NULL,
        .number = PB3ApplySLPermissionRes_FieldNumber_IsAuto,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = PB3ApplySLPermissionRes_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ApplySLPermissionRes__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ApplySLPermissionRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ApplySLPermissionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetSLPermissionReq

@implementation PB3GetSLPermissionReq

@dynamic playerId;
@dynamic needActive;

typedef struct PB3GetSLPermissionReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t needActive;
  int64_t playerId;
} PB3GetSLPermissionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSLPermissionReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetSLPermissionReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "needActive",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSLPermissionReq_FieldNumber_NeedActive,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetSLPermissionReq__storage_, needActive),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSLPermissionReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetSLPermissionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetSLPermissionRes

@implementation PB3GetSLPermissionRes

@dynamic status;
@dynamic updateTime;
@dynamic isActive;
@dynamic validMin;
@dynamic activeDone;
@dynamic activeDay;

typedef struct PB3GetSLPermissionRes__storage_ {
  uint32_t _has_storage_[1];
  PB3SingleLivePermStatus status;
  int64_t updateTime;
  int64_t validMin;
  int64_t activeDone;
  int64_t activeDay;
} PB3GetSLPermissionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3SingleLivePermStatus_EnumDescriptor,
        .number = PB3GetSLPermissionRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetSLPermissionRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSLPermissionRes_FieldNumber_UpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetSLPermissionRes__storage_, updateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isActive",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSLPermissionRes_FieldNumber_IsActive,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "validMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSLPermissionRes_FieldNumber_ValidMin,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetSLPermissionRes__storage_, validMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "activeDone",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSLPermissionRes_FieldNumber_ActiveDone,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GetSLPermissionRes__storage_, activeDone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "activeDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSLPermissionRes_FieldNumber_ActiveDay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GetSLPermissionRes__storage_, activeDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSLPermissionRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetSLPermissionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetSLPermissionRes_Status_RawValue(PB3GetSLPermissionRes *message) {
  GPBDescriptor *descriptor = [PB3GetSLPermissionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetSLPermissionRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetSLPermissionRes_Status_RawValue(PB3GetSLPermissionRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetSLPermissionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetSLPermissionRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FreezeReq

@implementation PB3FreezeReq

@dynamic playerId;
@dynamic reqType;

typedef struct PB3FreezeReq__storage_ {
  uint32_t _has_storage_[1];
  PB3FreezeReqType reqType;
  int64_t playerId;
} PB3FreezeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FreezeReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "reqType",
        .dataTypeSpecific.enumDescFunc = PB3FreezeReqType_EnumDescriptor,
        .number = PB3FreezeReq_FieldNumber_ReqType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FreezeReq__storage_, reqType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FreezeReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FreezeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FreezeReq_ReqType_RawValue(PB3FreezeReq *message) {
  GPBDescriptor *descriptor = [PB3FreezeReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FreezeReq_FieldNumber_ReqType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FreezeReq_ReqType_RawValue(PB3FreezeReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FreezeReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FreezeReq_FieldNumber_ReqType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FreezeRes

@implementation PB3FreezeRes

@dynamic code;

typedef struct PB3FreezeRes__storage_ {
  uint32_t _has_storage_[1];
  PB3FreezeResCode code;
} PB3FreezeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = PB3FreezeResCode_EnumDescriptor,
        .number = PB3FreezeRes_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FreezeRes__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FreezeRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FreezeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FreezeRes_Code_RawValue(PB3FreezeRes *message) {
  GPBDescriptor *descriptor = [PB3FreezeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FreezeRes_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FreezeRes_Code_RawValue(PB3FreezeRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FreezeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FreezeRes_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SingLiveStatsPlayer

@implementation PB3SingLiveStatsPlayer

@dynamic id_p;
@dynamic id2;
@dynamic nickname;
@dynamic sex;
@dynamic icon;

typedef struct PB3SingLiveStatsPlayer__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *nickname;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3SingLiveStatsPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingLiveStatsPlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingLiveStatsPlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingLiveStatsPlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingLiveStatsPlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingLiveStatsPlayer_FieldNumber_Nickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingLiveStatsPlayer__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3SingLiveStatsPlayer_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SingLiveStatsPlayer__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingLiveStatsPlayer_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SingLiveStatsPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingLiveStatsPlayer class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingLiveStatsPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SingLiveStatsPlayer_Sex_RawValue(PB3SingLiveStatsPlayer *message) {
  GPBDescriptor *descriptor = [PB3SingLiveStatsPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingLiveStatsPlayer_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingLiveStatsPlayer_Sex_RawValue(PB3SingLiveStatsPlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingLiveStatsPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingLiveStatsPlayer_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SingleLiveStatsReq

@implementation PB3SingleLiveStatsReq


typedef struct PB3SingleLiveStatsReq__storage_ {
  uint32_t _has_storage_[1];
} PB3SingleLiveStatsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveStatsReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SingleLiveStatsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveStatsRes

@implementation PB3SingleLiveStatsRes

@dynamic hasPlayer, player;
@dynamic isFrozen;
@dynamic unfreezeTime;
@dynamic intimateFansNum;
@dynamic fansCount;
@dynamic taskNeedDay;
@dynamic taskLiveDay;
@dynamic taskNeedTimeOneDay;
@dynamic updateTime;
@dynamic hasIntimateFansInfo, intimateFansInfo;

typedef struct PB3SingleLiveStatsRes__storage_ {
  uint32_t _has_storage_[1];
  PB3SingLiveStatsPlayer *player;
  PB3IntimateFansInfo *intimateFansInfo;
  int64_t unfreezeTime;
  int64_t intimateFansNum;
  int64_t fansCount;
  int64_t taskNeedDay;
  int64_t taskLiveDay;
  int64_t taskNeedTimeOneDay;
  int64_t updateTime;
} PB3SingleLiveStatsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SingLiveStatsPlayer),
        .number = PB3SingleLiveStatsRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isFrozen",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_IsFrozen,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "unfreezeTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_UnfreezeTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, unfreezeTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateFansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_IntimateFansNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, intimateFansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fansCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_FansCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, fansCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "taskNeedDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_TaskNeedDay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, taskNeedDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "taskLiveDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_TaskLiveDay,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, taskLiveDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "taskNeedTimeOneDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_TaskNeedTimeOneDay,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, taskNeedTimeOneDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveStatsRes_FieldNumber_UpdateTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, updateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateFansInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansInfo),
        .number = PB3SingleLiveStatsRes_FieldNumber_IntimateFansInfo,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3SingleLiveStatsRes__storage_, intimateFansInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveStatsRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveStatsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveData

@implementation PB3SingleLiveData

@dynamic dayTime;
@dynamic liveTime;
@dynamic liveTicket;

typedef struct PB3SingleLiveData__storage_ {
  uint32_t _has_storage_[1];
  int64_t dayTime;
  int64_t liveTime;
  int64_t liveTicket;
} PB3SingleLiveData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveData_FieldNumber_DayTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveData__storage_, dayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "liveTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveData_FieldNumber_LiveTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveData__storage_, liveTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "liveTicket",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveData_FieldNumber_LiveTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLiveData__storage_, liveTicket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveData class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLiveDataTrendReq

@implementation PB3SingleLiveDataTrendReq

@dynamic trendTime;

typedef struct PB3SingleLiveDataTrendReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SingLiveDataTrendTime trendTime;
} PB3SingleLiveDataTrendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "trendTime",
        .dataTypeSpecific.enumDescFunc = PB3SingLiveDataTrendTime_EnumDescriptor,
        .number = PB3SingleLiveDataTrendReq_FieldNumber_TrendTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveDataTrendReq__storage_, trendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveDataTrendReq class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveDataTrendReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SingleLiveDataTrendReq_TrendTime_RawValue(PB3SingleLiveDataTrendReq *message) {
  GPBDescriptor *descriptor = [PB3SingleLiveDataTrendReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveDataTrendReq_FieldNumber_TrendTime];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingleLiveDataTrendReq_TrendTime_RawValue(PB3SingleLiveDataTrendReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingleLiveDataTrendReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLiveDataTrendReq_FieldNumber_TrendTime];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SingleLiveDataTrendRes

@implementation PB3SingleLiveDataTrendRes

@dynamic liveDay;
@dynamic liveTime;
@dynamic liveTicket;
@dynamic dataArray, dataArray_Count;
@dynamic updateTime;

typedef struct PB3SingleLiveDataTrendRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dataArray;
  int64_t liveDay;
  int64_t liveTime;
  int64_t liveTicket;
  int64_t updateTime;
} PB3SingleLiveDataTrendRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveDataTrendRes_FieldNumber_LiveDay,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLiveDataTrendRes__storage_, liveDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "liveTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveDataTrendRes_FieldNumber_LiveTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLiveDataTrendRes__storage_, liveTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "liveTicket",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveDataTrendRes_FieldNumber_LiveTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLiveDataTrendRes__storage_, liveTicket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SingleLiveData),
        .number = PB3SingleLiveDataTrendRes_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SingleLiveDataTrendRes__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLiveDataTrendRes_FieldNumber_UpdateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SingleLiveDataTrendRes__storage_, updateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLiveDataTrendRes class]
                                     rootClass:[PB3RoomSingleLiveExtRoot class]
                                          file:PB3RoomSingleLiveExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLiveDataTrendRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
