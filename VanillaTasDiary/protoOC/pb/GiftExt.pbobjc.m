// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/gift.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/GiftExt.pbobjc.h"
#import "pb/BillExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
#import "pb/ShowExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3GiftExtRoot

@implementation PB3GiftExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3GiftExtRoot_FileDescriptor

static GPBFileDescriptor *PB3GiftExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3GiftCmdId

GPBEnumDescriptor *PB3GiftCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GiftNone1\000GiftBroadCmdId\000MagicGiftBroadC"
        "mdId\000NewerGiftCmdId\000RoomShowConfigCmdId\000"
        "ShowBombCmdId\000RoomShowBossCmdId\000GiftConf"
        "CmdId\000RoomShowBossShowCmdId\000GiftUpShowCm"
        "dId\000GiftUpChangeCmdId\000RoomShowClearBoss\000"
        "InteractionGiftCmdId\000SongListNotice\000Chan"
        "geSongList\000VirtualPresentGift\000TreasureBo"
        "xNumCmdId\000TreasureBoxStatusCmdId\000Treasur"
        "eBoxCfgCmdId\000TreasureBoxRewardCmdId\000Impr"
        "esentGiftCmdId\000";
    static const int32_t values[] = {
        PB3GiftCmdId_GiftNone1,
        PB3GiftCmdId_GiftBroadCmdId,
        PB3GiftCmdId_MagicGiftBroadCmdId,
        PB3GiftCmdId_NewerGiftCmdId,
        PB3GiftCmdId_RoomShowConfigCmdId,
        PB3GiftCmdId_ShowBombCmdId,
        PB3GiftCmdId_RoomShowBossCmdId,
        PB3GiftCmdId_GiftConfCmdId,
        PB3GiftCmdId_RoomShowBossShowCmdId,
        PB3GiftCmdId_GiftUpShowCmdId,
        PB3GiftCmdId_GiftUpChangeCmdId,
        PB3GiftCmdId_RoomShowClearBoss,
        PB3GiftCmdId_InteractionGiftCmdId,
        PB3GiftCmdId_SongListNotice,
        PB3GiftCmdId_ChangeSongList,
        PB3GiftCmdId_VirtualPresentGift,
        PB3GiftCmdId_TreasureBoxNumCmdId,
        PB3GiftCmdId_TreasureBoxStatusCmdId,
        PB3GiftCmdId_TreasureBoxCfgCmdId,
        PB3GiftCmdId_TreasureBoxRewardCmdId,
        PB3GiftCmdId_ImpresentGiftCmdId,
    };
    static const char *extraTextFormatInfo = "\025\000\t\000\001\016\000\002\023\000\003\016\000\004\023\000\005\r\000\006\021\000\007\r\000\010\025\000\t\017\000\n\021\000\013\021\000\014\024\000\r\016\000\016\016\000\017\022\000\020\023\000\021\026\000\022\023\000\023\026\000\024c\017\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftCmdId_GiftNone1:
    case PB3GiftCmdId_GiftBroadCmdId:
    case PB3GiftCmdId_MagicGiftBroadCmdId:
    case PB3GiftCmdId_NewerGiftCmdId:
    case PB3GiftCmdId_RoomShowConfigCmdId:
    case PB3GiftCmdId_ShowBombCmdId:
    case PB3GiftCmdId_RoomShowBossCmdId:
    case PB3GiftCmdId_GiftConfCmdId:
    case PB3GiftCmdId_RoomShowBossShowCmdId:
    case PB3GiftCmdId_GiftUpShowCmdId:
    case PB3GiftCmdId_GiftUpChangeCmdId:
    case PB3GiftCmdId_RoomShowClearBoss:
    case PB3GiftCmdId_InteractionGiftCmdId:
    case PB3GiftCmdId_SongListNotice:
    case PB3GiftCmdId_ChangeSongList:
    case PB3GiftCmdId_VirtualPresentGift:
    case PB3GiftCmdId_TreasureBoxNumCmdId:
    case PB3GiftCmdId_TreasureBoxStatusCmdId:
    case PB3GiftCmdId_TreasureBoxCfgCmdId:
    case PB3GiftCmdId_TreasureBoxRewardCmdId:
    case PB3GiftCmdId_ImpresentGiftCmdId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftBgType

GPBEnumDescriptor *PB3GiftBgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GiftBgTypeNone\000GiftBgTypeBule\000GiftBgType"
        "Pink\000GiftBgTypeOrange\000GiftBgTypePurple\000G"
        "iftBgTypeRunwy\000";
    static const int32_t values[] = {
        PB3GiftBgType_GiftBgTypeNone,
        PB3GiftBgType_GiftBgTypeBule,
        PB3GiftBgType_GiftBgTypePink,
        PB3GiftBgType_GiftBgTypeOrange,
        PB3GiftBgType_GiftBgTypePurple,
        PB3GiftBgType_GiftBgTypeRunwy,
    };
    static const char *extraTextFormatInfo = "\006\000\016\000\001\016\000\002\016\000\003\020\000\004\020\000\005\017\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftBgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftBgType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftBgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftBgType_GiftBgTypeNone:
    case PB3GiftBgType_GiftBgTypeBule:
    case PB3GiftBgType_GiftBgTypePink:
    case PB3GiftBgType_GiftBgTypeOrange:
    case PB3GiftBgType_GiftBgTypePurple:
    case PB3GiftBgType_GiftBgTypeRunwy:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftNewUserDay

GPBEnumDescriptor *PB3GiftNewUserDay_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NewUserDayPay\000NewUserDayOne\000NewUserDayTw"
        "o\000NewUserDayThree\000";
    static const int32_t values[] = {
        PB3GiftNewUserDay_NewUserDayPay,
        PB3GiftNewUserDay_NewUserDayOne,
        PB3GiftNewUserDay_NewUserDayTwo,
        PB3GiftNewUserDay_NewUserDayThree,
    };
    static const char *extraTextFormatInfo = "\004\000\r\000\001\r\000\002\r\000\003\017\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftNewUserDay)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftNewUserDay_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftNewUserDay_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftNewUserDay_NewUserDayPay:
    case PB3GiftNewUserDay_NewUserDayOne:
    case PB3GiftNewUserDay_NewUserDayTwo:
    case PB3GiftNewUserDay_NewUserDayThree:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftDynamicType

GPBEnumDescriptor *PB3GiftDynamicType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GiftDyNone\000GiftDyWeekStar\000";
    static const int32_t values[] = {
        PB3GiftDynamicType_GiftDyNone,
        PB3GiftDynamicType_GiftDyWeekStar,
    };
    static const char *extraTextFormatInfo = "\002\000\n\000\001\016\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftDynamicType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftDynamicType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftDynamicType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftDynamicType_GiftDyNone:
    case PB3GiftDynamicType_GiftDyWeekStar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftNoticeShowType

GPBEnumDescriptor *PB3GiftNoticeShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EnshowTypeNone\000EnshowTypeRoomBarrage\000Ens"
        "howTypeAllScroll\000";
    static const int32_t values[] = {
        PB3GiftNoticeShowType_EnshowTypeNone,
        PB3GiftNoticeShowType_EnshowTypeRoomBarrage,
        PB3GiftNoticeShowType_EnshowTypeAllScroll,
    };
    static const char *extraTextFormatInfo = "\003\000c\007\204\000\001c\007\213\000\002c\007\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftNoticeShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftNoticeShowType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftNoticeShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftNoticeShowType_EnshowTypeNone:
    case PB3GiftNoticeShowType_EnshowTypeRoomBarrage:
    case PB3GiftNoticeShowType_EnshowTypeAllScroll:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BillType

GPBEnumDescriptor *PB3BillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BtZero\000BtIncome\000BtConsume\000";
    static const int32_t values[] = {
        PB3BillType_BtZero,
        PB3BillType_BtIncome,
        PB3BillType_BtConsume,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BillType_BtZero:
    case PB3BillType_BtIncome:
    case PB3BillType_BtConsume:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftShowPlace

GPBEnumDescriptor *PB3GiftShowPlace_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Room\000Im\000";
    static const int32_t values[] = {
        PB3GiftShowPlace_None,
        PB3GiftShowPlace_Room,
        PB3GiftShowPlace_Im,
    };
    static const char *extraTextFormatInfo = "\003\000\004\000\001\004\000\002\002\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftShowPlace)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftShowPlace_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftShowPlace_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftShowPlace_None:
    case PB3GiftShowPlace_Room:
    case PB3GiftShowPlace_Im:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DataResourceTarget

GPBEnumDescriptor *PB3DataResourceTarget_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DrtGift\000DrtEffect\000";
    static const int32_t values[] = {
        PB3DataResourceTarget_DrtGift,
        PB3DataResourceTarget_DrtEffect,
    };
    static const char *extraTextFormatInfo = "\002\000c\204\000\001c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DataResourceTarget)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DataResourceTarget_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DataResourceTarget_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DataResourceTarget_DrtGift:
    case PB3DataResourceTarget_DrtEffect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftBannerOpera

GPBEnumDescriptor *PB3GiftBannerOpera_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GbaNone\000GbaAddOrUpdate\000GbaDel\000";
    static const int32_t values[] = {
        PB3GiftBannerOpera_GbaNone,
        PB3GiftBannerOpera_GbaAddOrUpdate,
        PB3GiftBannerOpera_GbaDel,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\213\000\002c\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftBannerOpera)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftBannerOpera_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftBannerOpera_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftBannerOpera_GbaNone:
    case PB3GiftBannerOpera_GbaAddOrUpdate:
    case PB3GiftBannerOpera_GbaDel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BoxType

GPBEnumDescriptor *PB3BoxType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BoxNone\000BoxEffect\000BoxGift\000";
    static const int32_t values[] = {
        PB3BoxType_BoxNone,
        PB3BoxType_BoxEffect,
        PB3BoxType_BoxGift,
    };
    static const char *extraTextFormatInfo = "\003\000\003\204\000\001\003\206\000\002\003\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BoxType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BoxType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BoxType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BoxType_BoxNone:
    case PB3BoxType_BoxEffect:
    case PB3BoxType_BoxGift:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FirstClassifyType

GPBEnumDescriptor *PB3FirstClassifyType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FirstClassifyTypeNone\000FirstClassifyTypeG"
        "ift\000FirstClassifyTypeInteract\000";
    static const int32_t values[] = {
        PB3FirstClassifyType_FirstClassifyTypeNone,
        PB3FirstClassifyType_FirstClassifyTypeGift,
        PB3FirstClassifyType_FirstClassifyTypeInteract,
    };
    static const char *extraTextFormatInfo = "\003\000\021\204\000\001\021\204\000\002\021\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FirstClassifyType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FirstClassifyType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FirstClassifyType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FirstClassifyType_FirstClassifyTypeNone:
    case PB3FirstClassifyType_FirstClassifyTypeGift:
    case PB3FirstClassifyType_FirstClassifyTypeInteract:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FirstClassifyOpen

GPBEnumDescriptor *PB3FirstClassifyOpen_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FirstClassifyOpenNone\000FirstClassifyOpenA"
        "ll\000FirstClassifyOpenReward\000";
    static const int32_t values[] = {
        PB3FirstClassifyOpen_FirstClassifyOpenNone,
        PB3FirstClassifyOpen_FirstClassifyOpenAll,
        PB3FirstClassifyOpen_FirstClassifyOpenReward,
    };
    static const char *extraTextFormatInfo = "\003\000\021\204\000\001\021\203\000\002\021\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FirstClassifyOpen)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FirstClassifyOpen_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FirstClassifyOpen_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FirstClassifyOpen_FirstClassifyOpenNone:
    case PB3FirstClassifyOpen_FirstClassifyOpenAll:
    case PB3FirstClassifyOpen_FirstClassifyOpenReward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CollectGiftType

GPBEnumDescriptor *PB3CollectGiftType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CollectGiftTypeNull\000CollectGiftTypeGiftW"
        "all\000CollectGiftTypeNormal\000CollectGiftTyp"
        "eActSpec\000CollectGiftTypeGiftWallGet\000Coll"
        "ectGiftTypeGiftWallSend\000";
    static const int32_t values[] = {
        PB3CollectGiftType_CollectGiftTypeNull,
        PB3CollectGiftType_CollectGiftTypeGiftWall,
        PB3CollectGiftType_CollectGiftTypeNormal,
        PB3CollectGiftType_CollectGiftTypeActSpec,
        PB3CollectGiftType_CollectGiftTypeGiftWallGet,
        PB3CollectGiftType_CollectGiftTypeGiftWallSend,
    };
    static const char *extraTextFormatInfo = "\006\000\017\204\000\001\017\210\000\002\017\206\000\003\017\207\000\004\017\213\000\005\017\214\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CollectGiftType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CollectGiftType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CollectGiftType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CollectGiftType_CollectGiftTypeNull:
    case PB3CollectGiftType_CollectGiftTypeGiftWall:
    case PB3CollectGiftType_CollectGiftTypeNormal:
    case PB3CollectGiftType_CollectGiftTypeActSpec:
    case PB3CollectGiftType_CollectGiftTypeGiftWallGet:
    case PB3CollectGiftType_CollectGiftTypeGiftWallSend:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingListStatus

GPBEnumDescriptor *PB3SingListStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlsNone\000SlsWait\000SlsSinging\000";
    static const int32_t values[] = {
        PB3SingListStatus_SlsNone,
        PB3SingListStatus_SlsWait,
        PB3SingListStatus_SlsSinging,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingListStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingListStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingListStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingListStatus_SlsNone:
    case PB3SingListStatus_SlsWait:
    case PB3SingListStatus_SlsSinging:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OptSingType

GPBEnumDescriptor *PB3OptSingType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OstNone\000OstDel\000OstNotice\000OstTop\000OstStart"
        "\000OstComplete\000";
    static const int32_t values[] = {
        PB3OptSingType_OstNone,
        PB3OptSingType_OstDel,
        PB3OptSingType_OstNotice,
        PB3OptSingType_OstTop,
        PB3OptSingType_OstStart,
        PB3OptSingType_OstComplete,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OptSingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OptSingType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OptSingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OptSingType_OstNone:
    case PB3OptSingType_OstDel:
    case PB3OptSingType_OstNotice:
    case PB3OptSingType_OstTop:
    case PB3OptSingType_OstStart:
    case PB3OptSingType_OstComplete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SongRecordType

GPBEnumDescriptor *PB3SongRecordType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SrtNone\000SrtInteraction\000SrtSong\000";
    static const int32_t values[] = {
        PB3SongRecordType_SrtNone,
        PB3SongRecordType_SrtInteraction,
        PB3SongRecordType_SrtSong,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SongRecordType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SongRecordType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SongRecordType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SongRecordType_SrtNone:
    case PB3SongRecordType_SrtInteraction:
    case PB3SongRecordType_SrtSong:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IMType

GPBEnumDescriptor *PB3IMType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImtZero\000ImtNormal\000ImtTimelimit\000";
    static const int32_t values[] = {
        PB3IMType_ImtZero,
        PB3IMType_ImtNormal,
        PB3IMType_ImtTimelimit,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMType_ImtZero:
    case PB3IMType_ImtNormal:
    case PB3IMType_ImtTimelimit:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3TreasureRewardType

GPBEnumDescriptor *PB3TreasureRewardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TrtNone\000TrtGift\000TrtGold\000TrtEffect\000";
    static const int32_t values[] = {
        PB3TreasureRewardType_TrtNone,
        PB3TreasureRewardType_TrtGift,
        PB3TreasureRewardType_TrtGold,
        PB3TreasureRewardType_TrtEffect,
    };
    static const char *extraTextFormatInfo = "\004\000c\204\000\001c\204\000\002c\204\000\003c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3TreasureRewardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3TreasureRewardType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3TreasureRewardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3TreasureRewardType_TrtNone:
    case PB3TreasureRewardType_TrtGift:
    case PB3TreasureRewardType_TrtGold:
    case PB3TreasureRewardType_TrtEffect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3TreasureBoxStatusType

GPBEnumDescriptor *PB3TreasureBoxStatusType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TbstNone\000TbstCreate\000TbstOpen\000TbstFinishe"
        "d\000TbstVanish\000TbstEnd\000";
    static const int32_t values[] = {
        PB3TreasureBoxStatusType_TbstNone,
        PB3TreasureBoxStatusType_TbstCreate,
        PB3TreasureBoxStatusType_TbstOpen,
        PB3TreasureBoxStatusType_TbstFinished,
        PB3TreasureBoxStatusType_TbstVanish,
        PB3TreasureBoxStatusType_TbstEnd,
    };
    static const char *extraTextFormatInfo = "\006\000d\204\000\001d\206\000\002d\204\000\003d\210\000\004d\206\000\005d\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3TreasureBoxStatusType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3TreasureBoxStatusType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3TreasureBoxStatusType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3TreasureBoxStatusType_TbstNone:
    case PB3TreasureBoxStatusType_TbstCreate:
    case PB3TreasureBoxStatusType_TbstOpen:
    case PB3TreasureBoxStatusType_TbstFinished:
    case PB3TreasureBoxStatusType_TbstVanish:
    case PB3TreasureBoxStatusType_TbstEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3GiftShow

@implementation PB3GiftShow

@dynamic playerId;
@dynamic giftId;
@dynamic amount;
@dynamic gold;

typedef struct PB3GiftShow__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  uint32_t amount;
  int64_t playerId;
  uint64_t gold;
} PB3GiftShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftShow_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftShow__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftShow_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftShow__storage_, giftId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftShow_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftShow__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftShow_FieldNumber_Gold,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftShow__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftShow class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfigItem

@implementation PB3GiftConfigItem

@dynamic giftId;
@dynamic categoryId;
@dynamic imageURL;
@dynamic imgSmallAnim;
@dynamic mutAnimationURL;
@dynamic version;
@dynamic duration;
@dynamic name;
@dynamic giftDescription;
@dynamic price;
@dynamic giftType;
@dynamic transfer;
@dynamic dynamic;
@dynamic giftWealthLevel;
@dynamic showInRoom;
@dynamic isWeekGift;
@dynamic presentType;
@dynamic type;
@dynamic getActivitMark;
@dynamic roomPattron;
@dynamic sort;
@dynamic giftDetail;
@dynamic funType;
@dynamic funArgs;
@dynamic roomIds;
@dynamic roomTips;
@dynamic classify;
@dynamic begin;
@dynamic end;
@dynamic discountMark;
@dynamic discountPrice;
@dynamic boxCountdown;
@dynamic giftNumberArray, giftNumberArray_Count;
@dynamic showInGiftDetail;
@dynamic allSend;
@dynamic getActivitMark2;
@dynamic pcGiftImage;
@dynamic pcActivityMark;
@dynamic pcActivityMark2;
@dynamic extraData;
@dynamic isMaskOn;
@dynamic isCanBuy;
@dynamic getWay;
@dynamic giftNobilityLevel;
@dynamic showPrice;
@dynamic router;
@dynamic appletsAnimationURL;
@dynamic appletsDuration;
@dynamic appletsGiftType;
@dynamic appletsMask;
@dynamic isHeadlineProperty;
@dynamic hasDescImage, descImage;

typedef struct PB3GiftConfigItem__storage_ {
  uint32_t _has_storage_[2];
  uint32_t giftId;
  uint32_t categoryId;
  uint32_t price;
  uint32_t giftType;
  uint32_t transfer;
  uint32_t dynamic;
  uint32_t giftWealthLevel;
  uint32_t presentType;
  PB3GiftType type;
  uint32_t roomPattron;
  uint32_t sort;
  uint32_t giftDetail;
  uint32_t funType;
  int32_t classify;
  uint32_t discountPrice;
  uint32_t boxCountdown;
  int32_t giftNobilityLevel;
  int32_t appletsDuration;
  int32_t appletsGiftType;
  NSString *imageURL;
  NSString *imgSmallAnim;
  NSString *mutAnimationURL;
  NSString *version;
  NSString *name;
  NSString *giftDescription;
  NSString *getActivitMark;
  NSString *funArgs;
  NSString *roomIds;
  NSString *roomTips;
  NSString *discountMark;
  GPBInt32Array *giftNumberArray;
  NSString *getActivitMark2;
  NSString *pcGiftImage;
  NSString *pcActivityMark;
  NSString *pcActivityMark2;
  NSData *extraData;
  NSString *getWay;
  NSString *router;
  NSString *appletsAnimationURL;
  PB3GiftDescriptionImage *descImage;
  uint64_t duration;
  int64_t begin;
  int64_t end;
} PB3GiftConfigItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "categoryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_CategoryId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, categoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_ImageURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgSmallAnim",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_ImgSmallAnim,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, imgSmallAnim),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mutAnimationURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_MutAnimationURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, mutAnimationURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Version,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Duration,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Name,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftDescription",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GiftDescription,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, giftDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Price,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GiftType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, giftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "transfer",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Transfer,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dynamic",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Dynamic,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, dynamic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftWealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GiftWealthLevel,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, giftWealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "showInRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_ShowInRoom,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isWeekGift",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_IsWeekGift,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "presentType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_PresentType,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, presentType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3GiftType_EnumDescriptor,
        .number = PB3GiftConfigItem_FieldNumber_Type,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "getActivitMark",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GetActivitMark,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, getActivitMark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomPattron",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_RoomPattron,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, roomPattron),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Sort,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftDetail",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GiftDetail,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, giftDetail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "funType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_FunType,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, funType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "funArgs",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_FunArgs,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, funArgs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomIds",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_RoomIds,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, roomIds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_RoomTips,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, roomTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "classify",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Classify,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, classify),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "begin",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Begin,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, begin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_End,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, end),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "discountMark",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_DiscountMark,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, discountMark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "discountPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_DiscountPrice,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, discountPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "boxCountdown",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_BoxCountdown,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, boxCountdown),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNumberArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GiftNumberArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, giftNumberArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "showInGiftDetail",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_ShowInGiftDetail,
        .hasIndex = 34,
        .offset = 35,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "allSend",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_AllSend,
        .hasIndex = 36,
        .offset = 37,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "getActivitMark2",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GetActivitMark2,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, getActivitMark2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcGiftImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_PcGiftImage,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, pcGiftImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcActivityMark",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_PcActivityMark,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, pcActivityMark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcActivityMark2",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_PcActivityMark2,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, pcActivityMark2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extraData",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_ExtraData,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, extraData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "isMaskOn",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_IsMaskOn,
        .hasIndex = 43,
        .offset = 44,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isCanBuy",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_IsCanBuy,
        .hasIndex = 45,
        .offset = 46,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "getWay",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GetWay,
        .hasIndex = 47,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, getWay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftNobilityLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_GiftNobilityLevel,
        .hasIndex = 48,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, giftNobilityLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "showPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_ShowPrice,
        .hasIndex = 49,
        .offset = 50,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "router",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_Router,
        .hasIndex = 51,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, router),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appletsAnimationURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_AppletsAnimationURL,
        .hasIndex = 52,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, appletsAnimationURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appletsDuration",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_AppletsDuration,
        .hasIndex = 53,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, appletsDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "appletsGiftType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_AppletsGiftType,
        .hasIndex = 54,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, appletsGiftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "appletsMask",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_AppletsMask,
        .hasIndex = 55,
        .offset = 56,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isHeadlineProperty",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigItem_FieldNumber_IsHeadlineProperty,
        .hasIndex = 57,
        .offset = 58,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "descImage",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftDescriptionImage),
        .number = PB3GiftConfigItem_FieldNumber_DescImage,
        .hasIndex = 59,
        .offset = (uint32_t)offsetof(PB3GiftConfigItem__storage_, descImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfigItem class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftConfigItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\005\241!!\000\005\003\251\241!!\000/\007\251\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftConfigItem_Type_RawValue(PB3GiftConfigItem *message) {
  GPBDescriptor *descriptor = [PB3GiftConfigItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftConfigItem_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftConfigItem_Type_RawValue(PB3GiftConfigItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftConfigItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftConfigItem_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftTreasureBoxExtraCfg

@implementation PB3GiftTreasureBoxExtraCfg

@dynamic bannerIconURL;
@dynamic bannerContent;
@dynamic bannerContentColor;
@dynamic bannerPlayerNameColor;

typedef struct PB3GiftTreasureBoxExtraCfg__storage_ {
  uint32_t _has_storage_[1];
  NSString *bannerIconURL;
  NSString *bannerContent;
  NSString *bannerContentColor;
  NSString *bannerPlayerNameColor;
} PB3GiftTreasureBoxExtraCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bannerIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTreasureBoxExtraCfg_FieldNumber_BannerIconURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftTreasureBoxExtraCfg__storage_, bannerIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bannerContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTreasureBoxExtraCfg_FieldNumber_BannerContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftTreasureBoxExtraCfg__storage_, bannerContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bannerContentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTreasureBoxExtraCfg_FieldNumber_BannerContentColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftTreasureBoxExtraCfg__storage_, bannerContentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bannerPlayerNameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTreasureBoxExtraCfg_FieldNumber_BannerPlayerNameColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftTreasureBoxExtraCfg__storage_, bannerPlayerNameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftTreasureBoxExtraCfg class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftTreasureBoxExtraCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftExtraNotice

@implementation PB3GiftExtraNotice

@dynamic showType;
@dynamic contentPrefix;
@dynamic nameColor;
@dynamic contentColor;
@dynamic inputBackgroundURL;
@dynamic inputButtonURL;
@dynamic inputShowBackgroundURL;
@dynamic inputTitleColor;
@dynamic inputPlaceholder;
@dynamic scrollBackgroundURL;
@dynamic barrageGraduateColorStart;
@dynamic barrageGraduateColorEnd;
@dynamic showContentColor;
@dynamic isCard;
@dynamic cardBackgroundURL;
@dynamic cardButtonURL;
@dynamic cardTextColor;
@dynamic cardThumbnailURL;
@dynamic isBroadcastBg;
@dynamic broadcastBgColorStart;
@dynamic broadcastBgColorEnd;
@dynamic broadcastBgTransparencyStart;
@dynamic pcInputBackgroundURL;
@dynamic pcInputButtonURL;
@dynamic pcInputShowBackgroundURL;
@dynamic pcScrollBackgroundURL;
@dynamic pcCardBackgroundURL;
@dynamic pcCardButtonURL;
@dynamic pcCardThumbnailURL;
@dynamic isAllRoom;

typedef struct PB3GiftExtraNotice__storage_ {
  uint32_t _has_storage_[2];
  PB3GiftNoticeShowType showType;
  int32_t broadcastBgTransparencyStart;
  NSString *contentPrefix;
  NSString *nameColor;
  NSString *contentColor;
  NSString *inputBackgroundURL;
  NSString *inputButtonURL;
  NSString *inputShowBackgroundURL;
  NSString *inputTitleColor;
  NSString *inputPlaceholder;
  NSString *scrollBackgroundURL;
  NSString *barrageGraduateColorStart;
  NSString *barrageGraduateColorEnd;
  NSString *showContentColor;
  NSString *cardBackgroundURL;
  NSString *cardButtonURL;
  NSString *cardTextColor;
  NSString *cardThumbnailURL;
  NSString *broadcastBgColorStart;
  NSString *broadcastBgColorEnd;
  NSString *pcInputBackgroundURL;
  NSString *pcInputButtonURL;
  NSString *pcInputShowBackgroundURL;
  NSString *pcScrollBackgroundURL;
  NSString *pcCardBackgroundURL;
  NSString *pcCardButtonURL;
  NSString *pcCardThumbnailURL;
} PB3GiftExtraNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showType",
        .dataTypeSpecific.enumDescFunc = PB3GiftNoticeShowType_EnumDescriptor,
        .number = PB3GiftExtraNotice_FieldNumber_ShowType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "contentPrefix",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_ContentPrefix,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, contentPrefix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_NameColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, nameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_ContentColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, contentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_InputBackgroundURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, inputBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputButtonURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_InputButtonURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, inputButtonURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputShowBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_InputShowBackgroundURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, inputShowBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputTitleColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_InputTitleColor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, inputTitleColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputPlaceholder",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_InputPlaceholder,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, inputPlaceholder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scrollBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_ScrollBackgroundURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, scrollBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "barrageGraduateColorStart",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_BarrageGraduateColorStart,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, barrageGraduateColorStart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "barrageGraduateColorEnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_BarrageGraduateColorEnd,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, barrageGraduateColorEnd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showContentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_ShowContentColor,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, showContentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isCard",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_IsCard,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cardBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_CardBackgroundURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, cardBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardButtonURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_CardButtonURL,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, cardButtonURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_CardTextColor,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, cardTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardThumbnailURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_CardThumbnailURL,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, cardThumbnailURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isBroadcastBg",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_IsBroadcastBg,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "broadcastBgColorStart",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_BroadcastBgColorStart,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, broadcastBgColorStart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "broadcastBgColorEnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_BroadcastBgColorEnd,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, broadcastBgColorEnd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "broadcastBgTransparencyStart",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_BroadcastBgTransparencyStart,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, broadcastBgTransparencyStart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pcInputBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_PcInputBackgroundURL,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, pcInputBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcInputButtonURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_PcInputButtonURL,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, pcInputButtonURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcInputShowBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_PcInputShowBackgroundURL,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, pcInputShowBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcScrollBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_PcScrollBackgroundURL,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, pcScrollBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCardBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_PcCardBackgroundURL,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, pcCardBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCardButtonURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_PcCardButtonURL,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, pcCardButtonURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCardThumbnailURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_PcCardThumbnailURL,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3GiftExtraNotice__storage_, pcCardThumbnailURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAllRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftExtraNotice_FieldNumber_IsAllRoom,
        .hasIndex = 31,
        .offset = 32,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftExtraNotice class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftExtraNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\005\005\252\241!!\000\006\005\246\241!!\000\007\005\244\252\241!!\000\n\006\252\241!!\000\017\004\252\241!!\000\020\004\246"
        "\241!!\000\022\004\251\241!!\000\027\002\245\252\241!!\000\030\002\245\246\241!!\000\031\002\245\244\252\241!!\000\032\002\246\252"
        "\241!!\000\033\002\244\252\241!!\000\034\002\244\246\241!!\000\035\002\244\251\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftExtraNotice_ShowType_RawValue(PB3GiftExtraNotice *message) {
  GPBDescriptor *descriptor = [PB3GiftExtraNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftExtraNotice_FieldNumber_ShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftExtraNotice_ShowType_RawValue(PB3GiftExtraNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftExtraNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftExtraNotice_FieldNumber_ShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3NewUserGiftItem

@implementation PB3NewUserGiftItem

@dynamic giftId;
@dynamic image;
@dynamic name;
@dynamic giftDescription;
@dynamic newUserGift;
@dynamic number;
@dynamic windowIcon;

typedef struct PB3NewUserGiftItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  uint32_t newUserGift;
  uint32_t number;
  NSString *image;
  NSString *name;
  NSString *giftDescription;
  NSString *windowIcon;
} PB3NewUserGiftItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserGiftItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserGiftItem_FieldNumber_Image,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItem__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserGiftItem_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftDescription",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserGiftItem_FieldNumber_GiftDescription,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItem__storage_, giftDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newUserGift",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserGiftItem_FieldNumber_NewUserGift,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItem__storage_, newUserGift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserGiftItem_FieldNumber_Number,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItem__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "windowIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserGiftItem_FieldNumber_WindowIcon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItem__storage_, windowIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewUserGiftItem class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewUserGiftItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfigItemList

@implementation PB3GiftConfigItemList

@dynamic giftsArray, giftsArray_Count;
@dynamic dayOneArray, dayOneArray_Count;
@dynamic dayTowArray, dayTowArray_Count;
@dynamic dayThreeArray, dayThreeArray_Count;
@dynamic firstCharageArray, firstCharageArray_Count;

typedef struct PB3GiftConfigItemList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftsArray;
  NSMutableArray *dayOneArray;
  NSMutableArray *dayTowArray;
  NSMutableArray *dayThreeArray;
  NSMutableArray *firstCharageArray;
} PB3GiftConfigItemList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftConfigItem),
        .number = PB3GiftConfigItemList_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigItemList__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayOneArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigItemList_FieldNumber_DayOneArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigItemList__storage_, dayOneArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayTowArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigItemList_FieldNumber_DayTowArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigItemList__storage_, dayTowArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayThreeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigItemList_FieldNumber_DayThreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigItemList__storage_, dayThreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstCharageArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigItemList_FieldNumber_FirstCharageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigItemList__storage_, firstCharageArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfigItemList class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftConfigItemList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\000dayOne\000\003\000dayTow\000\004\000dayThree\000\005\000firstCha"
        "rage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftPresentReq

@implementation PB3GiftPresentReq

@dynamic toId;
@dynamic giftEntry;
@dynamic giftNum;
@dynamic msg;
@dynamic auctionId;
@dynamic source;
@dynamic content;
@dynamic imGiftType;

typedef struct PB3GiftPresentReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftEntry;
  uint32_t giftNum;
  PB3SendGiftSource source;
  PB3IMGiftType imGiftType;
  NSString *msg;
  NSString *auctionId;
  NSString *content;
  int64_t toId;
} PB3GiftPresentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentReq_FieldNumber_ToId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentReq_FieldNumber_GiftEntry,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentReq_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentReq_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "auctionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentReq_FieldNumber_AuctionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, auctionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.enumDescFunc = PB3SendGiftSource_EnumDescriptor,
        .number = PB3GiftPresentReq_FieldNumber_Source,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentReq_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imGiftType",
        .dataTypeSpecific.enumDescFunc = PB3IMGiftType_EnumDescriptor,
        .number = PB3GiftPresentReq_FieldNumber_ImGiftType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftPresentReq__storage_, imGiftType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftPresentReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftPresentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftPresentReq_Source_RawValue(PB3GiftPresentReq *message) {
  GPBDescriptor *descriptor = [PB3GiftPresentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftPresentReq_FieldNumber_Source];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftPresentReq_Source_RawValue(PB3GiftPresentReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftPresentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftPresentReq_FieldNumber_Source];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GiftPresentReq_ImGiftType_RawValue(PB3GiftPresentReq *message) {
  GPBDescriptor *descriptor = [PB3GiftPresentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftPresentReq_FieldNumber_ImGiftType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftPresentReq_ImGiftType_RawValue(PB3GiftPresentReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftPresentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftPresentReq_FieldNumber_ImGiftType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftBatchPresentReq

@implementation PB3GiftBatchPresentReq

@dynamic toIdsArray, toIdsArray_Count;
@dynamic giftEntry;
@dynamic giftNum;
@dynamic msg;
@dynamic auctionId;

typedef struct PB3GiftBatchPresentReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftEntry;
  uint32_t giftNum;
  GPBInt64Array *toIdsArray;
  NSString *msg;
  NSString *auctionId;
} PB3GiftBatchPresentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBatchPresentReq_FieldNumber_ToIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftBatchPresentReq__storage_, toIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBatchPresentReq_FieldNumber_GiftEntry,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftBatchPresentReq__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBatchPresentReq_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftBatchPresentReq__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBatchPresentReq_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftBatchPresentReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "auctionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBatchPresentReq_FieldNumber_AuctionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftBatchPresentReq__storage_, auctionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBatchPresentReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBatchPresentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftPresentRes

@implementation PB3GiftPresentRes

@dynamic opType;
@dynamic toIdsArray, toIdsArray_Count;
@dynamic id_p;
@dynamic name;
@dynamic icon;
@dynamic wealthLevel;
@dynamic giftEntry;
@dynamic giftNum;
@dynamic giftListArray, giftListArray_Count;
@dynamic boxId;
@dynamic boxNum;

typedef struct PB3GiftPresentRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opType;
  uint32_t wealthLevel;
  uint32_t giftEntry;
  uint32_t giftNum;
  uint32_t boxId;
  uint32_t boxNum;
  GPBInt64Array *toIdsArray;
  NSString *name;
  NSString *icon;
  GPBUInt32Array *giftListArray;
  int64_t id_p;
} PB3GiftPresentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, opType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "toIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_ToIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, toIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_WealthLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_GiftEntry,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_GiftNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_GiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, giftListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "boxId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_BoxId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, boxId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "boxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftPresentRes_FieldNumber_BoxNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftPresentRes__storage_, boxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftPresentRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftPresentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftBroadcast

@implementation PB3GiftBroadcast

@dynamic id_p;
@dynamic name;
@dynamic giftEntry;
@dynamic icon;
@dynamic wealthLevel;
@dynamic receiveName;
@dynamic giftNum;
@dynamic receiveId;
@dynamic receiveIcon;
@dynamic roomId2;
@dynamic type;
@dynamic roomId;
@dynamic bgType;
@dynamic boxId;
@dynamic boxNum;
@dynamic giftType;
@dynamic effectId;
@dynamic timeStamp;
@dynamic roomName;
@dynamic msg;
@dynamic onlyShowMe;
@dynamic boxArray, boxArray_Count;
@dynamic broadcastMsg;
@dynamic broadCastTitle;
@dynamic noShow;
@dynamic isEntryRoom;
@dynamic isShowBanner;

typedef struct PB3GiftBroadcast__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftEntry;
  uint32_t wealthLevel;
  uint32_t giftNum;
  PB3GiftBgType bgType;
  uint32_t boxId;
  uint32_t boxNum;
  PB3GiftType giftType;
  uint32_t effectId;
  NSString *name;
  NSString *icon;
  NSString *receiveName;
  NSString *receiveIcon;
  NSString *roomName;
  NSString *msg;
  NSMutableArray *boxArray;
  NSString *broadcastMsg;
  NSString *broadCastTitle;
  int64_t id_p;
  int64_t receiveId;
  int64_t roomId2;
  int64_t roomId;
  uint64_t timeStamp;
} PB3GiftBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_GiftEntry,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_WealthLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "receiveName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_ReceiveName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, receiveName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_GiftNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "receiveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_ReceiveId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, receiveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "receiveIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_ReceiveIcon,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, receiveIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_RoomId2,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, roomId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_Type,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_RoomId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "bgType",
        .dataTypeSpecific.enumDescFunc = PB3GiftBgType_EnumDescriptor,
        .number = PB3GiftBroadcast_FieldNumber_BgType,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, bgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "boxId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_BoxId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, boxId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "boxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_BoxNum,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, boxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftType",
        .dataTypeSpecific.enumDescFunc = PB3GiftType_EnumDescriptor,
        .number = PB3GiftBroadcast_FieldNumber_GiftType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, giftType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_EffectId,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_TimeStamp,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, timeStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_RoomName,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_Msg,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "onlyShowMe",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_OnlyShowMe,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "boxArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftBoxNew),
        .number = PB3GiftBroadcast_FieldNumber_BoxArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, boxArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "broadcastMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_BroadcastMsg,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, broadcastMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "broadCastTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_BroadCastTitle,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3GiftBroadcast__storage_, broadCastTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_NoShow,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isEntryRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_IsEntryRoom,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShowBanner",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBroadcast_FieldNumber_IsShowBanner,
        .hasIndex = 29,
        .offset = 30,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\031\014\000\032\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftBroadcast_BgType_RawValue(PB3GiftBroadcast *message) {
  GPBDescriptor *descriptor = [PB3GiftBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBroadcast_FieldNumber_BgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftBroadcast_BgType_RawValue(PB3GiftBroadcast *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBroadcast_FieldNumber_BgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GiftBroadcast_GiftType_RawValue(PB3GiftBroadcast *message) {
  GPBDescriptor *descriptor = [PB3GiftBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBroadcast_FieldNumber_GiftType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftBroadcast_GiftType_RawValue(PB3GiftBroadcast *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBroadcast_FieldNumber_GiftType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3InteractionGiftBroadcast

@implementation PB3InteractionGiftBroadcast

@dynamic id_p;
@dynamic name;
@dynamic icon;
@dynamic recListArray, recListArray_Count;
@dynamic giftListArray, giftListArray_Count;
@dynamic interactionName;
@dynamic interactionNum;
@dynamic roomId;
@dynamic bgImg;
@dynamic songListArray, songListArray_Count;

typedef struct PB3InteractionGiftBroadcast__storage_ {
  uint32_t _has_storage_[1];
  int32_t interactionNum;
  NSString *name;
  NSString *icon;
  NSMutableArray *recListArray;
  NSMutableArray *giftListArray;
  NSString *interactionName;
  NSString *bgImg;
  NSMutableArray *songListArray;
  int64_t id_p;
  int64_t roomId;
} PB3InteractionGiftBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IAReceiver),
        .number = PB3InteractionGiftBroadcast_FieldNumber_RecListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, recListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IAGift),
        .number = PB3InteractionGiftBroadcast_FieldNumber_GiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, giftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interactionName",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_InteractionName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, interactionName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "interactionNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_InteractionNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, interactionNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_RoomId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "bgImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_BgImg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, bgImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "songListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionGiftBroadcast_FieldNumber_SongListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionGiftBroadcast__storage_, songListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionGiftBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionGiftBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IAReceiver

@implementation PB3IAReceiver

@dynamic id_p;
@dynamic name;

typedef struct PB3IAReceiver__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  int64_t id_p;
} PB3IAReceiver__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IAReceiver_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IAReceiver__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IAReceiver_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IAReceiver__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IAReceiver class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IAReceiver__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IAGift

@implementation PB3IAGift

@dynamic giftEntry;
@dynamic giftNum;

typedef struct PB3IAGift__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftEntry;
  uint32_t giftNum;
} PB3IAGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3IAGift_FieldNumber_GiftEntry,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IAGift__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3IAGift_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IAGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IAGift class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IAGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfigReq

@implementation PB3GiftConfigReq


typedef struct PB3GiftConfigReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfigReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftConfigReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfigRes

@implementation PB3GiftConfigRes

@dynamic giftsArray, giftsArray_Count;
@dynamic dayOneArray, dayOneArray_Count;
@dynamic dayTowArray, dayTowArray_Count;
@dynamic dayThreeArray, dayThreeArray_Count;
@dynamic firstCharageArray, firstCharageArray_Count;
@dynamic classifyListArray, classifyListArray_Count;
@dynamic newClassifyListArray, newClassifyListArray_Count;

typedef struct PB3GiftConfigRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftsArray;
  NSMutableArray *dayOneArray;
  NSMutableArray *dayTowArray;
  NSMutableArray *dayThreeArray;
  NSMutableArray *firstCharageArray;
  NSMutableArray *classifyListArray;
  NSMutableArray *newClassifyListArray;
} PB3GiftConfigRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftConfigItem),
        .number = PB3GiftConfigRes_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigRes__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayOneArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigRes_FieldNumber_DayOneArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigRes__storage_, dayOneArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayTowArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigRes_FieldNumber_DayTowArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigRes__storage_, dayTowArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayThreeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigRes_FieldNumber_DayThreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigRes__storage_, dayThreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstCharageArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3GiftConfigRes_FieldNumber_FirstCharageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigRes__storage_, firstCharageArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "classifyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftClassify),
        .number = PB3GiftConfigRes_FieldNumber_ClassifyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigRes__storage_, classifyListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newClassifyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewGiftClassify),
        .number = PB3GiftConfigRes_FieldNumber_NewClassifyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigRes__storage_, newClassifyListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfigRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftConfigRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\000dayOne\000\003\000dayTow\000\004\000dayThree\000\005\000firstCha"
        "rage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftRoomGiftReq

@implementation PB3GiftRoomGiftReq

@dynamic roomId;

typedef struct PB3GiftRoomGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3GiftRoomGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftRoomGiftReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftRoomGiftReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftRoomGiftReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftRoomGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftRoomGiftRes

@implementation PB3GiftRoomGiftRes

@dynamic roomId;
@dynamic listArray, listArray_Count;
@dynamic giftListArray, giftListArray_Count;
@dynamic labelsArray, labelsArray_Count;

typedef struct PB3GiftRoomGiftRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *listArray;
  NSMutableArray *giftListArray;
  NSMutableArray *labelsArray;
  int64_t roomId;
} PB3GiftRoomGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftRoomGiftRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftRoomGiftRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftRoomGiftRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftRoomGiftRes__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftRoom),
        .number = PB3GiftRoomGiftRes_FieldNumber_GiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftRoomGiftRes__storage_, giftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftTimingLabel),
        .number = PB3GiftRoomGiftRes_FieldNumber_LabelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftRoomGiftRes__storage_, labelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftRoomGiftRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftRoomGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftRoom

@implementation PB3GiftRoom

@dynamic giftId;
@dynamic confListArray, confListArray_Count;
@dynamic giftMinId;
@dynamic endTime;

typedef struct PB3GiftRoom__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftMinId;
  NSMutableArray *confListArray;
  int64_t endTime;
} PB3GiftRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftRoom_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftRoom__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftUpConf),
        .number = PB3GiftRoom_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftRoom__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftMinId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftRoom_FieldNumber_GiftMinId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftRoom__storage_, giftMinId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftRoom_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftRoom__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftRoom class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftTimingLabel

@implementation PB3GiftTimingLabel

@dynamic giftId;
@dynamic labelListArray, labelListArray_Count;

typedef struct PB3GiftTimingLabel__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  NSMutableArray *labelListArray;
} PB3GiftTimingLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTimingLabel_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftTimingLabel__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "labelListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TimingLabel),
        .number = PB3GiftTimingLabel_FieldNumber_LabelListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftTimingLabel__storage_, labelListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftTimingLabel class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftTimingLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TimingLabel

@implementation PB3TimingLabel

@dynamic URL;
@dynamic stopStamp;
@dynamic startTamp;
@dynamic pcURL;

typedef struct PB3TimingLabel__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
  NSString *pcURL;
  int64_t stopStamp;
  int64_t startTamp;
} PB3TimingLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimingLabel_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TimingLabel__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stopStamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimingLabel_FieldNumber_StopStamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TimingLabel__storage_, stopStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "startTamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimingLabel_FieldNumber_StartTamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TimingLabel__storage_, startTamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "pcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimingLabel_FieldNumber_PcURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TimingLabel__storage_, pcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TimingLabel class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TimingLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001!!!\000\004\002\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftDynamic

@implementation PB3GiftDynamic

@dynamic type;
@dynamic giftId;
@dynamic URL;
@dynamic val1;
@dynamic val2;
@dynamic val3;
@dynamic str1;
@dynamic str2;
@dynamic str3;

typedef struct PB3GiftDynamic__storage_ {
  uint32_t _has_storage_[1];
  PB3GiftDynamicType type;
  uint32_t giftId;
  uint32_t val1;
  uint32_t val2;
  uint32_t val3;
  NSString *URL;
  NSString *str1;
  NSString *str2;
  NSString *str3;
} PB3GiftDynamic__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3GiftDynamicType_EnumDescriptor,
        .number = PB3GiftDynamic_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "val1",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_Val1,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, val1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "val2",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_Val2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, val2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "val3",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_Val3,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, val3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "str1",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_Str1,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, str1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "str2",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_Str2,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, str2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "str3",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDynamic_FieldNumber_Str3,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftDynamic__storage_, str3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDynamic class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftDynamic__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftDynamic_Type_RawValue(PB3GiftDynamic *message) {
  GPBDescriptor *descriptor = [PB3GiftDynamic descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftDynamic_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftDynamic_Type_RawValue(PB3GiftDynamic *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftDynamic descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftDynamic_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftDynamicReq

@implementation PB3GiftDynamicReq


typedef struct PB3GiftDynamicReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftDynamicReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDynamicReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftDynamicReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftDynamicRes

@implementation PB3GiftDynamicRes

@dynamic listArray, listArray_Count;

typedef struct PB3GiftDynamicRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GiftDynamicRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftDynamic),
        .number = PB3GiftDynamicRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftDynamicRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDynamicRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftDynamicRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftNewUserReq

@implementation PB3GiftNewUserReq


typedef struct PB3GiftNewUserReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftNewUserReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftNewUserReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftNewUserReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftNewUserRes

@implementation PB3GiftNewUserRes

@dynamic listArray, listArray_Count;
@dynamic timeLength;

typedef struct PB3GiftNewUserRes__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *listArray;
  int64_t timeLength;
} PB3GiftNewUserRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftNewUserRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftNewUserRes__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeLength",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftNewUserRes_FieldNumber_TimeLength,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftNewUserRes__storage_, timeLength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftNewUserRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftNewUserRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftNewUserRewardReq

@implementation PB3GiftNewUserRewardReq

@dynamic day;

typedef struct PB3GiftNewUserRewardReq__storage_ {
  uint32_t _has_storage_[1];
  PB3GiftNewUserDay day;
} PB3GiftNewUserRewardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "day",
        .dataTypeSpecific.enumDescFunc = PB3GiftNewUserDay_EnumDescriptor,
        .number = PB3GiftNewUserRewardReq_FieldNumber_Day,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftNewUserRewardReq__storage_, day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftNewUserRewardReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftNewUserRewardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftNewUserRewardReq_Day_RawValue(PB3GiftNewUserRewardReq *message) {
  GPBDescriptor *descriptor = [PB3GiftNewUserRewardReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftNewUserRewardReq_FieldNumber_Day];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftNewUserRewardReq_Day_RawValue(PB3GiftNewUserRewardReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftNewUserRewardReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftNewUserRewardReq_FieldNumber_Day];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftNewUserRewardRes

@implementation PB3GiftNewUserRewardRes

@dynamic listArray, listArray_Count;

typedef struct PB3GiftNewUserRewardRes__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *listArray;
} PB3GiftNewUserRewardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftNewUserRewardRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftNewUserRewardRes__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftNewUserRewardRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftNewUserRewardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferGiftReq

@implementation PB3TransferGiftReq

@dynamic toId;
@dynamic giftEntry;
@dynamic giftNum;

typedef struct PB3TransferGiftReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftEntry;
  uint32_t giftNum;
  int64_t toId;
} PB3TransferGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferGiftReq_FieldNumber_ToId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TransferGiftReq__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferGiftReq_FieldNumber_GiftEntry,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TransferGiftReq__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferGiftReq_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TransferGiftReq__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferGiftReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TransferGiftRes

@implementation PB3TransferGiftRes

@dynamic flag;
@dynamic toId;
@dynamic giftEntry;
@dynamic giftNum;

typedef struct PB3TransferGiftRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftEntry;
  uint32_t giftNum;
  int64_t toId;
} PB3TransferGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferGiftRes_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferGiftRes_FieldNumber_ToId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TransferGiftRes__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferGiftRes_FieldNumber_GiftEntry,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TransferGiftRes__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TransferGiftRes_FieldNumber_GiftNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TransferGiftRes__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TransferGiftRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TransferGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MagicGiftBroadcast

@implementation PB3MagicGiftBroadcast

@dynamic id_p;
@dynamic name;
@dynamic giftId;
@dynamic giftNum;
@dynamic receiveName;
@dynamic receiveId;
@dynamic effectId;
@dynamic effectName;
@dynamic timeoutArray, timeoutArray_Count;

typedef struct PB3MagicGiftBroadcast__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  uint32_t giftNum;
  int32_t effectId;
  NSString *name;
  NSString *receiveName;
  NSString *effectName;
  GPBInt32Array *timeoutArray;
  int64_t id_p;
  int64_t receiveId;
} PB3MagicGiftBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_GiftNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "receiveName",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_ReceiveName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, receiveName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_ReceiveId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, receiveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_EffectId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectName",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_EffectName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, effectName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeoutArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3MagicGiftBroadcast_FieldNumber_TimeoutArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MagicGiftBroadcast__storage_, timeoutArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MagicGiftBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MagicGiftBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftWallItem

@implementation PB3GiftWallItem

@dynamic giftId;
@dynamic amount;
@dynamic gold;
@dynamic isCollect;
@dynamic senderId;
@dynamic senderIcon;

typedef struct PB3GiftWallItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  uint32_t amount;
  uint32_t gold;
  int32_t isCollect;
  NSString *senderIcon;
  int64_t senderId;
} PB3GiftWallItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftWallItem__storage_, giftId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallItem_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftWallItem__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallItem_FieldNumber_Gold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftWallItem__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isCollect",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallItem_FieldNumber_IsCollect,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftWallItem__storage_, isCollect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "senderId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallItem_FieldNumber_SenderId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftWallItem__storage_, senderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "senderIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallItem_FieldNumber_SenderIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftWallItem__storage_, senderIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftWallItem class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftWallItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\006\000\004\t\000\005\010\000\006\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGiftWallReq

@implementation PB3GetGiftWallReq

@dynamic playerId;
@dynamic wallType;

typedef struct PB3GetGiftWallReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t wallType;
  int64_t playerId;
} PB3GetGiftWallReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGiftWallReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGiftWallReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wallType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGiftWallReq_FieldNumber_WallType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetGiftWallReq__storage_, wallType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGiftWallReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGiftWallReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGiftWallRes

@implementation PB3GetGiftWallRes

@dynamic giftWallArray, giftWallArray_Count;
@dynamic wallType;

typedef struct PB3GetGiftWallRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t wallType;
  NSMutableArray *giftWallArray;
} PB3GetGiftWallRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftWallArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftWallItem),
        .number = PB3GetGiftWallRes_FieldNumber_GiftWallArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetGiftWallRes__storage_, giftWallArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wallType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGiftWallRes_FieldNumber_WallType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGiftWallRes__storage_, wallType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGiftWallRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGiftWallRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000giftWall\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetAllGiftWallReq

@implementation PB3GetAllGiftWallReq

@dynamic playerId;
@dynamic wallType;

typedef struct PB3GetAllGiftWallReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t wallType;
  int64_t playerId;
} PB3GetAllGiftWallReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetAllGiftWallReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetAllGiftWallReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wallType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetAllGiftWallReq_FieldNumber_WallType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetAllGiftWallReq__storage_, wallType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetAllGiftWallReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetAllGiftWallReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetAllGiftWallRes

@implementation PB3GetAllGiftWallRes

@dynamic giftWallArray, giftWallArray_Count;
@dynamic wallType;

typedef struct PB3GetAllGiftWallRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t wallType;
  NSMutableArray *giftWallArray;
} PB3GetAllGiftWallRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftWallArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftWallItem),
        .number = PB3GetAllGiftWallRes_FieldNumber_GiftWallArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetAllGiftWallRes__storage_, giftWallArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wallType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetAllGiftWallRes_FieldNumber_WallType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetAllGiftWallRes__storage_, wallType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetAllGiftWallRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetAllGiftWallRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000giftWall\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftWallPersonalRankReq

@implementation PB3GiftWallPersonalRankReq

@dynamic playerId;

typedef struct PB3GiftWallPersonalRankReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GiftWallPersonalRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallPersonalRankReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRankReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftWallPersonalRankReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftWallPersonalRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftWallPersonalRank

@implementation PB3GiftWallPersonalRank

@dynamic ticket;
@dynamic index;
@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic playerSex;

typedef struct PB3GiftWallPersonalRank__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType playerSex;
  NSString *playerName;
  NSString *playerIcon;
  int64_t ticket;
  int64_t index;
  int64_t playerId;
} PB3GiftWallPersonalRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallPersonalRank_FieldNumber_Ticket,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRank__storage_, ticket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallPersonalRank_FieldNumber_Index,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRank__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallPersonalRank_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRank__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallPersonalRank_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRank__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftWallPersonalRank_FieldNumber_PlayerIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRank__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerSex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3GiftWallPersonalRank_FieldNumber_PlayerSex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRank__storage_, playerSex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftWallPersonalRank class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftWallPersonalRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftWallPersonalRank_PlayerSex_RawValue(PB3GiftWallPersonalRank *message) {
  GPBDescriptor *descriptor = [PB3GiftWallPersonalRank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftWallPersonalRank_FieldNumber_PlayerSex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftWallPersonalRank_PlayerSex_RawValue(PB3GiftWallPersonalRank *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftWallPersonalRank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftWallPersonalRank_FieldNumber_PlayerSex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftWallPersonalRankRes

@implementation PB3GiftWallPersonalRankRes

@dynamic rankArray, rankArray_Count;
@dynamic hasMyRank, myRank;

typedef struct PB3GiftWallPersonalRankRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankArray;
  PB3GiftWallPersonalRank *myRank;
} PB3GiftWallPersonalRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftWallPersonalRank),
        .number = PB3GiftWallPersonalRankRes_FieldNumber_RankArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRankRes__storage_, rankArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftWallPersonalRank),
        .number = PB3GiftWallPersonalRankRes_FieldNumber_MyRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftWallPersonalRankRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftWallPersonalRankRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftWallPersonalRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillInfo

@implementation PB3BillInfo

@dynamic type;
@dynamic fansId;
@dynamic fansName;
@dynamic fansIcon;
@dynamic giftId;
@dynamic giftNum;
@dynamic gold;
@dynamic createAt;
@dynamic remark;
@dynamic hasMaskInfo, maskInfo;

typedef struct PB3BillInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t giftId;
  uint32_t giftNum;
  int32_t gold;
  NSString *fansName;
  NSString *fansIcon;
  NSString *remark;
  PB3MaskInfo *maskInfo;
  int64_t fansId;
  int64_t createAt;
} PB3BillInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fansId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_FansId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, fansId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fansName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_FansName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, fansName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_FansIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, fansIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_GiftId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_GiftNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_Gold,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_CreateAt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillInfo_FieldNumber_Remark,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskInfo),
        .number = PB3BillInfo_FieldNumber_MaskInfo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BillInfo__storage_, maskInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillInfo class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BillDetailReq

@implementation PB3BillDetailReq

@dynamic type;
@dynamic page;

typedef struct PB3BillDetailReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BillType type;
  int32_t page;
} PB3BillDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillType_EnumDescriptor,
        .number = PB3BillDetailReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillDetailReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillDetailReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillDetailReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillDetailReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillDetailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillDetailReq_Type_RawValue(PB3BillDetailReq *message) {
  GPBDescriptor *descriptor = [PB3BillDetailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillDetailReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillDetailReq_Type_RawValue(PB3BillDetailReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillDetailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillDetailReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillDetailRes

@implementation PB3BillDetailRes

@dynamic type;
@dynamic page;
@dynamic dataArray, dataArray_Count;
@dynamic count;

typedef struct PB3BillDetailRes__storage_ {
  uint32_t _has_storage_[1];
  PB3BillType type;
  int32_t page;
  int32_t count;
  NSMutableArray *dataArray;
} PB3BillDetailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3BillType_EnumDescriptor,
        .number = PB3BillDetailRes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillDetailRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillDetailRes_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillDetailRes__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillInfo),
        .number = PB3BillDetailRes_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BillDetailRes__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillDetailRes_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BillDetailRes__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillDetailRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillDetailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BillDetailRes_Type_RawValue(PB3BillDetailRes *message) {
  GPBDescriptor *descriptor = [PB3BillDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillDetailRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BillDetailRes_Type_RawValue(PB3BillDetailRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BillDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BillDetailRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetGiftChangeNoticeReq

@implementation PB3GetGiftChangeNoticeReq


typedef struct PB3GetGiftChangeNoticeReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetGiftChangeNoticeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGiftChangeNoticeReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetGiftChangeNoticeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGiftChangeNoticeRes

@implementation PB3GetGiftChangeNoticeRes


typedef struct PB3GetGiftChangeNoticeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3GetGiftChangeNoticeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGiftChangeNoticeRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetGiftChangeNoticeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyGiftReq

@implementation PB3BuyGiftReq

@dynamic giftId;
@dynamic amount;

typedef struct PB3BuyGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t amount;
} PB3BuyGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyGiftReq_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyGiftReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyGiftReq_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BuyGiftReq__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyGiftReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyGiftRes

@implementation PB3BuyGiftRes


typedef struct PB3BuyGiftRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BuyGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyGiftRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BuyGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftClassify

@implementation PB3GiftClassify

@dynamic id_p;
@dynamic name;
@dynamic sort;
@dynamic isBag;
@dynamic isDefault;
@dynamic showPlace;
@dynamic haveRed;

typedef struct PB3GiftClassify__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t sort;
  PB3GiftShowPlace showPlace;
  NSString *name;
} PB3GiftClassify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftClassify_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftClassify__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftClassify_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftClassify__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftClassify_FieldNumber_Sort,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftClassify__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isBag",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftClassify_FieldNumber_IsBag,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isDefault",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftClassify_FieldNumber_IsDefault,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showPlace",
        .dataTypeSpecific.enumDescFunc = PB3GiftShowPlace_EnumDescriptor,
        .number = PB3GiftClassify_FieldNumber_ShowPlace,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftClassify__storage_, showPlace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "haveRed",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftClassify_FieldNumber_HaveRed,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftClassify class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftClassify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftClassify_ShowPlace_RawValue(PB3GiftClassify *message) {
  GPBDescriptor *descriptor = [PB3GiftClassify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftClassify_FieldNumber_ShowPlace];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftClassify_ShowPlace_RawValue(PB3GiftClassify *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftClassify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftClassify_FieldNumber_ShowPlace];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3NewGiftClassify

@implementation PB3NewGiftClassify

@dynamic id_p;
@dynamic name;
@dynamic sort;
@dynamic isBag;
@dynamic isDefault;
@dynamic showPlace;
@dynamic haveRed;
@dynamic dataTarget;

typedef struct PB3NewGiftClassify__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t sort;
  PB3GiftShowPlace showPlace;
  PB3DataResourceTarget dataTarget;
  NSString *name;
} PB3NewGiftClassify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewGiftClassify_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewGiftClassify__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewGiftClassify_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewGiftClassify__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewGiftClassify_FieldNumber_Sort,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewGiftClassify__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isBag",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewGiftClassify_FieldNumber_IsBag,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isDefault",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewGiftClassify_FieldNumber_IsDefault,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showPlace",
        .dataTypeSpecific.enumDescFunc = PB3GiftShowPlace_EnumDescriptor,
        .number = PB3NewGiftClassify_FieldNumber_ShowPlace,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3NewGiftClassify__storage_, showPlace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "haveRed",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewGiftClassify_FieldNumber_HaveRed,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dataTarget",
        .dataTypeSpecific.enumDescFunc = PB3DataResourceTarget_EnumDescriptor,
        .number = PB3NewGiftClassify_FieldNumber_DataTarget,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3NewGiftClassify__storage_, dataTarget),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewGiftClassify class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewGiftClassify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3NewGiftClassify_ShowPlace_RawValue(PB3NewGiftClassify *message) {
  GPBDescriptor *descriptor = [PB3NewGiftClassify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewGiftClassify_FieldNumber_ShowPlace];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3NewGiftClassify_ShowPlace_RawValue(PB3NewGiftClassify *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3NewGiftClassify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewGiftClassify_FieldNumber_ShowPlace];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3NewGiftClassify_DataTarget_RawValue(PB3NewGiftClassify *message) {
  GPBDescriptor *descriptor = [PB3NewGiftClassify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewGiftClassify_FieldNumber_DataTarget];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3NewGiftClassify_DataTarget_RawValue(PB3NewGiftClassify *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3NewGiftClassify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewGiftClassify_FieldNumber_DataTarget];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftBox

@implementation PB3GiftBox

@dynamic giftId;
@dynamic giftName;
@dynamic giftNum;

typedef struct PB3GiftBox__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
  NSString *giftName;
} PB3GiftBox__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBox_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftBox__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBox_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftBox__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBox_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftBox__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBox class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBox__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OpenGiftBoxesReq

@implementation PB3OpenGiftBoxesReq

@dynamic giftId;
@dynamic giftNum;

typedef struct PB3OpenGiftBoxesReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
} PB3OpenGiftBoxesReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OpenGiftBoxesReq_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OpenGiftBoxesReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3OpenGiftBoxesReq_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OpenGiftBoxesReq__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenGiftBoxesReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OpenGiftBoxesReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OpenGiftBoxesRes

@implementation PB3OpenGiftBoxesRes

@dynamic giftBoxesArray, giftBoxesArray_Count;

typedef struct PB3OpenGiftBoxesRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftBoxesArray;
} PB3OpenGiftBoxesRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftBoxesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftBox),
        .number = PB3OpenGiftBoxesRes_FieldNumber_GiftBoxesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OpenGiftBoxesRes__storage_, giftBoxesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenGiftBoxesRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OpenGiftBoxesRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftBoxRecord

@implementation PB3GiftBoxRecord

@dynamic id_p;
@dynamic fromId;
@dynamic toId;
@dynamic giftId;
@dynamic gainGiftId;
@dynamic gainGiftName;
@dynamic gainGiftNum;
@dynamic created;

typedef struct PB3GiftBoxRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t giftId;
  int32_t gainGiftId;
  int32_t gainGiftNum;
  NSString *gainGiftName;
  int64_t fromId;
  int64_t toId;
  int64_t created;
} PB3GiftBoxRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_FromId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, fromId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_ToId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_GiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gainGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_GainGiftId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, gainGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gainGiftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_GainGiftName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, gainGiftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gainGiftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_GainGiftNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, gainGiftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxRecord_FieldNumber_Created,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftBoxRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBoxRecord class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBoxRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListGiftBoxRecordReq

@implementation PB3ListGiftBoxRecordReq

@dynamic giftIdArray, giftIdArray_Count;
@dynamic gainGiftId;
@dynamic page;

typedef struct PB3ListGiftBoxRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t gainGiftId;
  int32_t page;
  GPBInt32Array *giftIdArray;
} PB3ListGiftBoxRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftBoxRecordReq_FieldNumber_GiftIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListGiftBoxRecordReq__storage_, giftIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gainGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftBoxRecordReq_FieldNumber_GainGiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListGiftBoxRecordReq__storage_, gainGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftBoxRecordReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListGiftBoxRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListGiftBoxRecordReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListGiftBoxRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListGiftBoxRecordRes

@implementation PB3ListGiftBoxRecordRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3ListGiftBoxRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3ListGiftBoxRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftBoxRecord),
        .number = PB3ListGiftBoxRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListGiftBoxRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftBoxRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListGiftBoxRecordRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListGiftBoxRecordRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListGiftBoxRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GrayGift

@implementation PB3GrayGift

@dynamic giftId;

typedef struct PB3GrayGift__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
} PB3GrayGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GrayGift_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GrayGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GrayGift class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GrayGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GrayGiftWallReq

@implementation PB3GrayGiftWallReq

@dynamic playerId;
@dynamic wallType;

typedef struct PB3GrayGiftWallReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t wallType;
  int64_t playerId;
} PB3GrayGiftWallReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GrayGiftWallReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GrayGiftWallReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wallType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GrayGiftWallReq_FieldNumber_WallType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GrayGiftWallReq__storage_, wallType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GrayGiftWallReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GrayGiftWallReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GrayGiftWallRes

@implementation PB3GrayGiftWallRes

@dynamic giftsArray, giftsArray_Count;
@dynamic wallType;

typedef struct PB3GrayGiftWallRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t wallType;
  NSMutableArray *giftsArray;
} PB3GrayGiftWallRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GrayGift),
        .number = PB3GrayGiftWallRes_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GrayGiftWallRes__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wallType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GrayGiftWallRes_FieldNumber_WallType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GrayGiftWallRes__storage_, wallType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GrayGiftWallRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GrayGiftWallRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftBannerConf

@implementation PB3GiftBannerConf

@dynamic hasConf, conf;
@dynamic opera;

typedef struct PB3GiftBannerConf__storage_ {
  uint32_t _has_storage_[1];
  PB3GiftBannerOpera opera;
  PB3GiftBanner *conf;
} PB3GiftBannerConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftBanner),
        .number = PB3GiftBannerConf_FieldNumber_Conf,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftBannerConf__storage_, conf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opera",
        .dataTypeSpecific.enumDescFunc = PB3GiftBannerOpera_EnumDescriptor,
        .number = PB3GiftBannerConf_FieldNumber_Opera,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftBannerConf__storage_, opera),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBannerConf class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBannerConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftBannerConf_Opera_RawValue(PB3GiftBannerConf *message) {
  GPBDescriptor *descriptor = [PB3GiftBannerConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBannerConf_FieldNumber_Opera];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftBannerConf_Opera_RawValue(PB3GiftBannerConf *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftBannerConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBannerConf_FieldNumber_Opera];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftBanner

@implementation PB3GiftBanner

@dynamic explainPic;
@dynamic tranType;
@dynamic shareType;
@dynamic triggerControl;
@dynamic buttonIcon;
@dynamic routerURL;
@dynamic giftId;
@dynamic explainPicPc;
@dynamic buttonIconPc;

typedef struct PB3GiftBanner__storage_ {
  uint32_t _has_storage_[1];
  int32_t tranType;
  int32_t shareType;
  int32_t triggerControl;
  uint32_t giftId;
  NSString *explainPic;
  NSString *buttonIcon;
  NSString *routerURL;
  NSString *explainPicPc;
  NSString *buttonIconPc;
} PB3GiftBanner__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "explainPic",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_ExplainPic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, explainPic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tranType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_TranType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, tranType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "shareType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_ShareType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, shareType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "triggerControl",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_TriggerControl,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, triggerControl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buttonIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_ButtonIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, buttonIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_RouterURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_GiftId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "explainPicPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_ExplainPicPc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, explainPicPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonIconPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBanner_FieldNumber_ButtonIconPc,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftBanner__storage_, buttonIconPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBanner class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBanner__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftBannerConfigReq

@implementation PB3GiftBannerConfigReq


typedef struct PB3GiftBannerConfigReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftBannerConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBannerConfigReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftBannerConfigReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftBannerConfigRes

@implementation PB3GiftBannerConfigRes

@dynamic conf, conf_Count;

typedef struct PB3GiftBannerConfigRes__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32ObjectDictionary *conf;
} PB3GiftBannerConfigRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftBanner),
        .number = PB3GiftBannerConfigRes_FieldNumber_Conf,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftBannerConfigRes__storage_, conf),
        .flags = GPBFieldMapKeyUInt32,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBannerConfigRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBannerConfigRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewerGiftWindow

@implementation PB3NewerGiftWindow

@dynamic icon;
@dynamic day;

typedef struct PB3NewerGiftWindow__storage_ {
  uint32_t _has_storage_[1];
  PB3GiftNewUserDay day;
  NSString *icon;
} PB3NewerGiftWindow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerGiftWindow_FieldNumber_Icon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewerGiftWindow__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "day",
        .dataTypeSpecific.enumDescFunc = PB3GiftNewUserDay_EnumDescriptor,
        .number = PB3NewerGiftWindow_FieldNumber_Day,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewerGiftWindow__storage_, day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewerGiftWindow class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewerGiftWindow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3NewerGiftWindow_Day_RawValue(PB3NewerGiftWindow *message) {
  GPBDescriptor *descriptor = [PB3NewerGiftWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewerGiftWindow_FieldNumber_Day];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3NewerGiftWindow_Day_RawValue(PB3NewerGiftWindow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3NewerGiftWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewerGiftWindow_FieldNumber_Day];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3NewerGiftWindowConfReq

@implementation PB3NewerGiftWindowConfReq


typedef struct PB3NewerGiftWindowConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NewerGiftWindowConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewerGiftWindowConfReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NewerGiftWindowConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewerGiftWindowConfRes

@implementation PB3NewerGiftWindowConfRes

@dynamic stayMinute;

typedef struct PB3NewerGiftWindowConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t stayMinute;
} PB3NewerGiftWindowConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stayMinute",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerGiftWindowConfRes_FieldNumber_StayMinute,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewerGiftWindowConfRes__storage_, stayMinute),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewerGiftWindowConfRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewerGiftWindowConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftDetailBase

@implementation PB3GiftDetailBase

@dynamic hasPlayer, player;
@dynamic giftId;
@dynamic giftNum;
@dynamic timeStamp;
@dynamic price;
@dynamic isIntimate;
@dynamic toastInfo;
@dynamic hasMaskInfo, maskInfo;
@dynamic validDays;

typedef struct PB3GiftDetailBase__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
  int32_t price;
  int32_t validDays;
  PB3SimplePlayer *player;
  NSString *toastInfo;
  PB3MaskInfo *maskInfo;
  int64_t timeStamp;
} PB3GiftDetailBase__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3GiftDetailBase_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailBase_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailBase_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailBase_FieldNumber_TimeStamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, timeStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailBase_FieldNumber_Price,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isIntimate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailBase_FieldNumber_IsIntimate,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "toastInfo",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailBase_FieldNumber_ToastInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, toastInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskInfo),
        .number = PB3GiftDetailBase_FieldNumber_MaskInfo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, maskInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validDays",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailBase_FieldNumber_ValidDays,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GiftDetailBase__storage_, validDays),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDetailBase class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftDetailBase__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftDetail

@implementation PB3GiftDetail

@dynamic timeStamp;
@dynamic total;

typedef struct PB3GiftDetail__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  int64_t timeStamp;
} PB3GiftDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetail_FieldNumber_TimeStamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftDetail__storage_, timeStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetail_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftDetail__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDetail class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftDetailReq

@implementation PB3GiftDetailReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3GiftDetailReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3GiftDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftDetailReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftDetailReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDetailReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftDetailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftDetailRes

@implementation PB3GiftDetailRes

@dynamic detailArray, detailArray_Count;
@dynamic infoArray, infoArray_Count;
@dynamic giveBackSwitch;

typedef struct PB3GiftDetailRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *detailArray;
  NSMutableArray *infoArray;
} PB3GiftDetailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "detailArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftDetail),
        .number = PB3GiftDetailRes_FieldNumber_DetailArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftDetailRes__storage_, detailArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "infoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftDetailBase),
        .number = PB3GiftDetailRes_FieldNumber_InfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftDetailRes__storage_, infoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giveBackSwitch",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDetailRes_FieldNumber_GiveBackSwitch,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDetailRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftDetailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConf

@implementation PB3GiftConf

@dynamic confURL;

typedef struct PB3GiftConf__storage_ {
  uint32_t _has_storage_[1];
  NSString *confURL;
} PB3GiftConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConf_FieldNumber_ConfURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftConf__storage_, confURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConf class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfCDNReq

@implementation PB3GiftConfCDNReq


typedef struct PB3GiftConfCDNReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftConfCDNReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfCDNReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftConfCDNReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfCDNRes

@implementation PB3GiftConfCDNRes

@dynamic hasConf, conf;

typedef struct PB3GiftConfCDNRes__storage_ {
  uint32_t _has_storage_[1];
  PB3GiftConf *conf;
} PB3GiftConfCDNRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftConf),
        .number = PB3GiftConfCDNRes_FieldNumber_Conf,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftConfCDNRes__storage_, conf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfCDNRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftConfCDNRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftUpList

@implementation PB3GiftUpList

@dynamic giftMinId;
@dynamic giftId;
@dynamic confArray, confArray_Count;

typedef struct PB3GiftUpList__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftMinId;
  int32_t giftId;
  NSMutableArray *confArray;
} PB3GiftUpList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftMinId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpList_FieldNumber_GiftMinId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftUpList__storage_, giftMinId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpList_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftUpList__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "confArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftUpConf),
        .number = PB3GiftUpList_FieldNumber_ConfArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftUpList__storage_, confArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftUpList class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftUpList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftUpConf

@implementation PB3GiftUpConf

@dynamic giftId;
@dynamic timeStamp;
@dynamic num;
@dynamic giveNum;

typedef struct PB3GiftUpConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t num;
  int32_t giveNum;
  int64_t timeStamp;
} PB3GiftUpConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpConf_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftUpConf__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpConf_FieldNumber_TimeStamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftUpConf__storage_, timeStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpConf_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftUpConf__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "giveNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpConf_FieldNumber_GiveNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftUpConf__storage_, giveNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftUpConf class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftUpConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftUpShow

@implementation PB3GiftUpShow

@dynamic msg;
@dynamic giftId;
@dynamic giftUpId;

typedef struct PB3GiftUpShow__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftUpId;
  NSString *msg;
} PB3GiftUpShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpShow_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftUpShow__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpShow_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftUpShow__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "giftUpId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpShow_FieldNumber_GiftUpId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftUpShow__storage_, giftUpId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftUpShow class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftUpShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftUpChange

@implementation PB3GiftUpChange

@dynamic giftUpId;

typedef struct PB3GiftUpChange__storage_ {
  uint32_t _has_storage_[1];
  int64_t giftUpId;
} PB3GiftUpChange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftUpId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftUpChange_FieldNumber_GiftUpId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftUpChange__storage_, giftUpId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftUpChange class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftUpChange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftUpConfReq

@implementation PB3GiftUpConfReq


typedef struct PB3GiftUpConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftUpConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftUpConfReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftUpConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftUpConfRes

@implementation PB3GiftUpConfRes

@dynamic upListArray, upListArray_Count;

typedef struct PB3GiftUpConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *upListArray;
} PB3GiftUpConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "upListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftUpList),
        .number = PB3GiftUpConfRes_FieldNumber_UpListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftUpConfRes__storage_, upListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftUpConfRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftUpConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftBoxNew

@implementation PB3GiftBoxNew

@dynamic playerId;
@dynamic id_p;
@dynamic giftNum;
@dynamic boxType;

typedef struct PB3GiftBoxNew__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t giftNum;
  PB3BoxType boxType;
  int64_t playerId;
} PB3GiftBoxNew__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxNew_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftBoxNew__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxNew_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftBoxNew__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftBoxNew_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftBoxNew__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "boxType",
        .dataTypeSpecific.enumDescFunc = PB3BoxType_EnumDescriptor,
        .number = PB3GiftBoxNew_FieldNumber_BoxType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftBoxNew__storage_, boxType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftBoxNew class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftBoxNew__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiftBoxNew_BoxType_RawValue(PB3GiftBoxNew *message) {
  GPBDescriptor *descriptor = [PB3GiftBoxNew descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBoxNew_FieldNumber_BoxType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiftBoxNew_BoxType_RawValue(PB3GiftBoxNew *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiftBoxNew descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiftBoxNew_FieldNumber_BoxType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowClearBossReq

@implementation PB3ShowClearBossReq

@dynamic bossIdArray, bossIdArray_Count;

typedef struct PB3ShowClearBossReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *bossIdArray;
} PB3ShowClearBossReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bossIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowClearBossReq_FieldNumber_BossIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowClearBossReq__storage_, bossIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowClearBossReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowClearBossReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowClearBossRes

@implementation PB3ShowClearBossRes


typedef struct PB3ShowClearBossRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowClearBossRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowClearBossRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowClearBossRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomShowClearBoss

@implementation PB3BroadcastRoomShowClearBoss


typedef struct PB3BroadcastRoomShowClearBoss__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastRoomShowClearBoss__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomShowClearBoss class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BroadcastRoomShowClearBoss__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftClassifyReq

@implementation PB3GiftClassifyReq

@dynamic roomId;

typedef struct PB3GiftClassifyReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3GiftClassifyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftClassifyReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftClassifyReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftClassifyReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftClassifyReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftClassifyRes

@implementation PB3GiftClassifyRes

@dynamic classifyListArray, classifyListArray_Count;

typedef struct PB3GiftClassifyRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *classifyListArray;
} PB3GiftClassifyRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "classifyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewGiftClassify),
        .number = PB3GiftClassifyRes_FieldNumber_ClassifyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftClassifyRes__storage_, classifyListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftClassifyRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftClassifyRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewUserGiftItemListReq

@implementation PB3NewUserGiftItemListReq


typedef struct PB3NewUserGiftItemListReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NewUserGiftItemListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewUserGiftItemListReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NewUserGiftItemListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewUserGiftItemListRes

@implementation PB3NewUserGiftItemListRes

@dynamic dayOneArray, dayOneArray_Count;
@dynamic dayTowArray, dayTowArray_Count;
@dynamic dayThreeArray, dayThreeArray_Count;
@dynamic firstCharageArray, firstCharageArray_Count;

typedef struct PB3NewUserGiftItemListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dayOneArray;
  NSMutableArray *dayTowArray;
  NSMutableArray *dayThreeArray;
  NSMutableArray *firstCharageArray;
} PB3NewUserGiftItemListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dayOneArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3NewUserGiftItemListRes_FieldNumber_DayOneArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItemListRes__storage_, dayOneArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayTowArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3NewUserGiftItemListRes_FieldNumber_DayTowArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItemListRes__storage_, dayTowArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayThreeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3NewUserGiftItemListRes_FieldNumber_DayThreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItemListRes__storage_, dayThreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstCharageArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewUserGiftItem),
        .number = PB3NewUserGiftItemListRes_FieldNumber_FirstCharageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewUserGiftItemListRes__storage_, firstCharageArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewUserGiftItemListRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewUserGiftItemListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\000dayOne\000\002\000dayTow\000\003\000dayThree\000\004\000firstCha"
        "rage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfigIdsReq

@implementation PB3GiftConfigIdsReq


typedef struct PB3GiftConfigIdsReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftConfigIdsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfigIdsReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftConfigIdsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftConfigIdsRes

@implementation PB3GiftConfigIdsRes

@dynamic listArray, listArray_Count;

typedef struct PB3GiftConfigIdsRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *listArray;
} PB3GiftConfigIdsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftConfigIdsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftConfigIdsRes__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftConfigIdsRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftConfigIdsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGiftConfigListReq

@implementation PB3GetGiftConfigListReq

@dynamic listArray, listArray_Count;

typedef struct PB3GetGiftConfigListReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *listArray;
} PB3GetGiftConfigListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGiftConfigListReq_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetGiftConfigListReq__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGiftConfigListReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGiftConfigListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGiftConfigListRes

@implementation PB3GetGiftConfigListRes

@dynamic giftsArray, giftsArray_Count;

typedef struct PB3GetGiftConfigListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftsArray;
} PB3GetGiftConfigListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftConfigItem),
        .number = PB3GetGiftConfigListRes_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetGiftConfigListRes__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGiftConfigListRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGiftConfigListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InteractionReq

@implementation PB3InteractionReq

@dynamic iaId;
@dynamic iaNum;
@dynamic idsArray, idsArray_Count;
@dynamic singleId;
@dynamic doubleId;
@dynamic allChairId;
@dynamic doubleTarget;
@dynamic isAllChair;
@dynamic msg;

typedef struct PB3InteractionReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t iaNum;
  int32_t singleId;
  int32_t doubleId;
  int32_t allChairId;
  int32_t doubleTarget;
  GPBInt64Array *idsArray;
  NSString *msg;
  int64_t iaId;
} PB3InteractionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iaId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_IaId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, iaId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iaNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_IaNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, iaNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "idsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, idsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "singleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_SingleId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, singleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_DoubleId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, doubleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allChairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_AllChairId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, allChairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleTarget",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_DoubleTarget,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, doubleTarget),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAllChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_IsAllChair,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionReq_FieldNumber_Msg,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3InteractionReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InteractionRes

@implementation PB3InteractionRes


typedef struct PB3InteractionRes__storage_ {
  uint32_t _has_storage_[1];
} PB3InteractionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3InteractionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderSongReq

@implementation PB3OrderSongReq

@dynamic iaId;
@dynamic singleId;
@dynamic doubleId;
@dynamic allChairId;
@dynamic doubleTarget;
@dynamic songReqArray, songReqArray_Count;

typedef struct PB3OrderSongReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t singleId;
  int32_t doubleId;
  int32_t allChairId;
  int32_t doubleTarget;
  NSMutableArray *songReqArray;
  int64_t iaId;
} PB3OrderSongReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iaId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongReq_FieldNumber_IaId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderSongReq__storage_, iaId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "singleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongReq_FieldNumber_SingleId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderSongReq__storage_, singleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongReq_FieldNumber_DoubleId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderSongReq__storage_, doubleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allChairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongReq_FieldNumber_AllChairId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OrderSongReq__storage_, allChairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleTarget",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongReq_FieldNumber_DoubleTarget,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OrderSongReq__storage_, doubleTarget),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "songReqArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OrderSongInfo),
        .number = PB3OrderSongReq_FieldNumber_SongReqArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OrderSongReq__storage_, songReqArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderSongReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderSongReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderSongRes

@implementation PB3OrderSongRes


typedef struct PB3OrderSongRes__storage_ {
  uint32_t _has_storage_[1];
} PB3OrderSongRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderSongRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OrderSongRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OrderSongInfo

@implementation PB3OrderSongInfo

@dynamic playerId;
@dynamic songId;
@dynamic songName;

typedef struct PB3OrderSongInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *songName;
  int64_t playerId;
  int64_t songId;
} PB3OrderSongInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OrderSongInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "songId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongInfo_FieldNumber_SongId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OrderSongInfo__storage_, songId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "songName",
        .dataTypeSpecific.className = NULL,
        .number = PB3OrderSongInfo_FieldNumber_SongName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OrderSongInfo__storage_, songName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OrderSongInfo class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OrderSongInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FirstClassifyListReq

@implementation PB3FirstClassifyListReq


typedef struct PB3FirstClassifyListReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FirstClassifyListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirstClassifyListReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FirstClassifyListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FirstClassifyListRes

@implementation PB3FirstClassifyListRes

@dynamic listArray, listArray_Count;

typedef struct PB3FirstClassifyListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3FirstClassifyListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FirstClassifyList),
        .number = PB3FirstClassifyListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FirstClassifyListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirstClassifyListRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FirstClassifyListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FirstClassifyList

@implementation PB3FirstClassifyList

@dynamic id_p;
@dynamic name;
@dynamic URL;
@dynamic type;
@dynamic open;
@dynamic patternListArray, patternListArray_Count;
@dynamic isDefault;
@dynamic swPatternListArray, swPatternListArray_Count;

typedef struct PB3FirstClassifyList__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3FirstClassifyType type;
  PB3FirstClassifyOpen open;
  NSString *name;
  NSString *URL;
  GPBEnumArray *patternListArray;
  GPBEnumArray *swPatternListArray;
} PB3FirstClassifyList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstClassifyList_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FirstClassifyList__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstClassifyList_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FirstClassifyList__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstClassifyList_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FirstClassifyList__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3FirstClassifyType_EnumDescriptor,
        .number = PB3FirstClassifyList_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FirstClassifyList__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "open",
        .dataTypeSpecific.enumDescFunc = PB3FirstClassifyOpen_EnumDescriptor,
        .number = PB3FirstClassifyList_FieldNumber_Open,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FirstClassifyList__storage_, open),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "patternListArray",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3FirstClassifyList_FieldNumber_PatternListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FirstClassifyList__storage_, patternListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isDefault",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstClassifyList_FieldNumber_IsDefault,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "swPatternListArray",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3FirstClassifyList_FieldNumber_SwPatternListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FirstClassifyList__storage_, swPatternListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirstClassifyList class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FirstClassifyList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FirstClassifyList_Type_RawValue(PB3FirstClassifyList *message) {
  GPBDescriptor *descriptor = [PB3FirstClassifyList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FirstClassifyList_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FirstClassifyList_Type_RawValue(PB3FirstClassifyList *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FirstClassifyList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FirstClassifyList_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3FirstClassifyList_Open_RawValue(PB3FirstClassifyList *message) {
  GPBDescriptor *descriptor = [PB3FirstClassifyList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FirstClassifyList_FieldNumber_Open];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FirstClassifyList_Open_RawValue(PB3FirstClassifyList *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FirstClassifyList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FirstClassifyList_FieldNumber_Open];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftNumAndTextConfReq

@implementation PB3GiftNumAndTextConfReq


typedef struct PB3GiftNumAndTextConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GiftNumAndTextConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftNumAndTextConfReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GiftNumAndTextConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftNumAndTextConfRes

@implementation PB3GiftNumAndTextConfRes

@dynamic listArray, listArray_Count;

typedef struct PB3GiftNumAndTextConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GiftNumAndTextConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftNumAndTextConf),
        .number = PB3GiftNumAndTextConfRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftNumAndTextConfRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftNumAndTextConfRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftNumAndTextConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftNumAndTextConf

@implementation PB3GiftNumAndTextConf

@dynamic num;
@dynamic text;

typedef struct PB3GiftNumAndTextConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  NSString *text;
} PB3GiftNumAndTextConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftNumAndTextConf_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftNumAndTextConf__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftNumAndTextConf_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftNumAndTextConf__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftNumAndTextConf class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftNumAndTextConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectTabInfo

@implementation PB3GiftCollectTabInfo

@dynamic tabName;
@dynamic tabTipsInfo;
@dynamic collectType;
@dynamic collectTypeId;

typedef struct PB3GiftCollectTabInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t collectType;
  int32_t collectTypeId;
  NSString *tabName;
  NSString *tabTipsInfo;
} PB3GiftCollectTabInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tabName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectTabInfo_FieldNumber_TabName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectTabInfo__storage_, tabName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabTipsInfo",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectTabInfo_FieldNumber_TabTipsInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftCollectTabInfo__storage_, tabTipsInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "collectType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectTabInfo_FieldNumber_CollectType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftCollectTabInfo__storage_, collectType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectTypeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectTabInfo_FieldNumber_CollectTypeId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftCollectTabInfo__storage_, collectTypeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectTabInfo class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectTabInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\013\000\003\013\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectTab

@implementation PB3GiftCollectTab

@dynamic hasTabInfo, tabInfo;
@dynamic subTabArray, subTabArray_Count;

typedef struct PB3GiftCollectTab__storage_ {
  uint32_t _has_storage_[1];
  PB3GiftCollectTabInfo *tabInfo;
  NSMutableArray *subTabArray;
} PB3GiftCollectTab__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tabInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftCollectTabInfo),
        .number = PB3GiftCollectTab_FieldNumber_TabInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectTab__storage_, tabInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subTabArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftCollectTabInfo),
        .number = PB3GiftCollectTab_FieldNumber_SubTabArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftCollectTab__storage_, subTabArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectTab class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectTab__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000subTab\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectHeadInfoReq

@implementation PB3GiftCollectHeadInfoReq

@dynamic targetPlayerId;

typedef struct PB3GiftCollectHeadInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t targetPlayerId;
} PB3GiftCollectHeadInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectHeadInfoReq_FieldNumber_TargetPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoReq__storage_, targetPlayerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectHeadInfoReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectHeadInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectHeadInfoRes

@implementation PB3GiftCollectHeadInfoRes

@dynamic playerName;
@dynamic playerIcon;
@dynamic curCollectNum;
@dynamic needCollectNum;
@dynamic collectExp;
@dynamic collectTabArray, collectTabArray_Count;
@dynamic descriptionURL;

typedef struct PB3GiftCollectHeadInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t curCollectNum;
  int32_t needCollectNum;
  int32_t collectExp;
  NSString *playerName;
  NSString *playerIcon;
  NSMutableArray *collectTabArray;
  NSString *descriptionURL;
} PB3GiftCollectHeadInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectHeadInfoRes_FieldNumber_PlayerName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoRes__storage_, playerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectHeadInfoRes_FieldNumber_PlayerIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoRes__storage_, playerIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "curCollectNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectHeadInfoRes_FieldNumber_CurCollectNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoRes__storage_, curCollectNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "needCollectNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectHeadInfoRes_FieldNumber_NeedCollectNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoRes__storage_, needCollectNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectHeadInfoRes_FieldNumber_CollectExp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoRes__storage_, collectExp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectTabArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftCollectTab),
        .number = PB3GiftCollectHeadInfoRes_FieldNumber_CollectTabArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoRes__storage_, collectTabArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "descriptionURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectHeadInfoRes_FieldNumber_DescriptionURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftCollectHeadInfoRes__storage_, descriptionURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectHeadInfoRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectHeadInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\n\000\002\n\000\003\r\000\004\016\000\005\n\000\006\000collectTab\000\007\014!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectSingleInfo

@implementation PB3GiftCollectSingleInfo

@dynamic collectName;
@dynamic appImageURL;
@dynamic collectingImageURL;
@dynamic collectedImageURL;
@dynamic actURL;
@dynamic isTimeOver;
@dynamic collectedNum;
@dynamic needCollectNum;
@dynamic collectId;

typedef struct PB3GiftCollectSingleInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t isTimeOver;
  int32_t collectedNum;
  int32_t needCollectNum;
  int32_t collectId;
  NSString *collectName;
  NSString *appImageURL;
  NSString *collectingImageURL;
  NSString *collectedImageURL;
  NSString *actURL;
} PB3GiftCollectSingleInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "collectName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_CollectName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, collectName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_AppImageURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, appImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "collectingImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_CollectingImageURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, collectingImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "collectedImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_CollectedImageURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, collectedImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_ActURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, actURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isTimeOver",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_IsTimeOver,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, isTimeOver),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectedNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_CollectedNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, collectedNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "needCollectNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_NeedCollectNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, needCollectNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectSingleInfo_FieldNumber_CollectId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftCollectSingleInfo__storage_, collectId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectSingleInfo class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectSingleInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\013\000\002\t!!\000\003\020!!\000\004\017!!\000\005D!!\000\006\n\000\010\014\000\t\016\000\n\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectInfoReq

@implementation PB3GiftCollectInfoReq

@dynamic targetPlayerId;
@dynamic collectTypeId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3GiftCollectInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t collectTypeId;
  int32_t page;
  int32_t pageSize;
  int64_t targetPlayerId;
} PB3GiftCollectInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectInfoReq_FieldNumber_TargetPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectInfoReq__storage_, targetPlayerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "collectTypeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectInfoReq_FieldNumber_CollectTypeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftCollectInfoReq__storage_, collectTypeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectInfoReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftCollectInfoReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectInfoReq_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftCollectInfoReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectInfoReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\016\000\002\r\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectInfoRes

@implementation PB3GiftCollectInfoRes

@dynamic collectInfoArray, collectInfoArray_Count;
@dynamic nextPage;

typedef struct PB3GiftCollectInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextPage;
  NSMutableArray *collectInfoArray;
} PB3GiftCollectInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "collectInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftCollectSingleInfo),
        .number = PB3GiftCollectInfoRes_FieldNumber_CollectInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftCollectInfoRes__storage_, collectInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPage",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectInfoRes_FieldNumber_NextPage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectInfoRes__storage_, nextPage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectInfoRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000collectInfo\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectGiftSingleInfo

@implementation PB3GiftCollectGiftSingleInfo

@dynamic giftId;
@dynamic giftName;
@dynamic imageURL;
@dynamic isCollect;
@dynamic collectName;
@dynamic giftUnusualType;

typedef struct PB3GiftCollectGiftSingleInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t isCollect;
  int32_t giftUnusualType;
  NSString *giftName;
  NSString *imageURL;
  NSString *collectName;
} PB3GiftCollectGiftSingleInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftSingleInfo_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftSingleInfo__storage_, giftId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftSingleInfo_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftSingleInfo__storage_, giftName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftSingleInfo_FieldNumber_ImageURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftSingleInfo__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isCollect",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftSingleInfo_FieldNumber_IsCollect,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftSingleInfo__storage_, isCollect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftSingleInfo_FieldNumber_CollectName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftSingleInfo__storage_, collectName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftUnusualType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftSingleInfo_FieldNumber_GiftUnusualType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftSingleInfo__storage_, giftUnusualType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectGiftSingleInfo class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectGiftSingleInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\006\000\002\010\000\003\006!!\000\004\t\000\005\013\000\006\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectGiftInfoReq

@implementation PB3GiftCollectGiftInfoReq

@dynamic targetPlayerId;
@dynamic collectTypeId;
@dynamic collectId;

typedef struct PB3GiftCollectGiftInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t collectTypeId;
  int32_t collectId;
  int64_t targetPlayerId;
} PB3GiftCollectGiftInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftInfoReq_FieldNumber_TargetPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftInfoReq__storage_, targetPlayerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "collectTypeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftInfoReq_FieldNumber_CollectTypeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftInfoReq__storage_, collectTypeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "collectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftInfoReq_FieldNumber_CollectId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftInfoReq__storage_, collectId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectGiftInfoReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectGiftInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\016\000\002\r\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectGiftInfoRes

@implementation PB3GiftCollectGiftInfoRes

@dynamic giftInfoArray, giftInfoArray_Count;
@dynamic collectName;

typedef struct PB3GiftCollectGiftInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftInfoArray;
  NSString *collectName;
} PB3GiftCollectGiftInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftCollectGiftSingleInfo),
        .number = PB3GiftCollectGiftInfoRes_FieldNumber_GiftInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftInfoRes__storage_, giftInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "collectName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectGiftInfoRes_FieldNumber_CollectName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectGiftInfoRes__storage_, collectName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectGiftInfoRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectGiftInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000giftInfo\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingListReq

@implementation PB3SingListReq

@dynamic page;

typedef struct PB3SingListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
} PB3SingListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingListReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingListRes

@implementation PB3SingListRes

@dynamic singListArray, singListArray_Count;
@dynamic nextPage;

typedef struct PB3SingListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextPage;
  NSMutableArray *singListArray;
} PB3SingListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "singListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SingListInfo),
        .number = PB3SingListRes_FieldNumber_SingListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SingListRes__storage_, singListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPage",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListRes_FieldNumber_NextPage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingListRes__storage_, nextPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingListRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingListInfo

@implementation PB3SingListInfo

@dynamic id_p;
@dynamic singersArray, singersArray_Count;
@dynamic songName;
@dynamic iaName;
@dynamic status;
@dynamic bossId;
@dynamic bossName;
@dynamic recordType;
@dynamic bossIcon;

typedef struct PB3SingListInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3SingListStatus status;
  PB3SongRecordType recordType;
  NSMutableArray *singersArray;
  NSString *songName;
  NSString *iaName;
  NSString *bossName;
  NSString *bossIcon;
  int64_t id_p;
  int64_t bossId;
} PB3SingListInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "singersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Singer),
        .number = PB3SingListInfo_FieldNumber_SingersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, singersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "songName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListInfo_FieldNumber_SongName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, songName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iaName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListInfo_FieldNumber_IaName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, iaName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3SingListStatus_EnumDescriptor,
        .number = PB3SingListInfo_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListInfo_FieldNumber_BossId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bossName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListInfo_FieldNumber_BossName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, bossName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recordType",
        .dataTypeSpecific.enumDescFunc = PB3SongRecordType_EnumDescriptor,
        .number = PB3SingListInfo_FieldNumber_RecordType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, recordType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bossIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingListInfo_FieldNumber_BossIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SingListInfo__storage_, bossIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingListInfo class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingListInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SingListInfo_Status_RawValue(PB3SingListInfo *message) {
  GPBDescriptor *descriptor = [PB3SingListInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingListInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingListInfo_Status_RawValue(PB3SingListInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingListInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingListInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SingListInfo_RecordType_RawValue(PB3SingListInfo *message) {
  GPBDescriptor *descriptor = [PB3SingListInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingListInfo_FieldNumber_RecordType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingListInfo_RecordType_RawValue(PB3SingListInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingListInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingListInfo_FieldNumber_RecordType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Singer

@implementation PB3Singer

@dynamic singerId;
@dynamic singerName;
@dynamic singerIcon;
@dynamic isGood;
@dynamic chairId;

typedef struct PB3Singer__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  NSString *singerName;
  NSString *singerIcon;
  int64_t singerId;
} PB3Singer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "singerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Singer_FieldNumber_SingerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Singer__storage_, singerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "singerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Singer_FieldNumber_SingerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Singer__storage_, singerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Singer_FieldNumber_SingerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Singer__storage_, singerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isGood",
        .dataTypeSpecific.className = NULL,
        .number = PB3Singer_FieldNumber_IsGood,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Singer_FieldNumber_ChairId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Singer__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Singer class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Singer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OptSingListReq

@implementation PB3OptSingListReq

@dynamic infoId;
@dynamic optType;

typedef struct PB3OptSingListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3OptSingType optType;
  int64_t infoId;
} PB3OptSingListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infoId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OptSingListReq_FieldNumber_InfoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OptSingListReq__storage_, infoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3OptSingType_EnumDescriptor,
        .number = PB3OptSingListReq_FieldNumber_OptType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OptSingListReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OptSingListReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OptSingListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OptSingListReq_OptType_RawValue(PB3OptSingListReq *message) {
  GPBDescriptor *descriptor = [PB3OptSingListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OptSingListReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OptSingListReq_OptType_RawValue(PB3OptSingListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OptSingListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OptSingListReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OptSingListRes

@implementation PB3OptSingListRes


typedef struct PB3OptSingListRes__storage_ {
  uint32_t _has_storage_[1];
} PB3OptSingListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OptSingListRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OptSingListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InsertSingListReq

@implementation PB3InsertSingListReq

@dynamic iaName;
@dynamic singerIdsArray, singerIdsArray_Count;
@dynamic bossId;
@dynamic songName;
@dynamic iaId;

typedef struct PB3InsertSingListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *iaName;
  GPBInt64Array *singerIdsArray;
  NSString *songName;
  int64_t bossId;
  int64_t iaId;
} PB3InsertSingListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iaName",
        .dataTypeSpecific.className = NULL,
        .number = PB3InsertSingListReq_FieldNumber_IaName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InsertSingListReq__storage_, iaName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3InsertSingListReq_FieldNumber_SingerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InsertSingListReq__storage_, singerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InsertSingListReq_FieldNumber_BossId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InsertSingListReq__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "songName",
        .dataTypeSpecific.className = NULL,
        .number = PB3InsertSingListReq_FieldNumber_SongName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3InsertSingListReq__storage_, songName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iaId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InsertSingListReq_FieldNumber_IaId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3InsertSingListReq__storage_, iaId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InsertSingListReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InsertSingListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InsertSingListRes

@implementation PB3InsertSingListRes


typedef struct PB3InsertSingListRes__storage_ {
  uint32_t _has_storage_[1];
} PB3InsertSingListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InsertSingListRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3InsertSingListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SongListNoticeBroadcast

@implementation PB3SongListNoticeBroadcast

@dynamic id_p;
@dynamic name;
@dynamic singerIdsArray, singerIdsArray_Count;
@dynamic bossId;
@dynamic iaName;
@dynamic songName;
@dynamic jumpURL;
@dynamic roomId;
@dynamic recordType;
@dynamic roomName;

typedef struct PB3SongListNoticeBroadcast__storage_ {
  uint32_t _has_storage_[1];
  PB3SongRecordType recordType;
  NSString *name;
  GPBInt64Array *singerIdsArray;
  NSString *iaName;
  NSString *songName;
  NSString *jumpURL;
  NSString *roomName;
  int64_t id_p;
  int64_t bossId;
  int64_t roomId;
} PB3SongListNoticeBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_SingerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, singerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_BossId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iaName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_IaName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, iaName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "songName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_SongName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, songName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_JumpURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "recordType",
        .dataTypeSpecific.enumDescFunc = PB3SongRecordType_EnumDescriptor,
        .number = PB3SongListNoticeBroadcast_FieldNumber_RecordType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, recordType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SongListNoticeBroadcast_FieldNumber_RoomName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SongListNoticeBroadcast__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SongListNoticeBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SongListNoticeBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\007\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SongListNoticeBroadcast_RecordType_RawValue(PB3SongListNoticeBroadcast *message) {
  GPBDescriptor *descriptor = [PB3SongListNoticeBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SongListNoticeBroadcast_FieldNumber_RecordType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SongListNoticeBroadcast_RecordType_RawValue(PB3SongListNoticeBroadcast *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SongListNoticeBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SongListNoticeBroadcast_FieldNumber_RecordType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChangeSongListBroadcast

@implementation PB3ChangeSongListBroadcast


typedef struct PB3ChangeSongListBroadcast__storage_ {
  uint32_t _has_storage_[1];
} PB3ChangeSongListBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeSongListBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChangeSongListBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveTimeLimitGiftReq

@implementation PB3ReceiveTimeLimitGiftReq

@dynamic imPresentId;

typedef struct PB3ReceiveTimeLimitGiftReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *imPresentId;
} PB3ReceiveTimeLimitGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imPresentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveTimeLimitGiftReq_FieldNumber_ImPresentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveTimeLimitGiftReq__storage_, imPresentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveTimeLimitGiftReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveTimeLimitGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveTimeLimitGiftRes

@implementation PB3ReceiveTimeLimitGiftRes

@dynamic status;

typedef struct PB3ReceiveTimeLimitGiftRes__storage_ {
  uint32_t _has_storage_[1];
  PB3IMGiftStatus status;
} PB3ReceiveTimeLimitGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3IMGiftStatus_EnumDescriptor,
        .number = PB3ReceiveTimeLimitGiftRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveTimeLimitGiftRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveTimeLimitGiftRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveTimeLimitGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReceiveTimeLimitGiftRes_Status_RawValue(PB3ReceiveTimeLimitGiftRes *message) {
  GPBDescriptor *descriptor = [PB3ReceiveTimeLimitGiftRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveTimeLimitGiftRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveTimeLimitGiftRes_Status_RawValue(PB3ReceiveTimeLimitGiftRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveTimeLimitGiftRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveTimeLimitGiftRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IMPresentPush

@implementation PB3IMPresentPush

@dynamic type;
@dynamic id_p;
@dynamic name;
@dynamic icon;
@dynamic giftEntry;
@dynamic giftNum;
@dynamic imPresentId;
@dynamic timeOut;
@dynamic sex;
@dynamic receiveId;
@dynamic receiveName;
@dynamic text;

typedef struct PB3IMPresentPush__storage_ {
  uint32_t _has_storage_[1];
  PB3IMType type;
  uint32_t giftEntry;
  uint32_t giftNum;
  PB3SexType sex;
  NSString *name;
  NSString *icon;
  NSString *imPresentId;
  NSString *receiveName;
  NSString *text;
  int64_t id_p;
  int64_t timeOut;
  int64_t receiveId;
} PB3IMPresentPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IMType_EnumDescriptor,
        .number = PB3IMPresentPush_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_GiftEntry,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, giftEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_GiftNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imPresentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_ImPresentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, imPresentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeOut",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_TimeOut,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, timeOut),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3IMPresentPush_FieldNumber_Sex,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_ReceiveId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, receiveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "receiveName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_ReceiveName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, receiveName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPush_FieldNumber_Text,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IMPresentPush__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMPresentPush class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMPresentPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IMPresentPush_Type_RawValue(PB3IMPresentPush *message) {
  GPBDescriptor *descriptor = [PB3IMPresentPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMPresentPush_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IMPresentPush_Type_RawValue(PB3IMPresentPush *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IMPresentPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMPresentPush_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3IMPresentPush_Sex_RawValue(PB3IMPresentPush *message) {
  GPBDescriptor *descriptor = [PB3IMPresentPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMPresentPush_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IMPresentPush_Sex_RawValue(PB3IMPresentPush *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IMPresentPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMPresentPush_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReceiveIMGift

@implementation PB3ReceiveIMGift

@dynamic type;
@dynamic imPresentId;
@dynamic giftId;
@dynamic giftNum;
@dynamic timeOut;
@dynamic text;
@dynamic fromId;
@dynamic toId;
@dynamic imGiftType;
@dynamic boxContentId;
@dynamic boxContentNum;

typedef struct PB3ReceiveIMGift__storage_ {
  uint32_t _has_storage_[1];
  PB3IMType type;
  int32_t giftId;
  int32_t giftNum;
  PB3IMGiftType imGiftType;
  int32_t boxContentId;
  int32_t boxContentNum;
  NSString *imPresentId;
  NSString *text;
  int64_t timeOut;
  int64_t fromId;
  int64_t toId;
} PB3ReceiveIMGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IMType_EnumDescriptor,
        .number = PB3ReceiveIMGift_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "imPresentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_ImPresentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, imPresentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_GiftNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timeOut",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_TimeOut,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, timeOut),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_Text,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_FromId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, fromId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_ToId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imGiftType",
        .dataTypeSpecific.enumDescFunc = PB3IMGiftType_EnumDescriptor,
        .number = PB3ReceiveIMGift_FieldNumber_ImGiftType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, imGiftType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "boxContentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_BoxContentId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, boxContentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boxContentNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveIMGift_FieldNumber_BoxContentNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ReceiveIMGift__storage_, boxContentNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveIMGift class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveIMGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReceiveIMGift_Type_RawValue(PB3ReceiveIMGift *message) {
  GPBDescriptor *descriptor = [PB3ReceiveIMGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveIMGift_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveIMGift_Type_RawValue(PB3ReceiveIMGift *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveIMGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveIMGift_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReceiveIMGift_ImGiftType_RawValue(PB3ReceiveIMGift *message) {
  GPBDescriptor *descriptor = [PB3ReceiveIMGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveIMGift_FieldNumber_ImGiftType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveIMGift_ImGiftType_RawValue(PB3ReceiveIMGift *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveIMGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveIMGift_FieldNumber_ImGiftType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetTimeLimitGift

@implementation PB3GetTimeLimitGift

@dynamic imPresentId;
@dynamic giftURL;

typedef struct PB3GetTimeLimitGift__storage_ {
  uint32_t _has_storage_[1];
  NSString *imPresentId;
  NSString *giftURL;
} PB3GetTimeLimitGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imPresentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTimeLimitGift_FieldNumber_ImPresentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTimeLimitGift__storage_, imPresentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTimeLimitGift_FieldNumber_GiftURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetTimeLimitGift__storage_, giftURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTimeLimitGift class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTimeLimitGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TimeLimitGiftResult

@implementation PB3TimeLimitGiftResult

@dynamic imPresentId;
@dynamic gold;
@dynamic toId;
@dynamic status;
@dynamic fromId;

typedef struct PB3TimeLimitGiftResult__storage_ {
  uint32_t _has_storage_[1];
  PB3IMGiftStatus status;
  NSString *imPresentId;
  int64_t gold;
  int64_t toId;
  int64_t fromId;
} PB3TimeLimitGiftResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imPresentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimeLimitGiftResult_FieldNumber_ImPresentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TimeLimitGiftResult__storage_, imPresentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimeLimitGiftResult_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TimeLimitGiftResult__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimeLimitGiftResult_FieldNumber_ToId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TimeLimitGiftResult__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3IMGiftStatus_EnumDescriptor,
        .number = PB3TimeLimitGiftResult_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TimeLimitGiftResult__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimeLimitGiftResult_FieldNumber_FromId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TimeLimitGiftResult__storage_, fromId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TimeLimitGiftResult class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TimeLimitGiftResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TimeLimitGiftResult_Status_RawValue(PB3TimeLimitGiftResult *message) {
  GPBDescriptor *descriptor = [PB3TimeLimitGiftResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TimeLimitGiftResult_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TimeLimitGiftResult_Status_RawValue(PB3TimeLimitGiftResult *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TimeLimitGiftResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TimeLimitGiftResult_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetTimeLimitGiftReq

@implementation PB3GetTimeLimitGiftReq

@dynamic imPresentId;

typedef struct PB3GetTimeLimitGiftReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *imPresentId;
} PB3GetTimeLimitGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imPresentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTimeLimitGiftReq_FieldNumber_ImPresentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTimeLimitGiftReq__storage_, imPresentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTimeLimitGiftReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTimeLimitGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetTimeLimitGiftRes

@implementation PB3GetTimeLimitGiftRes

@dynamic status;

typedef struct PB3GetTimeLimitGiftRes__storage_ {
  uint32_t _has_storage_[1];
  PB3IMGiftStatus status;
} PB3GetTimeLimitGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3IMGiftStatus_EnumDescriptor,
        .number = PB3GetTimeLimitGiftRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTimeLimitGiftRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTimeLimitGiftRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTimeLimitGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetTimeLimitGiftRes_Status_RawValue(PB3GetTimeLimitGiftRes *message) {
  GPBDescriptor *descriptor = [PB3GetTimeLimitGiftRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetTimeLimitGiftRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetTimeLimitGiftRes_Status_RawValue(PB3GetTimeLimitGiftRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetTimeLimitGiftRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetTimeLimitGiftRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OpenTreasureBoxReq

@implementation PB3OpenTreasureBoxReq

@dynamic id_p;

typedef struct PB3OpenTreasureBoxReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} PB3OpenTreasureBoxReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3OpenTreasureBoxReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OpenTreasureBoxReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenTreasureBoxReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OpenTreasureBoxReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OpenTreasureBoxRes

@implementation PB3OpenTreasureBoxRes

@dynamic rewardId;
@dynamic type;
@dynamic validTime;
@dynamic num;

typedef struct PB3OpenTreasureBoxRes__storage_ {
  uint32_t _has_storage_[1];
  PB3TreasureRewardType type;
  int32_t num;
  int64_t rewardId;
  int64_t validTime;
} PB3OpenTreasureBoxRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OpenTreasureBoxRes_FieldNumber_RewardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OpenTreasureBoxRes__storage_, rewardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3TreasureRewardType_EnumDescriptor,
        .number = PB3OpenTreasureBoxRes_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OpenTreasureBoxRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "validTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OpenTreasureBoxRes_FieldNumber_ValidTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OpenTreasureBoxRes__storage_, validTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3OpenTreasureBoxRes_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OpenTreasureBoxRes__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenTreasureBoxRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OpenTreasureBoxRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OpenTreasureBoxRes_Type_RawValue(PB3OpenTreasureBoxRes *message) {
  GPBDescriptor *descriptor = [PB3OpenTreasureBoxRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OpenTreasureBoxRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OpenTreasureBoxRes_Type_RawValue(PB3OpenTreasureBoxRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OpenTreasureBoxRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OpenTreasureBoxRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3TreasureBoxInfo

@implementation PB3TreasureBoxInfo

@dynamic id_p;
@dynamic giftId;
@dynamic status;
@dynamic validTime;

typedef struct PB3TreasureBoxInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3TreasureBoxStatusType status;
  NSString *id_p;
  int64_t giftId;
  int64_t validTime;
} PB3TreasureBoxInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureBoxInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxInfo_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureBoxInfo__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3TreasureBoxStatusType_EnumDescriptor,
        .number = PB3TreasureBoxInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureBoxInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "validTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxInfo_FieldNumber_ValidTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureBoxInfo__storage_, validTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxInfo class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureBoxInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TreasureBoxInfo_Status_RawValue(PB3TreasureBoxInfo *message) {
  GPBDescriptor *descriptor = [PB3TreasureBoxInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TreasureBoxInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TreasureBoxInfo_Status_RawValue(PB3TreasureBoxInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TreasureBoxInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TreasureBoxInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3TreasureBoxInfoReq

@implementation PB3TreasureBoxInfoReq


typedef struct PB3TreasureBoxInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3TreasureBoxInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxInfoReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3TreasureBoxInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxInfoRes

@implementation PB3TreasureBoxInfoRes

@dynamic hasInfo, info;
@dynamic receive;
@dynamic boxNum;

typedef struct PB3TreasureBoxInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t boxNum;
  PB3TreasureBoxInfo *info;
} PB3TreasureBoxInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TreasureBoxInfo),
        .number = PB3TreasureBoxInfoRes_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureBoxInfoRes__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receive",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxInfoRes_FieldNumber_Receive,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "boxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxInfoRes_FieldNumber_BoxNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureBoxInfoRes__storage_, boxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxInfoRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureBoxInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxCfg

@implementation PB3TreasureBoxCfg

@dynamic giftId;
@dynamic wealthLevCond;
@dynamic charmLevCond;
@dynamic andOrCond;
@dynamic iconUri;
@dynamic iconBuildingSvga;
@dynamic iconOpeningSvga;

typedef struct PB3TreasureBoxCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealthLevCond;
  int32_t charmLevCond;
  int32_t andOrCond;
  NSString *iconUri;
  NSString *iconBuildingSvga;
  NSString *iconOpeningSvga;
  int64_t giftId;
} PB3TreasureBoxCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxCfg_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfg__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wealthLevCond",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxCfg_FieldNumber_WealthLevCond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfg__storage_, wealthLevCond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevCond",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxCfg_FieldNumber_CharmLevCond,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfg__storage_, charmLevCond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "andOrCond",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxCfg_FieldNumber_AndOrCond,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfg__storage_, andOrCond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "iconUri",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxCfg_FieldNumber_IconUri,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfg__storage_, iconUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconBuildingSvga",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxCfg_FieldNumber_IconBuildingSvga,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfg__storage_, iconBuildingSvga),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconOpeningSvga",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxCfg_FieldNumber_IconOpeningSvga,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfg__storage_, iconOpeningSvga),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxCfg class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureBoxCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxCfgReq

@implementation PB3TreasureBoxCfgReq


typedef struct PB3TreasureBoxCfgReq__storage_ {
  uint32_t _has_storage_[1];
} PB3TreasureBoxCfgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxCfgReq class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3TreasureBoxCfgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxCfgRes

@implementation PB3TreasureBoxCfgRes

@dynamic cfgListArray, cfgListArray_Count;

typedef struct PB3TreasureBoxCfgRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cfgListArray;
} PB3TreasureBoxCfgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TreasureBoxCfg),
        .number = PB3TreasureBoxCfgRes_FieldNumber_CfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TreasureBoxCfgRes__storage_, cfgListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxCfgRes class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureBoxCfgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxCfgBroadcast

@implementation PB3TreasureBoxCfgBroadcast


typedef struct PB3TreasureBoxCfgBroadcast__storage_ {
  uint32_t _has_storage_[1];
} PB3TreasureBoxCfgBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxCfgBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3TreasureBoxCfgBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxNumBroadcast

@implementation PB3TreasureBoxNumBroadcast

@dynamic roomId;
@dynamic boxNum;

typedef struct PB3TreasureBoxNumBroadcast__storage_ {
  uint32_t _has_storage_[1];
  int32_t boxNum;
  int64_t roomId;
} PB3TreasureBoxNumBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxNumBroadcast_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureBoxNumBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxNumBroadcast_FieldNumber_BoxNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureBoxNumBroadcast__storage_, boxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxNumBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureBoxNumBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxStatusBroadcast

@implementation PB3TreasureBoxStatusBroadcast

@dynamic roomId;
@dynamic hasInfo, info;
@dynamic boxNum;

typedef struct PB3TreasureBoxStatusBroadcast__storage_ {
  uint32_t _has_storage_[1];
  int32_t boxNum;
  PB3TreasureBoxInfo *info;
  int64_t roomId;
} PB3TreasureBoxStatusBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxStatusBroadcast_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureBoxStatusBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TreasureBoxInfo),
        .number = PB3TreasureBoxStatusBroadcast_FieldNumber_Info,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureBoxStatusBroadcast__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "boxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxStatusBroadcast_FieldNumber_BoxNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureBoxStatusBroadcast__storage_, boxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxStatusBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureBoxStatusBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureBoxRewardInfoBroadcast

@implementation PB3TreasureBoxRewardInfoBroadcast

@dynamic roomId;
@dynamic boxId;
@dynamic rewardId;
@dynamic type;
@dynamic validTime;
@dynamic num;

typedef struct PB3TreasureBoxRewardInfoBroadcast__storage_ {
  uint32_t _has_storage_[1];
  PB3TreasureRewardType type;
  int32_t num;
  NSString *boxId;
  int64_t roomId;
  int64_t rewardId;
  int64_t validTime;
} PB3TreasureBoxRewardInfoBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxRewardInfoBroadcast_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureBoxRewardInfoBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxRewardInfoBroadcast_FieldNumber_BoxId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureBoxRewardInfoBroadcast__storage_, boxId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rewardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxRewardInfoBroadcast_FieldNumber_RewardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureBoxRewardInfoBroadcast__storage_, rewardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3TreasureRewardType_EnumDescriptor,
        .number = PB3TreasureBoxRewardInfoBroadcast_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureBoxRewardInfoBroadcast__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "validTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxRewardInfoBroadcast_FieldNumber_ValidTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TreasureBoxRewardInfoBroadcast__storage_, validTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureBoxRewardInfoBroadcast_FieldNumber_Num,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TreasureBoxRewardInfoBroadcast__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureBoxRewardInfoBroadcast class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureBoxRewardInfoBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TreasureBoxRewardInfoBroadcast_Type_RawValue(PB3TreasureBoxRewardInfoBroadcast *message) {
  GPBDescriptor *descriptor = [PB3TreasureBoxRewardInfoBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TreasureBoxRewardInfoBroadcast_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TreasureBoxRewardInfoBroadcast_Type_RawValue(PB3TreasureBoxRewardInfoBroadcast *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TreasureBoxRewardInfoBroadcast descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TreasureBoxRewardInfoBroadcast_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiftTopLineConfig

@implementation PB3GiftTopLineConfig

@dynamic scrollBackgroundURL;
@dynamic pcScrollBackgroundURL;
@dynamic scrollNum;
@dynamic scrollContent;
@dynamic isCard;
@dynamic isAllRoom;
@dynamic cardBackgroundURL;
@dynamic cardButtonURL;
@dynamic cardThumbnailURL;
@dynamic pcCardBackgroundURL;
@dynamic pcCardButtonURL;
@dynamic pcCardThumbnailURL;
@dynamic cardTopContent1;
@dynamic cardTopContent2;
@dynamic roomCardThumbnailContent;
@dynamic scrollContentColor;
@dynamic scrollContentPlaceholderColor;
@dynamic animationUsernameColor;
@dynamic cardTopContentColor;
@dynamic cardTopPlaceholderColor;
@dynamic cardUsernameColor;
@dynamic isScroll;
@dynamic cardBottomUsernameColor;
@dynamic cardBottomContentColor;
@dynamic cardBackgroundURLAndroid;
@dynamic isAllScroll;

typedef struct PB3GiftTopLineConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t scrollNum;
  NSString *scrollBackgroundURL;
  NSString *pcScrollBackgroundURL;
  NSString *scrollContent;
  NSString *cardBackgroundURL;
  NSString *cardButtonURL;
  NSString *cardThumbnailURL;
  NSString *pcCardBackgroundURL;
  NSString *pcCardButtonURL;
  NSString *pcCardThumbnailURL;
  NSString *cardTopContent1;
  NSString *cardTopContent2;
  NSString *roomCardThumbnailContent;
  NSString *scrollContentColor;
  NSString *scrollContentPlaceholderColor;
  NSString *animationUsernameColor;
  NSString *cardTopContentColor;
  NSString *cardTopPlaceholderColor;
  NSString *cardUsernameColor;
  NSString *cardBottomUsernameColor;
  NSString *cardBottomContentColor;
  NSString *cardBackgroundURLAndroid;
} PB3GiftTopLineConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scrollBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_ScrollBackgroundURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, scrollBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcScrollBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_PcScrollBackgroundURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, pcScrollBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scrollNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_ScrollNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, scrollNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "scrollContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_ScrollContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, scrollContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isCard",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_IsCard,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAllRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_IsAllRoom,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cardBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardBackgroundURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardButtonURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardButtonURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardButtonURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardThumbnailURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardThumbnailURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardThumbnailURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCardBackgroundURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_PcCardBackgroundURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, pcCardBackgroundURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCardButtonURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_PcCardButtonURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, pcCardButtonURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCardThumbnailURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_PcCardThumbnailURL,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, pcCardThumbnailURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardTopContent1",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardTopContent1,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardTopContent1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardTopContent2",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardTopContent2,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardTopContent2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomCardThumbnailContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_RoomCardThumbnailContent,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, roomCardThumbnailContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scrollContentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_ScrollContentColor,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, scrollContentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scrollContentPlaceholderColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_ScrollContentPlaceholderColor,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, scrollContentPlaceholderColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "animationUsernameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_AnimationUsernameColor,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, animationUsernameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardTopContentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardTopContentColor,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardTopContentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardTopPlaceholderColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardTopPlaceholderColor,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardTopPlaceholderColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardUsernameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardUsernameColor,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardUsernameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isScroll",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_IsScroll,
        .hasIndex = 23,
        .offset = 24,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cardBottomUsernameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardBottomUsernameColor,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardBottomUsernameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardBottomContentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardBottomContentColor,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardBottomContentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardBackgroundURLAndroid",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_CardBackgroundURLAndroid,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3GiftTopLineConfig__storage_, cardBackgroundURLAndroid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAllScroll",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTopLineConfig_FieldNumber_IsAllScroll,
        .hasIndex = 28,
        .offset = 29,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftTopLineConfig class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftTopLineConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001\006\252\241!!\000\002\002\246\252\241!!\000\007\004\252\241!!\000\010\004\246\241!!\000\t\004\251\241!!\000\n\002\244"
        "\252\241!!\000\013\002\244\246\241!!\000\014\002\244\251\241!!\000\r\004\243\247\201\000\016\004\243\247\201\000\031\004\252\241!!\247"
        "\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftDescriptionImage

@implementation PB3GiftDescriptionImage

@dynamic bottomImageURL;
@dynamic subjectText;
@dynamic subjectTextColor;
@dynamic contentText;
@dynamic contentTextColor;
@dynamic showRedirectButton;
@dynamic bottomImageURLForRedirectButton;
@dynamic contentTextForRedirectButton;
@dynamic contentTextColorForRedirectButton;
@dynamic redirectURL;

typedef struct PB3GiftDescriptionImage__storage_ {
  uint32_t _has_storage_[1];
  NSString *bottomImageURL;
  NSString *subjectText;
  NSString *subjectTextColor;
  NSString *contentText;
  NSString *contentTextColor;
  NSString *bottomImageURLForRedirectButton;
  NSString *contentTextForRedirectButton;
  NSString *contentTextColorForRedirectButton;
  NSString *redirectURL;
} PB3GiftDescriptionImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bottomImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_BottomImageURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, bottomImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subjectText",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_SubjectText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, subjectText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subjectTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_SubjectTextColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, subjectTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentText",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_ContentText,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, contentText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_ContentTextColor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, contentTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showRedirectButton",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_ShowRedirectButton,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bottomImageURLForRedirectButton",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_BottomImageURLForRedirectButton,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, bottomImageURLForRedirectButton),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentTextForRedirectButton",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_ContentTextForRedirectButton,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, contentTextForRedirectButton),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentTextColorForRedirectButton",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_ContentTextColorForRedirectButton,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, contentTextColorForRedirectButton),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redirectURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftDescriptionImage_FieldNumber_RedirectURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3GiftDescriptionImage__storage_, redirectURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftDescriptionImage class]
                                     rootClass:[PB3GiftExtRoot class]
                                          file:PB3GiftExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftDescriptionImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\245\241!!\000\007\006\245\241!!\243\250\246\000\n\010\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
