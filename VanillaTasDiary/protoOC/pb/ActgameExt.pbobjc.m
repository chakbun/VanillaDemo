// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/actgame.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/ActgameExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
#import "pb/AcmConfExt.pbobjc.h"
#import "pb/ActivityCliExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ActgameExtRoot

@implementation PB3ActgameExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3ActgameExtRoot_FileDescriptor

static GPBFileDescriptor *PB3ActgameExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3PushRedEnvelopeType

GPBEnumDescriptor *PB3PushRedEnvelopeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PretNull\000PretNormal\000PretAward\000PretSelfSt"
        "atus\000";
    static const int32_t values[] = {
        PB3PushRedEnvelopeType_PretNull,
        PB3PushRedEnvelopeType_PretNormal,
        PB3PushRedEnvelopeType_PretAward,
        PB3PushRedEnvelopeType_PretSelfStatus,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PushRedEnvelopeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PushRedEnvelopeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PushRedEnvelopeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PushRedEnvelopeType_PretNull:
    case PB3PushRedEnvelopeType_PretNormal:
    case PB3PushRedEnvelopeType_PretAward:
    case PB3PushRedEnvelopeType_PretSelfStatus:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3Id2RandomType

GPBEnumDescriptor *PB3Id2RandomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Id2RandomTypeNone\000Id2RandomTypeNormal\000Id"
        "2RandomTypeMiddle\000Id2RandomTypeHigh\000Id2R"
        "andomTypeSuper\000";
    static const int32_t values[] = {
        PB3Id2RandomType_Id2RandomTypeNone,
        PB3Id2RandomType_Id2RandomTypeNormal,
        PB3Id2RandomType_Id2RandomTypeMiddle,
        PB3Id2RandomType_Id2RandomTypeHigh,
        PB3Id2RandomType_Id2RandomTypeSuper,
    };
    static const char *extraTextFormatInfo = "\005\000\r\204\000\001\r\206\000\002\r\206\000\003\r\204\000\004\r\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3Id2RandomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3Id2RandomType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3Id2RandomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3Id2RandomType_Id2RandomTypeNone:
    case PB3Id2RandomType_Id2RandomTypeNormal:
    case PB3Id2RandomType_Id2RandomTypeMiddle:
    case PB3Id2RandomType_Id2RandomTypeHigh:
    case PB3Id2RandomType_Id2RandomTypeSuper:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3FindActGameConfReq

@implementation PB3FindActGameConfReq

@dynamic confType;

typedef struct PB3FindActGameConfReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ActGameCfgType confType;
} PB3FindActGameConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confType",
        .dataTypeSpecific.enumDescFunc = PB3ActGameCfgType_EnumDescriptor,
        .number = PB3FindActGameConfReq_FieldNumber_ConfType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindActGameConfReq__storage_, confType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActGameConfReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActGameConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindActGameConfReq_ConfType_RawValue(PB3FindActGameConfReq *message) {
  GPBDescriptor *descriptor = [PB3FindActGameConfReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindActGameConfReq_FieldNumber_ConfType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindActGameConfReq_ConfType_RawValue(PB3FindActGameConfReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindActGameConfReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindActGameConfReq_FieldNumber_ConfType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ActGameConf

@implementation PB3ActGameConf

@dynamic hasActPage, actPage;
@dynamic actType;
@dynamic tipsArray, tipsArray_Count;
@dynamic storeId;
@dynamic incStoreId;
@dynamic exchangeId;
@dynamic effectId;
@dynamic effectRewardTimeLong;
@dynamic startUnix;
@dynamic endUnix;
@dynamic isOpen;
@dynamic waitTime;

typedef struct PB3ActGameConf__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType actType;
  int32_t incStoreId;
  int32_t exchangeId;
  int32_t effectId;
  PB3ConfActPage *actPage;
  NSMutableArray *tipsArray;
  int64_t storeId;
  int64_t effectRewardTimeLong;
  int64_t startUnix;
  int64_t endUnix;
  int64_t waitTime;
} PB3ActGameConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actPage",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActPage),
        .number = PB3ActGameConf_FieldNumber_ActPage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, actPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actType",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3ActGameConf_FieldNumber_ActType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, actType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tipsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SolitaireTips),
        .number = PB3ActGameConf_FieldNumber_TipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, tipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_StoreId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, storeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "incStoreId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_IncStoreId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, incStoreId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exchangeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_ExchangeId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, exchangeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_EffectId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectRewardTimeLong",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_EffectRewardTimeLong,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, effectRewardTimeLong),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startUnix",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_StartUnix,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, startUnix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endUnix",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_EndUnix,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, endUnix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isOpen",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_IsOpen,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "waitTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActGameConf_FieldNumber_WaitTime,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ActGameConf__storage_, waitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActGameConf class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActGameConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ActGameConf_ActType_RawValue(PB3ActGameConf *message) {
  GPBDescriptor *descriptor = [PB3ActGameConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActGameConf_FieldNumber_ActType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActGameConf_ActType_RawValue(PB3ActGameConf *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActGameConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActGameConf_FieldNumber_ActType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindActGameConfRes

@implementation PB3FindActGameConfRes

@dynamic redEnvelopeConfListArray, redEnvelopeConfListArray_Count;
@dynamic hasPlayer, player;
@dynamic hasServerTimestamp, serverTimestamp;
@dynamic hasClan, clan;
@dynamic userId2ConfArray, userId2ConfArray_Count;
@dynamic hasActPage, actPage;

typedef struct PB3FindActGameConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *redEnvelopeConfListArray;
  PB3Player *player;
  PB3ServerTimestamp *serverTimestamp;
  PB3ClanInfo *clan;
  NSMutableArray *userId2ConfArray;
  PB3ConfActPage *actPage;
} PB3FindActGameConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redEnvelopeConfListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActGameConf),
        .number = PB3FindActGameConfRes_FieldNumber_RedEnvelopeConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindActGameConfRes__storage_, redEnvelopeConfListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3FindActGameConfRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindActGameConfRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "serverTimestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ServerTimestamp),
        .number = PB3FindActGameConfRes_FieldNumber_ServerTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindActGameConfRes__storage_, serverTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clan",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClanInfo),
        .number = PB3FindActGameConfRes_FieldNumber_Clan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindActGameConfRes__storage_, clan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId2ConfArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgUserId2RandomScheme),
        .number = PB3FindActGameConfRes_FieldNumber_UserId2ConfArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindActGameConfRes__storage_, userId2ConfArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actPage",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActPage),
        .number = PB3FindActGameConfRes_FieldNumber_ActPage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindActGameConfRes__storage_, actPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindActGameConfRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindActGameConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RedEnvelopePlayerInfo

@implementation PB3RedEnvelopePlayerInfo

@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;

typedef struct PB3RedEnvelopePlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerId2;
} PB3RedEnvelopePlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerInfo_FieldNumber_PlayerId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerInfo_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerInfo_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopePlayerInfo class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopePlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindRedEnvelopeStatusReq

@implementation PB3FindRedEnvelopeStatusReq

@dynamic typeId;

typedef struct PB3FindRedEnvelopeStatusReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType typeId;
} PB3FindRedEnvelopeStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3FindRedEnvelopeStatusReq_FieldNumber_TypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeStatusReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeStatusReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindRedEnvelopeStatusReq_TypeId_RawValue(PB3FindRedEnvelopeStatusReq *message) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeStatusReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeStatusReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindRedEnvelopeStatusReq_TypeId_RawValue(PB3FindRedEnvelopeStatusReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeStatusReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeStatusReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindRedEnvelopeStatusRes

@implementation PB3FindRedEnvelopeStatusRes

@dynamic remainTime;
@dynamic joinUserListArray, joinUserListArray_Count;
@dynamic curTotalUserNum;
@dynamic curTotalPoint;
@dynamic curStatus;
@dynamic isNewTurn;

typedef struct PB3FindRedEnvelopeStatusRes__storage_ {
  uint32_t _has_storage_[1];
  PB3RedEnvelopeStatus curStatus;
  NSMutableArray *joinUserListArray;
  int64_t remainTime;
  int64_t curTotalUserNum;
  int64_t curTotalPoint;
} PB3FindRedEnvelopeStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remainTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeStatusRes_FieldNumber_RemainTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeStatusRes__storage_, remainTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "joinUserListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RedEnvelopePlayerInfo),
        .number = PB3FindRedEnvelopeStatusRes_FieldNumber_JoinUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeStatusRes__storage_, joinUserListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "curTotalUserNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeStatusRes_FieldNumber_CurTotalUserNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeStatusRes__storage_, curTotalUserNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "curTotalPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeStatusRes_FieldNumber_CurTotalPoint,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeStatusRes__storage_, curTotalPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "curStatus",
        .dataTypeSpecific.enumDescFunc = PB3RedEnvelopeStatus_EnumDescriptor,
        .number = PB3FindRedEnvelopeStatusRes_FieldNumber_CurStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeStatusRes__storage_, curStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isNewTurn",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeStatusRes_FieldNumber_IsNewTurn,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeStatusRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindRedEnvelopeStatusRes_CurStatus_RawValue(PB3FindRedEnvelopeStatusRes *message) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeStatusRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeStatusRes_FieldNumber_CurStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindRedEnvelopeStatusRes_CurStatus_RawValue(PB3FindRedEnvelopeStatusRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeStatusRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeStatusRes_FieldNumber_CurStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RedEnvelopeBestPlayerInfo

@implementation PB3RedEnvelopeBestPlayerInfo

@dynamic cycleNum;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic bestNum;

typedef struct PB3RedEnvelopeBestPlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *cycleNum;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerId2;
  int64_t bestNum;
} PB3RedEnvelopeBestPlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cycleNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeBestPlayerInfo_FieldNumber_CycleNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeBestPlayerInfo__storage_, cycleNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeBestPlayerInfo_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeBestPlayerInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeBestPlayerInfo_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeBestPlayerInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeBestPlayerInfo_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeBestPlayerInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeBestPlayerInfo_FieldNumber_PlayerIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeBestPlayerInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bestNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeBestPlayerInfo_FieldNumber_BestNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeBestPlayerInfo__storage_, bestNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopeBestPlayerInfo class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopeBestPlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListBeforeRedEnvelopeLogReq

@implementation PB3ListBeforeRedEnvelopeLogReq

@dynamic page;
@dynamic pageSize;
@dynamic typeId;

typedef struct PB3ListBeforeRedEnvelopeLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  PB3SubInfoActivityType typeId;
} PB3ListBeforeRedEnvelopeLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBeforeRedEnvelopeLogReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListBeforeRedEnvelopeLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListBeforeRedEnvelopeLogReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListBeforeRedEnvelopeLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3ListBeforeRedEnvelopeLogReq_FieldNumber_TypeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListBeforeRedEnvelopeLogReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListBeforeRedEnvelopeLogReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListBeforeRedEnvelopeLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ListBeforeRedEnvelopeLogReq_TypeId_RawValue(PB3ListBeforeRedEnvelopeLogReq *message) {
  GPBDescriptor *descriptor = [PB3ListBeforeRedEnvelopeLogReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ListBeforeRedEnvelopeLogReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ListBeforeRedEnvelopeLogReq_TypeId_RawValue(PB3ListBeforeRedEnvelopeLogReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ListBeforeRedEnvelopeLogReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ListBeforeRedEnvelopeLogReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ListBeforeRedEnvelopeLogRes

@implementation PB3ListBeforeRedEnvelopeLogRes

@dynamic listInfoArray, listInfoArray_Count;

typedef struct PB3ListBeforeRedEnvelopeLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listInfoArray;
} PB3ListBeforeRedEnvelopeLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RedEnvelopeBestPlayerInfo),
        .number = PB3ListBeforeRedEnvelopeLogRes_FieldNumber_ListInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListBeforeRedEnvelopeLogRes__storage_, listInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListBeforeRedEnvelopeLogRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListBeforeRedEnvelopeLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RedEnvelopePlayerLogInfo

@implementation PB3RedEnvelopePlayerLogInfo

@dynamic cycleNum;
@dynamic awardName;
@dynamic awardTime;
@dynamic awardNum;
@dynamic awardType;
@dynamic awardIcon;

typedef struct PB3RedEnvelopePlayerLogInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t awardType;
  NSString *cycleNum;
  NSString *awardName;
  NSString *awardIcon;
  int64_t awardTime;
  int64_t awardNum;
} PB3RedEnvelopePlayerLogInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cycleNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerLogInfo_FieldNumber_CycleNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerLogInfo__storage_, cycleNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerLogInfo_FieldNumber_AwardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerLogInfo__storage_, awardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerLogInfo_FieldNumber_AwardTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerLogInfo__storage_, awardTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerLogInfo_FieldNumber_AwardNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerLogInfo__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardType",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerLogInfo_FieldNumber_AwardType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerLogInfo__storage_, awardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerLogInfo_FieldNumber_AwardIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerLogInfo__storage_, awardIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopePlayerLogInfo class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopePlayerLogInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListPlayerRedEnvelopeLogReq

@implementation PB3ListPlayerRedEnvelopeLogReq

@dynamic page;
@dynamic pageSize;
@dynamic typeId;

typedef struct PB3ListPlayerRedEnvelopeLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  PB3SubInfoActivityType typeId;
} PB3ListPlayerRedEnvelopeLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListPlayerRedEnvelopeLogReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListPlayerRedEnvelopeLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListPlayerRedEnvelopeLogReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListPlayerRedEnvelopeLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3ListPlayerRedEnvelopeLogReq_FieldNumber_TypeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListPlayerRedEnvelopeLogReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListPlayerRedEnvelopeLogReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListPlayerRedEnvelopeLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ListPlayerRedEnvelopeLogReq_TypeId_RawValue(PB3ListPlayerRedEnvelopeLogReq *message) {
  GPBDescriptor *descriptor = [PB3ListPlayerRedEnvelopeLogReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ListPlayerRedEnvelopeLogReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ListPlayerRedEnvelopeLogReq_TypeId_RawValue(PB3ListPlayerRedEnvelopeLogReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ListPlayerRedEnvelopeLogReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ListPlayerRedEnvelopeLogReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ListPlayerRedEnvelopeLogRes

@implementation PB3ListPlayerRedEnvelopeLogRes

@dynamic listInfoArray, listInfoArray_Count;

typedef struct PB3ListPlayerRedEnvelopeLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listInfoArray;
} PB3ListPlayerRedEnvelopeLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RedEnvelopePlayerLogInfo),
        .number = PB3ListPlayerRedEnvelopeLogRes_FieldNumber_ListInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListPlayerRedEnvelopeLogRes__storage_, listInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListPlayerRedEnvelopeLogRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListPlayerRedEnvelopeLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RedEnvelopeAwardPlayerInfo

@implementation PB3RedEnvelopeAwardPlayerInfo

@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic awardNum;

typedef struct PB3RedEnvelopeAwardPlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerId2;
  int64_t awardNum;
} PB3RedEnvelopeAwardPlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardPlayerInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardPlayerInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardPlayerInfo_FieldNumber_PlayerId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardPlayerInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardPlayerInfo_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardPlayerInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardPlayerInfo_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardPlayerInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardPlayerInfo_FieldNumber_AwardNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardPlayerInfo__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopeAwardPlayerInfo class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopeAwardPlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckAwardInfo

@implementation PB3LuckAwardInfo

@dynamic type;
@dynamic luckAwardId;
@dynamic luckAwardNum;
@dynamic luckAwardName;
@dynamic luckAwardIcon;

typedef struct PB3LuckAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *luckAwardName;
  NSString *luckAwardIcon;
  int64_t luckAwardId;
  int64_t luckAwardNum;
} PB3LuckAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckAwardInfo_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckAwardInfo__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "luckAwardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckAwardInfo_FieldNumber_LuckAwardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckAwardInfo__storage_, luckAwardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "luckAwardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckAwardInfo_FieldNumber_LuckAwardNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LuckAwardInfo__storage_, luckAwardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "luckAwardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckAwardInfo_FieldNumber_LuckAwardName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LuckAwardInfo__storage_, luckAwardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "luckAwardIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckAwardInfo_FieldNumber_LuckAwardIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LuckAwardInfo__storage_, luckAwardIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckAwardInfo class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RedEnvelopeAwardInfo

@implementation PB3RedEnvelopeAwardInfo

@dynamic luckPlayerId;
@dynamic luckAwardListArray, luckAwardListArray_Count;
@dynamic listPlayerArray, listPlayerArray_Count;
@dynamic totalPlayerNum;
@dynamic totalEatScore;

typedef struct PB3RedEnvelopeAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *luckAwardListArray;
  NSMutableArray *listPlayerArray;
  int64_t luckPlayerId;
  int64_t totalPlayerNum;
  int64_t totalEatScore;
} PB3RedEnvelopeAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "luckPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardInfo_FieldNumber_LuckPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardInfo__storage_, luckPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "luckAwardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LuckAwardInfo),
        .number = PB3RedEnvelopeAwardInfo_FieldNumber_LuckAwardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardInfo__storage_, luckAwardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listPlayerArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RedEnvelopeAwardPlayerInfo),
        .number = PB3RedEnvelopeAwardInfo_FieldNumber_ListPlayerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardInfo__storage_, listPlayerArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalPlayerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardInfo_FieldNumber_TotalPlayerNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardInfo__storage_, totalPlayerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalEatScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeAwardInfo_FieldNumber_TotalEatScore,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeAwardInfo__storage_, totalEatScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopeAwardInfo class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopeAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RedEnvelopeJoinReq

@implementation PB3RedEnvelopeJoinReq

@dynamic typeId;

typedef struct PB3RedEnvelopeJoinReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType typeId;
} PB3RedEnvelopeJoinReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3RedEnvelopeJoinReq_FieldNumber_TypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeJoinReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopeJoinReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopeJoinReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RedEnvelopeJoinReq_TypeId_RawValue(PB3RedEnvelopeJoinReq *message) {
  GPBDescriptor *descriptor = [PB3RedEnvelopeJoinReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RedEnvelopeJoinReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RedEnvelopeJoinReq_TypeId_RawValue(PB3RedEnvelopeJoinReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RedEnvelopeJoinReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RedEnvelopeJoinReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RedEnvelopeJoinRes

@implementation PB3RedEnvelopeJoinRes


typedef struct PB3RedEnvelopeJoinRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RedEnvelopeJoinRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopeJoinRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RedEnvelopeJoinRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RedEnvelopeSwitchAutoJoinReq

@implementation PB3RedEnvelopeSwitchAutoJoinReq

@dynamic typeId;
@dynamic isAuto;

typedef struct PB3RedEnvelopeSwitchAutoJoinReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType typeId;
} PB3RedEnvelopeSwitchAutoJoinReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3RedEnvelopeSwitchAutoJoinReq_FieldNumber_TypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopeSwitchAutoJoinReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isAuto",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopeSwitchAutoJoinReq_FieldNumber_IsAuto,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopeSwitchAutoJoinReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopeSwitchAutoJoinReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RedEnvelopeSwitchAutoJoinReq_TypeId_RawValue(PB3RedEnvelopeSwitchAutoJoinReq *message) {
  GPBDescriptor *descriptor = [PB3RedEnvelopeSwitchAutoJoinReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RedEnvelopeSwitchAutoJoinReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RedEnvelopeSwitchAutoJoinReq_TypeId_RawValue(PB3RedEnvelopeSwitchAutoJoinReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RedEnvelopeSwitchAutoJoinReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RedEnvelopeSwitchAutoJoinReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RedEnvelopeSwitchAutoJoinRes

@implementation PB3RedEnvelopeSwitchAutoJoinRes


typedef struct PB3RedEnvelopeSwitchAutoJoinRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RedEnvelopeSwitchAutoJoinRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopeSwitchAutoJoinRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RedEnvelopeSwitchAutoJoinRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetRedEnvelopeFlagReq

@implementation PB3SetRedEnvelopeFlagReq

@dynamic typeId;
@dynamic flagId;

typedef struct PB3SetRedEnvelopeFlagReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType typeId;
  int32_t flagId;
} PB3SetRedEnvelopeFlagReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3SetRedEnvelopeFlagReq_FieldNumber_TypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetRedEnvelopeFlagReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "flagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRedEnvelopeFlagReq_FieldNumber_FlagId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetRedEnvelopeFlagReq__storage_, flagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRedEnvelopeFlagReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetRedEnvelopeFlagReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetRedEnvelopeFlagReq_TypeId_RawValue(PB3SetRedEnvelopeFlagReq *message) {
  GPBDescriptor *descriptor = [PB3SetRedEnvelopeFlagReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRedEnvelopeFlagReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetRedEnvelopeFlagReq_TypeId_RawValue(PB3SetRedEnvelopeFlagReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetRedEnvelopeFlagReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRedEnvelopeFlagReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SetRedEnvelopeFlagRes

@implementation PB3SetRedEnvelopeFlagRes


typedef struct PB3SetRedEnvelopeFlagRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetRedEnvelopeFlagRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRedEnvelopeFlagRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetRedEnvelopeFlagRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindRedEnvelopeSelfStatusReq

@implementation PB3FindRedEnvelopeSelfStatusReq

@dynamic typeId;

typedef struct PB3FindRedEnvelopeSelfStatusReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType typeId;
} PB3FindRedEnvelopeSelfStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3FindRedEnvelopeSelfStatusReq_FieldNumber_TypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeSelfStatusReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeSelfStatusReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeSelfStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindRedEnvelopeSelfStatusReq_TypeId_RawValue(PB3FindRedEnvelopeSelfStatusReq *message) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeSelfStatusReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeSelfStatusReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindRedEnvelopeSelfStatusReq_TypeId_RawValue(PB3FindRedEnvelopeSelfStatusReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeSelfStatusReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeSelfStatusReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindRedEnvelopeSelfStatusRes

@implementation PB3FindRedEnvelopeSelfStatusRes

@dynamic isAuto;
@dynamic isJoin;

typedef struct PB3FindRedEnvelopeSelfStatusRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FindRedEnvelopeSelfStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAuto",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeSelfStatusRes_FieldNumber_IsAuto,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isJoin",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeSelfStatusRes_FieldNumber_IsJoin,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeSelfStatusRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeSelfStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RedEnvelopePlayerFlagInfo

@implementation PB3RedEnvelopePlayerFlagInfo

@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic flagId;

typedef struct PB3RedEnvelopePlayerFlagInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t flagId;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerId2;
} PB3RedEnvelopePlayerFlagInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerFlagInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerFlagInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerFlagInfo_FieldNumber_PlayerId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerFlagInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerFlagInfo_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerFlagInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerFlagInfo_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerFlagInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RedEnvelopePlayerFlagInfo_FieldNumber_FlagId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RedEnvelopePlayerFlagInfo__storage_, flagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RedEnvelopePlayerFlagInfo class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RedEnvelopePlayerFlagInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindRedEnvelopeFlagInfoReq

@implementation PB3FindRedEnvelopeFlagInfoReq

@dynamic typeId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3FindRedEnvelopeFlagInfoReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType typeId;
  int32_t page;
  int32_t pageSize;
} PB3FindRedEnvelopeFlagInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3FindRedEnvelopeFlagInfoReq_FieldNumber_TypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeFlagInfoReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeFlagInfoReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeFlagInfoReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeFlagInfoReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeFlagInfoReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeFlagInfoReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeFlagInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindRedEnvelopeFlagInfoReq_TypeId_RawValue(PB3FindRedEnvelopeFlagInfoReq *message) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeFlagInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeFlagInfoReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindRedEnvelopeFlagInfoReq_TypeId_RawValue(PB3FindRedEnvelopeFlagInfoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeFlagInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeFlagInfoReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindRedEnvelopeFlagInfoRes

@implementation PB3FindRedEnvelopeFlagInfoRes

@dynamic flagListArray, flagListArray_Count;

typedef struct PB3FindRedEnvelopeFlagInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *flagListArray;
} PB3FindRedEnvelopeFlagInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flagListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RedEnvelopePlayerFlagInfo),
        .number = PB3FindRedEnvelopeFlagInfoRes_FieldNumber_FlagListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeFlagInfoRes__storage_, flagListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeFlagInfoRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeFlagInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PushRedEnvelopeStatus

@implementation PB3PushRedEnvelopeStatus

@dynamic pushType;
@dynamic hasNormalStatus, normalStatus;
@dynamic periodNum;
@dynamic hasSelfStatus, selfStatus;

typedef struct PB3PushRedEnvelopeStatus__storage_ {
  uint32_t _has_storage_[1];
  PB3PushRedEnvelopeType pushType;
  PB3FindRedEnvelopeStatusRes *normalStatus;
  NSString *periodNum;
  PB3FindRedEnvelopeSelfStatusRes *selfStatus;
} PB3PushRedEnvelopeStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pushType",
        .dataTypeSpecific.enumDescFunc = PB3PushRedEnvelopeType_EnumDescriptor,
        .number = PB3PushRedEnvelopeStatus_FieldNumber_PushType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PushRedEnvelopeStatus__storage_, pushType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "normalStatus",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FindRedEnvelopeStatusRes),
        .number = PB3PushRedEnvelopeStatus_FieldNumber_NormalStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PushRedEnvelopeStatus__storage_, normalStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushRedEnvelopeStatus_FieldNumber_PeriodNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PushRedEnvelopeStatus__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "selfStatus",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FindRedEnvelopeSelfStatusRes),
        .number = PB3PushRedEnvelopeStatus_FieldNumber_SelfStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PushRedEnvelopeStatus__storage_, selfStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PushRedEnvelopeStatus class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PushRedEnvelopeStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PushRedEnvelopeStatus_PushType_RawValue(PB3PushRedEnvelopeStatus *message) {
  GPBDescriptor *descriptor = [PB3PushRedEnvelopeStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PushRedEnvelopeStatus_FieldNumber_PushType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PushRedEnvelopeStatus_PushType_RawValue(PB3PushRedEnvelopeStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PushRedEnvelopeStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PushRedEnvelopeStatus_FieldNumber_PushType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindRedEnvelopeAwardInfoReq

@implementation PB3FindRedEnvelopeAwardInfoReq

@dynamic typeId;
@dynamic periodNum;

typedef struct PB3FindRedEnvelopeAwardInfoReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SubInfoActivityType typeId;
  NSString *periodNum;
} PB3FindRedEnvelopeAwardInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeId",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3FindRedEnvelopeAwardInfoReq_FieldNumber_TypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeAwardInfoReq__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeAwardInfoReq_FieldNumber_PeriodNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeAwardInfoReq__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeAwardInfoReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeAwardInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindRedEnvelopeAwardInfoReq_TypeId_RawValue(PB3FindRedEnvelopeAwardInfoReq *message) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeAwardInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeAwardInfoReq_FieldNumber_TypeId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindRedEnvelopeAwardInfoReq_TypeId_RawValue(PB3FindRedEnvelopeAwardInfoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindRedEnvelopeAwardInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindRedEnvelopeAwardInfoReq_FieldNumber_TypeId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindRedEnvelopeAwardInfoRes

@implementation PB3FindRedEnvelopeAwardInfoRes

@dynamic selfAwardNum;
@dynamic hasAwardInfo, awardInfo;

typedef struct PB3FindRedEnvelopeAwardInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3RedEnvelopeAwardInfo *awardInfo;
  int64_t selfAwardNum;
} PB3FindRedEnvelopeAwardInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selfAwardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindRedEnvelopeAwardInfoRes_FieldNumber_SelfAwardNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeAwardInfoRes__storage_, selfAwardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RedEnvelopeAwardInfo),
        .number = PB3FindRedEnvelopeAwardInfoRes_FieldNumber_AwardInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindRedEnvelopeAwardInfoRes__storage_, awardInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRedEnvelopeAwardInfoRes class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindRedEnvelopeAwardInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RandomUserId2Req

@implementation PB3RandomUserId2Req

@dynamic randomType;
@dynamic excludeNum;

typedef struct PB3RandomUserId2Req__storage_ {
  uint32_t _has_storage_[1];
  PB3Id2RandomType randomType;
  int32_t excludeNum;
} PB3RandomUserId2Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "randomType",
        .dataTypeSpecific.enumDescFunc = PB3Id2RandomType_EnumDescriptor,
        .number = PB3RandomUserId2Req_FieldNumber_RandomType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RandomUserId2Req__storage_, randomType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "excludeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandomUserId2Req_FieldNumber_ExcludeNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RandomUserId2Req__storage_, excludeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RandomUserId2Req class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RandomUserId2Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RandomUserId2Req_RandomType_RawValue(PB3RandomUserId2Req *message) {
  GPBDescriptor *descriptor = [PB3RandomUserId2Req descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RandomUserId2Req_FieldNumber_RandomType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RandomUserId2Req_RandomType_RawValue(PB3RandomUserId2Req *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RandomUserId2Req descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RandomUserId2Req_FieldNumber_RandomType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FindRandomUserId2StatusReq

@implementation PB3FindRandomUserId2StatusReq


typedef struct PB3FindRandomUserId2StatusReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FindRandomUserId2StatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindRandomUserId2StatusReq class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FindRandomUserId2StatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BindUserId2Req

@implementation PB3BindUserId2Req

@dynamic playerId;

typedef struct PB3BindUserId2Req__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3BindUserId2Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindUserId2Req_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BindUserId2Req__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindUserId2Req class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BindUserId2Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RandomUserId2Res

@implementation PB3RandomUserId2Res

@dynamic id2Num;
@dynamic changeRemainTime;
@dynamic remainChangeTimes;
@dynamic randType;
@dynamic isCovered;
@dynamic excludeNum;

typedef struct PB3RandomUserId2Res__storage_ {
  uint32_t _has_storage_[1];
  int32_t id2Num;
  int32_t changeRemainTime;
  int32_t remainChangeTimes;
  PB3Id2RandomType randType;
  int32_t excludeNum;
} PB3RandomUserId2Res__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id2Num",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandomUserId2Res_FieldNumber_Id2Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RandomUserId2Res__storage_, id2Num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "changeRemainTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandomUserId2Res_FieldNumber_ChangeRemainTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RandomUserId2Res__storage_, changeRemainTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remainChangeTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandomUserId2Res_FieldNumber_RemainChangeTimes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RandomUserId2Res__storage_, remainChangeTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "randType",
        .dataTypeSpecific.enumDescFunc = PB3Id2RandomType_EnumDescriptor,
        .number = PB3RandomUserId2Res_FieldNumber_RandType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RandomUserId2Res__storage_, randType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isCovered",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandomUserId2Res_FieldNumber_IsCovered,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "excludeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RandomUserId2Res_FieldNumber_ExcludeNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RandomUserId2Res__storage_, excludeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RandomUserId2Res class]
                                     rootClass:[PB3ActgameExtRoot class]
                                          file:PB3ActgameExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RandomUserId2Res__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RandomUserId2Res_RandType_RawValue(PB3RandomUserId2Res *message) {
  GPBDescriptor *descriptor = [PB3RandomUserId2Res descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RandomUserId2Res_FieldNumber_RandType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RandomUserId2Res_RandType_RawValue(PB3RandomUserId2Res *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RandomUserId2Res descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RandomUserId2Res_FieldNumber_RandType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
