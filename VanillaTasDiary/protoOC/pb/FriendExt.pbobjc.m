// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/friend.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/FriendExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
#import "pb/TeacherExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3FriendExtRoot

@implementation PB3FriendExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3FriendExtRoot_FileDescriptor

static GPBFileDescriptor *PB3FriendExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3IMAutoChatMsgType

GPBEnumDescriptor *PB3IMAutoChatMsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImAutoChatMsgTypeNone\000ImAutoChatMsgTypeT"
        "ext\000ImAutoChatMsgTypeVoice\000ImAutoChatMsg"
        "TypePic\000";
    static const int32_t values[] = {
        PB3IMAutoChatMsgType_ImAutoChatMsgTypeNone,
        PB3IMAutoChatMsgType_ImAutoChatMsgTypeText,
        PB3IMAutoChatMsgType_ImAutoChatMsgTypeVoice,
        PB3IMAutoChatMsgType_ImAutoChatMsgTypePic,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMAutoChatMsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMAutoChatMsgType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMAutoChatMsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMAutoChatMsgType_ImAutoChatMsgTypeNone:
    case PB3IMAutoChatMsgType_ImAutoChatMsgTypeText:
    case PB3IMAutoChatMsgType_ImAutoChatMsgTypeVoice:
    case PB3IMAutoChatMsgType_ImAutoChatMsgTypePic:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FriendErr

GPBEnumDescriptor *PB3FriendErr_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ErrNone\000ErrCodeAlready\000ErrCodePushFail\000E"
        "rrCodeFollowLimit\000ErrCodeNoPlayer\000ErrThe"
        "yHasIntimate\000ErrIntimateVersionToLow\000Err"
        "BlockFollow\000ErrCustomMax\000ErrGreetDirty\000E"
        "rrRequestTimeOut\000ErrFriendImImgLevel\000Err"
        "GetAllContacts\000ErrOperType\000ErrUnFollow\000E"
        "rrNotAllowFollow\000";
    static const int32_t values[] = {
        PB3FriendErr_ErrNone,
        PB3FriendErr_ErrCodeAlready,
        PB3FriendErr_ErrCodePushFail,
        PB3FriendErr_ErrCodeFollowLimit,
        PB3FriendErr_ErrCodeNoPlayer,
        PB3FriendErr_ErrTheyHasIntimate,
        PB3FriendErr_ErrIntimateVersionToLow,
        PB3FriendErr_ErrBlockFollow,
        PB3FriendErr_ErrCustomMax,
        PB3FriendErr_ErrGreetDirty,
        PB3FriendErr_ErrRequestTimeOut,
        PB3FriendErr_ErrFriendImImgLevel,
        PB3FriendErr_ErrGetAllContacts,
        PB3FriendErr_ErrOperType,
        PB3FriendErr_ErrUnFollow,
        PB3FriendErr_ErrNotAllowFollow,
    };
    static const char *extraTextFormatInfo = "\020\000\007\000\001\016\000\002\017\000\003\022\000\004\017\000\005\022\000\006\027\000\007\016\000\010\014\000\t\r\000\n\021\000\013\023\000\014\021\000\r\013\000\016\013\000\017\021\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FriendErr)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FriendErr_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FriendErr_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FriendErr_ErrNone:
    case PB3FriendErr_ErrCodeAlready:
    case PB3FriendErr_ErrCodePushFail:
    case PB3FriendErr_ErrCodeFollowLimit:
    case PB3FriendErr_ErrCodeNoPlayer:
    case PB3FriendErr_ErrTheyHasIntimate:
    case PB3FriendErr_ErrIntimateVersionToLow:
    case PB3FriendErr_ErrBlockFollow:
    case PB3FriendErr_ErrCustomMax:
    case PB3FriendErr_ErrGreetDirty:
    case PB3FriendErr_ErrRequestTimeOut:
    case PB3FriendErr_ErrFriendImImgLevel:
    case PB3FriendErr_ErrGetAllContacts:
    case PB3FriendErr_ErrOperType:
    case PB3FriendErr_ErrUnFollow:
    case PB3FriendErr_ErrNotAllowFollow:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IntimateErr

GPBEnumDescriptor *PB3IntimateErr_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IntimateSuccess\000ErrIntimateFull\000ErrTarge"
        "tIntimateFull\000ErrGenstoneNotEnough\000ErrTa"
        "rgetOffline\000ErrIntimateAlready\000ErrNoCard"
        "\000ErrApplyGenstoneNotEnough\000ErrUpdateRelF"
        "ail\000ErrIsSuccess\000ErrIsExpLack\000ErrIsGoldL"
        "ack\000ErrIsExpOrGoldLack\000ErrIsIntimateType"
        "\000ErrIsNotIntimate\000ErrIsNotGoods\000ErrIntim"
        "ateValNotEnough\000ErrIntimateExpNotEnough\000"
        "ErrIntimateTitleDirty\000ErrIntimateTitleLe"
        "ngth\000ErrIntimateTitleSame\000ErrIntimateTit"
        "leExpLevel\000ErrIntimateTypeTitleCannotCha"
        "nge\000";
    static const int32_t values[] = {
        PB3IntimateErr_IntimateSuccess,
        PB3IntimateErr_ErrIntimateFull,
        PB3IntimateErr_ErrTargetIntimateFull,
        PB3IntimateErr_ErrGenstoneNotEnough,
        PB3IntimateErr_ErrTargetOffline,
        PB3IntimateErr_ErrIntimateAlready,
        PB3IntimateErr_ErrNoCard,
        PB3IntimateErr_ErrApplyGenstoneNotEnough,
        PB3IntimateErr_ErrUpdateRelFail,
        PB3IntimateErr_ErrIsSuccess,
        PB3IntimateErr_ErrIsExpLack,
        PB3IntimateErr_ErrIsGoldLack,
        PB3IntimateErr_ErrIsExpOrGoldLack,
        PB3IntimateErr_ErrIsIntimateType,
        PB3IntimateErr_ErrIsNotIntimate,
        PB3IntimateErr_ErrIsNotGoods,
        PB3IntimateErr_ErrIntimateValNotEnough,
        PB3IntimateErr_ErrIntimateExpNotEnough,
        PB3IntimateErr_ErrIntimateTitleDirty,
        PB3IntimateErr_ErrIntimateTitleLength,
        PB3IntimateErr_ErrIntimateTitleSame,
        PB3IntimateErr_ErrIntimateTitleExpLevel,
        PB3IntimateErr_ErrIntimateTypeTitleCannotChange,
    };
    static const char *extraTextFormatInfo = "\027\000\010\347\000\001\017\000\002\025\000\003\024\000\004\020\000\005\022\000\006\t\000\007\031\000\010\020\000\t\004A\347\000\n\004A\343\344\000\013\004A\344\344\000\014\004A\343\342\344\344\000\r\004A\350\344\000\016\004A\343\350\000\017\004A\343\345\000\020\027\000\021\027\000\022\025\000\023\026\000\024\024\000\025\030\000\026\037\001\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IntimateErr)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IntimateErr_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IntimateErr_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IntimateErr_IntimateSuccess:
    case PB3IntimateErr_ErrIntimateFull:
    case PB3IntimateErr_ErrTargetIntimateFull:
    case PB3IntimateErr_ErrGenstoneNotEnough:
    case PB3IntimateErr_ErrTargetOffline:
    case PB3IntimateErr_ErrIntimateAlready:
    case PB3IntimateErr_ErrNoCard:
    case PB3IntimateErr_ErrApplyGenstoneNotEnough:
    case PB3IntimateErr_ErrUpdateRelFail:
    case PB3IntimateErr_ErrIsSuccess:
    case PB3IntimateErr_ErrIsExpLack:
    case PB3IntimateErr_ErrIsGoldLack:
    case PB3IntimateErr_ErrIsExpOrGoldLack:
    case PB3IntimateErr_ErrIsIntimateType:
    case PB3IntimateErr_ErrIsNotIntimate:
    case PB3IntimateErr_ErrIsNotGoods:
    case PB3IntimateErr_ErrIntimateValNotEnough:
    case PB3IntimateErr_ErrIntimateExpNotEnough:
    case PB3IntimateErr_ErrIntimateTitleDirty:
    case PB3IntimateErr_ErrIntimateTitleLength:
    case PB3IntimateErr_ErrIntimateTitleSame:
    case PB3IntimateErr_ErrIntimateTitleExpLevel:
    case PB3IntimateErr_ErrIntimateTypeTitleCannotChange:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IntimateCmdId

GPBEnumDescriptor *PB3IntimateCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IcZero\000IcIntimateApply\000IcIntimateApplyRe"
        "sult\000IcIntimateFriend\000IcIntimateDismiss\000"
        "IcIntimateExpVal\000IcIntimateUpLevel\000IcIma"
        "utoChatStatus\000";
    static const int32_t values[] = {
        PB3IntimateCmdId_IcZero,
        PB3IntimateCmdId_IcIntimateApply,
        PB3IntimateCmdId_IcIntimateApplyResult,
        PB3IntimateCmdId_IcIntimateFriend,
        PB3IntimateCmdId_IcIntimateDismiss,
        PB3IntimateCmdId_IcIntimateExpVal,
        PB3IntimateCmdId_IcIntimateUpLevel,
        PB3IntimateCmdId_IcImautoChatStatus,
    };
    static const char *extraTextFormatInfo = "\010\000b\204\000\001b\215\000\002b\223\000\003b\216\000\004b\217\000\005b\216\000\006b\217\000\007b\343\r\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IntimateCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IntimateCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IntimateCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IntimateCmdId_IcZero:
    case PB3IntimateCmdId_IcIntimateApply:
    case PB3IntimateCmdId_IcIntimateApplyResult:
    case PB3IntimateCmdId_IcIntimateFriend:
    case PB3IntimateCmdId_IcIntimateDismiss:
    case PB3IntimateCmdId_IcIntimateExpVal:
    case PB3IntimateCmdId_IcIntimateUpLevel:
    case PB3IntimateCmdId_IcImautoChatStatus:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FriendCmdId

GPBEnumDescriptor *PB3FriendCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None200\000OperCmdId\000OnlineCmdId\000EnterRoom\000"
        "OperNewCmdId\000GreetNovice\000GreetNotice\000Fan"
        "sList\000SearchFriend\000FollowIm\000TeacherStude"
        "ntRelationship\000GraduateApprenticePushCmd"
        "Id\000TeacherLevelUpPushCmdId\000TeacherStuden"
        "tSendGiftCmdId\000";
    static const int32_t values[] = {
        PB3FriendCmdId_None200,
        PB3FriendCmdId_OperCmdId,
        PB3FriendCmdId_OnlineCmdId,
        PB3FriendCmdId_EnterRoom,
        PB3FriendCmdId_OperNewCmdId,
        PB3FriendCmdId_GreetNovice,
        PB3FriendCmdId_GreetNotice,
        PB3FriendCmdId_FansList,
        PB3FriendCmdId_SearchFriend,
        PB3FriendCmdId_FollowIm,
        PB3FriendCmdId_TeacherStudentRelationship,
        PB3FriendCmdId_GraduateApprenticePushCmdId,
        PB3FriendCmdId_TeacherLevelUpPushCmdId,
        PB3FriendCmdId_TeacherStudentSendGiftCmdId,
    };
    static const char *extraTextFormatInfo = "\t\005\013\000\006\013\000\007\010\000\010\014\000\t\010\000\n\032\000\013\026\343\342\000\014\022\343\342\000\r\026\343\342\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FriendCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FriendCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FriendCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FriendCmdId_None200:
    case PB3FriendCmdId_OperCmdId:
    case PB3FriendCmdId_OnlineCmdId:
    case PB3FriendCmdId_EnterRoom:
    case PB3FriendCmdId_OperNewCmdId:
    case PB3FriendCmdId_GreetNovice:
    case PB3FriendCmdId_GreetNotice:
    case PB3FriendCmdId_FansList:
    case PB3FriendCmdId_SearchFriend:
    case PB3FriendCmdId_FollowIm:
    case PB3FriendCmdId_TeacherStudentRelationship:
    case PB3FriendCmdId_GraduateApprenticePushCmdId:
    case PB3FriendCmdId_TeacherLevelUpPushCmdId:
    case PB3FriendCmdId_TeacherStudentSendGiftCmdId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OperType

GPBEnumDescriptor *PB3OperType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None2001\000Follow\000Unfollow\000Block\000Unblock\000R"
        "emoveFan\000";
    static const int32_t values[] = {
        PB3OperType_None2001,
        PB3OperType_Follow,
        PB3OperType_Unfollow,
        PB3OperType_Block,
        PB3OperType_Unblock,
        PB3OperType_RemoveFan,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OperType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OperType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OperType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OperType_None2001:
    case PB3OperType_Follow:
    case PB3OperType_Unfollow:
    case PB3OperType_Block:
    case PB3OperType_Unblock:
    case PB3OperType_RemoveFan:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PrivateMessageType

GPBEnumDescriptor *PB3PrivateMessageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PmtZero\000PmtText\000PmtPicture\000PmtVoice\000PmtV"
        "ideo\000";
    static const int32_t values[] = {
        PB3PrivateMessageType_PmtZero,
        PB3PrivateMessageType_PmtText,
        PB3PrivateMessageType_PmtPicture,
        PB3PrivateMessageType_PmtVoice,
        PB3PrivateMessageType_PmtVideo,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PrivateMessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PrivateMessageType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PrivateMessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PrivateMessageType_PmtZero:
    case PB3PrivateMessageType_PmtText:
    case PB3PrivateMessageType_PmtPicture:
    case PB3PrivateMessageType_PmtVoice:
    case PB3PrivateMessageType_PmtVideo:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PrivateMessageRecordType

GPBEnumDescriptor *PB3PrivateMessageRecordType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PmrZero\000PmrSend\000PmrReceive\000PmrDelete\000Pmr"
        "DeletePlayer\000";
    static const int32_t values[] = {
        PB3PrivateMessageRecordType_PmrZero,
        PB3PrivateMessageRecordType_PmrSend,
        PB3PrivateMessageRecordType_PmrReceive,
        PB3PrivateMessageRecordType_PmrDelete,
        PB3PrivateMessageRecordType_PmrDeletePlayer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PrivateMessageRecordType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PrivateMessageRecordType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PrivateMessageRecordType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PrivateMessageRecordType_PmrZero:
    case PB3PrivateMessageRecordType_PmrSend:
    case PB3PrivateMessageRecordType_PmrReceive:
    case PB3PrivateMessageRecordType_PmrDelete:
    case PB3PrivateMessageRecordType_PmrDeletePlayer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IntimateType

GPBEnumDescriptor *PB3IntimateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InitmateNone\000Initmate\000Love\000Loyal\000Honor\000A"
        "ngel\000Only\000Sansei\000All\000";
    static const int32_t values[] = {
        PB3IntimateType_InitmateNone,
        PB3IntimateType_Initmate,
        PB3IntimateType_Love,
        PB3IntimateType_Loyal,
        PB3IntimateType_Honor,
        PB3IntimateType_Angel,
        PB3IntimateType_Only,
        PB3IntimateType_Sansei,
        PB3IntimateType_All,
    };
    static const char *extraTextFormatInfo = "\t\000\010\204\000\001\010\000\002\004\000\003\005\000\004\005\000\005\005\000\006\004\000\007\006\000\010\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IntimateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IntimateType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IntimateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IntimateType_InitmateNone:
    case PB3IntimateType_Initmate:
    case PB3IntimateType_Love:
    case PB3IntimateType_Loyal:
    case PB3IntimateType_Honor:
    case PB3IntimateType_Angel:
    case PB3IntimateType_Only:
    case PB3IntimateType_Sansei:
    case PB3IntimateType_All:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GreetContentStatus

GPBEnumDescriptor *PB3GreetContentStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GcstatusChecking\000GcstatusPass\000GcstatusRe"
        "fuse\000";
    static const int32_t values[] = {
        PB3GreetContentStatus_GcstatusChecking,
        PB3GreetContentStatus_GcstatusPass,
        PB3GreetContentStatus_GcstatusRefuse,
    };
    static const char *extraTextFormatInfo = "\003\000c\005\210\000\001c\005\204\000\002c\005\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GreetContentStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GreetContentStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GreetContentStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GreetContentStatus_GcstatusChecking:
    case PB3GreetContentStatus_GcstatusPass:
    case PB3GreetContentStatus_GcstatusRefuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GreetContentChecked

GPBEnumDescriptor *PB3GreetContentChecked_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GccheckNone\000GccheckUnused\000GccheckUsed\000";
    static const int32_t values[] = {
        PB3GreetContentChecked_GccheckNone,
        PB3GreetContentChecked_GccheckUnused,
        PB3GreetContentChecked_GccheckUsed,
    };
    static const char *extraTextFormatInfo = "\003\000c\004\204\000\001c\004\206\000\002c\004\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GreetContentChecked)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GreetContentChecked_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GreetContentChecked_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GreetContentChecked_GccheckNone:
    case PB3GreetContentChecked_GccheckUnused:
    case PB3GreetContentChecked_GccheckUsed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GreetContentType

GPBEnumDescriptor *PB3GreetContentType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GctypeNone\000GctypeUser\000GctypeSystem\000";
    static const int32_t values[] = {
        PB3GreetContentType_GctypeNone,
        PB3GreetContentType_GctypeUser,
        PB3GreetContentType_GctypeSystem,
    };
    static const char *extraTextFormatInfo = "\003\000c\003\204\000\001c\003\204\000\002c\003\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GreetContentType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GreetContentType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GreetContentType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GreetContentType_GctypeNone:
    case PB3GreetContentType_GctypeUser:
    case PB3GreetContentType_GctypeSystem:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UserGreetContentType

GPBEnumDescriptor *PB3UserGreetContentType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UgctypeText\000UgctypeVoice\000";
    static const int32_t values[] = {
        PB3UserGreetContentType_UgctypeText,
        PB3UserGreetContentType_UgctypeVoice,
    };
    static const char *extraTextFormatInfo = "\002\000d\003\204\000\001d\003\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserGreetContentType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserGreetContentType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserGreetContentType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserGreetContentType_UgctypeText:
    case PB3UserGreetContentType_UgctypeVoice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ImCustomMsgType

GPBEnumDescriptor *PB3ImCustomMsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IcmyZero\000IcmyInvivateGame\000";
    static const int32_t values[] = {
        PB3ImCustomMsgType_IcmyZero,
        PB3ImCustomMsgType_IcmyInvivateGame,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ImCustomMsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ImCustomMsgType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ImCustomMsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ImCustomMsgType_IcmyZero:
    case PB3ImCustomMsgType_IcmyInvivateGame:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SearchFriendType

GPBEnumDescriptor *PB3SearchFriendType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SftNone\000SftAll\000SftFriend\000SftFollow\000SftFa"
        "ns\000";
    static const int32_t values[] = {
        PB3SearchFriendType_SftNone,
        PB3SearchFriendType_SftAll,
        PB3SearchFriendType_SftFriend,
        PB3SearchFriendType_SftFollow,
        PB3SearchFriendType_SftFans,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SearchFriendType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SearchFriendType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SearchFriendType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SearchFriendType_SftNone:
    case PB3SearchFriendType_SftAll:
    case PB3SearchFriendType_SftFriend:
    case PB3SearchFriendType_SftFollow:
    case PB3SearchFriendType_SftFans:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SearchFriendResultOption

GPBEnumDescriptor *PB3SearchFriendResultOption_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SfroNone\000SfroFirstPart\000SfroAllResult\000";
    static const int32_t values[] = {
        PB3SearchFriendResultOption_SfroNone,
        PB3SearchFriendResultOption_SfroFirstPart,
        PB3SearchFriendResultOption_SfroAllResult,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SearchFriendResultOption)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SearchFriendResultOption_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SearchFriendResultOption_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SearchFriendResultOption_SfroNone:
    case PB3SearchFriendResultOption_SfroFirstPart:
    case PB3SearchFriendResultOption_SfroAllResult:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ContactType

GPBEnumDescriptor *PB3ContactType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CtNone\000CtAll\000CtFriend\000CtFollow\000CtFans\000Ct"
        "Ban\000";
    static const int32_t values[] = {
        PB3ContactType_CtNone,
        PB3ContactType_CtAll,
        PB3ContactType_CtFriend,
        PB3ContactType_CtFollow,
        PB3ContactType_CtFans,
        PB3ContactType_CtBan,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ContactType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ContactType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ContactType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ContactType_CtNone:
    case PB3ContactType_CtAll:
    case PB3ContactType_CtFriend:
    case PB3ContactType_CtFollow:
    case PB3ContactType_CtFans:
    case PB3ContactType_CtBan:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FriendCategoryOper

GPBEnumDescriptor *PB3FriendCategoryOper_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FcoUnset\000FcoSet\000";
    static const int32_t values[] = {
        PB3FriendCategoryOper_FcoUnset,
        PB3FriendCategoryOper_FcoSet,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FriendCategoryOper)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FriendCategoryOper_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FriendCategoryOper_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FriendCategoryOper_FcoUnset:
    case PB3FriendCategoryOper_FcoSet:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3TeacherStudentOptType

GPBEnumDescriptor *PB3TeacherStudentOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TsotNone\000TsotApprentice\000TostStudent\000Tsot"
        "Accept\000TsotRefuse\000TsotRelieve\000TsotAsk\000";
    static const int32_t values[] = {
        PB3TeacherStudentOptType_TsotNone,
        PB3TeacherStudentOptType_TsotApprentice,
        PB3TeacherStudentOptType_TostStudent,
        PB3TeacherStudentOptType_TsotAccept,
        PB3TeacherStudentOptType_TsotRefuse,
        PB3TeacherStudentOptType_TsotRelieve,
        PB3TeacherStudentOptType_TsotAsk,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3TeacherStudentOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3TeacherStudentOptType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3TeacherStudentOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3TeacherStudentOptType_TsotNone:
    case PB3TeacherStudentOptType_TsotApprentice:
    case PB3TeacherStudentOptType_TostStudent:
    case PB3TeacherStudentOptType_TsotAccept:
    case PB3TeacherStudentOptType_TsotRefuse:
    case PB3TeacherStudentOptType_TsotRelieve:
    case PB3TeacherStudentOptType_TsotAsk:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AppletType

GPBEnumDescriptor *PB3AppletType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ApptZero\000ApptPromoter\000";
    static const int32_t values[] = {
        PB3AppletType_ApptZero,
        PB3AppletType_ApptPromoter,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AppletType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AppletType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AppletType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AppletType_ApptZero:
    case PB3AppletType_ApptPromoter:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AppletPowerType

GPBEnumDescriptor *PB3AppletPowerType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AptZero\000AptMember\000AptAdmin\000";
    static const int32_t values[] = {
        PB3AppletPowerType_AptZero,
        PB3AppletPowerType_AptMember,
        PB3AppletPowerType_AptAdmin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AppletPowerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AppletPowerType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AppletPowerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AppletPowerType_AptZero:
    case PB3AppletPowerType_AptMember:
    case PB3AppletPowerType_AptAdmin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IMCloudCustomDataStyle

GPBEnumDescriptor *PB3IMCloudCustomDataStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImccdsNone\000ImccdsNormal\000ImccdsWarning\000";
    static const int32_t values[] = {
        PB3IMCloudCustomDataStyle_ImccdsNone,
        PB3IMCloudCustomDataStyle_ImccdsNormal,
        PB3IMCloudCustomDataStyle_ImccdsWarning,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMCloudCustomDataStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMCloudCustomDataStyle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMCloudCustomDataStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMCloudCustomDataStyle_ImccdsNone:
    case PB3IMCloudCustomDataStyle_ImccdsNormal:
    case PB3IMCloudCustomDataStyle_ImccdsWarning:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IMCloudCustomDataMsgType

GPBEnumDescriptor *PB3IMCloudCustomDataMsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImccdmtNone\000ImccdmtNormal\000ImccdmtAppeal\000";
    static const int32_t values[] = {
        PB3IMCloudCustomDataMsgType_ImccdmtNone,
        PB3IMCloudCustomDataMsgType_ImccdmtNormal,
        PB3IMCloudCustomDataMsgType_ImccdmtAppeal,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMCloudCustomDataMsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMCloudCustomDataMsgType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMCloudCustomDataMsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMCloudCustomDataMsgType_ImccdmtNone:
    case PB3IMCloudCustomDataMsgType_ImccdmtNormal:
    case PB3IMCloudCustomDataMsgType_ImccdmtAppeal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3IMAutoChatPush

@implementation PB3IMAutoChatPush

@dynamic status;
@dynamic giftId;
@dynamic targetId;

typedef struct PB3IMAutoChatPush__storage_ {
  uint32_t _has_storage_[1];
  PB3IMAutoChatStatus status;
  int32_t giftId;
  int64_t targetId;
} PB3IMAutoChatPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3IMAutoChatStatus_EnumDescriptor,
        .number = PB3IMAutoChatPush_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IMAutoChatPush__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMAutoChatPush_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IMAutoChatPush__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMAutoChatPush_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IMAutoChatPush__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMAutoChatPush class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMAutoChatPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IMAutoChatPush_Status_RawValue(PB3IMAutoChatPush *message) {
  GPBDescriptor *descriptor = [PB3IMAutoChatPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMAutoChatPush_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IMAutoChatPush_Status_RawValue(PB3IMAutoChatPush *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IMAutoChatPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMAutoChatPush_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PrivateMessage

@implementation PB3PrivateMessage

@dynamic type;
@dynamic sentAt;
@dynamic from;
@dynamic fromName;
@dynamic to;
@dynamic content;
@dynamic addon;

typedef struct PB3PrivateMessage__storage_ {
  uint32_t _has_storage_[1];
  PB3PrivateMessageType type;
  uint32_t sentAt;
  NSString *fromName;
  NSString *content;
  NSString *addon;
  int64_t from;
  int64_t to;
} PB3PrivateMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3PrivateMessageType_EnumDescriptor,
        .number = PB3PrivateMessage_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PrivateMessage__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sentAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessage_FieldNumber_SentAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PrivateMessage__storage_, sentAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessage_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PrivateMessage__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fromName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessage_FieldNumber_FromName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PrivateMessage__storage_, fromName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessage_FieldNumber_To,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PrivateMessage__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessage_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PrivateMessage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessage_FieldNumber_Addon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PrivateMessage__storage_, addon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivateMessage class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivateMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PrivateMessage_Type_RawValue(PB3PrivateMessage *message) {
  GPBDescriptor *descriptor = [PB3PrivateMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PrivateMessage_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PrivateMessage_Type_RawValue(PB3PrivateMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PrivateMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PrivateMessage_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PrivateMessageRecord

@implementation PB3PrivateMessageRecord

@dynamic hasMessage, message;
@dynamic type;
@dynamic attachment;

typedef struct PB3PrivateMessageRecord__storage_ {
  uint32_t _has_storage_[1];
  PB3PrivateMessageRecordType type;
  PB3PrivateMessage *message;
  NSString *attachment;
} PB3PrivateMessageRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PrivateMessage),
        .number = PB3PrivateMessageRecord_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PrivateMessageRecord__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3PrivateMessageRecordType_EnumDescriptor,
        .number = PB3PrivateMessageRecord_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PrivateMessageRecord__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "attachment",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessageRecord_FieldNumber_Attachment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PrivateMessageRecord__storage_, attachment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivateMessageRecord class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivateMessageRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PrivateMessageRecord_Type_RawValue(PB3PrivateMessageRecord *message) {
  GPBDescriptor *descriptor = [PB3PrivateMessageRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PrivateMessageRecord_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PrivateMessageRecord_Type_RawValue(PB3PrivateMessageRecord *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PrivateMessageRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PrivateMessageRecord_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Online

@implementation PB3Online

@dynamic id_p;
@dynamic online;

typedef struct PB3Online__storage_ {
  uint32_t _has_storage_[1];
  uint64_t id_p;
} PB3Online__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Online_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Online__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "online",
        .dataTypeSpecific.className = NULL,
        .number = PB3Online_FieldNumber_Online,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Online class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Online__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendGame

@implementation PB3FriendGame

@dynamic gameId;
@dynamic gameName;

typedef struct PB3FriendGame__storage_ {
  uint32_t _has_storage_[1];
  int32_t gameId;
  NSString *gameName;
} PB3FriendGame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendGame_FieldNumber_GameId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendGame__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendGame_FieldNumber_GameName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendGame__storage_, gameName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendGame class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendGame__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Friender

@implementation PB3Friender

@dynamic id_p;
@dynamic type;
@dynamic alias;
@dynamic name;
@dynamic sex;
@dynamic icon;
@dynamic created;
@dynamic flag;
@dynamic online;
@dynamic operType;
@dynamic roomId;
@dynamic signature;
@dynamic id2;
@dynamic appId;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic roomName;
@dynamic isDelete;
@dynamic isCategory;
@dynamic redPoint;
@dynamic hasPlayGame, playGame;

typedef struct PB3Friender__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t sex;
  int32_t operType;
  int32_t roomId;
  PB3AppId appId;
  int32_t wealthLevel;
  int32_t charmLevel;
  uint32_t redPoint;
  NSString *alias;
  NSString *name;
  NSString *icon;
  NSString *signature;
  NSString *roomName;
  PB3FriendGame *playGame;
  uint64_t id_p;
  int64_t created;
  int64_t flag;
  uint64_t id2;
} PB3Friender__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Alias,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Icon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Flag,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, flag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "online",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Online,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "operType",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_OperType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, operType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_RoomId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Signature,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_Id2,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "appId",
        .dataTypeSpecific.enumDescFunc = PB3AppId_EnumDescriptor,
        .number = PB3Friender_FieldNumber_AppId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_WealthLevel,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_CharmLevel,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_RoomName,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isDelete",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_IsDelete,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isCategory",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_IsCategory,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "redPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3Friender_FieldNumber_RedPoint,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, redPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "playGame",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FriendGame),
        .number = PB3Friender_FieldNumber_PlayGame,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3Friender__storage_, playGame),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Friender class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Friender__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Friender_AppId_RawValue(PB3Friender *message) {
  GPBDescriptor *descriptor = [PB3Friender descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Friender_FieldNumber_AppId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Friender_AppId_RawValue(PB3Friender *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Friender descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Friender_FieldNumber_AppId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomNotice

@implementation PB3RoomNotice

@dynamic playerId;
@dynamic roomId;
@dynamic roomName;
@dynamic friendType;
@dynamic isIntimate;

typedef struct PB3RoomNotice__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t friendType;
  NSString *roomName;
  uint64_t playerId;
} PB3RoomNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomNotice_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomNotice__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomNotice_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomNotice__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomNotice_FieldNumber_RoomName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomNotice__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendType",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomNotice_FieldNumber_FriendType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomNotice__storage_, friendType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isIntimate",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomNotice_FieldNumber_IsIntimate,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomNotice class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendCount

@implementation PB3FriendCount

@dynamic id_p;
@dynamic count;

typedef struct PB3FriendCount__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
  int64_t count;
} PB3FriendCount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendCount_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendCount__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendCount_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendCount__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendCount class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendCount__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFriend

@implementation PB3IntimateFriend

@dynamic playerId;
@dynamic friendId;
@dynamic friendName;
@dynamic friendIcon;
@dynamic type;
@dynamic roomTime;
@dynamic created;
@dynamic type2;
@dynamic friendSex;
@dynamic intimateVal;
@dynamic expLevel;
@dynamic exp;
@dynamic currLevelExp;
@dynamic nextLevelExp;
@dynamic intimateTitle;
@dynamic isDelete;
@dynamic roomId;
@dynamic roomName;
@dynamic signature;

typedef struct PB3IntimateFriend__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateType type;
  int32_t type2;
  PB3SexType friendSex;
  int32_t intimateVal;
  int32_t expLevel;
  int32_t exp;
  int32_t currLevelExp;
  int32_t nextLevelExp;
  NSString *friendName;
  NSString *friendIcon;
  NSString *intimateTitle;
  NSString *roomName;
  NSString *signature;
  int64_t playerId;
  int64_t friendId;
  int64_t roomTime;
  int64_t created;
  int64_t roomId;
} PB3IntimateFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_FriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_FriendName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, friendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_FriendIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, friendIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateType_EnumDescriptor,
        .number = PB3IntimateFriend_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_RoomTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, roomTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_Type2,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, type2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendSex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3IntimateFriend_FieldNumber_FriendSex,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, friendSex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "intimateVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_IntimateVal,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, intimateVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_ExpLevel,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, expLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_Exp,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currLevelExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_CurrLevelExp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, currLevelExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextLevelExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_NextLevelExp,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, nextLevelExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_IntimateTitle,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, intimateTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isDelete",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_IsDelete,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_RoomId,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_RoomName,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFriend_FieldNumber_Signature,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3IntimateFriend__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFriend class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateFriend_Type_RawValue(PB3IntimateFriend *message) {
  GPBDescriptor *descriptor = [PB3IntimateFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFriend_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateFriend_Type_RawValue(PB3IntimateFriend *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFriend_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3IntimateFriend_FriendSex_RawValue(PB3IntimateFriend *message) {
  GPBDescriptor *descriptor = [PB3IntimateFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFriend_FieldNumber_FriendSex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateFriend_FriendSex_RawValue(PB3IntimateFriend *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFriend_FieldNumber_FriendSex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateMsg

@implementation PB3IntimateMsg

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic friendId;
@dynamic friendName;
@dynamic type;
@dynamic roomId;
@dynamic roomId2;
@dynamic type2;
@dynamic intimateText;
@dynamic publicText;
@dynamic roomName;
@dynamic isPushAll;

typedef struct PB3IntimateMsg__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateType type;
  int32_t type2;
  NSString *playerName;
  NSString *playerIcon;
  NSString *friendName;
  NSString *intimateText;
  NSString *publicText;
  NSString *roomName;
  int64_t playerId;
  int64_t friendId;
  int64_t roomId;
  int64_t roomId2;
} PB3IntimateMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_FriendId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_FriendName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, friendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateType_EnumDescriptor,
        .number = PB3IntimateMsg_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_RoomId2,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, roomId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_Type2,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, type2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_IntimateText,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, intimateText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_PublicText,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, publicText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_RoomName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateMsg__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isPushAll",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateMsg_FieldNumber_IsPushAll,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateMsg class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateMsg_Type_RawValue(PB3IntimateMsg *message) {
  GPBDescriptor *descriptor = [PB3IntimateMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateMsg_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateMsg_Type_RawValue(PB3IntimateMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateMsg_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateLog

@implementation PB3IntimateLog

@dynamic playerId;
@dynamic friendId;
@dynamic friendName;
@dynamic friendIcon;
@dynamic type;
@dynamic applyId;
@dynamic applyAt;
@dynamic dismissId;
@dynamic dismissAt;
@dynamic roomTime;
@dynamic lev;

typedef struct PB3IntimateLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t lev;
  NSString *friendName;
  NSString *friendIcon;
  int64_t playerId;
  int64_t friendId;
  int64_t applyId;
  int64_t applyAt;
  int64_t dismissId;
  int64_t dismissAt;
  int64_t roomTime;
} PB3IntimateLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_FriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_FriendName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, friendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_FriendIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, friendIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "applyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_ApplyId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, applyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "applyAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_ApplyAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, applyAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dismissId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_DismissId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, dismissId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dismissAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_DismissAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, dismissAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_RoomTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, roomTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateLog_FieldNumber_Lev,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateLog__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateLog class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastIntimateVal

@implementation PB3BroadcastIntimateVal

@dynamic playerId;
@dynamic friendId;
@dynamic friendName;
@dynamic intimateVal;
@dynamic exp;
@dynamic content;

typedef struct PB3BroadcastIntimateVal__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateVal;
  int32_t exp;
  NSString *friendName;
  NSString *content;
  int64_t playerId;
  int64_t friendId;
} PB3BroadcastIntimateVal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateVal_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateVal__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateVal_FieldNumber_FriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateVal__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateVal_FieldNumber_IntimateVal,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateVal__storage_, intimateVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateVal_FieldNumber_Exp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateVal__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateVal_FieldNumber_FriendName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateVal__storage_, friendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateVal_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateVal__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastIntimateVal class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastIntimateVal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastIntimateLevel

@implementation PB3BroadcastIntimateLevel

@dynamic playerId;
@dynamic playerName;
@dynamic friendId;
@dynamic friendName;
@dynamic type;
@dynamic expLevel;

typedef struct PB3BroadcastIntimateLevel__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t expLevel;
  NSString *playerName;
  NSString *friendName;
  int64_t playerId;
  int64_t friendId;
} PB3BroadcastIntimateLevel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateLevel_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateLevel__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateLevel_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateLevel__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateLevel_FieldNumber_FriendId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateLevel__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateLevel_FieldNumber_FriendName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateLevel__storage_, friendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateLevel_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateLevel__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateLevel_FieldNumber_ExpLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateLevel__storage_, expLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastIntimateLevel class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastIntimateLevel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateApplyNotice

@implementation PB3IntimateApplyNotice

@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic type;
@dynamic agree;
@dynamic msg;
@dynamic type2;
@dynamic intimateType;

typedef struct PB3IntimateApplyNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateType type;
  int32_t type2;
  int32_t intimateType;
  NSString *playerName;
  NSString *msg;
  int64_t playerId;
  int64_t playerId2;
} PB3IntimateApplyNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateApplyNotice_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateApplyNotice__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateApplyNotice_FieldNumber_PlayerId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateApplyNotice__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateApplyNotice_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateApplyNotice__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateType_EnumDescriptor,
        .number = PB3IntimateApplyNotice_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateApplyNotice__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "agree",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateApplyNotice_FieldNumber_Agree,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateApplyNotice_FieldNumber_Msg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateApplyNotice__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateApplyNotice_FieldNumber_Type2,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateApplyNotice__storage_, type2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateType",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateApplyNotice_FieldNumber_IntimateType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateApplyNotice__storage_, intimateType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateApplyNotice class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateApplyNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateApplyNotice_Type_RawValue(PB3IntimateApplyNotice *message) {
  GPBDescriptor *descriptor = [PB3IntimateApplyNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateApplyNotice_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateApplyNotice_Type_RawValue(PB3IntimateApplyNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateApplyNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateApplyNotice_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateFriendBC

@implementation PB3IntimateFriendBC

@dynamic hasMsg, msg;

typedef struct PB3IntimateFriendBC__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateMsg *msg;
} PB3IntimateFriendBC__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateMsg),
        .number = PB3IntimateFriendBC_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFriendBC__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFriendBC class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFriendBC__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendCommonRes

@implementation PB3FriendCommonRes


typedef struct PB3FriendCommonRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FriendCommonRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendCommonRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FriendCommonRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendListReq

@implementation PB3FriendListReq

@dynamic type;

typedef struct PB3FriendListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3FriendType type;
} PB3FriendListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3FriendType_EnumDescriptor,
        .number = PB3FriendListReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendListReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FriendListReq_Type_RawValue(PB3FriendListReq *message) {
  GPBDescriptor *descriptor = [PB3FriendListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendListReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FriendListReq_Type_RawValue(PB3FriendListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FriendListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendListReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FriendListRes

@implementation PB3FriendListRes

@dynamic listArray, listArray_Count;

typedef struct PB3FriendListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3FriendListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3FriendListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FriendListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendAliasReq

@implementation PB3FriendAliasReq

@dynamic id_p;
@dynamic name;

typedef struct PB3FriendAliasReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  uint64_t id_p;
} PB3FriendAliasReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendAliasReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendAliasReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendAliasReq_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendAliasReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendAliasReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendAliasReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendOperReq

@implementation PB3FriendOperReq

@dynamic id_p;
@dynamic oper;

typedef struct PB3FriendOperReq__storage_ {
  uint32_t _has_storage_[1];
  PB3OperType oper;
  uint64_t id_p;
} PB3FriendOperReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendOperReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendOperReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "oper",
        .dataTypeSpecific.enumDescFunc = PB3OperType_EnumDescriptor,
        .number = PB3FriendOperReq_FieldNumber_Oper,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendOperReq__storage_, oper),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendOperReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendOperReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FriendOperReq_Oper_RawValue(PB3FriendOperReq *message) {
  GPBDescriptor *descriptor = [PB3FriendOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendOperReq_FieldNumber_Oper];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FriendOperReq_Oper_RawValue(PB3FriendOperReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FriendOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendOperReq_FieldNumber_Oper];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FriendOperRes

@implementation PB3FriendOperRes

@dynamic hasFriend_p, friend_p;
@dynamic hasOperFriend, operFriend;

typedef struct PB3FriendOperRes__storage_ {
  uint32_t _has_storage_[1];
  PB3Friender *friend_p;
  PB3Friender *operFriend;
} PB3FriendOperRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friend_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3FriendOperRes_FieldNumber_Friend_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendOperRes__storage_, friend_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "operFriend",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3FriendOperRes_FieldNumber_OperFriend,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendOperRes__storage_, operFriend),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendOperRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendOperRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendBatchOperReq

@implementation PB3FriendBatchOperReq

@dynamic playerIdArray, playerIdArray_Count;
@dynamic oper;

typedef struct PB3FriendBatchOperReq__storage_ {
  uint32_t _has_storage_[1];
  PB3OperType oper;
  GPBInt64Array *playerIdArray;
} PB3FriendBatchOperReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendBatchOperReq_FieldNumber_PlayerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FriendBatchOperReq__storage_, playerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "oper",
        .dataTypeSpecific.enumDescFunc = PB3OperType_EnumDescriptor,
        .number = PB3FriendBatchOperReq_FieldNumber_Oper,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendBatchOperReq__storage_, oper),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendBatchOperReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendBatchOperReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FriendBatchOperReq_Oper_RawValue(PB3FriendBatchOperReq *message) {
  GPBDescriptor *descriptor = [PB3FriendBatchOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendBatchOperReq_FieldNumber_Oper];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FriendBatchOperReq_Oper_RawValue(PB3FriendBatchOperReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FriendBatchOperReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendBatchOperReq_FieldNumber_Oper];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FriendBatchOperRes

@implementation PB3FriendBatchOperRes

@dynamic friendArray, friendArray_Count;
@dynamic operFriendArray, operFriendArray_Count;

typedef struct PB3FriendBatchOperRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *friendArray;
  NSMutableArray *operFriendArray;
} PB3FriendBatchOperRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3FriendBatchOperRes_FieldNumber_FriendArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FriendBatchOperRes__storage_, friendArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "operFriendArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3FriendBatchOperRes_FieldNumber_OperFriendArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FriendBatchOperRes__storage_, operFriendArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendBatchOperRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendBatchOperRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserSigReq

@implementation PB3UserSigReq


typedef struct PB3UserSigReq__storage_ {
  uint32_t _has_storage_[1];
} PB3UserSigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserSigReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UserSigReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserSigRes

@implementation PB3UserSigRes

@dynamic sig;

typedef struct PB3UserSigRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *sig;
} PB3UserSigRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sig",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSigRes_FieldNumber_Sig,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserSigRes__storage_, sig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserSigRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserSigRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendsOperReq

@implementation PB3FriendsOperReq


typedef struct PB3FriendsOperReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FriendsOperReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendsOperReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FriendsOperReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendsOperRes

@implementation PB3FriendsOperRes


typedef struct PB3FriendsOperRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FriendsOperRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendsOperRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FriendsOperRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendsUnFollowReq

@implementation PB3FriendsUnFollowReq

@dynamic idArray, idArray_Count;

typedef struct PB3FriendsUnFollowReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *idArray;
} PB3FriendsUnFollowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendsUnFollowReq_FieldNumber_IdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FriendsUnFollowReq__storage_, idArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendsUnFollowReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendsUnFollowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendsUnFollowRes

@implementation PB3FriendsUnFollowRes


typedef struct PB3FriendsUnFollowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FriendsUnFollowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendsUnFollowRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FriendsUnFollowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PrivateMessageListReq

@implementation PB3PrivateMessageListReq

@dynamic time;

typedef struct PB3PrivateMessageListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t time;
} PB3PrivateMessageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateMessageListReq_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PrivateMessageListReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivateMessageListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivateMessageListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PrivateMessageListRes

@implementation PB3PrivateMessageListRes

@dynamic recordArray, recordArray_Count;

typedef struct PB3PrivateMessageListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recordArray;
} PB3PrivateMessageListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PrivateMessageRecord),
        .number = PB3PrivateMessageListRes_FieldNumber_RecordArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PrivateMessageListRes__storage_, recordArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivateMessageListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivateMessageListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateListReq

@implementation PB3IntimateListReq

@dynamic playerId;

typedef struct PB3IntimateListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3IntimateListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateListReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateListRes

@implementation PB3IntimateListRes

@dynamic dataArray, dataArray_Count;
@dynamic slot;
@dynamic availableSlot;

typedef struct PB3IntimateListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t slot;
  int32_t availableSlot;
  NSMutableArray *dataArray;
} PB3IntimateListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFriend),
        .number = PB3IntimateListRes_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateListRes__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "slot",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateListRes_FieldNumber_Slot,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateListRes__storage_, slot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "availableSlot",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateListRes_FieldNumber_AvailableSlot,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateListRes__storage_, availableSlot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ApplyIntimateReq

@implementation PB3ApplyIntimateReq

@dynamic playerId;
@dynamic type;
@dynamic type2;

typedef struct PB3ApplyIntimateReq__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateType type;
  int32_t type2;
  int64_t playerId;
} PB3ApplyIntimateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ApplyIntimateReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ApplyIntimateReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateType_EnumDescriptor,
        .number = PB3ApplyIntimateReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ApplyIntimateReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type2",
        .dataTypeSpecific.className = NULL,
        .number = PB3ApplyIntimateReq_FieldNumber_Type2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ApplyIntimateReq__storage_, type2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ApplyIntimateReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ApplyIntimateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ApplyIntimateReq_Type_RawValue(PB3ApplyIntimateReq *message) {
  GPBDescriptor *descriptor = [PB3ApplyIntimateReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ApplyIntimateReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ApplyIntimateReq_Type_RawValue(PB3ApplyIntimateReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ApplyIntimateReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ApplyIntimateReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ApplyIntimateRes

@implementation PB3ApplyIntimateRes


typedef struct PB3ApplyIntimateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ApplyIntimateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ApplyIntimateRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ApplyIntimateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReplyIntimateReq

@implementation PB3ReplyIntimateReq

@dynamic playerId;
@dynamic type;
@dynamic agree;

typedef struct PB3ReplyIntimateReq__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateType type;
  int64_t playerId;
} PB3ReplyIntimateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReplyIntimateReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReplyIntimateReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateType_EnumDescriptor,
        .number = PB3ReplyIntimateReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReplyIntimateReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "agree",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReplyIntimateReq_FieldNumber_Agree,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReplyIntimateReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReplyIntimateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReplyIntimateReq_Type_RawValue(PB3ReplyIntimateReq *message) {
  GPBDescriptor *descriptor = [PB3ReplyIntimateReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReplyIntimateReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReplyIntimateReq_Type_RawValue(PB3ReplyIntimateReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReplyIntimateReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReplyIntimateReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReplyIntimateRes

@implementation PB3ReplyIntimateRes


typedef struct PB3ReplyIntimateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ReplyIntimateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReplyIntimateRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReplyIntimateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DismissIntimateReq

@implementation PB3DismissIntimateReq

@dynamic playerId;

typedef struct PB3DismissIntimateReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3DismissIntimateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DismissIntimateReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DismissIntimateReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DismissIntimateReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DismissIntimateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DismissIntimateRes

@implementation PB3DismissIntimateRes


typedef struct PB3DismissIntimateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DismissIntimateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DismissIntimateRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DismissIntimateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AddIntimateSlotReq

@implementation PB3AddIntimateSlotReq


typedef struct PB3AddIntimateSlotReq__storage_ {
  uint32_t _has_storage_[1];
} PB3AddIntimateSlotReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddIntimateSlotReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AddIntimateSlotReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AddIntimateSlotRes

@implementation PB3AddIntimateSlotRes


typedef struct PB3AddIntimateSlotRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AddIntimateSlotRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddIntimateSlotRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AddIntimateSlotRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIntimateRecordReq

@implementation PB3GetIntimateRecordReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3GetIntimateRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3GetIntimateRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetIntimateRecordReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetIntimateRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetIntimateRecordReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetIntimateRecordReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIntimateRecordReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetIntimateRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIntimateRecordRes

@implementation PB3GetIntimateRecordRes

@dynamic listArray, listArray_Count;

typedef struct PB3GetIntimateRecordRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GetIntimateRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateLog),
        .number = PB3GetIntimateRecordRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetIntimateRecordRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIntimateRecordRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetIntimateRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Novice

@implementation PB3Novice

@dynamic playerId;
@dynamic playerName;
@dynamic sex;
@dynamic icon;
@dynamic adLabel;
@dynamic startColor;
@dynamic endColor;

typedef struct PB3Novice__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *playerName;
  NSString *icon;
  NSString *adLabel;
  NSString *startColor;
  NSString *endColor;
  int64_t playerId;
} PB3Novice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Novice_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Novice__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Novice_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Novice__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3Novice_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Novice__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Novice_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Novice__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adLabel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Novice_FieldNumber_AdLabel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Novice__storage_, adLabel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3Novice_FieldNumber_StartColor,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Novice__storage_, startColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3Novice_FieldNumber_EndColor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Novice__storage_, endColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Novice class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Novice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Novice_Sex_RawValue(PB3Novice *message) {
  GPBDescriptor *descriptor = [PB3Novice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Novice_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Novice_Sex_RawValue(PB3Novice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Novice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Novice_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastNovice

@implementation PB3BroadcastNovice

@dynamic listArray, listArray_Count;
@dynamic expireTime;
@dynamic defaultGreetContent;
@dynamic hasContent, content;

typedef struct PB3BroadcastNovice__storage_ {
  uint32_t _has_storage_[1];
  int32_t expireTime;
  NSMutableArray *listArray;
  NSString *defaultGreetContent;
  PB3GreetContent *content;
} PB3BroadcastNovice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Novice),
        .number = PB3BroadcastNovice_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastNovice__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastNovice_FieldNumber_ExpireTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastNovice__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultGreetContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastNovice_FieldNumber_DefaultGreetContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastNovice__storage_, defaultGreetContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GreetContent),
        .number = PB3BroadcastNovice_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastNovice__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastNovice class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastNovice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastGreet

@implementation PB3BroadcastGreet

@dynamic content;
@dynamic playerId;
@dynamic playerName;
@dynamic roomId;

typedef struct PB3BroadcastGreet__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  NSString *playerName;
  int64_t playerId;
  int64_t roomId;
} PB3BroadcastGreet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastGreet_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastGreet__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastGreet_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastGreet__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastGreet_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastGreet__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastGreet_FieldNumber_RoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastGreet__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastGreet class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastGreet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AcceptGreetReq

@implementation PB3AcceptGreetReq

@dynamic content;
@dynamic userGreetContentType;

typedef struct PB3AcceptGreetReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UserGreetContentType userGreetContentType;
  NSString *content;
} PB3AcceptGreetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3AcceptGreetReq_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AcceptGreetReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userGreetContentType",
        .dataTypeSpecific.enumDescFunc = PB3UserGreetContentType_EnumDescriptor,
        .number = PB3AcceptGreetReq_FieldNumber_UserGreetContentType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AcceptGreetReq__storage_, userGreetContentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AcceptGreetReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AcceptGreetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AcceptGreetReq_UserGreetContentType_RawValue(PB3AcceptGreetReq *message) {
  GPBDescriptor *descriptor = [PB3AcceptGreetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AcceptGreetReq_FieldNumber_UserGreetContentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AcceptGreetReq_UserGreetContentType_RawValue(PB3AcceptGreetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AcceptGreetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AcceptGreetReq_FieldNumber_UserGreetContentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AcceptGreetRes

@implementation PB3AcceptGreetRes


typedef struct PB3AcceptGreetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AcceptGreetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AcceptGreetRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AcceptGreetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CancelGreetReq

@implementation PB3CancelGreetReq


typedef struct PB3CancelGreetReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CancelGreetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelGreetReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CancelGreetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CancelGreetRes

@implementation PB3CancelGreetRes


typedef struct PB3CancelGreetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CancelGreetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelGreetRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CancelGreetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GreetContentListReq

@implementation PB3GreetContentListReq


typedef struct PB3GreetContentListReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GreetContentListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GreetContentListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GreetContentListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GreetContentListRes

@implementation PB3GreetContentListRes

@dynamic list, list_Count;
@dynamic systemContentArray, systemContentArray_Count;
@dynamic customSize;
@dynamic contentsArray, contentsArray_Count;
@dynamic newSystemContentsArray, newSystemContentsArray_Count;
@dynamic voiceContentsArray, voiceContentsArray_Count;

typedef struct PB3GreetContentListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t customSize;
  GPBInt32ObjectDictionary *list;
  NSMutableArray *systemContentArray;
  NSMutableArray *contentsArray;
  NSMutableArray *newSystemContentsArray;
  NSMutableArray *voiceContentsArray;
} PB3GreetContentListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "list",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContentListRes_FieldNumber_List,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GreetContentListRes__storage_, list),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "systemContentArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContentListRes_FieldNumber_SystemContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GreetContentListRes__storage_, systemContentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContentListRes_FieldNumber_CustomSize,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GreetContentListRes__storage_, customSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GreetContent),
        .number = PB3GreetContentListRes_FieldNumber_ContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GreetContentListRes__storage_, contentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newSystemContentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GreetContent),
        .number = PB3GreetContentListRes_FieldNumber_NewSystemContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GreetContentListRes__storage_, newSystemContentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceContentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GreetContent),
        .number = PB3GreetContentListRes_FieldNumber_VoiceContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GreetContentListRes__storage_, voiceContentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GreetContentListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GreetContentListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GreetContent

@implementation PB3GreetContent

@dynamic id_p;
@dynamic content;
@dynamic status;
@dynamic checked;
@dynamic greetContentType;
@dynamic userGreetContentType;
@dynamic URL;
@dynamic addon;
@dynamic remark;

typedef struct PB3GreetContent__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3GreetContentStatus status;
  PB3GreetContentChecked checked;
  PB3GreetContentType greetContentType;
  PB3UserGreetContentType userGreetContentType;
  NSString *content;
  NSString *URL;
  NSString *addon;
  NSString *remark;
} PB3GreetContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContent_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContent_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3GreetContentStatus_EnumDescriptor,
        .number = PB3GreetContent_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "checked",
        .dataTypeSpecific.enumDescFunc = PB3GreetContentChecked_EnumDescriptor,
        .number = PB3GreetContent_FieldNumber_Checked,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, checked),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "greetContentType",
        .dataTypeSpecific.enumDescFunc = PB3GreetContentType_EnumDescriptor,
        .number = PB3GreetContent_FieldNumber_GreetContentType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, greetContentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userGreetContentType",
        .dataTypeSpecific.enumDescFunc = PB3UserGreetContentType_EnumDescriptor,
        .number = PB3GreetContent_FieldNumber_UserGreetContentType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, userGreetContentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContent_FieldNumber_URL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContent_FieldNumber_Addon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, addon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3GreetContent_FieldNumber_Remark,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GreetContent__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GreetContent class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GreetContent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\007!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GreetContent_Status_RawValue(PB3GreetContent *message) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GreetContent_Status_RawValue(PB3GreetContent *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GreetContent_Checked_RawValue(PB3GreetContent *message) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_Checked];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GreetContent_Checked_RawValue(PB3GreetContent *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_Checked];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GreetContent_GreetContentType_RawValue(PB3GreetContent *message) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_GreetContentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GreetContent_GreetContentType_RawValue(PB3GreetContent *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_GreetContentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GreetContent_UserGreetContentType_RawValue(PB3GreetContent *message) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_UserGreetContentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GreetContent_UserGreetContentType_RawValue(PB3GreetContent *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GreetContent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GreetContent_FieldNumber_UserGreetContentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SetDefaultGreetContentReq

@implementation PB3SetDefaultGreetContentReq

@dynamic id_p;
@dynamic greetContentType;

typedef struct PB3SetDefaultGreetContentReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3GreetContentType greetContentType;
} PB3SetDefaultGreetContentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetDefaultGreetContentReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetDefaultGreetContentReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "greetContentType",
        .dataTypeSpecific.enumDescFunc = PB3GreetContentType_EnumDescriptor,
        .number = PB3SetDefaultGreetContentReq_FieldNumber_GreetContentType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetDefaultGreetContentReq__storage_, greetContentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetDefaultGreetContentReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetDefaultGreetContentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetDefaultGreetContentReq_GreetContentType_RawValue(PB3SetDefaultGreetContentReq *message) {
  GPBDescriptor *descriptor = [PB3SetDefaultGreetContentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetDefaultGreetContentReq_FieldNumber_GreetContentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetDefaultGreetContentReq_GreetContentType_RawValue(PB3SetDefaultGreetContentReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetDefaultGreetContentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetDefaultGreetContentReq_FieldNumber_GreetContentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SetDefaultGreetContentRes

@implementation PB3SetDefaultGreetContentRes

@dynamic id_p;

typedef struct PB3SetDefaultGreetContentRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
} PB3SetDefaultGreetContentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetDefaultGreetContentRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetDefaultGreetContentRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetDefaultGreetContentRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetDefaultGreetContentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AddGreetContentReq

@implementation PB3AddGreetContentReq

@dynamic id_p;
@dynamic content;
@dynamic greetContentType;
@dynamic addon;
@dynamic remark;

typedef struct PB3AddGreetContentReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3UserGreetContentType greetContentType;
  NSString *content;
  NSString *addon;
  NSString *remark;
} PB3AddGreetContentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3AddGreetContentReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AddGreetContentReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3AddGreetContentReq_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AddGreetContentReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greetContentType",
        .dataTypeSpecific.enumDescFunc = PB3UserGreetContentType_EnumDescriptor,
        .number = PB3AddGreetContentReq_FieldNumber_GreetContentType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AddGreetContentReq__storage_, greetContentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "addon",
        .dataTypeSpecific.className = NULL,
        .number = PB3AddGreetContentReq_FieldNumber_Addon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3AddGreetContentReq__storage_, addon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3AddGreetContentReq_FieldNumber_Remark,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3AddGreetContentReq__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddGreetContentReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AddGreetContentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AddGreetContentReq_GreetContentType_RawValue(PB3AddGreetContentReq *message) {
  GPBDescriptor *descriptor = [PB3AddGreetContentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AddGreetContentReq_FieldNumber_GreetContentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AddGreetContentReq_GreetContentType_RawValue(PB3AddGreetContentReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AddGreetContentReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AddGreetContentReq_FieldNumber_GreetContentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AddGreetContentRes

@implementation PB3AddGreetContentRes

@dynamic id_p;

typedef struct PB3AddGreetContentRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
} PB3AddGreetContentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3AddGreetContentRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AddGreetContentRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddGreetContentRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AddGreetContentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelGreetContentReq

@implementation PB3DelGreetContentReq

@dynamic id_p;

typedef struct PB3DelGreetContentReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
} PB3DelGreetContentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelGreetContentReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DelGreetContentReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelGreetContentReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelGreetContentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelGreetContentRes

@implementation PB3DelGreetContentRes


typedef struct PB3DelGreetContentRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DelGreetContentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelGreetContentRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DelGreetContentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReplyGreetReq

@implementation PB3ReplyGreetReq

@dynamic playerId;
@dynamic userGreetContentType;

typedef struct PB3ReplyGreetReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UserGreetContentType userGreetContentType;
  int64_t playerId;
} PB3ReplyGreetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReplyGreetReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReplyGreetReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userGreetContentType",
        .dataTypeSpecific.enumDescFunc = PB3UserGreetContentType_EnumDescriptor,
        .number = PB3ReplyGreetReq_FieldNumber_UserGreetContentType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReplyGreetReq__storage_, userGreetContentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReplyGreetReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReplyGreetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReplyGreetReq_UserGreetContentType_RawValue(PB3ReplyGreetReq *message) {
  GPBDescriptor *descriptor = [PB3ReplyGreetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReplyGreetReq_FieldNumber_UserGreetContentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReplyGreetReq_UserGreetContentType_RawValue(PB3ReplyGreetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReplyGreetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReplyGreetReq_FieldNumber_UserGreetContentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReplyGreetRes

@implementation PB3ReplyGreetRes


typedef struct PB3ReplyGreetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ReplyGreetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReplyGreetRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReplyGreetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Goods

@implementation PB3Goods

@dynamic goodsId;
@dynamic goodsBuyId;
@dynamic goodsName;
@dynamic type;
@dynamic goodsNum;
@dynamic goldPrice;
@dynamic expPrice;
@dynamic isIndex;
@dynamic isBackground;
@dynamic unit;
@dynamic type2;
@dynamic backgroundLightColor;
@dynamic backgroundDarkColor;
@dynamic buttonBackColor;
@dynamic buttonTitleColor;

typedef struct PB3Goods__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateType type;
  int32_t goodsNum;
  uint32_t goldPrice;
  uint32_t expPrice;
  int32_t type2;
  NSString *goodsName;
  NSString *unit;
  NSString *backgroundLightColor;
  NSString *backgroundDarkColor;
  NSString *buttonBackColor;
  NSString *buttonTitleColor;
  int64_t goodsId;
  int64_t goodsBuyId;
} PB3Goods__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_GoodsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "goodsBuyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_GoodsBuyId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, goodsBuyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "goodsName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_GoodsName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, goodsName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateType_EnumDescriptor,
        .number = PB3Goods_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "goodsNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_GoodsNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, goodsNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "goldPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_GoldPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, goldPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "expPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_ExpPrice,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, expPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_IsIndex,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isBackground",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_IsBackground,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_Unit,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type2",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_Type2,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, type2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "backgroundLightColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_BackgroundLightColor,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, backgroundLightColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundDarkColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_BackgroundDarkColor,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, backgroundDarkColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonBackColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_ButtonBackColor,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, buttonBackColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonTitleColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3Goods_FieldNumber_ButtonTitleColor,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3Goods__storage_, buttonTitleColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Goods class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Goods__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Goods_Type_RawValue(PB3Goods *message) {
  GPBDescriptor *descriptor = [PB3Goods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Goods_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Goods_Type_RawValue(PB3Goods *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Goods descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Goods_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateStoreGoods

@implementation PB3IntimateStoreGoods

@dynamic goodsId;
@dynamic goodsArray, goodsArray_Count;

typedef struct PB3IntimateStoreGoods__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *goodsArray;
  int64_t goodsId;
} PB3IntimateStoreGoods__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreGoods_FieldNumber_GoodsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateStoreGoods__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "goodsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Goods),
        .number = PB3IntimateStoreGoods_FieldNumber_GoodsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateStoreGoods__storage_, goodsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateStoreGoods class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateStoreGoods__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateStoreReq

@implementation PB3IntimateStoreReq

@dynamic playerId;
@dynamic intimateId;

typedef struct PB3IntimateStoreReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t intimateId;
} PB3IntimateStoreReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateStoreReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "intimateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreReq_FieldNumber_IntimateId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateStoreReq__storage_, intimateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateStoreReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateStoreReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateStoreRes

@implementation PB3IntimateStoreRes

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic playerSex;
@dynamic intimateId;
@dynamic intimateName;
@dynamic intimateIcon;
@dynamic intimateSex;
@dynamic expValue;
@dynamic backgroundArray, backgroundArray_Count;
@dynamic goodsArray, goodsArray_Count;
@dynamic intimateLevel;
@dynamic type;
@dynamic gold;
@dynamic type2;

typedef struct PB3IntimateStoreRes__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType playerSex;
  PB3SexType intimateSex;
  int32_t intimateLevel;
  PB3IntimateType type;
  int32_t type2;
  NSString *playerName;
  NSString *playerIcon;
  NSString *intimateName;
  NSString *intimateIcon;
  NSMutableArray *backgroundArray;
  NSMutableArray *goodsArray;
  int64_t playerId;
  int64_t intimateId;
  int64_t expValue;
  int64_t gold;
} PB3IntimateStoreRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerSex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3IntimateStoreRes_FieldNumber_PlayerSex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, playerSex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "intimateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_IntimateId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, intimateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "intimateName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_IntimateName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, intimateName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intimateIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_IntimateIcon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, intimateIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intimateSex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3IntimateStoreRes_FieldNumber_IntimateSex,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, intimateSex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "expValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_ExpValue,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, expValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "backgroundArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateStoreGoods),
        .number = PB3IntimateStoreRes_FieldNumber_BackgroundArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, backgroundArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "goodsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateStoreGoods),
        .number = PB3IntimateStoreRes_FieldNumber_GoodsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, goodsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimateLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_IntimateLevel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, intimateLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateType_EnumDescriptor,
        .number = PB3IntimateStoreRes_FieldNumber_Type,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_Gold,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "type2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateStoreRes_FieldNumber_Type2,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3IntimateStoreRes__storage_, type2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateStoreRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateStoreRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateStoreRes_PlayerSex_RawValue(PB3IntimateStoreRes *message) {
  GPBDescriptor *descriptor = [PB3IntimateStoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateStoreRes_FieldNumber_PlayerSex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateStoreRes_PlayerSex_RawValue(PB3IntimateStoreRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateStoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateStoreRes_FieldNumber_PlayerSex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3IntimateStoreRes_IntimateSex_RawValue(PB3IntimateStoreRes *message) {
  GPBDescriptor *descriptor = [PB3IntimateStoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateStoreRes_FieldNumber_IntimateSex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateStoreRes_IntimateSex_RawValue(PB3IntimateStoreRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateStoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateStoreRes_FieldNumber_IntimateSex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3IntimateStoreRes_Type_RawValue(PB3IntimateStoreRes *message) {
  GPBDescriptor *descriptor = [PB3IntimateStoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateStoreRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateStoreRes_Type_RawValue(PB3IntimateStoreRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateStoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateStoreRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BuyIntimateGoodsReq

@implementation PB3BuyIntimateGoodsReq

@dynamic playerId;
@dynamic intimateId;
@dynamic goodsId;
@dynamic goodsBuyId;
@dynamic expPrice;
@dynamic goldPrice;

typedef struct PB3BuyIntimateGoodsReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expPrice;
  uint32_t goldPrice;
  int64_t playerId;
  int64_t intimateId;
  int64_t goodsId;
  int64_t goodsBuyId;
} PB3BuyIntimateGoodsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyIntimateGoodsReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyIntimateGoodsReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "intimateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyIntimateGoodsReq_FieldNumber_IntimateId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BuyIntimateGoodsReq__storage_, intimateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyIntimateGoodsReq_FieldNumber_GoodsId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BuyIntimateGoodsReq__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "goodsBuyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyIntimateGoodsReq_FieldNumber_GoodsBuyId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BuyIntimateGoodsReq__storage_, goodsBuyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "expPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyIntimateGoodsReq_FieldNumber_ExpPrice,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BuyIntimateGoodsReq__storage_, expPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "goldPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyIntimateGoodsReq_FieldNumber_GoldPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BuyIntimateGoodsReq__storage_, goldPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyIntimateGoodsReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyIntimateGoodsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyIntimateGoodsRes

@implementation PB3BuyIntimateGoodsRes


typedef struct PB3BuyIntimateGoodsRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BuyIntimateGoodsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyIntimateGoodsRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BuyIntimateGoodsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateHeartbeatReq

@implementation PB3IntimateHeartbeatReq


typedef struct PB3IntimateHeartbeatReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateHeartbeatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateHeartbeatReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateHeartbeatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateHeartbeatRes

@implementation PB3IntimateHeartbeatRes

@dynamic heartbeatMan;
@dynamic heartbeatWoman;

typedef struct PB3IntimateHeartbeatRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *heartbeatMan;
  NSString *heartbeatWoman;
} PB3IntimateHeartbeatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "heartbeatMan",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateHeartbeatRes_FieldNumber_HeartbeatMan,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateHeartbeatRes__storage_, heartbeatMan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "heartbeatWoman",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateHeartbeatRes_FieldNumber_HeartbeatWoman,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateHeartbeatRes__storage_, heartbeatWoman),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateHeartbeatRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateHeartbeatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendIdType

@implementation PB3FriendIdType

@dynamic friendId;
@dynamic type;

typedef struct PB3FriendIdType__storage_ {
  uint32_t _has_storage_[1];
  PB3FriendType type;
  int64_t friendId;
} PB3FriendIdType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendIdType_FieldNumber_FriendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendIdType__storage_, friendId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3FriendType_EnumDescriptor,
        .number = PB3FriendIdType_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendIdType__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendIdType class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendIdType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FriendIdType_Type_RawValue(PB3FriendIdType *message) {
  GPBDescriptor *descriptor = [PB3FriendIdType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendIdType_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FriendIdType_Type_RawValue(PB3FriendIdType *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FriendIdType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendIdType_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CheckFReq

@implementation PB3CheckFReq

@dynamic friendIdArray, friendIdArray_Count;

typedef struct PB3CheckFReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *friendIdArray;
} PB3CheckFReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckFReq_FieldNumber_FriendIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CheckFReq__storage_, friendIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckFReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckFReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000friendId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckFRes

@implementation PB3CheckFRes

@dynamic idTypeArray, idTypeArray_Count;

typedef struct PB3CheckFRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *idTypeArray;
} PB3CheckFRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idTypeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FriendIdType),
        .number = PB3CheckFRes_FieldNumber_IdTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CheckFRes__storage_, idTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckFRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckFRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000idType\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearFollowerCacheReq

@implementation PB3ClearFollowerCacheReq

@dynamic playerId;

typedef struct PB3ClearFollowerCacheReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3ClearFollowerCacheReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClearFollowerCacheReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClearFollowerCacheReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearFollowerCacheReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClearFollowerCacheReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearFollowerCacheRes

@implementation PB3ClearFollowerCacheRes


typedef struct PB3ClearFollowerCacheRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearFollowerCacheRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearFollowerCacheRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearFollowerCacheRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetFriendRelReq

@implementation PB3GetFriendRelReq

@dynamic playerId;
@dynamic targetId;

typedef struct PB3GetFriendRelReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t targetId;
} PB3GetFriendRelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetFriendRelReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetFriendRelReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetFriendRelReq_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetFriendRelReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetFriendRelReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetFriendRelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetFriendRelRes

@implementation PB3GetFriendRelRes

@dynamic friendType;

typedef struct PB3GetFriendRelRes__storage_ {
  uint32_t _has_storage_[1];
  PB3FriendType friendType;
} PB3GetFriendRelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendType",
        .dataTypeSpecific.enumDescFunc = PB3FriendType_EnumDescriptor,
        .number = PB3GetFriendRelRes_FieldNumber_FriendType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetFriendRelRes__storage_, friendType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetFriendRelRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetFriendRelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetFriendRelRes_FriendType_RawValue(PB3GetFriendRelRes *message) {
  GPBDescriptor *descriptor = [PB3GetFriendRelRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetFriendRelRes_FieldNumber_FriendType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetFriendRelRes_FriendType_RawValue(PB3GetFriendRelRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetFriendRelRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetFriendRelRes_FieldNumber_FriendType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateConfExt

@implementation PB3IntimateConfExt

@dynamic intimateType;
@dynamic name;
@dynamic onChairBackImageURL;
@dynamic onChairBackImageURLPc;
@dynamic onChairContentColor;
@dynamic onChairNameColor;
@dynamic animationSourceURL;
@dynamic animationSourceURLPc;
@dynamic zoneBackImageURL;
@dynamic zoneBackImageURLPc;
@dynamic zoneHeadImageFrameURL;
@dynamic zoneHeadImageFrameURLPc;
@dynamic zoneThemeColor;
@dynamic zoneValuesTextColor;
@dynamic zonePlayerNameColor;
@dynamic listBackImageURL;
@dynamic listBackImageURLPc;
@dynamic listHeadImageFrameURL;
@dynamic listHeadImageFrameURLPc;
@dynamic listTitleTextColor;
@dynamic listValuesTextColor;
@dynamic listProgressLightColor;
@dynamic listThemeColor;
@dynamic everBackImageURL;
@dynamic everBackImageURLPc;
@dynamic showRoomBanner;
@dynamic zoneBackImageURLPcLarge;
@dynamic titleCanChange;
@dynamic enterRoomEffect;
@dynamic enterRoomEffectPc;
@dynamic effectNameColor;
@dynamic effectTextColor;
@dynamic effectText;
@dynamic friendIconURL;

typedef struct PB3IntimateConfExt__storage_ {
  uint32_t _has_storage_[2];
  int32_t intimateType;
  NSString *name;
  NSString *onChairBackImageURL;
  NSString *onChairBackImageURLPc;
  NSString *onChairContentColor;
  NSString *onChairNameColor;
  NSString *animationSourceURL;
  NSString *animationSourceURLPc;
  NSString *zoneBackImageURL;
  NSString *zoneBackImageURLPc;
  NSString *zoneHeadImageFrameURL;
  NSString *zoneHeadImageFrameURLPc;
  NSString *zoneThemeColor;
  NSString *zoneValuesTextColor;
  NSString *zonePlayerNameColor;
  NSString *listBackImageURL;
  NSString *listBackImageURLPc;
  NSString *listHeadImageFrameURL;
  NSString *listHeadImageFrameURLPc;
  NSString *listTitleTextColor;
  NSString *listValuesTextColor;
  NSString *listProgressLightColor;
  NSString *listThemeColor;
  NSString *everBackImageURL;
  NSString *everBackImageURLPc;
  NSString *zoneBackImageURLPcLarge;
  NSString *enterRoomEffect;
  NSString *enterRoomEffectPc;
  NSString *effectNameColor;
  NSString *effectTextColor;
  NSString *effectText;
  NSString *friendIconURL;
} PB3IntimateConfExt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intimateType",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_IntimateType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, intimateType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "onChairBackImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_OnChairBackImageURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, onChairBackImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "onChairBackImageURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_OnChairBackImageURLPc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, onChairBackImageURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "onChairContentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_OnChairContentColor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, onChairContentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "onChairNameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_OnChairNameColor,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, onChairNameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "animationSourceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_AnimationSourceURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, animationSourceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "animationSourceURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_AnimationSourceURLPc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, animationSourceURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zoneBackImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZoneBackImageURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zoneBackImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zoneBackImageURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZoneBackImageURLPc,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zoneBackImageURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zoneHeadImageFrameURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZoneHeadImageFrameURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zoneHeadImageFrameURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zoneHeadImageFrameURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZoneHeadImageFrameURLPc,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zoneHeadImageFrameURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zoneThemeColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZoneThemeColor,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zoneThemeColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zoneValuesTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZoneValuesTextColor,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zoneValuesTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zonePlayerNameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZonePlayerNameColor,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zonePlayerNameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listBackImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListBackImageURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listBackImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listBackImageURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListBackImageURLPc,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listBackImageURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listHeadImageFrameURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListHeadImageFrameURL,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listHeadImageFrameURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listHeadImageFrameURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListHeadImageFrameURLPc,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listHeadImageFrameURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listTitleTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListTitleTextColor,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listTitleTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listValuesTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListValuesTextColor,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listValuesTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listProgressLightColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListProgressLightColor,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listProgressLightColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listThemeColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ListThemeColor,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, listThemeColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "everBackImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_EverBackImageURL,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, everBackImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "everBackImageURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_EverBackImageURLPc,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, everBackImageURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showRoomBanner",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ShowRoomBanner,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "zoneBackImageURLPcLarge",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_ZoneBackImageURLPcLarge,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, zoneBackImageURLPcLarge),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleCanChange",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_TitleCanChange,
        .hasIndex = 28,
        .offset = 29,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enterRoomEffect",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_EnterRoomEffect,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, enterRoomEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enterRoomEffectPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_EnterRoomEffectPc,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, enterRoomEffectPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectNameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_EffectNameColor,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, effectNameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_EffectTextColor,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, effectTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_EffectText,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, effectText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExt_FieldNumber_FriendIconURL,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(PB3IntimateConfExt__storage_, friendIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateConfExt class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateConfExt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\003\002\245\244\245\241!!\000\004\002\245\244\245\241!!\242\000\007\t\246\241!!\000\010\t\246\241!!\242\000\t\004\244\245\241"
        "!!\000\n\004\244\245\241!!\242\000\013\004\244\245\245\241!!\000\014\004\244\245\245\241!!\242\000\020\004\244\245\241!!\000\021"
        "\004\244\245\241!!\242\000\022\004\244\245\245\241!!\000\023\004\244\245\245\241!!\242\000\030\004\244\245\241!!\000\031\004\244\245\241"
        "!!\242\000\033\004\244\245\241!!\242\245\000\"\006\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateConfExtReq

@implementation PB3IntimateConfExtReq


typedef struct PB3IntimateConfExtReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateConfExtReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateConfExtReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateConfExtReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateConfExtRes

@implementation PB3IntimateConfExtRes

@dynamic list, list_Count;
@dynamic changeTitleMinLevel;
@dynamic changeTitleGold;
@dynamic titleMaxLen;
@dynamic slotInfoArray, slotInfoArray_Count;

typedef struct PB3IntimateConfExtRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t changeTitleMinLevel;
  int32_t changeTitleGold;
  int32_t titleMaxLen;
  GPBInt32ObjectDictionary *list;
  NSMutableArray *slotInfoArray;
} PB3IntimateConfExtRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "list",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateConfExt),
        .number = PB3IntimateConfExtRes_FieldNumber_List,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateConfExtRes__storage_, list),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "changeTitleMinLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExtRes_FieldNumber_ChangeTitleMinLevel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateConfExtRes__storage_, changeTitleMinLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "changeTitleGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExtRes_FieldNumber_ChangeTitleGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateConfExtRes__storage_, changeTitleGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "titleMaxLen",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateConfExtRes_FieldNumber_TitleMaxLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateConfExtRes__storage_, titleMaxLen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "slotInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateSlotInfo),
        .number = PB3IntimateConfExtRes_FieldNumber_SlotInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateConfExtRes__storage_, slotInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateConfExtRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateConfExtRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansListReq

@implementation PB3FansListReq

@dynamic index;

typedef struct PB3FansListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3FansListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansListReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansListReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansListRes

@implementation PB3FansListRes

@dynamic listArray, listArray_Count;
@dynamic currentIndex;
@dynamic nextIndex;

typedef struct PB3FansListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t currentIndex;
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3FansListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3FansListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FansListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currentIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansListRes_FieldNumber_CurrentIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansListRes__storage_, currentIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansListRes_FieldNumber_NextIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FansListRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchFriendResult

@implementation PB3SearchFriendResult

@dynamic searchType;
@dynamic friendListArray, friendListArray_Count;
@dynamic hasMore;

typedef struct PB3SearchFriendResult__storage_ {
  uint32_t _has_storage_[1];
  PB3SearchFriendType searchType;
  NSMutableArray *friendListArray;
} PB3SearchFriendResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "searchType",
        .dataTypeSpecific.enumDescFunc = PB3SearchFriendType_EnumDescriptor,
        .number = PB3SearchFriendResult_FieldNumber_SearchType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchFriendResult__storage_, searchType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "friendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3SearchFriendResult_FieldNumber_FriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SearchFriendResult__storage_, friendListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasMore",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchFriendResult_FieldNumber_HasMore,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchFriendResult class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchFriendResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SearchFriendResult_SearchType_RawValue(PB3SearchFriendResult *message) {
  GPBDescriptor *descriptor = [PB3SearchFriendResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendResult_FieldNumber_SearchType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SearchFriendResult_SearchType_RawValue(PB3SearchFriendResult *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SearchFriendResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendResult_FieldNumber_SearchType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SearchFriendReq

@implementation PB3SearchFriendReq

@dynamic searchType;
@dynamic option;
@dynamic keyword;

typedef struct PB3SearchFriendReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SearchFriendType searchType;
  PB3SearchFriendResultOption option;
  NSString *keyword;
} PB3SearchFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "searchType",
        .dataTypeSpecific.enumDescFunc = PB3SearchFriendType_EnumDescriptor,
        .number = PB3SearchFriendReq_FieldNumber_SearchType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchFriendReq__storage_, searchType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "option",
        .dataTypeSpecific.enumDescFunc = PB3SearchFriendResultOption_EnumDescriptor,
        .number = PB3SearchFriendReq_FieldNumber_Option,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchFriendReq__storage_, option),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchFriendReq_FieldNumber_Keyword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SearchFriendReq__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchFriendReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchFriendReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SearchFriendReq_SearchType_RawValue(PB3SearchFriendReq *message) {
  GPBDescriptor *descriptor = [PB3SearchFriendReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendReq_FieldNumber_SearchType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SearchFriendReq_SearchType_RawValue(PB3SearchFriendReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SearchFriendReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendReq_FieldNumber_SearchType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SearchFriendReq_Option_RawValue(PB3SearchFriendReq *message) {
  GPBDescriptor *descriptor = [PB3SearchFriendReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendReq_FieldNumber_Option];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SearchFriendReq_Option_RawValue(PB3SearchFriendReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SearchFriendReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendReq_FieldNumber_Option];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SearchFriendRes

@implementation PB3SearchFriendRes

@dynamic searchType;
@dynamic listArray, listArray_Count;

typedef struct PB3SearchFriendRes__storage_ {
  uint32_t _has_storage_[1];
  PB3SearchFriendType searchType;
  NSMutableArray *listArray;
} PB3SearchFriendRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "searchType",
        .dataTypeSpecific.enumDescFunc = PB3SearchFriendType_EnumDescriptor,
        .number = PB3SearchFriendRes_FieldNumber_SearchType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchFriendRes__storage_, searchType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SearchFriendResult),
        .number = PB3SearchFriendRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SearchFriendRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchFriendRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchFriendRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SearchFriendRes_SearchType_RawValue(PB3SearchFriendRes *message) {
  GPBDescriptor *descriptor = [PB3SearchFriendRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendRes_FieldNumber_SearchType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SearchFriendRes_SearchType_RawValue(PB3SearchFriendRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SearchFriendRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchFriendRes_FieldNumber_SearchType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FansNumReq

@implementation PB3FansNumReq


typedef struct PB3FansNumReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FansNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansNumReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FansNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansNumRes

@implementation PB3FansNumRes

@dynamic fansNum;

typedef struct PB3FansNumRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t fansNum;
} PB3FansNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansNumRes_FieldNumber_FansNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansNumRes__storage_, fansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansNumRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FollowImMessage

@implementation PB3FollowImMessage

@dynamic msgType;
@dynamic msg;
@dynamic toPlayerId;

typedef struct PB3FollowImMessage__storage_ {
  uint32_t _has_storage_[1];
  PB3FriendIMType msgType;
  NSString *msg;
  int64_t toPlayerId;
} PB3FollowImMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = PB3FriendIMType_EnumDescriptor,
        .number = PB3FollowImMessage_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FollowImMessage__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3FollowImMessage_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FollowImMessage__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FollowImMessage_FieldNumber_ToPlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FollowImMessage__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FollowImMessage class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FollowImMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FollowImMessage_MsgType_RawValue(PB3FollowImMessage *message) {
  GPBDescriptor *descriptor = [PB3FollowImMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FollowImMessage_FieldNumber_MsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FollowImMessage_MsgType_RawValue(PB3FollowImMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FollowImMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FollowImMessage_FieldNumber_MsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateTitleReq

@implementation PB3IntimateTitleReq

@dynamic playerId;
@dynamic friendId;
@dynamic title;

typedef struct PB3IntimateTitleReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  int64_t playerId;
  int64_t friendId;
} PB3IntimateTitleReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateTitleReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateTitleReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateTitleReq_FieldNumber_FriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateTitleReq__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateTitleReq_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateTitleReq__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateTitleReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateTitleReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateTitleRes

@implementation PB3IntimateTitleRes


typedef struct PB3IntimateTitleRes__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateTitleRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateTitleRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateTitleRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendStensitiveReq

@implementation PB3FriendStensitiveReq


typedef struct PB3FriendStensitiveReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FriendStensitiveReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendStensitiveReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FriendStensitiveReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendStensitiveRes

@implementation PB3FriendStensitiveRes


typedef struct PB3FriendStensitiveRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FriendStensitiveRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendStensitiveRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FriendStensitiveRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateSlotInfo

@implementation PB3IntimateSlotInfo

@dynamic pos;
@dynamic expandCards;

typedef struct PB3IntimateSlotInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t pos;
  int32_t expandCards;
} PB3IntimateSlotInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pos",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateSlotInfo_FieldNumber_Pos,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateSlotInfo__storage_, pos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expandCards",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateSlotInfo_FieldNumber_ExpandCards,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateSlotInfo__storage_, expandCards),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateSlotInfo class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateSlotInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ContactListReq

@implementation PB3ContactListReq

@dynamic contactType;
@dynamic page;
@dynamic beginTime;
@dynamic forceFullSync;
@dynamic ownerId;

typedef struct PB3ContactListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ContactType contactType;
  int32_t page;
  int64_t beginTime;
  int64_t ownerId;
} PB3ContactListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactType",
        .dataTypeSpecific.enumDescFunc = PB3ContactType_EnumDescriptor,
        .number = PB3ContactListReq_FieldNumber_ContactType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContactListReq__storage_, contactType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactListReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ContactListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactListReq_FieldNumber_BeginTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ContactListReq__storage_, beginTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "forceFullSync",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactListReq_FieldNumber_ForceFullSync,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactListReq_FieldNumber_OwnerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ContactListReq__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContactListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContactListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ContactListReq_ContactType_RawValue(PB3ContactListReq *message) {
  GPBDescriptor *descriptor = [PB3ContactListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactListReq_FieldNumber_ContactType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ContactListReq_ContactType_RawValue(PB3ContactListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ContactListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactListReq_FieldNumber_ContactType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ContactListRes

@implementation PB3ContactListRes

@dynamic listArray, listArray_Count;
@dynamic total;
@dynamic syncTime;

typedef struct PB3ContactListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  int64_t total;
  int64_t syncTime;
} PB3ContactListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3ContactListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ContactListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactListRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContactListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "syncTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactListRes_FieldNumber_SyncTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ContactListRes__storage_, syncTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContactListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContactListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ContactOnlineListReq

@implementation PB3ContactOnlineListReq

@dynamic contactType;
@dynamic page;

typedef struct PB3ContactOnlineListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ContactType contactType;
  int32_t page;
} PB3ContactOnlineListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactType",
        .dataTypeSpecific.enumDescFunc = PB3ContactType_EnumDescriptor,
        .number = PB3ContactOnlineListReq_FieldNumber_ContactType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContactOnlineListReq__storage_, contactType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactOnlineListReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ContactOnlineListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContactOnlineListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContactOnlineListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ContactOnlineListReq_ContactType_RawValue(PB3ContactOnlineListReq *message) {
  GPBDescriptor *descriptor = [PB3ContactOnlineListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactOnlineListReq_FieldNumber_ContactType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ContactOnlineListReq_ContactType_RawValue(PB3ContactOnlineListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ContactOnlineListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactOnlineListReq_FieldNumber_ContactType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ContactOnlineListRes

@implementation PB3ContactOnlineListRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3ContactOnlineListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  int64_t total;
} PB3ContactOnlineListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ContactOnline),
        .number = PB3ContactOnlineListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ContactOnlineListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactOnlineListRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContactOnlineListRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContactOnlineListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContactOnlineListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ContactOnline

@implementation PB3ContactOnline

@dynamic playerId;
@dynamic roomId;
@dynamic roomName;

typedef struct PB3ContactOnline__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomName;
  uint64_t playerId;
  uint64_t roomId;
} PB3ContactOnline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactOnline_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContactOnline__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactOnline_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ContactOnline__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactOnline_FieldNumber_RoomName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ContactOnline__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContactOnline class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContactOnline__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ContactListMD5Req

@implementation PB3ContactListMD5Req

@dynamic contactType;

typedef struct PB3ContactListMD5Req__storage_ {
  uint32_t _has_storage_[1];
  PB3ContactType contactType;
} PB3ContactListMD5Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactType",
        .dataTypeSpecific.enumDescFunc = PB3ContactType_EnumDescriptor,
        .number = PB3ContactListMD5Req_FieldNumber_ContactType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContactListMD5Req__storage_, contactType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContactListMD5Req class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContactListMD5Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ContactListMD5Req_ContactType_RawValue(PB3ContactListMD5Req *message) {
  GPBDescriptor *descriptor = [PB3ContactListMD5Req descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactListMD5Req_FieldNumber_ContactType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ContactListMD5Req_ContactType_RawValue(PB3ContactListMD5Req *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ContactListMD5Req descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactListMD5Req_FieldNumber_ContactType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ContactListMD5Res

@implementation PB3ContactListMD5Res

@dynamic contactType;
@dynamic md5;

typedef struct PB3ContactListMD5Res__storage_ {
  uint32_t _has_storage_[1];
  PB3ContactType contactType;
  NSString *md5;
} PB3ContactListMD5Res__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactType",
        .dataTypeSpecific.enumDescFunc = PB3ContactType_EnumDescriptor,
        .number = PB3ContactListMD5Res_FieldNumber_ContactType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContactListMD5Res__storage_, contactType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContactListMD5Res_FieldNumber_Md5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ContactListMD5Res__storage_, md5),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContactListMD5Res class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContactListMD5Res__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ContactListMD5Res_ContactType_RawValue(PB3ContactListMD5Res *message) {
  GPBDescriptor *descriptor = [PB3ContactListMD5Res descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactListMD5Res_FieldNumber_ContactType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ContactListMD5Res_ContactType_RawValue(PB3ContactListMD5Res *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ContactListMD5Res descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ContactListMD5Res_FieldNumber_ContactType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateGiveBackReq

@implementation PB3IntimateGiveBackReq

@dynamic id_p;

typedef struct PB3IntimateGiveBackReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3IntimateGiveBackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateGiveBackReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateGiveBackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateGiveBackRes

@implementation PB3IntimateGiveBackRes

@dynamic hasPlayer, player;
@dynamic lv;
@dynamic type;
@dynamic giveBackLimit;
@dynamic giveBackArray, giveBackArray_Count;
@dynamic fee;
@dynamic isCertify;
@dynamic validDays;
@dynamic userDebt;

typedef struct PB3IntimateGiveBackRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t lv;
  int32_t fee;
  int32_t validDays;
  PB3SimplePlayer *player;
  NSString *type;
  GPBInt64Array *giveBackArray;
  int64_t giveBackLimit;
  int64_t userDebt;
} PB3IntimateGiveBackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3IntimateGiveBackRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lv",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_Lv,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, lv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giveBackLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_GiveBackLimit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, giveBackLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giveBackArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_GiveBackArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, giveBackArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_Fee,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isCertify",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_IsCertify,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "validDays",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_ValidDays,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, validDays),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "userDebt",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateGiveBackRes_FieldNumber_UserDebt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateGiveBackRes__storage_, userDebt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateGiveBackRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateGiveBackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiveBackReq

@implementation PB3GiveBackReq

@dynamic id_p;
@dynamic value;

typedef struct PB3GiveBackReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
  int64_t value;
} PB3GiveBackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveBackReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiveBackReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveBackReq_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiveBackReq__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiveBackReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiveBackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiveBackRes

@implementation PB3GiveBackRes

@dynamic giveBackLimit;

typedef struct PB3GiveBackRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t giveBackLimit;
} PB3GiveBackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giveBackLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveBackRes_FieldNumber_GiveBackLimit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiveBackRes__storage_, giveBackLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiveBackRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiveBackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearPmMsgListReq

@implementation PB3ClearPmMsgListReq

@dynamic friendId;

typedef struct PB3ClearPmMsgListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t friendId;
} PB3ClearPmMsgListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClearPmMsgListReq_FieldNumber_FriendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClearPmMsgListReq__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearPmMsgListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClearPmMsgListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearPmMsgListRes

@implementation PB3ClearPmMsgListRes


typedef struct PB3ClearPmMsgListRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearPmMsgListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearPmMsgListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearPmMsgListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendCategoryReq

@implementation PB3FriendCategoryReq

@dynamic playerId;
@dynamic oper;

typedef struct PB3FriendCategoryReq__storage_ {
  uint32_t _has_storage_[1];
  PB3FriendCategoryOper oper;
  int64_t playerId;
} PB3FriendCategoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendCategoryReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendCategoryReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "oper",
        .dataTypeSpecific.enumDescFunc = PB3FriendCategoryOper_EnumDescriptor,
        .number = PB3FriendCategoryReq_FieldNumber_Oper,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendCategoryReq__storage_, oper),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendCategoryReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendCategoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FriendCategoryReq_Oper_RawValue(PB3FriendCategoryReq *message) {
  GPBDescriptor *descriptor = [PB3FriendCategoryReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendCategoryReq_FieldNumber_Oper];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FriendCategoryReq_Oper_RawValue(PB3FriendCategoryReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FriendCategoryReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FriendCategoryReq_FieldNumber_Oper];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FriendCategoryRes

@implementation PB3FriendCategoryRes

@dynamic hasFriend_p, friend_p;

typedef struct PB3FriendCategoryRes__storage_ {
  uint32_t _has_storage_[1];
  PB3Friender *friend_p;
} PB3FriendCategoryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friend_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Friender),
        .number = PB3FriendCategoryRes_FieldNumber_Friend_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendCategoryRes__storage_, friend_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendCategoryRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendCategoryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendImImgLimitReq

@implementation PB3FriendImImgLimitReq


typedef struct PB3FriendImImgLimitReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FriendImImgLimitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendImImgLimitReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FriendImImgLimitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FriendImImgLimitRes

@implementation PB3FriendImImgLimitRes

@dynamic charmLev;
@dynamic cond;
@dynamic wealthLev;

typedef struct PB3FriendImImgLimitRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t charmLev;
  int32_t cond;
  int32_t wealthLev;
} PB3FriendImImgLimitRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "charmLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendImImgLimitRes_FieldNumber_CharmLev,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FriendImImgLimitRes__storage_, charmLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cond",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendImImgLimitRes_FieldNumber_Cond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FriendImImgLimitRes__storage_, cond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3FriendImImgLimitRes_FieldNumber_WealthLev,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FriendImImgLimitRes__storage_, wealthLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FriendImImgLimitRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FriendImImgLimitRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VideoIMMessageReq

@implementation PB3VideoIMMessageReq

@dynamic fromId;
@dynamic toId;
@dynamic buttonType;
@dynamic trendId;

typedef struct PB3VideoIMMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t buttonType;
  int64_t fromId;
  int64_t toId;
  int64_t trendId;
} PB3VideoIMMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoIMMessageReq_FieldNumber_FromId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VideoIMMessageReq__storage_, fromId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoIMMessageReq_FieldNumber_ToId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VideoIMMessageReq__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "buttonType",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoIMMessageReq_FieldNumber_ButtonType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VideoIMMessageReq__storage_, buttonType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "trendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VideoIMMessageReq_FieldNumber_TrendId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VideoIMMessageReq__storage_, trendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoIMMessageReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VideoIMMessageReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VideoIMMessageRes

@implementation PB3VideoIMMessageRes


typedef struct PB3VideoIMMessageRes__storage_ {
  uint32_t _has_storage_[1];
} PB3VideoIMMessageRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VideoIMMessageRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VideoIMMessageRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastTeacherStudentRelationship

@implementation PB3BroadcastTeacherStudentRelationship

@dynamic teacherId;
@dynamic teacherId2;
@dynamic teacherName;
@dynamic teacherIcon;
@dynamic studentId;
@dynamic studentId2;
@dynamic studentName;
@dynamic studentIcon;
@dynamic opt;
@dynamic title;
@dynamic content;
@dynamic timeOut;
@dynamic relationId;
@dynamic giftId;

typedef struct PB3BroadcastTeacherStudentRelationship__storage_ {
  uint32_t _has_storage_[1];
  PB3TeacherStudentOptType opt;
  int32_t giftId;
  NSString *teacherName;
  NSString *teacherIcon;
  NSString *studentName;
  NSString *studentIcon;
  NSString *title;
  NSString *content;
  NSString *relationId;
  int64_t teacherId;
  int64_t teacherId2;
  int64_t studentId;
  int64_t studentId2;
  int64_t timeOut;
} PB3BroadcastTeacherStudentRelationship__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "teacherId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_TeacherId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, teacherId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "teacherId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_TeacherId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, teacherId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "teacherName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_TeacherName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, teacherName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "teacherIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_TeacherIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, teacherIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "studentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_StudentId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, studentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "studentId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_StudentId2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, studentId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "studentName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_StudentName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, studentName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "studentIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_StudentIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, studentIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3TeacherStudentOptType_EnumDescriptor,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_Opt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_Title,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_Content,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeOut",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_TimeOut,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, timeOut),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "relationId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_RelationId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, relationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentRelationship_FieldNumber_GiftId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentRelationship__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastTeacherStudentRelationship class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastTeacherStudentRelationship__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastTeacherStudentRelationship_Opt_RawValue(PB3BroadcastTeacherStudentRelationship *message) {
  GPBDescriptor *descriptor = [PB3BroadcastTeacherStudentRelationship descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastTeacherStudentRelationship_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastTeacherStudentRelationship_Opt_RawValue(PB3BroadcastTeacherStudentRelationship *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastTeacherStudentRelationship descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastTeacherStudentRelationship_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3TeacherStudentOptReq

@implementation PB3TeacherStudentOptReq

@dynamic playerId;
@dynamic opt;
@dynamic relationId;
@dynamic giftId;

typedef struct PB3TeacherStudentOptReq__storage_ {
  uint32_t _has_storage_[1];
  PB3TeacherStudentOptType opt;
  int32_t giftId;
  NSString *relationId;
  int64_t playerId;
} PB3TeacherStudentOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentOptReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TeacherStudentOptReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3TeacherStudentOptType_EnumDescriptor,
        .number = PB3TeacherStudentOptReq_FieldNumber_Opt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TeacherStudentOptReq__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "relationId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentOptReq_FieldNumber_RelationId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TeacherStudentOptReq__storage_, relationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentOptReq_FieldNumber_GiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TeacherStudentOptReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TeacherStudentOptReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TeacherStudentOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TeacherStudentOptReq_Opt_RawValue(PB3TeacherStudentOptReq *message) {
  GPBDescriptor *descriptor = [PB3TeacherStudentOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TeacherStudentOptReq_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TeacherStudentOptReq_Opt_RawValue(PB3TeacherStudentOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TeacherStudentOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TeacherStudentOptReq_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3TeacherStudentOptRes

@implementation PB3TeacherStudentOptRes


typedef struct PB3TeacherStudentOptRes__storage_ {
  uint32_t _has_storage_[1];
} PB3TeacherStudentOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TeacherStudentOptRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3TeacherStudentOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TeacherStudentSendGiftReq

@implementation PB3TeacherStudentSendGiftReq

@dynamic toId;
@dynamic giftId;

typedef struct PB3TeacherStudentSendGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int64_t toId;
} PB3TeacherStudentSendGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftReq_FieldNumber_ToId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftReq__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftReq_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TeacherStudentSendGiftReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TeacherStudentSendGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TeacherStudentSendGiftRes

@implementation PB3TeacherStudentSendGiftRes

@dynamic opt;
@dynamic toId;
@dynamic toId2;
@dynamic toName;
@dynamic toIcon;
@dynamic title;
@dynamic content;
@dynamic expired;
@dynamic giftId;

typedef struct PB3TeacherStudentSendGiftRes__storage_ {
  uint32_t _has_storage_[1];
  PB3TeacherStudentOptType opt;
  int32_t giftId;
  NSString *toName;
  NSString *toIcon;
  NSString *title;
  NSString *content;
  int64_t toId;
  int64_t toId2;
  int64_t expired;
} PB3TeacherStudentSendGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3TeacherStudentOptType_EnumDescriptor,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_ToId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_ToId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, toId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toName",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_ToName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, toName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_ToIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, toIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_Title,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expired",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_Expired,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, expired),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentSendGiftRes_FieldNumber_GiftId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3TeacherStudentSendGiftRes__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TeacherStudentSendGiftRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TeacherStudentSendGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TeacherStudentSendGiftRes_Opt_RawValue(PB3TeacherStudentSendGiftRes *message) {
  GPBDescriptor *descriptor = [PB3TeacherStudentSendGiftRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TeacherStudentSendGiftRes_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TeacherStudentSendGiftRes_Opt_RawValue(PB3TeacherStudentSendGiftRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TeacherStudentSendGiftRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TeacherStudentSendGiftRes_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastTeacherStudentSendGift

@implementation PB3BroadcastTeacherStudentSendGift

@dynamic fromId;
@dynamic fromName;
@dynamic fromIcon;
@dynamic toId;
@dynamic toName;
@dynamic toIcon;
@dynamic giftId;
@dynamic giftNum;
@dynamic roomId;
@dynamic roomId2;
@dynamic roomName;
@dynamic publicText;
@dynamic isPushAll;

typedef struct PB3BroadcastTeacherStudentSendGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
  NSString *fromName;
  NSString *fromIcon;
  NSString *toName;
  NSString *toIcon;
  NSString *roomName;
  NSString *publicText;
  int64_t fromId;
  int64_t toId;
  int64_t roomId;
  int64_t roomId2;
} PB3BroadcastTeacherStudentSendGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_FromId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, fromId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_FromName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, fromName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_FromIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, fromIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_ToId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_ToName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, toName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_ToIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, toIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_GiftId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_GiftNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_RoomId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_RoomId2,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, roomId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_RoomName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_PublicText,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentSendGift__storage_, publicText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isPushAll",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentSendGift_FieldNumber_IsPushAll,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastTeacherStudentSendGift class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastTeacherStudentSendGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AppletInfoReq

@implementation PB3AppletInfoReq

@dynamic type;

typedef struct PB3AppletInfoReq__storage_ {
  uint32_t _has_storage_[1];
  PB3AppletType type;
} PB3AppletInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3AppletType_EnumDescriptor,
        .number = PB3AppletInfoReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AppletInfoReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AppletInfoReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AppletInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AppletInfoReq_Type_RawValue(PB3AppletInfoReq *message) {
  GPBDescriptor *descriptor = [PB3AppletInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AppletInfoReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AppletInfoReq_Type_RawValue(PB3AppletInfoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AppletInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AppletInfoReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AppletInfoRes

@implementation PB3AppletInfoRes

@dynamic powerType;
@dynamic playerId;
@dynamic name;

typedef struct PB3AppletInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AppletPowerType powerType;
  NSString *name;
  int64_t playerId;
} PB3AppletInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "powerType",
        .dataTypeSpecific.enumDescFunc = PB3AppletPowerType_EnumDescriptor,
        .number = PB3AppletInfoRes_FieldNumber_PowerType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AppletInfoRes__storage_, powerType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AppletInfoRes_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AppletInfoRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3AppletInfoRes_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AppletInfoRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AppletInfoRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AppletInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AppletInfoRes_PowerType_RawValue(PB3AppletInfoRes *message) {
  GPBDescriptor *descriptor = [PB3AppletInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AppletInfoRes_FieldNumber_PowerType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AppletInfoRes_PowerType_RawValue(PB3AppletInfoRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AppletInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AppletInfoRes_FieldNumber_PowerType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PromoterInviteReq

@implementation PB3PromoterInviteReq

@dynamic playerId;
@dynamic inviteId;
@dynamic startTime;
@dynamic endTime;
@dynamic page;
@dynamic pageSize;
@dynamic inviteStartTime;
@dynamic inviteEndTime;

typedef struct PB3PromoterInviteReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  NSString *startTime;
  NSString *endTime;
  NSString *inviteStartTime;
  NSString *inviteEndTime;
  int64_t playerId;
  int64_t inviteId;
} PB3PromoterInviteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_InviteId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, inviteId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_StartTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_Page,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_PageSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviteStartTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_InviteStartTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, inviteStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviteEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteReq_FieldNumber_InviteEndTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PromoterInviteReq__storage_, inviteEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterInviteReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterInviteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterInviteItem

@implementation PB3PromoterInviteItem

@dynamic playerId;
@dynamic playerName;
@dynamic inviteId;
@dynamic inviteName;
@dynamic inviteCode;
@dynamic createAt;
@dynamic loginAt;
@dynamic chargeTotal;
@dynamic chargeNum;
@dynamic chargeAt;
@dynamic loginCount;

typedef struct PB3PromoterInviteItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t chargeNum;
  NSString *playerName;
  NSString *inviteName;
  NSString *inviteCode;
  int64_t playerId;
  int64_t inviteId;
  int64_t createAt;
  int64_t loginAt;
  int64_t chargeTotal;
  int64_t chargeAt;
  int64_t loginCount;
} PB3PromoterInviteItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviteId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_InviteId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, inviteId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_InviteName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, inviteName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviteCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_InviteCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, inviteCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_CreateAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "loginAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_LoginAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, loginAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chargeTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_ChargeTotal,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, chargeTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chargeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_ChargeNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, chargeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_ChargeAt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, chargeAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "loginCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteItem_FieldNumber_LoginCount,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PromoterInviteItem__storage_, loginCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterInviteItem class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterInviteItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterInviteRes

@implementation PB3PromoterInviteRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3PromoterInviteRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3PromoterInviteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PromoterInviteItem),
        .number = PB3PromoterInviteRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PromoterInviteRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInviteRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterInviteRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterInviteRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterInviteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterInfoReq

@implementation PB3PromoterInfoReq

@dynamic playerId;
@dynamic startTime;
@dynamic endTime;
@dynamic page;
@dynamic pageSize;

typedef struct PB3PromoterInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  NSString *startTime;
  NSString *endTime;
  int64_t playerId;
} PB3PromoterInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterInfoReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoReq_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterInfoReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoReq_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterInfoReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PromoterInfoReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoReq_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PromoterInfoReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterInfoReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterInfoItem

@implementation PB3PromoterInfoItem

@dynamic playerId;
@dynamic playerName;
@dynamic dateAt;
@dynamic userNum;
@dynamic validUserNum;
@dynamic chargeUserNum;
@dynamic chargeNum;
@dynamic chargeTotal;
@dynamic chargeFirstNum;
@dynamic validChargeNum;
@dynamic validChargeTotal;

typedef struct PB3PromoterInfoItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t userNum;
  int32_t validUserNum;
  int32_t chargeUserNum;
  int32_t chargeNum;
  int32_t chargeTotal;
  int32_t chargeFirstNum;
  int32_t validChargeNum;
  int32_t validChargeTotal;
  NSString *playerName;
  int64_t playerId;
  int64_t dateAt;
} PB3PromoterInfoItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_DateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, dateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_UserNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, userNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validUserNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_ValidUserNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, validUserNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeUserNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_ChargeUserNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, chargeUserNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_ChargeNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, chargeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_ChargeTotal,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, chargeTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeFirstNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_ChargeFirstNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, chargeFirstNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validChargeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_ValidChargeNum,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, validChargeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validChargeTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoItem_FieldNumber_ValidChargeTotal,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PromoterInfoItem__storage_, validChargeTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterInfoItem class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterInfoItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterInfoRes

@implementation PB3PromoterInfoRes

@dynamic listArray, listArray_Count;
@dynamic total;

typedef struct PB3PromoterInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *listArray;
} PB3PromoterInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PromoterInfoItem),
        .number = PB3PromoterInfoRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PromoterInfoRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterInfoRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterInfoRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterInfoRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterTotalReq

@implementation PB3PromoterTotalReq

@dynamic playerId;
@dynamic startTime;
@dynamic endTime;

typedef struct PB3PromoterTotalReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *startTime;
  NSString *endTime;
  int64_t playerId;
} PB3PromoterTotalReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterTotalReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalReq_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterTotalReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalReq_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterTotalReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterTotalReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterTotalReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterTotalItem

@implementation PB3PromoterTotalItem

@dynamic playerId;
@dynamic playerName;
@dynamic createAt;
@dynamic userNum;
@dynamic validUserNum;
@dynamic chargeUserNum;
@dynamic chargeNum;
@dynamic chargeTotal;
@dynamic loginAt;

typedef struct PB3PromoterTotalItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t userNum;
  int32_t validUserNum;
  int32_t chargeUserNum;
  int32_t chargeNum;
  int32_t chargeTotal;
  NSString *playerName;
  int64_t playerId;
  int64_t createAt;
  int64_t loginAt;
} PB3PromoterTotalItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_CreateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_UserNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, userNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validUserNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_ValidUserNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, validUserNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeUserNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_ChargeUserNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, chargeUserNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_ChargeNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, chargeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_ChargeTotal,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, chargeTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "loginAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalItem_FieldNumber_LoginAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PromoterTotalItem__storage_, loginAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterTotalItem class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterTotalItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterTotalRes

@implementation PB3PromoterTotalRes

@dynamic listArray, listArray_Count;

typedef struct PB3PromoterTotalRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3PromoterTotalRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PromoterTotalItem),
        .number = PB3PromoterTotalRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PromoterTotalRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterTotalRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterTotalRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterTotalDateReq

@implementation PB3PromoterTotalDateReq

@dynamic playerId;
@dynamic startTime;
@dynamic endTime;

typedef struct PB3PromoterTotalDateReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *startTime;
  NSString *endTime;
  int64_t playerId;
} PB3PromoterTotalDateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateReq_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateReq_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterTotalDateReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterTotalDateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterTotalDateItem

@implementation PB3PromoterTotalDateItem

@dynamic dateAt;
@dynamic userNum;
@dynamic validUserNum;
@dynamic chargeFirstCny;
@dynamic validChargeNum;
@dynamic validChargeCny;
@dynamic chargeCny;
@dynamic chargeNum;
@dynamic chargeFirstUsd;
@dynamic validChargeUsd;
@dynamic chargeUsd;

typedef struct PB3PromoterTotalDateItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t userNum;
  int32_t validUserNum;
  int32_t validChargeNum;
  int32_t chargeNum;
  NSString *dateAt;
  int64_t chargeFirstCny;
  int64_t validChargeCny;
  int64_t chargeCny;
  int64_t chargeFirstUsd;
  int64_t validChargeUsd;
  int64_t chargeUsd;
} PB3PromoterTotalDateItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_DateAt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, dateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_UserNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, userNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validUserNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ValidUserNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, validUserNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeFirstCny",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ChargeFirstCny,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, chargeFirstCny),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "validChargeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ValidChargeNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, validChargeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validChargeCny",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ValidChargeCny,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, validChargeCny),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chargeCny",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ChargeCny,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, chargeCny),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chargeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ChargeNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, chargeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeFirstUsd",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ChargeFirstUsd,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, chargeFirstUsd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "validChargeUsd",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ValidChargeUsd,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, validChargeUsd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chargeUsd",
        .dataTypeSpecific.className = NULL,
        .number = PB3PromoterTotalDateItem_FieldNumber_ChargeUsd,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateItem__storage_, chargeUsd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterTotalDateItem class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterTotalDateItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PromoterTotalDateRes

@implementation PB3PromoterTotalDateRes

@dynamic listArray, listArray_Count;

typedef struct PB3PromoterTotalDateRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3PromoterTotalDateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PromoterTotalDateItem),
        .number = PB3PromoterTotalDateRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PromoterTotalDateRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PromoterTotalDateRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PromoterTotalDateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGroupNoticeReq

@implementation PB3GetGroupNoticeReq

@dynamic groupId;
@dynamic setRead;

typedef struct PB3GetGroupNoticeReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t setRead;
  NSString *groupId;
} PB3GetGroupNoticeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeReq__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "setRead",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeReq_FieldNumber_SetRead,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeReq__storage_, setRead),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGroupNoticeReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGroupNoticeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGroupNoticeRes

@implementation PB3GetGroupNoticeRes

@dynamic notification;
@dynamic createAt;
@dynamic playerId;
@dynamic nickName;
@dynamic role;
@dynamic icon;
@dynamic isRead;

typedef struct PB3GetGroupNoticeRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t role;
  NSString *notification;
  NSString *nickName;
  NSString *icon;
  int64_t createAt;
  int64_t playerId;
} PB3GetGroupNoticeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notification",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeRes_FieldNumber_Notification,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeRes__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeRes_FieldNumber_CreateAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeRes__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeRes_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeRes_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeRes__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "role",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeRes_FieldNumber_Role,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeRes__storage_, role),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeRes_FieldNumber_Icon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GetGroupNoticeRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isRead",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupNoticeRes_FieldNumber_IsRead,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGroupNoticeRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGroupNoticeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetGroupNoticeReq

@implementation PB3SetGroupNoticeReq

@dynamic groupId;
@dynamic notification;

typedef struct PB3SetGroupNoticeReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *notification;
} PB3SetGroupNoticeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeReq__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notification",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeReq_FieldNumber_Notification,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeReq__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetGroupNoticeReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetGroupNoticeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetGroupNoticeRes

@implementation PB3SetGroupNoticeRes

@dynamic notification;
@dynamic createAt;
@dynamic playerId;
@dynamic nickName;
@dynamic role;
@dynamic icon;

typedef struct PB3SetGroupNoticeRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t role;
  NSString *notification;
  NSString *nickName;
  NSString *icon;
  int64_t createAt;
  int64_t playerId;
} PB3SetGroupNoticeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notification",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeRes_FieldNumber_Notification,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeRes__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeRes_FieldNumber_CreateAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeRes__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeRes_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeRes_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeRes__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "role",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeRes_FieldNumber_Role,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeRes__storage_, role),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupNoticeRes_FieldNumber_Icon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SetGroupNoticeRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetGroupNoticeRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetGroupNoticeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetGroupUnableSendMsgReq

@implementation PB3SetGroupUnableSendMsgReq

@dynamic opType;
@dynamic playerId;
@dynamic groupId;

typedef struct PB3SetGroupUnableSendMsgReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t opType;
  NSString *groupId;
  int64_t playerId;
} PB3SetGroupUnableSendMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupUnableSendMsgReq_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetGroupUnableSendMsgReq__storage_, opType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupUnableSendMsgReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetGroupUnableSendMsgReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetGroupUnableSendMsgReq_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SetGroupUnableSendMsgReq__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetGroupUnableSendMsgReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetGroupUnableSendMsgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetGroupUnableSendMsgRes

@implementation PB3SetGroupUnableSendMsgRes


typedef struct PB3SetGroupUnableSendMsgRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetGroupUnableSendMsgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetGroupUnableSendMsgRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetGroupUnableSendMsgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGroupPlayerReq

@implementation PB3GetGroupPlayerReq

@dynamic groupId;
@dynamic getType;

typedef struct PB3GetGroupPlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t getType;
  NSString *groupId;
} PB3GetGroupPlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupPlayerReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetGroupPlayerReq__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "getType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetGroupPlayerReq_FieldNumber_GetType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetGroupPlayerReq__storage_, getType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGroupPlayerReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGroupPlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetGroupPlayerRes

@implementation PB3GetGroupPlayerRes

@dynamic groupPlayersArray, groupPlayersArray_Count;

typedef struct PB3GetGroupPlayerRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupPlayersArray;
} PB3GetGroupPlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPlayersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GroupPlayer),
        .number = PB3GetGroupPlayerRes_FieldNumber_GroupPlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetGroupPlayerRes__storage_, groupPlayersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetGroupPlayerRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetGroupPlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GroupPlayer

@implementation PB3GroupPlayer

@dynamic playerId;
@dynamic role;
@dynamic icon;
@dynamic nickName;

typedef struct PB3GroupPlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t role;
  NSString *icon;
  NSString *nickName;
  int64_t playerId;
} PB3GroupPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GroupPlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GroupPlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "role",
        .dataTypeSpecific.className = NULL,
        .number = PB3GroupPlayer_FieldNumber_Role,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GroupPlayer__storage_, role),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GroupPlayer_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GroupPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GroupPlayer_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GroupPlayer__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GroupPlayer class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GroupPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetNoticeReadListReq

@implementation PB3GetNoticeReadListReq


typedef struct PB3GetNoticeReadListReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetNoticeReadListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetNoticeReadListReq class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetNoticeReadListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetNoticeReadListRes

@implementation PB3GetNoticeReadListRes

@dynamic noticeReadListArray, noticeReadListArray_Count;

typedef struct PB3GetNoticeReadListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *noticeReadListArray;
} PB3GetNoticeReadListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noticeReadListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NoticeRead),
        .number = PB3GetNoticeReadListRes_FieldNumber_NoticeReadListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetNoticeReadListRes__storage_, noticeReadListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetNoticeReadListRes class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetNoticeReadListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NoticeRead

@implementation PB3NoticeRead

@dynamic groupId;
@dynamic isRead;

typedef struct PB3NoticeRead__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} PB3NoticeRead__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRead_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NoticeRead__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isRead",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRead_FieldNumber_IsRead,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NoticeRead class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NoticeRead__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AnchorSendWelcomeWord

@implementation PB3AnchorSendWelcomeWord

@dynamic text;
@dynamic voice;
@dynamic voiceDuration;
@dynamic roomId;
@dynamic sex;

typedef struct PB3AnchorSendWelcomeWord__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *text;
  NSString *voice;
  int64_t voiceDuration;
  int64_t roomId;
} PB3AnchorSendWelcomeWord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3AnchorSendWelcomeWord_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AnchorSendWelcomeWord__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = PB3AnchorSendWelcomeWord_FieldNumber_Voice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AnchorSendWelcomeWord__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceDuration",
        .dataTypeSpecific.className = NULL,
        .number = PB3AnchorSendWelcomeWord_FieldNumber_VoiceDuration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AnchorSendWelcomeWord__storage_, voiceDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AnchorSendWelcomeWord_FieldNumber_RoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3AnchorSendWelcomeWord__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3AnchorSendWelcomeWord_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3AnchorSendWelcomeWord__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AnchorSendWelcomeWord class]
                                     rootClass:[PB3FriendExtRoot class]
                                          file:PB3FriendExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AnchorSendWelcomeWord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AnchorSendWelcomeWord_Sex_RawValue(PB3AnchorSendWelcomeWord *message) {
  GPBDescriptor *descriptor = [PB3AnchorSendWelcomeWord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AnchorSendWelcomeWord_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AnchorSendWelcomeWord_Sex_RawValue(PB3AnchorSendWelcomeWord *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AnchorSendWelcomeWord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AnchorSendWelcomeWord_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
