// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/mission.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/MissionExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3MissionExtRoot

@implementation PB3MissionExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3MissionExtRoot_FileDescriptor

static GPBFileDescriptor *PB3MissionExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3MissionStatus

GPBEnumDescriptor *PB3MissionStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MsNone\000MsDoing\000MsFinished\000MsDone\000";
    static const int32_t values[] = {
        PB3MissionStatus_MsNone,
        PB3MissionStatus_MsDoing,
        PB3MissionStatus_MsFinished,
        PB3MissionStatus_MsDone,
    };
    static const char *extraTextFormatInfo = "\004\000b\204\000\001b\205\000\002b\210\000\003b\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3MissionStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3MissionStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3MissionStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3MissionStatus_MsNone:
    case PB3MissionStatus_MsDoing:
    case PB3MissionStatus_MsFinished:
    case PB3MissionStatus_MsDone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3MissionCalcType

GPBEnumDescriptor *PB3MissionCalcType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MctNone\000MctTarget\000MctAcc\000";
    static const int32_t values[] = {
        PB3MissionCalcType_MctNone,
        PB3MissionCalcType_MctTarget,
        PB3MissionCalcType_MctAcc,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\206\000\002c\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3MissionCalcType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3MissionCalcType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3MissionCalcType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3MissionCalcType_MctNone:
    case PB3MissionCalcType_MctTarget:
    case PB3MissionCalcType_MctAcc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3CreditScorePlayer

@implementation PB3CreditScorePlayer

@dynamic playerId;
@dynamic id2;
@dynamic playerName;
@dynamic icon;
@dynamic score;
@dynamic level;
@dynamic scoreUpdateAt;
@dynamic lastMonthScore;
@dynamic changeScore;

typedef struct PB3CreditScorePlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  PB3CreditScoreLevel level;
  int32_t lastMonthScore;
  int32_t changeScore;
  NSString *playerName;
  NSString *icon;
  int64_t playerId;
  int64_t id2;
  int64_t scoreUpdateAt;
} PB3CreditScorePlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_Score,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PB3CreditScoreLevel_EnumDescriptor,
        .number = PB3CreditScorePlayer_FieldNumber_Level,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "scoreUpdateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_ScoreUpdateAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, scoreUpdateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastMonthScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_LastMonthScore,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, lastMonthScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "changeScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePlayer_FieldNumber_ChangeScore,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CreditScorePlayer__storage_, changeScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScorePlayer class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScorePlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CreditScorePlayer_Level_RawValue(PB3CreditScorePlayer *message) {
  GPBDescriptor *descriptor = [PB3CreditScorePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScorePlayer_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CreditScorePlayer_Level_RawValue(PB3CreditScorePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CreditScorePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScorePlayer_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CreditScoreIdentity

@implementation PB3CreditScoreIdentity

@dynamic score;
@dynamic isCertification;
@dynamic isClan;
@dynamic isNobility;
@dynamic total;
@dynamic isPublicSettle;

typedef struct PB3CreditScoreIdentity__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  int32_t total;
} PB3CreditScoreIdentity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIdentity_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScoreIdentity__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isCertification",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIdentity_FieldNumber_IsCertification,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isClan",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIdentity_FieldNumber_IsClan,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isNobility",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIdentity_FieldNumber_IsNobility,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIdentity_FieldNumber_Total,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CreditScoreIdentity__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isPublicSettle",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIdentity_FieldNumber_IsPublicSettle,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreIdentity class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScoreIdentity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreActive

@implementation PB3CreditScoreActive

@dynamic score;
@dynamic activeDays;
@dynamic total;

typedef struct PB3CreditScoreActive__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  int32_t activeDays;
  int32_t total;
} PB3CreditScoreActive__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreActive_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScoreActive__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "activeDays",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreActive_FieldNumber_ActiveDays,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScoreActive__storage_, activeDays),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreActive_FieldNumber_Total,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScoreActive__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreActive class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScoreActive__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreConsumeStrength

@implementation PB3CreditScoreConsumeStrength

@dynamic score;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic total;

typedef struct PB3CreditScoreConsumeStrength__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  int32_t wealthLevel;
  int32_t charmLevel;
  int32_t total;
} PB3CreditScoreConsumeStrength__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreConsumeStrength_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScoreConsumeStrength__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreConsumeStrength_FieldNumber_WealthLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScoreConsumeStrength__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreConsumeStrength_FieldNumber_CharmLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScoreConsumeStrength__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreConsumeStrength_FieldNumber_Total,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CreditScoreConsumeStrength__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreConsumeStrength class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScoreConsumeStrength__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScorePunish

@implementation PB3CreditScorePunish

@dynamic score;
@dynamic isPunish;
@dynamic total;

typedef struct PB3CreditScorePunish__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  int32_t total;
} PB3CreditScorePunish__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePunish_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScorePunish__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isPunish",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePunish_FieldNumber_IsPunish,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePunish_FieldNumber_Total,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CreditScorePunish__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScorePunish class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScorePunish__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreIntimate

@implementation PB3CreditScoreIntimate

@dynamic score;
@dynamic intimateNum;
@dynamic total;

typedef struct PB3CreditScoreIntimate__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  int32_t intimateNum;
  int32_t total;
} PB3CreditScoreIntimate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIntimate_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScoreIntimate__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIntimate_FieldNumber_IntimateNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScoreIntimate__storage_, intimateNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreIntimate_FieldNumber_Total,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScoreIntimate__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreIntimate class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScoreIntimate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScorePrivilegeDetail

@implementation PB3CreditScorePrivilegeDetail

@dynamic privilegeDetail;

typedef struct PB3CreditScorePrivilegeDetail__storage_ {
  uint32_t _has_storage_[1];
  NSString *privilegeDetail;
} PB3CreditScorePrivilegeDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "privilegeDetail",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePrivilegeDetail_FieldNumber_PrivilegeDetail,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScorePrivilegeDetail__storage_, privilegeDetail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScorePrivilegeDetail class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScorePrivilegeDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreLevelCfg

@implementation PB3CreditScoreLevelCfg

@dynamic badScore;
@dynamic generalScore;
@dynamic goodScore;
@dynamic veryGoodScore;
@dynamic excellentScore;

typedef struct PB3CreditScoreLevelCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t badScore;
  int32_t generalScore;
  int32_t goodScore;
  int32_t veryGoodScore;
  int32_t excellentScore;
} PB3CreditScoreLevelCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "badScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreLevelCfg_FieldNumber_BadScore,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScoreLevelCfg__storage_, badScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "generalScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreLevelCfg_FieldNumber_GeneralScore,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScoreLevelCfg__storage_, generalScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goodScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreLevelCfg_FieldNumber_GoodScore,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScoreLevelCfg__storage_, goodScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "veryGoodScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreLevelCfg_FieldNumber_VeryGoodScore,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CreditScoreLevelCfg__storage_, veryGoodScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "excellentScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreLevelCfg_FieldNumber_ExcellentScore,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CreditScoreLevelCfg__storage_, excellentScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreLevelCfg class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScoreLevelCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreInfoReq

@implementation PB3CreditScoreInfoReq


typedef struct PB3CreditScoreInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CreditScoreInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreInfoReq class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CreditScoreInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreInfoRes

@implementation PB3CreditScoreInfoRes

@dynamic status;
@dynamic totalScore;
@dynamic hasPlayer, player;
@dynamic hasIdentity, identity;
@dynamic hasActive, active;
@dynamic hasStrength, strength;
@dynamic hasPublish, publish;
@dynamic hasIntimate, intimate;
@dynamic hasPrivilege, privilege;
@dynamic hasLevelCfg, levelCfg;

typedef struct PB3CreditScoreInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CreditScoreStatus status;
  int32_t totalScore;
  PB3CreditScorePlayer *player;
  PB3CreditScoreIdentity *identity;
  PB3CreditScoreActive *active;
  PB3CreditScoreConsumeStrength *strength;
  PB3CreditScorePunish *publish;
  PB3CreditScoreIntimate *intimate;
  PB3CreditScorePrivilegeDetail *privilege;
  PB3CreditScoreLevelCfg *levelCfg;
} PB3CreditScoreInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3CreditScoreStatus_EnumDescriptor,
        .number = PB3CreditScoreInfoRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "totalScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreInfoRes_FieldNumber_TotalScore,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, totalScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScorePlayer),
        .number = PB3CreditScoreInfoRes_FieldNumber_Player,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "identity",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScoreIdentity),
        .number = PB3CreditScoreInfoRes_FieldNumber_Identity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, identity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScoreActive),
        .number = PB3CreditScoreInfoRes_FieldNumber_Active,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, active),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "strength",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScoreConsumeStrength),
        .number = PB3CreditScoreInfoRes_FieldNumber_Strength,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, strength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "publish",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScorePunish),
        .number = PB3CreditScoreInfoRes_FieldNumber_Publish,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, publish),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimate",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScoreIntimate),
        .number = PB3CreditScoreInfoRes_FieldNumber_Intimate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, intimate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "privilege",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScorePrivilegeDetail),
        .number = PB3CreditScoreInfoRes_FieldNumber_Privilege,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, privilege),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "levelCfg",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditScoreLevelCfg),
        .number = PB3CreditScoreInfoRes_FieldNumber_LevelCfg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3CreditScoreInfoRes__storage_, levelCfg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreInfoRes class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScoreInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CreditScoreInfoRes_Status_RawValue(PB3CreditScoreInfoRes *message) {
  GPBDescriptor *descriptor = [PB3CreditScoreInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScoreInfoRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CreditScoreInfoRes_Status_RawValue(PB3CreditScoreInfoRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CreditScoreInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScoreInfoRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ActiveCreditScoreReq

@implementation PB3ActiveCreditScoreReq


typedef struct PB3ActiveCreditScoreReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ActiveCreditScoreReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActiveCreditScoreReq class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ActiveCreditScoreReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActiveCreditScoreRes

@implementation PB3ActiveCreditScoreRes

@dynamic status;

typedef struct PB3ActiveCreditScoreRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CreditScoreStatus status;
} PB3ActiveCreditScoreRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3CreditScoreStatus_EnumDescriptor,
        .number = PB3ActiveCreditScoreRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActiveCreditScoreRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActiveCreditScoreRes class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActiveCreditScoreRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ActiveCreditScoreRes_Status_RawValue(PB3ActiveCreditScoreRes *message) {
  GPBDescriptor *descriptor = [PB3ActiveCreditScoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActiveCreditScoreRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActiveCreditScoreRes_Status_RawValue(PB3ActiveCreditScoreRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActiveCreditScoreRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActiveCreditScoreRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CreditHistoryReq

@implementation PB3CreditHistoryReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3CreditHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3CreditHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditHistoryReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditHistoryReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditHistoryReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditHistoryReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditHistoryReq class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditHistoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditHistoryRes

@implementation PB3CreditHistoryRes

@dynamic historyArray, historyArray_Count;
@dynamic total;

typedef struct PB3CreditHistoryRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *historyArray;
} PB3CreditHistoryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "historyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CreditHistory),
        .number = PB3CreditHistoryRes_FieldNumber_HistoryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CreditHistoryRes__storage_, historyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditHistoryRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditHistoryRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditHistoryRes class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditHistoryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditHistory

@implementation PB3CreditHistory

@dynamic timestamp;
@dynamic finalScore;
@dynamic desc;
@dynamic isRed;

typedef struct PB3CreditHistory__storage_ {
  uint32_t _has_storage_[1];
  NSString *desc;
  int64_t timestamp;
  int64_t finalScore;
} PB3CreditHistory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditHistory_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditHistory__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "finalScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditHistory_FieldNumber_FinalScore,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditHistory__storage_, finalScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditHistory_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditHistory__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isRed",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditHistory_FieldNumber_IsRed,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditHistory class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditHistory__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreRankRateReq

@implementation PB3CreditScoreRankRateReq


typedef struct PB3CreditScoreRankRateReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CreditScoreRankRateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreRankRateReq class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CreditScoreRankRateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreditScoreRankRateRes

@implementation PB3CreditScoreRankRateRes

@dynamic rate;

typedef struct PB3CreditScoreRankRateRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t rate;
} PB3CreditScoreRankRateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScoreRankRateRes_FieldNumber_Rate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScoreRankRateRes__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScoreRankRateRes class]
                                     rootClass:[PB3MissionExtRoot class]
                                          file:PB3MissionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScoreRankRateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
