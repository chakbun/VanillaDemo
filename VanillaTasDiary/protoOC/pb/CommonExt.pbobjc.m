// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/common.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/CommonExt.pbobjc.h"
#import "pb/BillExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3CommonExtRoot

@implementation PB3CommonExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3CommonExtRoot_FileDescriptor

static GPBFileDescriptor *PB3CommonExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3AppId

GPBEnumDescriptor *PB3AppId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AppIdXiaohuxi\000AppIdMizhua\000AppIdCaiji\000";
    static const int32_t values[] = {
        PB3AppId_AppIdXiaohuxi,
        PB3AppId_AppIdMizhua,
        PB3AppId_AppIdCaiji,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AppId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AppId_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AppId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AppId_AppIdXiaohuxi:
    case PB3AppId_AppIdMizhua:
    case PB3AppId_AppIdCaiji:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CommonErr

GPBEnumDescriptor *PB3CommonErr_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ErrCodeNone\000ErrCodeRedis\000ErrCodeMysql\000Er"
        "rCodeFrequency\000ErrCodeParam\000ErrCodeNoMat"
        "chObj\000ErrCodeBusy\000ErrCodeMaintain\000";
    static const int32_t values[] = {
        PB3CommonErr_ErrCodeNone,
        PB3CommonErr_ErrCodeRedis,
        PB3CommonErr_ErrCodeMysql,
        PB3CommonErr_ErrCodeFrequency,
        PB3CommonErr_ErrCodeParam,
        PB3CommonErr_ErrCodeNoMatchObj,
        PB3CommonErr_ErrCodeBusy,
        PB3CommonErr_ErrCodeMaintain,
    };
    static const char *extraTextFormatInfo = "\010\000\013\000\001\014\000\002\014\000\003\020\000\004\014\000\005\021\000\006\013\000\007\017\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CommonErr)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CommonErr_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CommonErr_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CommonErr_ErrCodeNone:
    case PB3CommonErr_ErrCodeRedis:
    case PB3CommonErr_ErrCodeMysql:
    case PB3CommonErr_ErrCodeFrequency:
    case PB3CommonErr_ErrCodeParam:
    case PB3CommonErr_ErrCodeNoMatchObj:
    case PB3CommonErr_ErrCodeBusy:
    case PB3CommonErr_ErrCodeMaintain:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SexType

GPBEnumDescriptor *PB3SexType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Mail\000Femail\000";
    static const int32_t values[] = {
        PB3SexType_Unknown,
        PB3SexType_Mail,
        PB3SexType_Femail,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SexType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SexType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SexType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SexType_Unknown:
    case PB3SexType_Mail:
    case PB3SexType_Femail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomType

GPBEnumDescriptor *PB3RoomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtGuild\000RtPersonal\000RtReward\000";
    static const int32_t values[] = {
        PB3RoomType_RtGuild,
        PB3RoomType_RtPersonal,
        PB3RoomType_RtReward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomType_RtGuild:
    case PB3RoomType_RtPersonal:
    case PB3RoomType_RtReward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomPattern

GPBEnumDescriptor *PB3RoomPattern_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RpGame\000RpStandard\000RpHighQuality\000RpPerson"
        "al\000RpIntimate\000NpShow\000RpMate\000RpSendOrder\000"
        "RpGamePlatform\000NpAuction\000RpSingleLive\000Rp"
        "MobaTeam\000RpOrganizeMobaTeam\000RpLive\000RpClu"
        "b\000RpSingleLiveVsn2\000RpCloudDisco\000";
    static const int32_t values[] = {
        PB3RoomPattern_RpGame,
        PB3RoomPattern_RpStandard,
        PB3RoomPattern_RpHighQuality,
        PB3RoomPattern_RpPersonal,
        PB3RoomPattern_RpIntimate,
        PB3RoomPattern_NpShow,
        PB3RoomPattern_RpMate,
        PB3RoomPattern_RpSendOrder,
        PB3RoomPattern_RpGamePlatform,
        PB3RoomPattern_NpAuction,
        PB3RoomPattern_RpSingleLive,
        PB3RoomPattern_RpMobaTeam,
        PB3RoomPattern_RpOrganizeMobaTeam,
        PB3RoomPattern_RpLive,
        PB3RoomPattern_RpClub,
        PB3RoomPattern_RpSingleLiveVsn2,
        PB3RoomPattern_RpCloudDisco,
    };
    static const char *extraTextFormatInfo = "\001\017b\346\344\343\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomPattern)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomPattern_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomPattern_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomPattern_RpGame:
    case PB3RoomPattern_RpStandard:
    case PB3RoomPattern_RpHighQuality:
    case PB3RoomPattern_RpPersonal:
    case PB3RoomPattern_RpIntimate:
    case PB3RoomPattern_NpShow:
    case PB3RoomPattern_RpMate:
    case PB3RoomPattern_RpSendOrder:
    case PB3RoomPattern_RpGamePlatform:
    case PB3RoomPattern_NpAuction:
    case PB3RoomPattern_RpSingleLive:
    case PB3RoomPattern_RpMobaTeam:
    case PB3RoomPattern_RpOrganizeMobaTeam:
    case PB3RoomPattern_RpLive:
    case PB3RoomPattern_RpClub:
    case PB3RoomPattern_RpSingleLiveVsn2:
    case PB3RoomPattern_RpCloudDisco:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewRoomPattern

GPBEnumDescriptor *PB3NewRoomPattern_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NrpGame\000NrpStandard\000NrpPersonal\000NrpIntim"
        "ate\000NrpShow\000NrpMate\000NrpSendOrder\000NrpGame"
        "Platform\000NrpAuction\000NrpSingleLive\000NrpNoi"
        "nit\000NrpMobaTeam\000NrpOrganizeMobaTeam\000NrpL"
        "ive\000NrpClub\000NrpSingleLiveVsn2\000NrpCloudDi"
        "sco\000NrpInteraction\000NrpMate2\000NrpFossa\000";
    static const int32_t values[] = {
        PB3NewRoomPattern_NrpGame,
        PB3NewRoomPattern_NrpStandard,
        PB3NewRoomPattern_NrpPersonal,
        PB3NewRoomPattern_NrpIntimate,
        PB3NewRoomPattern_NrpShow,
        PB3NewRoomPattern_NrpMate,
        PB3NewRoomPattern_NrpSendOrder,
        PB3NewRoomPattern_NrpGamePlatform,
        PB3NewRoomPattern_NrpAuction,
        PB3NewRoomPattern_NrpSingleLive,
        PB3NewRoomPattern_NrpNoinit,
        PB3NewRoomPattern_NrpMobaTeam,
        PB3NewRoomPattern_NrpOrganizeMobaTeam,
        PB3NewRoomPattern_NrpLive,
        PB3NewRoomPattern_NrpClub,
        PB3NewRoomPattern_NrpSingleLiveVsn2,
        PB3NewRoomPattern_NrpCloudDisco,
        PB3NewRoomPattern_NrpInteraction,
        PB3NewRoomPattern_NrpMate2,
        PB3NewRoomPattern_NrpFossa,
    };
    static const char *extraTextFormatInfo = "\002\017c\346\344\343\201\000\022c\344\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewRoomPattern)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewRoomPattern_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewRoomPattern_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewRoomPattern_NrpGame:
    case PB3NewRoomPattern_NrpStandard:
    case PB3NewRoomPattern_NrpPersonal:
    case PB3NewRoomPattern_NrpIntimate:
    case PB3NewRoomPattern_NrpShow:
    case PB3NewRoomPattern_NrpMate:
    case PB3NewRoomPattern_NrpSendOrder:
    case PB3NewRoomPattern_NrpGamePlatform:
    case PB3NewRoomPattern_NrpAuction:
    case PB3NewRoomPattern_NrpSingleLive:
    case PB3NewRoomPattern_NrpNoinit:
    case PB3NewRoomPattern_NrpMobaTeam:
    case PB3NewRoomPattern_NrpOrganizeMobaTeam:
    case PB3NewRoomPattern_NrpLive:
    case PB3NewRoomPattern_NrpClub:
    case PB3NewRoomPattern_NrpSingleLiveVsn2:
    case PB3NewRoomPattern_NrpCloudDisco:
    case PB3NewRoomPattern_NrpInteraction:
    case PB3NewRoomPattern_NrpMate2:
    case PB3NewRoomPattern_NrpFossa:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AuctionType

GPBEnumDescriptor *PB3AuctionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AtDefault\000AtService\000AtGift\000";
    static const int32_t values[] = {
        PB3AuctionType_AtDefault,
        PB3AuctionType_AtService,
        PB3AuctionType_AtGift,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AuctionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AuctionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AuctionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AuctionType_AtDefault:
    case PB3AuctionType_AtService:
    case PB3AuctionType_AtGift:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomVoice

GPBEnumDescriptor *PB3RoomVoice_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RvZero\000RvStandard\000RvHighQuality\000";
    static const int32_t values[] = {
        PB3RoomVoice_RvZero,
        PB3RoomVoice_RvStandard,
        PB3RoomVoice_RvHighQuality,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomVoice)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomVoice_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomVoice_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomVoice_RvZero:
    case PB3RoomVoice_RvStandard:
    case PB3RoomVoice_RvHighQuality:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SceneType

GPBEnumDescriptor *PB3SceneType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StZero\000StHome\000";
    static const int32_t values[] = {
        PB3SceneType_StZero,
        PB3SceneType_StHome,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SceneType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SceneType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SceneType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SceneType_StZero:
    case PB3SceneType_StHome:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChannelType

GPBEnumDescriptor *PB3ChannelType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CtRoom\000CtAnonymous\000CtClan\000CtGlobal\000CtAll"
        "Channel\000";
    static const int32_t values[] = {
        PB3ChannelType_CtRoom,
        PB3ChannelType_CtAnonymous,
        PB3ChannelType_CtClan,
        PB3ChannelType_CtGlobal,
        PB3ChannelType_CtAllChannel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChannelType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChannelType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChannelType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChannelType_CtRoom:
    case PB3ChannelType_CtAnonymous:
    case PB3ChannelType_CtClan:
    case PB3ChannelType_CtGlobal:
    case PB3ChannelType_CtAllChannel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomAdminType

GPBEnumDescriptor *PB3RoomAdminType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RatGuest\000RatNormal\000RatAdmin\000RatOwner\000Rat"
        "SuperAdmin\000RatBlack\000RatTempAdmin\000";
    static const int32_t values[] = {
        PB3RoomAdminType_RatGuest,
        PB3RoomAdminType_RatNormal,
        PB3RoomAdminType_RatAdmin,
        PB3RoomAdminType_RatOwner,
        PB3RoomAdminType_RatSuperAdmin,
        PB3RoomAdminType_RatBlack,
        PB3RoomAdminType_RatTempAdmin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomAdminType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomAdminType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomAdminType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomAdminType_RatGuest:
    case PB3RoomAdminType_RatNormal:
    case PB3RoomAdminType_RatAdmin:
    case PB3RoomAdminType_RatOwner:
    case PB3RoomAdminType_RatSuperAdmin:
    case PB3RoomAdminType_RatBlack:
    case PB3RoomAdminType_RatTempAdmin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OnlineStateType

GPBEnumDescriptor *PB3OnlineStateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OstOffline\000OstDisconnected\000OstBackground"
        "\000OstOnline\000";
    static const int32_t values[] = {
        PB3OnlineStateType_OstOffline,
        PB3OnlineStateType_OstDisconnected,
        PB3OnlineStateType_OstBackground,
        PB3OnlineStateType_OstOnline,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OnlineStateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OnlineStateType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OnlineStateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OnlineStateType_OstOffline:
    case PB3OnlineStateType_OstDisconnected:
    case PB3OnlineStateType_OstBackground:
    case PB3OnlineStateType_OstOnline:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DeviceType

GPBEnumDescriptor *PB3DeviceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DtUnknown\000DtFlashplayer\000DtIosPhone\000DtWin"
        "dowsAssistant\000DtWindowsPc\000DtRobot\000DtWech"
        "atSubscription\000DtQqSmallProgram\000DtWxMini"
        "Program\000";
    static const int32_t values[] = {
        PB3DeviceType_DtUnknown,
        PB3DeviceType_DtFlashplayer,
        PB3DeviceType_DtIosPhone,
        PB3DeviceType_DtWindowsAssistant,
        PB3DeviceType_DtWindowsPc,
        PB3DeviceType_DtRobot,
        PB3DeviceType_DtWechatSubscription,
        PB3DeviceType_DtQqSmallProgram,
        PB3DeviceType_DtWxMiniProgram,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DeviceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DeviceType_DtUnknown:
    case PB3DeviceType_DtFlashplayer:
    case PB3DeviceType_DtIosPhone:
    case PB3DeviceType_DtWindowsAssistant:
    case PB3DeviceType_DtWindowsPc:
    case PB3DeviceType_DtRobot:
    case PB3DeviceType_DtWechatSubscription:
    case PB3DeviceType_DtQqSmallProgram:
    case PB3DeviceType_DtWxMiniProgram:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3InteractionType

GPBEnumDescriptor *PB3InteractionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IatDefault\000IatZhaDang\000IatBaoYin\000IatChoos"
        "eSong\000IatChorus\000IatConfession\000IatInterac"
        "tion\000IatCoquetry\000";
    static const int32_t values[] = {
        PB3InteractionType_IatDefault,
        PB3InteractionType_IatZhaDang,
        PB3InteractionType_IatBaoYin,
        PB3InteractionType_IatChooseSong,
        PB3InteractionType_IatChorus,
        PB3InteractionType_IatConfession,
        PB3InteractionType_IatInteraction,
        PB3InteractionType_IatCoquetry,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3InteractionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3InteractionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3InteractionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3InteractionType_IatDefault:
    case PB3InteractionType_IatZhaDang:
    case PB3InteractionType_IatBaoYin:
    case PB3InteractionType_IatChooseSong:
    case PB3InteractionType_IatChorus:
    case PB3InteractionType_IatConfession:
    case PB3InteractionType_IatInteraction:
    case PB3InteractionType_IatCoquetry:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GenderPattern

GPBEnumDescriptor *PB3GenderPattern_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GvZero\000GvMale\000GvFemale\000";
    static const int32_t values[] = {
        PB3GenderPattern_GvZero,
        PB3GenderPattern_GvMale,
        PB3GenderPattern_GvFemale,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GenderPattern)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GenderPattern_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GenderPattern_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GenderPattern_GvZero:
    case PB3GenderPattern_GvMale:
    case PB3GenderPattern_GvFemale:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AccountFlags

GPBEnumDescriptor *PB3AccountFlags_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AfZero\000AfPhoneVerified\000AfBindDevice\000";
    static const int32_t values[] = {
        PB3AccountFlags_AfZero,
        PB3AccountFlags_AfPhoneVerified,
        PB3AccountFlags_AfBindDevice,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AccountFlags)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AccountFlags_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AccountFlags_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AccountFlags_AfZero:
    case PB3AccountFlags_AfPhoneVerified:
    case PB3AccountFlags_AfBindDevice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomFlags

GPBEnumDescriptor *PB3RoomFlags_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RfZero\000RfGuard1\000RfEvent520\000RfWeekstarroo"
        "m\000";
    static const int32_t values[] = {
        PB3RoomFlags_RfZero,
        PB3RoomFlags_RfGuard1,
        PB3RoomFlags_RfEvent520,
        PB3RoomFlags_RfWeekstarroom,
    };
    static const char *extraTextFormatInfo = "\001\001b\345\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomFlags)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomFlags_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomFlags_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomFlags_RfZero:
    case PB3RoomFlags_RfGuard1:
    case PB3RoomFlags_RfEvent520:
    case PB3RoomFlags_RfWeekstarroom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PlayerFlags

GPBEnumDescriptor *PB3PlayerFlags_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PfZero\000PfCharge0Gift\000PfNewyearBag\000PfBind"
        "Mali\000PfInvite\000PfWeekstar0\000PfWeekstar1\000Pf"
        "Weekstar2\000PfWeekstar3\000PfVoiceSilver\000PfVo"
        "iceGold\000PfCertif\000PfGuardPlayer1\000PfGuardP"
        "layer2\000PfGuardPlayer3\000PfGuardFans1\000PfGua"
        "rdFans2\000PfGuardFans3\000PfEvent520LightChar"
        "m\000PfEvent520LightWealth\000PfEvent520ChairC"
        "harm\000PfEvent520ChairWealth\000PfEvent520Sce"
        "neCharm1\000PfEvent520SceneCharm2\000PfEvent52"
        "0SceneCharm3\000PfEvent520SceneWealth\000PfEve"
        "nt61Small\000PfEvent61Medium\000PfEvent61Big\000P"
        "fEvent61Super\000PfChargeFirst\000PfOfficialGu"
        "ide\000PfHighQuality\000PfSinger\000PfGreet\000PfCer"
        "tification\000PfBillOrder\000PfCaijiUser\000PfCom"
        "munityManager\000";
    static const int32_t values[] = {
        PB3PlayerFlags_PfZero,
        PB3PlayerFlags_PfCharge0Gift,
        PB3PlayerFlags_PfNewyearBag,
        PB3PlayerFlags_PfBindMali,
        PB3PlayerFlags_PfInvite,
        PB3PlayerFlags_PfWeekstar0,
        PB3PlayerFlags_PfWeekstar1,
        PB3PlayerFlags_PfWeekstar2,
        PB3PlayerFlags_PfWeekstar3,
        PB3PlayerFlags_PfVoiceSilver,
        PB3PlayerFlags_PfVoiceGold,
        PB3PlayerFlags_PfCertif,
        PB3PlayerFlags_PfGuardPlayer1,
        PB3PlayerFlags_PfGuardPlayer2,
        PB3PlayerFlags_PfGuardPlayer3,
        PB3PlayerFlags_PfGuardFans1,
        PB3PlayerFlags_PfGuardFans2,
        PB3PlayerFlags_PfGuardFans3,
        PB3PlayerFlags_PfEvent520LightCharm,
        PB3PlayerFlags_PfEvent520LightWealth,
        PB3PlayerFlags_PfEvent520ChairCharm,
        PB3PlayerFlags_PfEvent520ChairWealth,
        PB3PlayerFlags_PfEvent520SceneCharm1,
        PB3PlayerFlags_PfEvent520SceneCharm2,
        PB3PlayerFlags_PfEvent520SceneCharm3,
        PB3PlayerFlags_PfEvent520SceneWealth,
        PB3PlayerFlags_PfEvent61Small,
        PB3PlayerFlags_PfEvent61Medium,
        PB3PlayerFlags_PfEvent61Big,
        PB3PlayerFlags_PfEvent61Super,
        PB3PlayerFlags_PfChargeFirst,
        PB3PlayerFlags_PfOfficialGuide,
        PB3PlayerFlags_PfHighQuality,
        PB3PlayerFlags_PfSinger,
        PB3PlayerFlags_PfGreet,
        PB3PlayerFlags_PfCertification,
        PB3PlayerFlags_PfBillOrder,
        PB3PlayerFlags_PfCaijiUser,
        PB3PlayerFlags_PfCommunityManager,
    };
    static const char *extraTextFormatInfo = "\021\001b\346\201\344\000\003b\344\204\000\005b\350\201\000\006b\350\201\000\007b\350\201\000\010b\350\201\000\014b\345\346\201\000\rb\345\346\201\000\016b\345\346\201\000\017b\345\344\201\000\020b\345\344\201\000\021b\345\344\201\000\026b\345\003\345\345\201\000\027b\345\003\345\345\201\000\030b\345\003\345\345\201\000!b\206\000\"b\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PlayerFlags)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PlayerFlags_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PlayerFlags_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PlayerFlags_PfZero:
    case PB3PlayerFlags_PfCharge0Gift:
    case PB3PlayerFlags_PfNewyearBag:
    case PB3PlayerFlags_PfBindMali:
    case PB3PlayerFlags_PfInvite:
    case PB3PlayerFlags_PfWeekstar0:
    case PB3PlayerFlags_PfWeekstar1:
    case PB3PlayerFlags_PfWeekstar2:
    case PB3PlayerFlags_PfWeekstar3:
    case PB3PlayerFlags_PfVoiceSilver:
    case PB3PlayerFlags_PfVoiceGold:
    case PB3PlayerFlags_PfCertif:
    case PB3PlayerFlags_PfGuardPlayer1:
    case PB3PlayerFlags_PfGuardPlayer2:
    case PB3PlayerFlags_PfGuardPlayer3:
    case PB3PlayerFlags_PfGuardFans1:
    case PB3PlayerFlags_PfGuardFans2:
    case PB3PlayerFlags_PfGuardFans3:
    case PB3PlayerFlags_PfEvent520LightCharm:
    case PB3PlayerFlags_PfEvent520LightWealth:
    case PB3PlayerFlags_PfEvent520ChairCharm:
    case PB3PlayerFlags_PfEvent520ChairWealth:
    case PB3PlayerFlags_PfEvent520SceneCharm1:
    case PB3PlayerFlags_PfEvent520SceneCharm2:
    case PB3PlayerFlags_PfEvent520SceneCharm3:
    case PB3PlayerFlags_PfEvent520SceneWealth:
    case PB3PlayerFlags_PfEvent61Small:
    case PB3PlayerFlags_PfEvent61Medium:
    case PB3PlayerFlags_PfEvent61Big:
    case PB3PlayerFlags_PfEvent61Super:
    case PB3PlayerFlags_PfChargeFirst:
    case PB3PlayerFlags_PfOfficialGuide:
    case PB3PlayerFlags_PfHighQuality:
    case PB3PlayerFlags_PfSinger:
    case PB3PlayerFlags_PfGreet:
    case PB3PlayerFlags_PfCertification:
    case PB3PlayerFlags_PfBillOrder:
    case PB3PlayerFlags_PfCaijiUser:
    case PB3PlayerFlags_PfCommunityManager:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PlayerFlags2

GPBEnumDescriptor *PB3PlayerFlags2_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Pf2Zero\000PfWorldcupBronze\000PfWorldcupSilve"
        "r\000PfWorldcupGold\000PfWorldcup1\000PfWorldcup2"
        "\000PfWorldcup3\000PfWorldcupChina\000PfWorldcupB"
        "razil\000PfWorldcupGermany\000PfWorldcupArgent"
        "ina\000PfWorldcupSpain\000PfCrackeggBall\000PfChi"
        "ckenRice\000PfPhoenix\000PfMizhuaAnnual\000PfScen"
        "eInfluential\000PfChairInfluential\000PfMoonFe"
        "stivalCake\000PfMoonFestivalRabbit\000PfMoonFe"
        "stivalCard\000PfDeLovely\000PfThePit\000PfCalling"
        "Card\000PfDandanjun\000PfEvent11LightCharm\000PfE"
        "vent11CharmCard\000PfEvent11ChairCharm\000PfEv"
        "entDoubledenierChairCharm\000PfEventDoubled"
        "enierOptimumCpLight\000PfEventDoubledenierC"
        "pLight\000PfEventDoubledenierInfluential1\000P"
        "fEventDoubledenierInfluential2\000PfEventDo"
        "ubledenierInfluential3\000";
    static const int32_t values[] = {
        PB3PlayerFlags2_Pf2Zero,
        PB3PlayerFlags2_PfWorldcupBronze,
        PB3PlayerFlags2_PfWorldcupSilver,
        PB3PlayerFlags2_PfWorldcupGold,
        PB3PlayerFlags2_PfWorldcup1,
        PB3PlayerFlags2_PfWorldcup2,
        PB3PlayerFlags2_PfWorldcup3,
        PB3PlayerFlags2_PfWorldcupChina,
        PB3PlayerFlags2_PfWorldcupBrazil,
        PB3PlayerFlags2_PfWorldcupGermany,
        PB3PlayerFlags2_PfWorldcupArgentina,
        PB3PlayerFlags2_PfWorldcupSpain,
        PB3PlayerFlags2_PfCrackeggBall,
        PB3PlayerFlags2_PfChickenRice,
        PB3PlayerFlags2_PfPhoenix,
        PB3PlayerFlags2_PfMizhuaAnnual,
        PB3PlayerFlags2_PfSceneInfluential,
        PB3PlayerFlags2_PfChairInfluential,
        PB3PlayerFlags2_PfMoonFestivalCake,
        PB3PlayerFlags2_PfMoonFestivalRabbit,
        PB3PlayerFlags2_PfMoonFestivalCard,
        PB3PlayerFlags2_PfDeLovely,
        PB3PlayerFlags2_PfThePit,
        PB3PlayerFlags2_PfCallingCard,
        PB3PlayerFlags2_PfDandanjun,
        PB3PlayerFlags2_PfEvent11LightCharm,
        PB3PlayerFlags2_PfEvent11CharmCard,
        PB3PlayerFlags2_PfEvent11ChairCharm,
        PB3PlayerFlags2_PfEventDoubledenierChairCharm,
        PB3PlayerFlags2_PfEventDoubledenierOptimumCpLight,
        PB3PlayerFlags2_PfEventDoubledenierCpLight,
        PB3PlayerFlags2_PfEventDoubledenierInfluential1,
        PB3PlayerFlags2_PfEventDoubledenierInfluential2,
        PB3PlayerFlags2_PfEventDoubledenierInfluential3,
    };
    static const char *extraTextFormatInfo = "\003\004b\350\201\000\005b\350\201\000\006b\350\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PlayerFlags2)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PlayerFlags2_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PlayerFlags2_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PlayerFlags2_Pf2Zero:
    case PB3PlayerFlags2_PfWorldcupBronze:
    case PB3PlayerFlags2_PfWorldcupSilver:
    case PB3PlayerFlags2_PfWorldcupGold:
    case PB3PlayerFlags2_PfWorldcup1:
    case PB3PlayerFlags2_PfWorldcup2:
    case PB3PlayerFlags2_PfWorldcup3:
    case PB3PlayerFlags2_PfWorldcupChina:
    case PB3PlayerFlags2_PfWorldcupBrazil:
    case PB3PlayerFlags2_PfWorldcupGermany:
    case PB3PlayerFlags2_PfWorldcupArgentina:
    case PB3PlayerFlags2_PfWorldcupSpain:
    case PB3PlayerFlags2_PfCrackeggBall:
    case PB3PlayerFlags2_PfChickenRice:
    case PB3PlayerFlags2_PfPhoenix:
    case PB3PlayerFlags2_PfMizhuaAnnual:
    case PB3PlayerFlags2_PfSceneInfluential:
    case PB3PlayerFlags2_PfChairInfluential:
    case PB3PlayerFlags2_PfMoonFestivalCake:
    case PB3PlayerFlags2_PfMoonFestivalRabbit:
    case PB3PlayerFlags2_PfMoonFestivalCard:
    case PB3PlayerFlags2_PfDeLovely:
    case PB3PlayerFlags2_PfThePit:
    case PB3PlayerFlags2_PfCallingCard:
    case PB3PlayerFlags2_PfDandanjun:
    case PB3PlayerFlags2_PfEvent11LightCharm:
    case PB3PlayerFlags2_PfEvent11CharmCard:
    case PB3PlayerFlags2_PfEvent11ChairCharm:
    case PB3PlayerFlags2_PfEventDoubledenierChairCharm:
    case PB3PlayerFlags2_PfEventDoubledenierOptimumCpLight:
    case PB3PlayerFlags2_PfEventDoubledenierCpLight:
    case PB3PlayerFlags2_PfEventDoubledenierInfluential1:
    case PB3PlayerFlags2_PfEventDoubledenierInfluential2:
    case PB3PlayerFlags2_PfEventDoubledenierInfluential3:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PlayerFlags3

GPBEnumDescriptor *PB3PlayerFlags3_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Pf3Zero\000PfNoTicket\000PfSetSexPasswd\000";
    static const int32_t values[] = {
        PB3PlayerFlags3_Pf3Zero,
        PB3PlayerFlags3_PfNoTicket,
        PB3PlayerFlags3_PfSetSexPasswd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PlayerFlags3)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PlayerFlags3_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PlayerFlags3_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PlayerFlags3_Pf3Zero:
    case PB3PlayerFlags3_PfNoTicket:
    case PB3PlayerFlags3_PfSetSexPasswd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OnOffType

GPBEnumDescriptor *PB3OnOffType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "YearBag\000CrackEgg\000Gp\000Iapp\000Invite\000IndexCat"
        "egory\000Ioxinbao\000Guard\000WeekStar\000Event520\000W"
        "orldCup\000RealIdentity\000Anniversary\000NoviceG"
        "ift\000TjUser\000TjPersonal\000MoonFestival\000MiwoW"
        "ealth\000DeLovely\000Event11\000TjNew\000TjUserdefin"
        "e\000RoomTip\000BonusPool\000ShortId\000TimeCount\000He"
        "adLine\000TiaoTiao\000Ioxinbao2\000TiaoTiaoScreen"
        "\000RoomEnter\000RoomPatternHighQuality\000Ioxinb"
        "ao2Banner\000RegisterPassword\000AuthLoginUi\000H"
        "otSong\000IntimateExp\000UserDataEdit\000Activity"
        "Type\000Activity\000PcLimitLogin\000Clan\000BindPhon"
        "e\000LoginBindPhone\000Tc\000Certification\000Certif"
        "icationRoomShow\000CertificationRoomWinOpen"
        "Close\000CertifyWord\000CertifyChair\000CertifyUp"
        "dateUserInfo\000CertifyBroadcastFriend\000Cert"
        "ifyHeadLine\000CertifyTiaoTiao\000YoungModel\000C"
        "ertifyOwnweEnterRoom\000BillOrder\000RoomLucky"
        "Draw\000PcActivity\000BillOrderNewPlayer\000Chair"
        "Manager\000YunpianSms\000OverseasIpLimit\000OldNa"
        "meLimit\000HelpFeedback\000SendBill\000OrderRank\000"
        "OrderLocation\000ReceiveWindow\000ChargeGuide\000"
        "RoomChatLog\000OnChairCharm\000DragonBall\000Crac"
        "kSelfMsg\000DispatchWindow\000DeleteAccount\000Bi"
        "llNotApplyFreeze\000ThemeCrack\000FirstChargeT"
        "ipsPush\000RecentVisitor\000UploadAccessOss\000Bi"
        "ndPhoneV2\000WhaleActivityNotice\000WhaleActiv"
        "ityTips\000BindPhoneLogin\000VersionContent\000Cl"
        "earImRecords\000JumpToQq\000OxygenBar\000PrivacyS"
        "etting\000OxygenBarClanMemberOnly\000OxygenBar"
        "TrendGif\000DataAudit\000BillPush\000IntimateTitl"
        "eChange\000InnerAli\000InnerTec\000CmbVip\000RoomBro"
        "adcastFriend\000BillOrderNew\000BillPlayerVisi"
        "tVisible\000TextFilterBroadcastFriend\000TextF"
        "ilterPrivateChat\000Nobility\000BuyNobilityGol"
        "d\000ExclusiveService\000NobilityFamous\000Protec"
        "tionOfMinors\000Anonymous\000Gender\000HomepageBi"
        "ndPhone\000AntiAddiction\000IosVipCmb\000H5GoldBu"
        "yNobility\000DynamicIcon\000CertifyRecharge\000Ce"
        "rtifyExchange\000CertifyCostCoin\000BuyNobilit"
        "yVip\000Tg\000GreetContent\000RootMillionForest\000M"
        "ainTabMediaPlayer\000ExchangeCode\000WechatVis"
        "itor\000WechatOrder\000WechatMsg\000PersonalRedEn"
        "velope\000LuckyValue\000BillEvaluation\000OneStep"
        "BindPhone\000MultiClientOnline\000CertifyOpenM"
        "ic\000WechatBill\000IntimateGiveBack\000EffectHon"
        "ourHeaven\000EffectHonourWall\000EffectMedalWa"
        "ll\000PhomeInterestNav\000AppLoginAgree\000SongLy"
        "ricSync\000LeaveMessage\000AnnualRoomBanner\000Ro"
        "omBoxReward\000EffectRenew\000FastWithdraw\000Auc"
        "tionRecord\000IntimateFans\000IntimateFansEntr"
        "y\000MiniDownload\000ChargeVerify\000LoginIpLimit"
        "\000LoginIpLimitWhite\000ActPremiums\000Community"
        "Picture\000DefaultIcon\000MainTabMessage\000Searc"
        "hRoomName\000CrackEggGold\000ViolationExample\000"
        "WhaleBoss\000OpenNoticePowerTips\000CertifySou"
        "rce\000VoiceGreeting\000PcRoomGreetingPersonal"
        "\000YiDun\000PublicScreenFastSpeak\000GiftCollect"
        "\000PlayerFansRecall\000PcAutoUploadSong\000Mobil"
        "eOrderSong\000EffectBagPutOn\000PcOrderSong\000Vi"
        "deoButton\000BillOrderMaster\000BillOrderOpenE"
        "ntry\000MainTabSwipe\000TencentCertify\000GameCha"
        "nnelPush\000DynamicLoadPush\000VideoButtonConf"
        "\000PhomeReport\000OnTimeWelfare\000LoginLimit\000Co"
        "ncernLimit\000ChatTextFilter\000AddSubsidiary\000"
        "VideoImOnOff\000FirstPayCpBoss\000FirstPayCpOr"
        "der\000FirstPayCpOnOffShow\000BroadcastMakeFri"
        "endPush\000ActivityNoticePush\000ActivityPush\000"
        "ImPresentGift\000ImImFlirtTips\000GiftRefactor"
        "ing\000VideoNoticeOnOff\000TrendToXwOnOff\000ImPr"
        "esentWindows\000TeacherStudentOnOff\000GiftCol"
        "lectActGift\000PendantCpUnpaid\000VideoImInter"
        "active\000GameGangUp\000ImPresentGiftSetting\000I"
        "mChatCpOfflinePush\000IosOneYuan\000FirstPayGi"
        "ft\000SearchPlayerOrRoomByEs\000ImAutoChat\000Car"
        "dTask\000CrackeggVsn2\000IosGrabCpConfLog\000Sing"
        "leLiveHostWhiteList\000Coupon\000CpWindowsShow"
        "\000IntimateFansVsn2\000IntimateFansEnteryVsn2"
        "\000ChatCpBlackWhale\000ImAudio\000IntimateTicket"
        "Show\000ExchangeCoinLevel\000NewWorthToken\000Ano"
        "malyWhile\000HammerDo\000HammerBlackGold\000Playe"
        "rDepositSwitch\000PkStartSvgaShow\000PromoterR"
        "ecall\000CpSexSelect\000CpSameCity\000DepositWhit"
        "e\000BehaviorGiveAlarm\000GiftRankDialog\000ImHar"
        "assComplaints\000RoomDepositSwitch\000FamilyDe"
        "positSwitch\000ShowRevenueHeatValue\000SingleL"
        "ive\000PlayerInfoPkData\000AliBonus\000InnerAliFi"
        "sh\000InnerTecFish\000RemoteLogin\000RemoteProtec"
        "t\000CompositeSearch\000CompositeTextSearch\000Cl"
        "anSignMemberCertify\000GiftCollectLevel\000Ran"
        "kShow\000HotFirepowerRank\000CloseCommentPubli"
        "sh\000HotPointSpaceShow\000UserIpAreaShow\000Tren"
        "dsIpAreaShow\000IndexGiftRank\000ImCpDialog\000Ra"
        "nkHideRule\000ZoneIntimateTab\000CubismShow\000Ph"
        "omeIndexPushSpecial\000ShowIntimateBackgrou"
        "nd\000BlackCustomer\000ThirdAccountBind\000Active"
        "CreditScore\000NotCertificationEnterRoomFai"
        "led\000IntimateCultivate\000IpAreaUpdate\000Highl"
        "ightGiftShow\000IntimateRank\000ActSubInfoInte"
        "ractive\000CompanyPublicSettle\000BlackWhaleSt"
        "ore\000BlackWhaleStoreShow\000WeekCpEntrance\000W"
        "eekCpFunction\000ChangeCoinSms\000WeekCpEntran"
        "ceIos\000HeadLineSwitch\000BroadcastFriend\000Exc"
        "hangeAgeLimit\000PublicSettleWithdrawLimit\000"
        "WeekCpRewardLimit\000NewUserRandomRoom\000Bist"
        "roBuyDialogShow\000BlackWhiteModel\000PersonPu"
        "blicSettleSignEntrance\000WeiXinVipCustomer"
        "Service\000AcgnQuizSwitch\000CpImSwitch\000RoomTo"
        "pRightCornerLabel\000GenderPatternSelectWin"
        "dows\000HonourMedalSwitch\000AcgnMaleHome\000Acgn"
        "FemaleHome\000AcgnFemaleQuizSwitch\000GiftGrou"
        "pPhotoAlbumSwitch\000CpChatHealLevelOnOff\000C"
        "pChathealActionOnOff\000CpguideOnOff\000Cpguid"
        "eRewardGift\000ClanCpguideRankOnOff\000PointsM"
        "all\000GiftSameCertify\000GiftSamePhone\000NewerB"
        "oxSwitch\000NewbieSendGiftSwitch\000InteractTo"
        "picEdit\000InteractTopicSwitch\000";
    static const int32_t values[] = {
        PB3OnOffType_YearBag,
        PB3OnOffType_CrackEgg,
        PB3OnOffType_Gp,
        PB3OnOffType_Iapp,
        PB3OnOffType_Invite,
        PB3OnOffType_IndexCategory,
        PB3OnOffType_Ioxinbao,
        PB3OnOffType_Guard,
        PB3OnOffType_WeekStar,
        PB3OnOffType_Event520,
        PB3OnOffType_WorldCup,
        PB3OnOffType_RealIdentity,
        PB3OnOffType_Anniversary,
        PB3OnOffType_NoviceGift,
        PB3OnOffType_TjUser,
        PB3OnOffType_TjPersonal,
        PB3OnOffType_MoonFestival,
        PB3OnOffType_MiwoWealth,
        PB3OnOffType_DeLovely,
        PB3OnOffType_Event11,
        PB3OnOffType_TjNew,
        PB3OnOffType_TjUserdefine,
        PB3OnOffType_RoomTip,
        PB3OnOffType_BonusPool,
        PB3OnOffType_ShortId,
        PB3OnOffType_TimeCount,
        PB3OnOffType_HeadLine,
        PB3OnOffType_TiaoTiao,
        PB3OnOffType_Ioxinbao2,
        PB3OnOffType_TiaoTiaoScreen,
        PB3OnOffType_RoomEnter,
        PB3OnOffType_RoomPatternHighQuality,
        PB3OnOffType_Ioxinbao2Banner,
        PB3OnOffType_RegisterPassword,
        PB3OnOffType_AuthLoginUi,
        PB3OnOffType_HotSong,
        PB3OnOffType_IntimateExp,
        PB3OnOffType_UserDataEdit,
        PB3OnOffType_ActivityType,
        PB3OnOffType_Activity,
        PB3OnOffType_PcLimitLogin,
        PB3OnOffType_Clan,
        PB3OnOffType_BindPhone,
        PB3OnOffType_LoginBindPhone,
        PB3OnOffType_Tc,
        PB3OnOffType_Certification,
        PB3OnOffType_CertificationRoomShow,
        PB3OnOffType_CertificationRoomWinOpenClose,
        PB3OnOffType_CertifyWord,
        PB3OnOffType_CertifyChair,
        PB3OnOffType_CertifyUpdateUserInfo,
        PB3OnOffType_CertifyBroadcastFriend,
        PB3OnOffType_CertifyHeadLine,
        PB3OnOffType_CertifyTiaoTiao,
        PB3OnOffType_YoungModel,
        PB3OnOffType_CertifyOwnweEnterRoom,
        PB3OnOffType_BillOrder,
        PB3OnOffType_RoomLuckyDraw,
        PB3OnOffType_PcActivity,
        PB3OnOffType_BillOrderNewPlayer,
        PB3OnOffType_ChairManager,
        PB3OnOffType_YunpianSms,
        PB3OnOffType_OverseasIpLimit,
        PB3OnOffType_OldNameLimit,
        PB3OnOffType_HelpFeedback,
        PB3OnOffType_SendBill,
        PB3OnOffType_OrderRank,
        PB3OnOffType_OrderLocation,
        PB3OnOffType_ReceiveWindow,
        PB3OnOffType_ChargeGuide,
        PB3OnOffType_RoomChatLog,
        PB3OnOffType_OnChairCharm,
        PB3OnOffType_DragonBall,
        PB3OnOffType_CrackSelfMsg,
        PB3OnOffType_DispatchWindow,
        PB3OnOffType_DeleteAccount,
        PB3OnOffType_BillNotApplyFreeze,
        PB3OnOffType_ThemeCrack,
        PB3OnOffType_FirstChargeTipsPush,
        PB3OnOffType_RecentVisitor,
        PB3OnOffType_UploadAccessOss,
        PB3OnOffType_BindPhoneV2,
        PB3OnOffType_WhaleActivityNotice,
        PB3OnOffType_WhaleActivityTips,
        PB3OnOffType_BindPhoneLogin,
        PB3OnOffType_VersionContent,
        PB3OnOffType_ClearImRecords,
        PB3OnOffType_JumpToQq,
        PB3OnOffType_OxygenBar,
        PB3OnOffType_PrivacySetting,
        PB3OnOffType_OxygenBarClanMemberOnly,
        PB3OnOffType_OxygenBarTrendGif,
        PB3OnOffType_DataAudit,
        PB3OnOffType_BillPush,
        PB3OnOffType_IntimateTitleChange,
        PB3OnOffType_InnerAli,
        PB3OnOffType_InnerTec,
        PB3OnOffType_CmbVip,
        PB3OnOffType_RoomBroadcastFriend,
        PB3OnOffType_BillOrderNew,
        PB3OnOffType_BillPlayerVisitVisible,
        PB3OnOffType_TextFilterBroadcastFriend,
        PB3OnOffType_TextFilterPrivateChat,
        PB3OnOffType_Nobility,
        PB3OnOffType_BuyNobilityGold,
        PB3OnOffType_ExclusiveService,
        PB3OnOffType_NobilityFamous,
        PB3OnOffType_ProtectionOfMinors,
        PB3OnOffType_Anonymous,
        PB3OnOffType_Gender,
        PB3OnOffType_HomepageBindPhone,
        PB3OnOffType_AntiAddiction,
        PB3OnOffType_IosVipCmb,
        PB3OnOffType_H5GoldBuyNobility,
        PB3OnOffType_DynamicIcon,
        PB3OnOffType_CertifyRecharge,
        PB3OnOffType_CertifyExchange,
        PB3OnOffType_CertifyCostCoin,
        PB3OnOffType_BuyNobilityVip,
        PB3OnOffType_Tg,
        PB3OnOffType_GreetContent,
        PB3OnOffType_RootMillionForest,
        PB3OnOffType_MainTabMediaPlayer,
        PB3OnOffType_ExchangeCode,
        PB3OnOffType_WechatVisitor,
        PB3OnOffType_WechatOrder,
        PB3OnOffType_WechatMsg,
        PB3OnOffType_PersonalRedEnvelope,
        PB3OnOffType_LuckyValue,
        PB3OnOffType_BillEvaluation,
        PB3OnOffType_OneStepBindPhone,
        PB3OnOffType_MultiClientOnline,
        PB3OnOffType_CertifyOpenMic,
        PB3OnOffType_WechatBill,
        PB3OnOffType_IntimateGiveBack,
        PB3OnOffType_EffectHonourHeaven,
        PB3OnOffType_EffectHonourWall,
        PB3OnOffType_EffectMedalWall,
        PB3OnOffType_PhomeInterestNav,
        PB3OnOffType_AppLoginAgree,
        PB3OnOffType_SongLyricSync,
        PB3OnOffType_LeaveMessage,
        PB3OnOffType_AnnualRoomBanner,
        PB3OnOffType_RoomBoxReward,
        PB3OnOffType_EffectRenew,
        PB3OnOffType_FastWithdraw,
        PB3OnOffType_AuctionRecord,
        PB3OnOffType_IntimateFans,
        PB3OnOffType_IntimateFansEntry,
        PB3OnOffType_MiniDownload,
        PB3OnOffType_ChargeVerify,
        PB3OnOffType_LoginIpLimit,
        PB3OnOffType_LoginIpLimitWhite,
        PB3OnOffType_ActPremiums,
        PB3OnOffType_CommunityPicture,
        PB3OnOffType_DefaultIcon,
        PB3OnOffType_MainTabMessage,
        PB3OnOffType_SearchRoomName,
        PB3OnOffType_CrackEggGold,
        PB3OnOffType_ViolationExample,
        PB3OnOffType_WhaleBoss,
        PB3OnOffType_OpenNoticePowerTips,
        PB3OnOffType_CertifySource,
        PB3OnOffType_VoiceGreeting,
        PB3OnOffType_PcRoomGreetingPersonal,
        PB3OnOffType_YiDun,
        PB3OnOffType_PublicScreenFastSpeak,
        PB3OnOffType_GiftCollect,
        PB3OnOffType_PlayerFansRecall,
        PB3OnOffType_PcAutoUploadSong,
        PB3OnOffType_MobileOrderSong,
        PB3OnOffType_EffectBagPutOn,
        PB3OnOffType_PcOrderSong,
        PB3OnOffType_VideoButton,
        PB3OnOffType_BillOrderMaster,
        PB3OnOffType_BillOrderOpenEntry,
        PB3OnOffType_MainTabSwipe,
        PB3OnOffType_TencentCertify,
        PB3OnOffType_GameChannelPush,
        PB3OnOffType_DynamicLoadPush,
        PB3OnOffType_VideoButtonConf,
        PB3OnOffType_PhomeReport,
        PB3OnOffType_OnTimeWelfare,
        PB3OnOffType_LoginLimit,
        PB3OnOffType_ConcernLimit,
        PB3OnOffType_ChatTextFilter,
        PB3OnOffType_AddSubsidiary,
        PB3OnOffType_VideoImOnOff,
        PB3OnOffType_FirstPayCpBoss,
        PB3OnOffType_FirstPayCpOrder,
        PB3OnOffType_FirstPayCpOnOffShow,
        PB3OnOffType_BroadcastMakeFriendPush,
        PB3OnOffType_ActivityNoticePush,
        PB3OnOffType_ActivityPush,
        PB3OnOffType_ImPresentGift,
        PB3OnOffType_ImImFlirtTips,
        PB3OnOffType_GiftRefactoring,
        PB3OnOffType_VideoNoticeOnOff,
        PB3OnOffType_TrendToXwOnOff,
        PB3OnOffType_ImPresentWindows,
        PB3OnOffType_TeacherStudentOnOff,
        PB3OnOffType_GiftCollectActGift,
        PB3OnOffType_PendantCpUnpaid,
        PB3OnOffType_VideoImInteractive,
        PB3OnOffType_GameGangUp,
        PB3OnOffType_ImPresentGiftSetting,
        PB3OnOffType_ImChatCpOfflinePush,
        PB3OnOffType_IosOneYuan,
        PB3OnOffType_FirstPayGift,
        PB3OnOffType_SearchPlayerOrRoomByEs,
        PB3OnOffType_ImAutoChat,
        PB3OnOffType_CardTask,
        PB3OnOffType_CrackeggVsn2,
        PB3OnOffType_IosGrabCpConfLog,
        PB3OnOffType_SingleLiveHostWhiteList,
        PB3OnOffType_Coupon,
        PB3OnOffType_CpWindowsShow,
        PB3OnOffType_IntimateFansVsn2,
        PB3OnOffType_IntimateFansEnteryVsn2,
        PB3OnOffType_ChatCpBlackWhale,
        PB3OnOffType_ImAudio,
        PB3OnOffType_IntimateTicketShow,
        PB3OnOffType_ExchangeCoinLevel,
        PB3OnOffType_NewWorthToken,
        PB3OnOffType_AnomalyWhile,
        PB3OnOffType_HammerDo,
        PB3OnOffType_HammerBlackGold,
        PB3OnOffType_PlayerDepositSwitch,
        PB3OnOffType_PkStartSvgaShow,
        PB3OnOffType_PromoterRecall,
        PB3OnOffType_CpSexSelect,
        PB3OnOffType_CpSameCity,
        PB3OnOffType_DepositWhite,
        PB3OnOffType_BehaviorGiveAlarm,
        PB3OnOffType_GiftRankDialog,
        PB3OnOffType_ImHarassComplaints,
        PB3OnOffType_RoomDepositSwitch,
        PB3OnOffType_FamilyDepositSwitch,
        PB3OnOffType_ShowRevenueHeatValue,
        PB3OnOffType_SingleLive,
        PB3OnOffType_PlayerInfoPkData,
        PB3OnOffType_AliBonus,
        PB3OnOffType_InnerAliFish,
        PB3OnOffType_InnerTecFish,
        PB3OnOffType_RemoteLogin,
        PB3OnOffType_RemoteProtect,
        PB3OnOffType_CompositeSearch,
        PB3OnOffType_CompositeTextSearch,
        PB3OnOffType_ClanSignMemberCertify,
        PB3OnOffType_GiftCollectLevel,
        PB3OnOffType_RankShow,
        PB3OnOffType_HotFirepowerRank,
        PB3OnOffType_CloseCommentPublish,
        PB3OnOffType_HotPointSpaceShow,
        PB3OnOffType_UserIpAreaShow,
        PB3OnOffType_TrendsIpAreaShow,
        PB3OnOffType_IndexGiftRank,
        PB3OnOffType_ImCpDialog,
        PB3OnOffType_RankHideRule,
        PB3OnOffType_ZoneIntimateTab,
        PB3OnOffType_CubismShow,
        PB3OnOffType_PhomeIndexPushSpecial,
        PB3OnOffType_ShowIntimateBackground,
        PB3OnOffType_BlackCustomer,
        PB3OnOffType_ThirdAccountBind,
        PB3OnOffType_ActiveCreditScore,
        PB3OnOffType_NotCertificationEnterRoomFailed,
        PB3OnOffType_IntimateCultivate,
        PB3OnOffType_IpAreaUpdate,
        PB3OnOffType_HighlightGiftShow,
        PB3OnOffType_IntimateRank,
        PB3OnOffType_ActSubInfoInteractive,
        PB3OnOffType_CompanyPublicSettle,
        PB3OnOffType_BlackWhaleStore,
        PB3OnOffType_BlackWhaleStoreShow,
        PB3OnOffType_WeekCpEntrance,
        PB3OnOffType_WeekCpFunction,
        PB3OnOffType_ChangeCoinSms,
        PB3OnOffType_WeekCpEntranceIos,
        PB3OnOffType_HeadLineSwitch,
        PB3OnOffType_BroadcastFriend,
        PB3OnOffType_ExchangeAgeLimit,
        PB3OnOffType_PublicSettleWithdrawLimit,
        PB3OnOffType_WeekCpRewardLimit,
        PB3OnOffType_NewUserRandomRoom,
        PB3OnOffType_BistroBuyDialogShow,
        PB3OnOffType_BlackWhiteModel,
        PB3OnOffType_PersonPublicSettleSignEntrance,
        PB3OnOffType_WeiXinVipCustomerService,
        PB3OnOffType_AcgnQuizSwitch,
        PB3OnOffType_CpImSwitch,
        PB3OnOffType_RoomTopRightCornerLabel,
        PB3OnOffType_GenderPatternSelectWindows,
        PB3OnOffType_HonourMedalSwitch,
        PB3OnOffType_AcgnMaleHome,
        PB3OnOffType_AcgnFemaleHome,
        PB3OnOffType_AcgnFemaleQuizSwitch,
        PB3OnOffType_GiftGroupPhotoAlbumSwitch,
        PB3OnOffType_CpChatHealLevelOnOff,
        PB3OnOffType_CpChathealActionOnOff,
        PB3OnOffType_CpguideOnOff,
        PB3OnOffType_CpguideRewardGift,
        PB3OnOffType_ClanCpguideRankOnOff,
        PB3OnOffType_PointsMall,
        PB3OnOffType_GiftSameCertify,
        PB3OnOffType_GiftSamePhone,
        PB3OnOffType_NewerBoxSwitch,
        PB3OnOffType_NewbieSendGiftSwitch,
        PB3OnOffType_InteractTopicEdit,
        PB3OnOffType_InteractTopicSwitch,
    };
    static const char *extraTextFormatInfo = "$\te\203\000\023e\202\000\034h\201\000 h\201\346\0006\005\205\000<\005\207\000]\004\344\000_\005\203\000`\005\203\000v\003\210\343\000z\022\000\245\001\005\000\324\001h\343\201\000\331\001h\344\343\201\000\332\001h\344\346\343\201\000\336\001\021\000\337\001\r\000\340\001\014\000\343\001\023\000\350\001\014\000\354\001\021\000\355\001\023\000\361\001\010\000\370\001\025\000\372\001\004\344\000\373\001\020\000\200\002\005\204\204\000\210\002\020\000\231\002\010\203\205\000\234\002\021\000\240\002\030\000\252\002\024\000\253\002\025\000\254\002c\t\000\255\002c\016\000\256\002\005b\r\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OnOffType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OnOffType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OnOffType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OnOffType_YearBag:
    case PB3OnOffType_CrackEgg:
    case PB3OnOffType_Gp:
    case PB3OnOffType_Iapp:
    case PB3OnOffType_Invite:
    case PB3OnOffType_IndexCategory:
    case PB3OnOffType_Ioxinbao:
    case PB3OnOffType_Guard:
    case PB3OnOffType_WeekStar:
    case PB3OnOffType_Event520:
    case PB3OnOffType_WorldCup:
    case PB3OnOffType_RealIdentity:
    case PB3OnOffType_Anniversary:
    case PB3OnOffType_NoviceGift:
    case PB3OnOffType_TjUser:
    case PB3OnOffType_TjPersonal:
    case PB3OnOffType_MoonFestival:
    case PB3OnOffType_MiwoWealth:
    case PB3OnOffType_DeLovely:
    case PB3OnOffType_Event11:
    case PB3OnOffType_TjNew:
    case PB3OnOffType_TjUserdefine:
    case PB3OnOffType_RoomTip:
    case PB3OnOffType_BonusPool:
    case PB3OnOffType_ShortId:
    case PB3OnOffType_TimeCount:
    case PB3OnOffType_HeadLine:
    case PB3OnOffType_TiaoTiao:
    case PB3OnOffType_Ioxinbao2:
    case PB3OnOffType_TiaoTiaoScreen:
    case PB3OnOffType_RoomEnter:
    case PB3OnOffType_RoomPatternHighQuality:
    case PB3OnOffType_Ioxinbao2Banner:
    case PB3OnOffType_RegisterPassword:
    case PB3OnOffType_AuthLoginUi:
    case PB3OnOffType_HotSong:
    case PB3OnOffType_IntimateExp:
    case PB3OnOffType_UserDataEdit:
    case PB3OnOffType_ActivityType:
    case PB3OnOffType_Activity:
    case PB3OnOffType_PcLimitLogin:
    case PB3OnOffType_Clan:
    case PB3OnOffType_BindPhone:
    case PB3OnOffType_LoginBindPhone:
    case PB3OnOffType_Tc:
    case PB3OnOffType_Certification:
    case PB3OnOffType_CertificationRoomShow:
    case PB3OnOffType_CertificationRoomWinOpenClose:
    case PB3OnOffType_CertifyWord:
    case PB3OnOffType_CertifyChair:
    case PB3OnOffType_CertifyUpdateUserInfo:
    case PB3OnOffType_CertifyBroadcastFriend:
    case PB3OnOffType_CertifyHeadLine:
    case PB3OnOffType_CertifyTiaoTiao:
    case PB3OnOffType_YoungModel:
    case PB3OnOffType_CertifyOwnweEnterRoom:
    case PB3OnOffType_BillOrder:
    case PB3OnOffType_RoomLuckyDraw:
    case PB3OnOffType_PcActivity:
    case PB3OnOffType_BillOrderNewPlayer:
    case PB3OnOffType_ChairManager:
    case PB3OnOffType_YunpianSms:
    case PB3OnOffType_OverseasIpLimit:
    case PB3OnOffType_OldNameLimit:
    case PB3OnOffType_HelpFeedback:
    case PB3OnOffType_SendBill:
    case PB3OnOffType_OrderRank:
    case PB3OnOffType_OrderLocation:
    case PB3OnOffType_ReceiveWindow:
    case PB3OnOffType_ChargeGuide:
    case PB3OnOffType_RoomChatLog:
    case PB3OnOffType_OnChairCharm:
    case PB3OnOffType_DragonBall:
    case PB3OnOffType_CrackSelfMsg:
    case PB3OnOffType_DispatchWindow:
    case PB3OnOffType_DeleteAccount:
    case PB3OnOffType_BillNotApplyFreeze:
    case PB3OnOffType_ThemeCrack:
    case PB3OnOffType_FirstChargeTipsPush:
    case PB3OnOffType_RecentVisitor:
    case PB3OnOffType_UploadAccessOss:
    case PB3OnOffType_BindPhoneV2:
    case PB3OnOffType_WhaleActivityNotice:
    case PB3OnOffType_WhaleActivityTips:
    case PB3OnOffType_BindPhoneLogin:
    case PB3OnOffType_VersionContent:
    case PB3OnOffType_ClearImRecords:
    case PB3OnOffType_JumpToQq:
    case PB3OnOffType_OxygenBar:
    case PB3OnOffType_PrivacySetting:
    case PB3OnOffType_OxygenBarClanMemberOnly:
    case PB3OnOffType_OxygenBarTrendGif:
    case PB3OnOffType_DataAudit:
    case PB3OnOffType_BillPush:
    case PB3OnOffType_IntimateTitleChange:
    case PB3OnOffType_InnerAli:
    case PB3OnOffType_InnerTec:
    case PB3OnOffType_CmbVip:
    case PB3OnOffType_RoomBroadcastFriend:
    case PB3OnOffType_BillOrderNew:
    case PB3OnOffType_BillPlayerVisitVisible:
    case PB3OnOffType_TextFilterBroadcastFriend:
    case PB3OnOffType_TextFilterPrivateChat:
    case PB3OnOffType_Nobility:
    case PB3OnOffType_BuyNobilityGold:
    case PB3OnOffType_ExclusiveService:
    case PB3OnOffType_NobilityFamous:
    case PB3OnOffType_ProtectionOfMinors:
    case PB3OnOffType_Anonymous:
    case PB3OnOffType_Gender:
    case PB3OnOffType_HomepageBindPhone:
    case PB3OnOffType_AntiAddiction:
    case PB3OnOffType_IosVipCmb:
    case PB3OnOffType_H5GoldBuyNobility:
    case PB3OnOffType_DynamicIcon:
    case PB3OnOffType_CertifyRecharge:
    case PB3OnOffType_CertifyExchange:
    case PB3OnOffType_CertifyCostCoin:
    case PB3OnOffType_BuyNobilityVip:
    case PB3OnOffType_Tg:
    case PB3OnOffType_GreetContent:
    case PB3OnOffType_RootMillionForest:
    case PB3OnOffType_MainTabMediaPlayer:
    case PB3OnOffType_ExchangeCode:
    case PB3OnOffType_WechatVisitor:
    case PB3OnOffType_WechatOrder:
    case PB3OnOffType_WechatMsg:
    case PB3OnOffType_PersonalRedEnvelope:
    case PB3OnOffType_LuckyValue:
    case PB3OnOffType_BillEvaluation:
    case PB3OnOffType_OneStepBindPhone:
    case PB3OnOffType_MultiClientOnline:
    case PB3OnOffType_CertifyOpenMic:
    case PB3OnOffType_WechatBill:
    case PB3OnOffType_IntimateGiveBack:
    case PB3OnOffType_EffectHonourHeaven:
    case PB3OnOffType_EffectHonourWall:
    case PB3OnOffType_EffectMedalWall:
    case PB3OnOffType_PhomeInterestNav:
    case PB3OnOffType_AppLoginAgree:
    case PB3OnOffType_SongLyricSync:
    case PB3OnOffType_LeaveMessage:
    case PB3OnOffType_AnnualRoomBanner:
    case PB3OnOffType_RoomBoxReward:
    case PB3OnOffType_EffectRenew:
    case PB3OnOffType_FastWithdraw:
    case PB3OnOffType_AuctionRecord:
    case PB3OnOffType_IntimateFans:
    case PB3OnOffType_IntimateFansEntry:
    case PB3OnOffType_MiniDownload:
    case PB3OnOffType_ChargeVerify:
    case PB3OnOffType_LoginIpLimit:
    case PB3OnOffType_LoginIpLimitWhite:
    case PB3OnOffType_ActPremiums:
    case PB3OnOffType_CommunityPicture:
    case PB3OnOffType_DefaultIcon:
    case PB3OnOffType_MainTabMessage:
    case PB3OnOffType_SearchRoomName:
    case PB3OnOffType_CrackEggGold:
    case PB3OnOffType_ViolationExample:
    case PB3OnOffType_WhaleBoss:
    case PB3OnOffType_OpenNoticePowerTips:
    case PB3OnOffType_CertifySource:
    case PB3OnOffType_VoiceGreeting:
    case PB3OnOffType_PcRoomGreetingPersonal:
    case PB3OnOffType_YiDun:
    case PB3OnOffType_PublicScreenFastSpeak:
    case PB3OnOffType_GiftCollect:
    case PB3OnOffType_PlayerFansRecall:
    case PB3OnOffType_PcAutoUploadSong:
    case PB3OnOffType_MobileOrderSong:
    case PB3OnOffType_EffectBagPutOn:
    case PB3OnOffType_PcOrderSong:
    case PB3OnOffType_VideoButton:
    case PB3OnOffType_BillOrderMaster:
    case PB3OnOffType_BillOrderOpenEntry:
    case PB3OnOffType_MainTabSwipe:
    case PB3OnOffType_TencentCertify:
    case PB3OnOffType_GameChannelPush:
    case PB3OnOffType_DynamicLoadPush:
    case PB3OnOffType_VideoButtonConf:
    case PB3OnOffType_PhomeReport:
    case PB3OnOffType_OnTimeWelfare:
    case PB3OnOffType_LoginLimit:
    case PB3OnOffType_ConcernLimit:
    case PB3OnOffType_ChatTextFilter:
    case PB3OnOffType_AddSubsidiary:
    case PB3OnOffType_VideoImOnOff:
    case PB3OnOffType_FirstPayCpBoss:
    case PB3OnOffType_FirstPayCpOrder:
    case PB3OnOffType_FirstPayCpOnOffShow:
    case PB3OnOffType_BroadcastMakeFriendPush:
    case PB3OnOffType_ActivityNoticePush:
    case PB3OnOffType_ActivityPush:
    case PB3OnOffType_ImPresentGift:
    case PB3OnOffType_ImImFlirtTips:
    case PB3OnOffType_GiftRefactoring:
    case PB3OnOffType_VideoNoticeOnOff:
    case PB3OnOffType_TrendToXwOnOff:
    case PB3OnOffType_ImPresentWindows:
    case PB3OnOffType_TeacherStudentOnOff:
    case PB3OnOffType_GiftCollectActGift:
    case PB3OnOffType_PendantCpUnpaid:
    case PB3OnOffType_VideoImInteractive:
    case PB3OnOffType_GameGangUp:
    case PB3OnOffType_ImPresentGiftSetting:
    case PB3OnOffType_ImChatCpOfflinePush:
    case PB3OnOffType_IosOneYuan:
    case PB3OnOffType_FirstPayGift:
    case PB3OnOffType_SearchPlayerOrRoomByEs:
    case PB3OnOffType_ImAutoChat:
    case PB3OnOffType_CardTask:
    case PB3OnOffType_CrackeggVsn2:
    case PB3OnOffType_IosGrabCpConfLog:
    case PB3OnOffType_SingleLiveHostWhiteList:
    case PB3OnOffType_Coupon:
    case PB3OnOffType_CpWindowsShow:
    case PB3OnOffType_IntimateFansVsn2:
    case PB3OnOffType_IntimateFansEnteryVsn2:
    case PB3OnOffType_ChatCpBlackWhale:
    case PB3OnOffType_ImAudio:
    case PB3OnOffType_IntimateTicketShow:
    case PB3OnOffType_ExchangeCoinLevel:
    case PB3OnOffType_NewWorthToken:
    case PB3OnOffType_AnomalyWhile:
    case PB3OnOffType_HammerDo:
    case PB3OnOffType_HammerBlackGold:
    case PB3OnOffType_PlayerDepositSwitch:
    case PB3OnOffType_PkStartSvgaShow:
    case PB3OnOffType_PromoterRecall:
    case PB3OnOffType_CpSexSelect:
    case PB3OnOffType_CpSameCity:
    case PB3OnOffType_DepositWhite:
    case PB3OnOffType_BehaviorGiveAlarm:
    case PB3OnOffType_GiftRankDialog:
    case PB3OnOffType_ImHarassComplaints:
    case PB3OnOffType_RoomDepositSwitch:
    case PB3OnOffType_FamilyDepositSwitch:
    case PB3OnOffType_ShowRevenueHeatValue:
    case PB3OnOffType_SingleLive:
    case PB3OnOffType_PlayerInfoPkData:
    case PB3OnOffType_AliBonus:
    case PB3OnOffType_InnerAliFish:
    case PB3OnOffType_InnerTecFish:
    case PB3OnOffType_RemoteLogin:
    case PB3OnOffType_RemoteProtect:
    case PB3OnOffType_CompositeSearch:
    case PB3OnOffType_CompositeTextSearch:
    case PB3OnOffType_ClanSignMemberCertify:
    case PB3OnOffType_GiftCollectLevel:
    case PB3OnOffType_RankShow:
    case PB3OnOffType_HotFirepowerRank:
    case PB3OnOffType_CloseCommentPublish:
    case PB3OnOffType_HotPointSpaceShow:
    case PB3OnOffType_UserIpAreaShow:
    case PB3OnOffType_TrendsIpAreaShow:
    case PB3OnOffType_IndexGiftRank:
    case PB3OnOffType_ImCpDialog:
    case PB3OnOffType_RankHideRule:
    case PB3OnOffType_ZoneIntimateTab:
    case PB3OnOffType_CubismShow:
    case PB3OnOffType_PhomeIndexPushSpecial:
    case PB3OnOffType_ShowIntimateBackground:
    case PB3OnOffType_BlackCustomer:
    case PB3OnOffType_ThirdAccountBind:
    case PB3OnOffType_ActiveCreditScore:
    case PB3OnOffType_NotCertificationEnterRoomFailed:
    case PB3OnOffType_IntimateCultivate:
    case PB3OnOffType_IpAreaUpdate:
    case PB3OnOffType_HighlightGiftShow:
    case PB3OnOffType_IntimateRank:
    case PB3OnOffType_ActSubInfoInteractive:
    case PB3OnOffType_CompanyPublicSettle:
    case PB3OnOffType_BlackWhaleStore:
    case PB3OnOffType_BlackWhaleStoreShow:
    case PB3OnOffType_WeekCpEntrance:
    case PB3OnOffType_WeekCpFunction:
    case PB3OnOffType_ChangeCoinSms:
    case PB3OnOffType_WeekCpEntranceIos:
    case PB3OnOffType_HeadLineSwitch:
    case PB3OnOffType_BroadcastFriend:
    case PB3OnOffType_ExchangeAgeLimit:
    case PB3OnOffType_PublicSettleWithdrawLimit:
    case PB3OnOffType_WeekCpRewardLimit:
    case PB3OnOffType_NewUserRandomRoom:
    case PB3OnOffType_BistroBuyDialogShow:
    case PB3OnOffType_BlackWhiteModel:
    case PB3OnOffType_PersonPublicSettleSignEntrance:
    case PB3OnOffType_WeiXinVipCustomerService:
    case PB3OnOffType_AcgnQuizSwitch:
    case PB3OnOffType_CpImSwitch:
    case PB3OnOffType_RoomTopRightCornerLabel:
    case PB3OnOffType_GenderPatternSelectWindows:
    case PB3OnOffType_HonourMedalSwitch:
    case PB3OnOffType_AcgnMaleHome:
    case PB3OnOffType_AcgnFemaleHome:
    case PB3OnOffType_AcgnFemaleQuizSwitch:
    case PB3OnOffType_GiftGroupPhotoAlbumSwitch:
    case PB3OnOffType_CpChatHealLevelOnOff:
    case PB3OnOffType_CpChathealActionOnOff:
    case PB3OnOffType_CpguideOnOff:
    case PB3OnOffType_CpguideRewardGift:
    case PB3OnOffType_ClanCpguideRankOnOff:
    case PB3OnOffType_PointsMall:
    case PB3OnOffType_GiftSameCertify:
    case PB3OnOffType_GiftSamePhone:
    case PB3OnOffType_NewerBoxSwitch:
    case PB3OnOffType_NewbieSendGiftSwitch:
    case PB3OnOffType_InteractTopicEdit:
    case PB3OnOffType_InteractTopicSwitch:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectType

GPBEnumDescriptor *PB3EffectType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EffectTypeNone\000EffectTypeChatLight\000Effec"
        "tTypeEnterEffect\000EffectTypeChairEffect\000E"
        "ffectTypeEnterLight\000EffectTypeUserCard\000E"
        "ffectTypeGiftKing\000EffectTypeChanPrefix\000E"
        "ffectTypeMedal\000EffectTypeOnChair\000EffectT"
        "ypeChairChat\000EffectTypeDriver\000EffectType"
        "NewPlayerCard\000EffectTypeBanner\000EffectTyp"
        "eActivityBanner\000EffectTypeHonour\000EffectT"
        "ypeMood\000EffectTypeImbackground\000EffectTyp"
        "eTeacherMedal\000EffectTypeActivityCertific"
        "ation\000EffectTypeCpchat\000EffectTypeHomePag"
        "e\000EffectTypePlayerCardBg\000";
    static const int32_t values[] = {
        PB3EffectType_EffectTypeNone,
        PB3EffectType_EffectTypeChatLight,
        PB3EffectType_EffectTypeEnterEffect,
        PB3EffectType_EffectTypeChairEffect,
        PB3EffectType_EffectTypeEnterLight,
        PB3EffectType_EffectTypeUserCard,
        PB3EffectType_EffectTypeGiftKing,
        PB3EffectType_EffectTypeChanPrefix,
        PB3EffectType_EffectTypeMedal,
        PB3EffectType_EffectTypeOnChair,
        PB3EffectType_EffectTypeChairChat,
        PB3EffectType_EffectTypeDriver,
        PB3EffectType_EffectTypeNewPlayerCard,
        PB3EffectType_EffectTypeBanner,
        PB3EffectType_EffectTypeActivityBanner,
        PB3EffectType_EffectTypeHonour,
        PB3EffectType_EffectTypeMood,
        PB3EffectType_EffectTypeImbackground,
        PB3EffectType_EffectTypeTeacherMedal,
        PB3EffectType_EffectTypeActivityCertification,
        PB3EffectType_EffectTypeCpchat,
        PB3EffectType_EffectTypeHomePage,
        PB3EffectType_EffectTypePlayerCardBg,
    };
    static const char *extraTextFormatInfo = "\027\000\016\000\001\023\000\002\025\000\003\025\000\004\024\000\005\022\000\006\022\000\007\024\000\010\017\000\t\021\000\n\023\000\013\020\000\014\027\000\r\020\000\016\030\000\017\020\000\020\016\000\021\013b\t\000\022\026\000\023\037\000\024\013b\003\000\025\022\000\026\026\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectType_EffectTypeNone:
    case PB3EffectType_EffectTypeChatLight:
    case PB3EffectType_EffectTypeEnterEffect:
    case PB3EffectType_EffectTypeChairEffect:
    case PB3EffectType_EffectTypeEnterLight:
    case PB3EffectType_EffectTypeUserCard:
    case PB3EffectType_EffectTypeGiftKing:
    case PB3EffectType_EffectTypeChanPrefix:
    case PB3EffectType_EffectTypeMedal:
    case PB3EffectType_EffectTypeOnChair:
    case PB3EffectType_EffectTypeChairChat:
    case PB3EffectType_EffectTypeDriver:
    case PB3EffectType_EffectTypeNewPlayerCard:
    case PB3EffectType_EffectTypeBanner:
    case PB3EffectType_EffectTypeActivityBanner:
    case PB3EffectType_EffectTypeHonour:
    case PB3EffectType_EffectTypeMood:
    case PB3EffectType_EffectTypeImbackground:
    case PB3EffectType_EffectTypeTeacherMedal:
    case PB3EffectType_EffectTypeActivityCertification:
    case PB3EffectType_EffectTypeCpchat:
    case PB3EffectType_EffectTypeHomePage:
    case PB3EffectType_EffectTypePlayerCardBg:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectTimeType

GPBEnumDescriptor *PB3EffectTimeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EffectTimeTypeAwary\000EffectTimeTypeUse\000";
    static const int32_t values[] = {
        PB3EffectTimeType_EffectTimeTypeAwary,
        PB3EffectTimeType_EffectTimeTypeUse,
    };
    static const char *extraTextFormatInfo = "\002\000\023\000\001\021\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectTimeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectTimeType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectTimeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectTimeType_EffectTimeTypeAwary:
    case PB3EffectTimeType_EffectTimeTypeUse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectTipsType

GPBEnumDescriptor *PB3EffectTipsType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EffectTipsTypeGain\000EffectTipsTypeTimeout"
        "\000";
    static const int32_t values[] = {
        PB3EffectTipsType_EffectTipsTypeGain,
        PB3EffectTipsType_EffectTipsTypeTimeout,
    };
    static const char *extraTextFormatInfo = "\002\000\022\000\001\025\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectTipsType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectTipsType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectTipsType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectTipsType_EffectTipsTypeGain:
    case PB3EffectTipsType_EffectTipsTypeTimeout:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectMedalWall

GPBEnumDescriptor *PB3EffectMedalWall_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Hide\000Show\000";
    static const int32_t values[] = {
        PB3EffectMedalWall_Hide,
        PB3EffectMedalWall_Show,
    };
    static const char *extraTextFormatInfo = "\002\000\004\000\001\004\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectMedalWall)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectMedalWall_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectMedalWall_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectMedalWall_Hide:
    case PB3EffectMedalWall_Show:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectSubType

GPBEnumDescriptor *PB3EffectSubType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EffectSubTypeNull\000TailLightNormal\000TailGi"
        "ftKing\000";
    static const int32_t values[] = {
        PB3EffectSubType_EffectSubTypeNull,
        PB3EffectSubType_TailLightNormal,
        PB3EffectSubType_TailGiftKing,
    };
    static const char *extraTextFormatInfo = "\003\000\021\000\001\017\000\002\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectSubType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectSubType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectSubType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectSubType_EffectSubTypeNull:
    case PB3EffectSubType_TailLightNormal:
    case PB3EffectSubType_TailGiftKing:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectMedalType

GPBEnumDescriptor *PB3EffectMedalType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EmtNone\000EmtTeacher\000";
    static const int32_t values[] = {
        PB3EffectMedalType_EmtNone,
        PB3EffectMedalType_EmtTeacher,
    };
    static const char *extraTextFormatInfo = "\002\000c\204\000\001c\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectMedalType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectMedalType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectMedalType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectMedalType_EmtNone:
    case PB3EffectMedalType_EmtTeacher:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectGroupType

GPBEnumDescriptor *PB3EffectGroupType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EgtNone\000EgtTeacher\000";
    static const int32_t values[] = {
        PB3EffectGroupType_EgtNone,
        PB3EffectGroupType_EgtTeacher,
    };
    static const char *extraTextFormatInfo = "\002\000c\204\000\001c\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectGroupType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectGroupType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectGroupType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectGroupType_EgtNone:
    case PB3EffectGroupType_EgtTeacher:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectTargetType

GPBEnumDescriptor *PB3EffectTargetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EttNone\000EttSingle\000EttIntimate\000";
    static const int32_t values[] = {
        PB3EffectTargetType_EttNone,
        PB3EffectTargetType_EttSingle,
        PB3EffectTargetType_EttIntimate,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectTargetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectTargetType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectTargetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectTargetType_EttNone:
    case PB3EffectTargetType_EttSingle:
    case PB3EffectTargetType_EttIntimate:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectExpandType

GPBEnumDescriptor *PB3EffectExpandType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ExpandTypeZero\000ChatEffectResource\000";
    static const int32_t values[] = {
        PB3EffectExpandType_ExpandTypeZero,
        PB3EffectExpandType_ChatEffectResource,
    };
    static const char *extraTextFormatInfo = "\002\000\006\204\204\000\001\004\206\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectExpandType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectExpandType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectExpandType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectExpandType_ExpandTypeZero:
    case PB3EffectExpandType_ChatEffectResource:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomPanelShowType

GPBEnumDescriptor *PB3RoomPanelShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RpstAll\000RpstOwner\000RpstNot\000";
    static const int32_t values[] = {
        PB3RoomPanelShowType_RpstAll,
        PB3RoomPanelShowType_RpstOwner,
        PB3RoomPanelShowType_RpstNot,
    };
    static const char *extraTextFormatInfo = "\003\000d\203\000\001d\205\000\002d\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomPanelShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomPanelShowType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomPanelShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomPanelShowType_RpstAll:
    case PB3RoomPanelShowType_RpstOwner:
    case PB3RoomPanelShowType_RpstNot:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CertifType

GPBEnumDescriptor *PB3CertifType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CtVoice\000CtGame\000CtChat\000";
    static const int32_t values[] = {
        PB3CertifType_CtVoice,
        PB3CertifType_CtGame,
        PB3CertifType_CtChat,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CertifType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CertifType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CertifType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CertifType_CtVoice:
    case PB3CertifType_CtGame:
    case PB3CertifType_CtChat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ModelOnOffStatus

GPBEnumDescriptor *PB3ModelOnOffStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AllOff\000AllOn\000Whitelist\000";
    static const int32_t values[] = {
        PB3ModelOnOffStatus_AllOff,
        PB3ModelOnOffStatus_AllOn,
        PB3ModelOnOffStatus_Whitelist,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ModelOnOffStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ModelOnOffStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ModelOnOffStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ModelOnOffStatus_AllOff:
    case PB3ModelOnOffStatus_AllOn:
    case PB3ModelOnOffStatus_Whitelist:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CubismType

GPBEnumDescriptor *PB3CubismType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CtUnknown\000CtExclusive\000CtLimited\000";
    static const int32_t values[] = {
        PB3CubismType_CtUnknown,
        PB3CubismType_CtExclusive,
        PB3CubismType_CtLimited,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CubismType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CubismType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CubismType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CubismType_CtUnknown:
    case PB3CubismType_CtExclusive:
    case PB3CubismType_CtLimited:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RankCubismItemLevel

GPBEnumDescriptor *PB3RankCubismItemLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RcilNone\000RcilClothesN\000RcilClothesR\000RcilC"
        "lothesSr\000RcilClothesSsr\000";
    static const int32_t values[] = {
        PB3RankCubismItemLevel_RcilNone,
        PB3RankCubismItemLevel_RcilClothesN,
        PB3RankCubismItemLevel_RcilClothesR,
        PB3RankCubismItemLevel_RcilClothesSr,
        PB3RankCubismItemLevel_RcilClothesSsr,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RankCubismItemLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RankCubismItemLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RankCubismItemLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RankCubismItemLevel_RcilNone:
    case PB3RankCubismItemLevel_RcilClothesN:
    case PB3RankCubismItemLevel_RcilClothesR:
    case PB3RankCubismItemLevel_RcilClothesSr:
    case PB3RankCubismItemLevel_RcilClothesSsr:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RankType

GPBEnumDescriptor *PB3RankType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtZero\000RtCharm\000RtWealth\000RtGift\000RtOrder\000R"
        "tCharmHour\000RtWealthHour\000RtFishCharm\000RtFi"
        "shWealth\000RtFishCharmHour\000RtFishWealthHou"
        "r\000";
    static const int32_t values[] = {
        PB3RankType_RtZero,
        PB3RankType_RtCharm,
        PB3RankType_RtWealth,
        PB3RankType_RtGift,
        PB3RankType_RtOrder,
        PB3RankType_RtCharmHour,
        PB3RankType_RtWealthHour,
        PB3RankType_RtFishCharm,
        PB3RankType_RtFishWealth,
        PB3RankType_RtFishCharmHour,
        PB3RankType_RtFishWealthHour,
    };
    static const char *extraTextFormatInfo = "\004\005b\345\204\000\006b\346\204\000\tb\344\345\204\000\nb\344\346\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RankType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RankType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RankType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RankType_RtZero:
    case PB3RankType_RtCharm:
    case PB3RankType_RtWealth:
    case PB3RankType_RtGift:
    case PB3RankType_RtOrder:
    case PB3RankType_RtCharmHour:
    case PB3RankType_RtWealthHour:
    case PB3RankType_RtFishCharm:
    case PB3RankType_RtFishWealth:
    case PB3RankType_RtFishCharmHour:
    case PB3RankType_RtFishWealthHour:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LoadClickType

GPBEnumDescriptor *PB3LoadClickType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LctZero\000LctIntimateDetail\000LctIntimateSto"
        "re\000LctIntimateTitle\000";
    static const int32_t values[] = {
        PB3LoadClickType_LctZero,
        PB3LoadClickType_LctIntimateDetail,
        PB3LoadClickType_LctIntimateStore,
        PB3LoadClickType_LctIntimateTitle,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LoadClickType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LoadClickType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LoadClickType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LoadClickType_LctZero:
    case PB3LoadClickType_LctIntimateDetail:
    case PB3LoadClickType_LctIntimateStore:
    case PB3LoadClickType_LctIntimateTitle:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OwnerInRoom

GPBEnumDescriptor *PB3OwnerInRoom_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NotInSelfRoom\000InSelfRoom\000";
    static const int32_t values[] = {
        PB3OwnerInRoom_NotInSelfRoom,
        PB3OwnerInRoom_InSelfRoom,
    };
    static const char *extraTextFormatInfo = "\002\000\r\000\001\n\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OwnerInRoom)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OwnerInRoom_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OwnerInRoom_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OwnerInRoom_NotInSelfRoom:
    case PB3OwnerInRoom_InSelfRoom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UploadType

GPBEnumDescriptor *PB3UploadType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeZero\000HeadAlbumImg\000HeadIconImg\000Dynami"
        "csImg\000ClientLog\000TipOffsImg\000Indetity\000Pmme"
        "dia\000Voice\000BillVoice\000BillPicture\000CmsSingl"
        "eImg\000CmsCombineImg\000CommunityImg\000Communit"
        "yVideo\000CommunityAudio\000CommunityGroupImg\000"
        "ZoneCover\000UserVoice\000VoiceTag\000AnchorVideo"
        "\000FaceIdimg\000FaceIdvideo\000BackgroundImg\000Cha"
        "nnelIcon\000WxrobotQrcode\000GreetVoice\000SongLi"
        "braryImg\000CommunityTagImg\000PersonLabelImg\000"
        "OfficialWebMusic\000KefuVideo\000KefuVideoImg\000"
        "NoAuthUpload\000ActivityNoAuthUpload\000RoomPr"
        "ogramPic\000RoomProgramShowCover\000OfficialMu"
        "sic\000CertifyImg\000ClanApply\000Autograph\000Proto"
        "col\000WelcomeVoice\000BackendLibraryMusic\000Cpc"
        "ardImage\000CpcardVoice\000NeonChorusTplMusic\000"
        "NeonChorusWorksMusic\000CubismIcon\000WeekCpbu"
        "rstCardImg\000PersonPublicSettleSignApplyCo"
        "operateProof\000GroupPhotoIcon\000";
    static const int32_t values[] = {
        PB3UploadType_TypeZero,
        PB3UploadType_HeadAlbumImg,
        PB3UploadType_HeadIconImg,
        PB3UploadType_DynamicsImg,
        PB3UploadType_ClientLog,
        PB3UploadType_TipOffsImg,
        PB3UploadType_Indetity,
        PB3UploadType_Pmmedia,
        PB3UploadType_Voice,
        PB3UploadType_BillVoice,
        PB3UploadType_BillPicture,
        PB3UploadType_CmsSingleImg,
        PB3UploadType_CmsCombineImg,
        PB3UploadType_CommunityImg,
        PB3UploadType_CommunityVideo,
        PB3UploadType_CommunityAudio,
        PB3UploadType_CommunityGroupImg,
        PB3UploadType_ZoneCover,
        PB3UploadType_UserVoice,
        PB3UploadType_VoiceTag,
        PB3UploadType_AnchorVideo,
        PB3UploadType_FaceIdimg,
        PB3UploadType_FaceIdvideo,
        PB3UploadType_BackgroundImg,
        PB3UploadType_ChannelIcon,
        PB3UploadType_WxrobotQrcode,
        PB3UploadType_GreetVoice,
        PB3UploadType_SongLibraryImg,
        PB3UploadType_CommunityTagImg,
        PB3UploadType_PersonLabelImg,
        PB3UploadType_OfficialWebMusic,
        PB3UploadType_KefuVideo,
        PB3UploadType_KefuVideoImg,
        PB3UploadType_NoAuthUpload,
        PB3UploadType_ActivityNoAuthUpload,
        PB3UploadType_RoomProgramPic,
        PB3UploadType_RoomProgramShowCover,
        PB3UploadType_OfficialMusic,
        PB3UploadType_CertifyImg,
        PB3UploadType_ClanApply,
        PB3UploadType_Autograph,
        PB3UploadType_Protocol,
        PB3UploadType_WelcomeVoice,
        PB3UploadType_BackendLibraryMusic,
        PB3UploadType_CpcardImage,
        PB3UploadType_CpcardVoice,
        PB3UploadType_NeonChorusTplMusic,
        PB3UploadType_NeonChorusWorksMusic,
        PB3UploadType_CubismIcon,
        PB3UploadType_WeekCpburstCardImg,
        PB3UploadType_PersonPublicSettleSignApplyCooperateProof,
        PB3UploadType_GroupPhotoIcon,
    };
    static const char *extraTextFormatInfo = "4\000\010\000\001\014\000\002\013\000\003\013\000\004\t\000\005\n\000\006\010\000\007c\004\000\010\005\000\t\t\000\n\013\000\013\014\000\014\r\000\r\014\000\016\016\000\017\016\000\020\021\000\021\t\000\022\t\000\023\010\000\024\013\000\025\005b\002\000\026\005b\004\000\027\r\000\030\013\000\031c\005E\000\032\n\000\033\016\000\034\017\000\035\016\000\036\020\000\037)\000 ,\000!\014\000\"\024\000#\016\000$\024\000%\r\000&\n\000\'\t\000(\t\000)\010\000*\014\000+\023\000,c\010\000-c\010\000.\022\000/\024\0000\n\0001\005b\013\0002\037\n\0003\016\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UploadType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UploadType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UploadType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UploadType_TypeZero:
    case PB3UploadType_HeadAlbumImg:
    case PB3UploadType_HeadIconImg:
    case PB3UploadType_DynamicsImg:
    case PB3UploadType_ClientLog:
    case PB3UploadType_TipOffsImg:
    case PB3UploadType_Indetity:
    case PB3UploadType_Pmmedia:
    case PB3UploadType_Voice:
    case PB3UploadType_BillVoice:
    case PB3UploadType_BillPicture:
    case PB3UploadType_CmsSingleImg:
    case PB3UploadType_CmsCombineImg:
    case PB3UploadType_CommunityImg:
    case PB3UploadType_CommunityVideo:
    case PB3UploadType_CommunityAudio:
    case PB3UploadType_CommunityGroupImg:
    case PB3UploadType_ZoneCover:
    case PB3UploadType_UserVoice:
    case PB3UploadType_VoiceTag:
    case PB3UploadType_AnchorVideo:
    case PB3UploadType_FaceIdimg:
    case PB3UploadType_FaceIdvideo:
    case PB3UploadType_BackgroundImg:
    case PB3UploadType_ChannelIcon:
    case PB3UploadType_WxrobotQrcode:
    case PB3UploadType_GreetVoice:
    case PB3UploadType_SongLibraryImg:
    case PB3UploadType_CommunityTagImg:
    case PB3UploadType_PersonLabelImg:
    case PB3UploadType_OfficialWebMusic:
    case PB3UploadType_KefuVideo:
    case PB3UploadType_KefuVideoImg:
    case PB3UploadType_NoAuthUpload:
    case PB3UploadType_ActivityNoAuthUpload:
    case PB3UploadType_RoomProgramPic:
    case PB3UploadType_RoomProgramShowCover:
    case PB3UploadType_OfficialMusic:
    case PB3UploadType_CertifyImg:
    case PB3UploadType_ClanApply:
    case PB3UploadType_Autograph:
    case PB3UploadType_Protocol:
    case PB3UploadType_WelcomeVoice:
    case PB3UploadType_BackendLibraryMusic:
    case PB3UploadType_CpcardImage:
    case PB3UploadType_CpcardVoice:
    case PB3UploadType_NeonChorusTplMusic:
    case PB3UploadType_NeonChorusWorksMusic:
    case PB3UploadType_CubismIcon:
    case PB3UploadType_WeekCpburstCardImg:
    case PB3UploadType_PersonPublicSettleSignApplyCooperateProof:
    case PB3UploadType_GroupPhotoIcon:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VisitorInfoState

GPBEnumDescriptor *PB3VisitorInfoState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VisNormal\000VisHide\000VisInvisible\000VisDelete"
        "\000";
    static const int32_t values[] = {
        PB3VisitorInfoState_VisNormal,
        PB3VisitorInfoState_VisHide,
        PB3VisitorInfoState_VisInvisible,
        PB3VisitorInfoState_VisDelete,
    };
    static const char *extraTextFormatInfo = "\004\000c\206\000\001c\204\000\002c\211\000\003c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VisitorInfoState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VisitorInfoState_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VisitorInfoState_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VisitorInfoState_VisNormal:
    case PB3VisitorInfoState_VisHide:
    case PB3VisitorInfoState_VisInvisible:
    case PB3VisitorInfoState_VisDelete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VisitorOptType

GPBEnumDescriptor *PB3VisitorOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VotNormal\000VotHide\000VotUnHide\000VotInvisible"
        "\000VotUnInvisible\000VotDelete\000";
    static const int32_t values[] = {
        PB3VisitorOptType_VotNormal,
        PB3VisitorOptType_VotHide,
        PB3VisitorOptType_VotUnHide,
        PB3VisitorOptType_VotInvisible,
        PB3VisitorOptType_VotUnInvisible,
        PB3VisitorOptType_VotDelete,
    };
    static const char *extraTextFormatInfo = "\006\000c\206\000\001c\204\000\002c\206\000\003c\211\000\004c\213\000\005c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VisitorOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VisitorOptType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VisitorOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VisitorOptType_VotNormal:
    case PB3VisitorOptType_VotHide:
    case PB3VisitorOptType_VotUnHide:
    case PB3VisitorOptType_VotInvisible:
    case PB3VisitorOptType_VotUnInvisible:
    case PB3VisitorOptType_VotDelete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VisitorOptLimitType

GPBEnumDescriptor *PB3VisitorOptLimitType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NoneLimit\000WealthLv\000CharmLv\000WealthLvOrCha"
        "rmLv\000CharmLvAndWealthLv\000";
    static const int32_t values[] = {
        PB3VisitorOptLimitType_NoneLimit,
        PB3VisitorOptLimitType_WealthLv,
        PB3VisitorOptLimitType_CharmLv,
        PB3VisitorOptLimitType_WealthLvOrCharmLv,
        PB3VisitorOptLimitType_CharmLvAndWealthLv,
    };
    static const char *extraTextFormatInfo = "\005\000\t\000\001\010\000\002\007\000\003\021\000\004\022\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VisitorOptLimitType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VisitorOptLimitType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VisitorOptLimitType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VisitorOptLimitType_NoneLimit:
    case PB3VisitorOptLimitType_WealthLv:
    case PB3VisitorOptLimitType_CharmLv:
    case PB3VisitorOptLimitType_WealthLvOrCharmLv:
    case PB3VisitorOptLimitType_CharmLvAndWealthLv:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DecorateType

GPBEnumDescriptor *PB3DecorateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DtNone\000DtRoomBackdrop\000DtRoomSign\000DtRoomF"
        "rame\000";
    static const int32_t values[] = {
        PB3DecorateType_DtNone,
        PB3DecorateType_DtRoomBackdrop,
        PB3DecorateType_DtRoomSign,
        PB3DecorateType_DtRoomFrame,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DecorateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DecorateType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DecorateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DecorateType_DtNone:
    case PB3DecorateType_DtRoomBackdrop:
    case PB3DecorateType_DtRoomSign:
    case PB3DecorateType_DtRoomFrame:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomFlagType

GPBEnumDescriptor *PB3RoomFlagType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtManHall\000RtWomenHall\000RtOrderSing\000RtMake"
        "Friend\000RtPia\000RtRadio\000RtHeat\000RtOther\000";
    static const int32_t values[] = {
        PB3RoomFlagType_RtManHall,
        PB3RoomFlagType_RtWomenHall,
        PB3RoomFlagType_RtOrderSing,
        PB3RoomFlagType_RtMakeFriend,
        PB3RoomFlagType_RtPia,
        PB3RoomFlagType_RtRadio,
        PB3RoomFlagType_RtHeat,
        PB3RoomFlagType_RtOther,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomFlagType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomFlagType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomFlagType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomFlagType_RtManHall:
    case PB3RoomFlagType_RtWomenHall:
    case PB3RoomFlagType_RtOrderSing:
    case PB3RoomFlagType_RtMakeFriend:
    case PB3RoomFlagType_RtPia:
    case PB3RoomFlagType_RtRadio:
    case PB3RoomFlagType_RtHeat:
    case PB3RoomFlagType_RtOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AuditStatus

GPBEnumDescriptor *PB3AuditStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AsAuditPass\000AsAuditing\000AsAuditRefuse\000";
    static const int32_t values[] = {
        PB3AuditStatus_AsAuditPass,
        PB3AuditStatus_AsAuditing,
        PB3AuditStatus_AsAuditRefuse,
    };
    static const char *extraTextFormatInfo = "\003\000b\205\204\000\001b\210\000\002b\205\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AuditStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AuditStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AuditStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AuditStatus_AsAuditPass:
    case PB3AuditStatus_AsAuditing:
    case PB3AuditStatus_AsAuditRefuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FriendIMType

GPBEnumDescriptor *PB3FriendIMType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FitNone\000FitFollow\000FitFriend\000";
    static const int32_t values[] = {
        PB3FriendIMType_FitNone,
        PB3FriendIMType_FitFollow,
        PB3FriendIMType_FitFriend,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\206\000\002c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FriendIMType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FriendIMType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FriendIMType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FriendIMType_FitNone:
    case PB3FriendIMType_FitFollow:
    case PB3FriendIMType_FitFriend:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EffectUseType

GPBEnumDescriptor *PB3EffectUseType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EutUnequip\000EutEquip\000";
    static const int32_t values[] = {
        PB3EffectUseType_EutUnequip,
        PB3EffectUseType_EutEquip,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectUseType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectUseType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectUseType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectUseType_EutUnequip:
    case PB3EffectUseType_EutEquip:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChargeExtraDataType

GPBEnumDescriptor *PB3ChargeExtraDataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CedtNull\000CedtAct\000";
    static const int32_t values[] = {
        PB3ChargeExtraDataType_CedtNull,
        PB3ChargeExtraDataType_CedtAct,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChargeExtraDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChargeExtraDataType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChargeExtraDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChargeExtraDataType_CedtNull:
    case PB3ChargeExtraDataType_CedtAct:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PlayerFlagKey

GPBEnumDescriptor *PB3PlayerFlagKey_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PfkNone\000PfkBillPlayerAuth\000PfkNobility\000Pf"
        "kIsMinors\000";
    static const int32_t values[] = {
        PB3PlayerFlagKey_PfkNone,
        PB3PlayerFlagKey_PfkBillPlayerAuth,
        PB3PlayerFlagKey_PfkNobility,
        PB3PlayerFlagKey_PfkIsMinors,
    };
    static const char *extraTextFormatInfo = "\004\000c\204\000\001c\216\000\002c\210\000\003c\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PlayerFlagKey)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PlayerFlagKey_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PlayerFlagKey_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PlayerFlagKey_PfkNone:
    case PB3PlayerFlagKey_PfkBillPlayerAuth:
    case PB3PlayerFlagKey_PfkNobility:
    case PB3PlayerFlagKey_PfkIsMinors:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PFVBillPlayerAuth

GPBEnumDescriptor *PB3PFVBillPlayerAuth_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PfvbpaNone\000PfvbpaNoAuth\000PfvbpaAuth\000Pfvbp"
        "aAuthFrozen\000";
    static const int32_t values[] = {
        PB3PFVBillPlayerAuth_PfvbpaNone,
        PB3PFVBillPlayerAuth_PfvbpaNoAuth,
        PB3PFVBillPlayerAuth_PfvbpaAuth,
        PB3PFVBillPlayerAuth_PfvbpaAuthFrozen,
    };
    static const char *extraTextFormatInfo = "\004\000f\204\000\001f\206\000\002f\204\000\003f\212\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PFVBillPlayerAuth)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PFVBillPlayerAuth_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PFVBillPlayerAuth_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PFVBillPlayerAuth_PfvbpaNone:
    case PB3PFVBillPlayerAuth_PfvbpaNoAuth:
    case PB3PFVBillPlayerAuth_PfvbpaAuth:
    case PB3PFVBillPlayerAuth_PfvbpaAuthFrozen:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CommonOperType

GPBEnumDescriptor *PB3CommonOperType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CmnOperNone\000CmnOperAdd\000CmnOperDel\000";
    static const int32_t values[] = {
        PB3CommonOperType_CmnOperNone,
        PB3CommonOperType_CmnOperAdd,
        PB3CommonOperType_CmnOperDel,
    };
    static const char *extraTextFormatInfo = "\003\000\007\204\000\001\007\203\000\002\007\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CommonOperType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CommonOperType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CommonOperType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CommonOperType_CmnOperNone:
    case PB3CommonOperType_CmnOperAdd:
    case PB3CommonOperType_CmnOperDel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChargeCateType

GPBEnumDescriptor *PB3ChargeCateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CctNormal\000CctActCard\000";
    static const int32_t values[] = {
        PB3ChargeCateType_CctNormal,
        PB3ChargeCateType_CctActCard,
    };
    static const char *extraTextFormatInfo = "\002\000c\206\000\001c\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChargeCateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChargeCateType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChargeCateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChargeCateType_CctNormal:
    case PB3ChargeCateType_CctActCard:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AuthType

GPBEnumDescriptor *PB3AuthType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AuthTypeNone\000AuthTypeSinger\000AuthTypeVoic"
        "er\000AuthTypeSurface\000AuthTypeHaveSong\000Auth"
        "TypeStar\000";
    static const int32_t values[] = {
        PB3AuthType_AuthTypeNone,
        PB3AuthType_AuthTypeSinger,
        PB3AuthType_AuthTypeVoicer,
        PB3AuthType_AuthTypeSurface,
        PB3AuthType_AuthTypeHaveSong,
        PB3AuthType_AuthTypeStar,
    };
    static const char *extraTextFormatInfo = "\006\000\014\000\001\016\000\002\016\000\003\017\000\004\020\000\005\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AuthType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AuthType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AuthType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AuthType_AuthTypeNone:
    case PB3AuthType_AuthTypeSinger:
    case PB3AuthType_AuthTypeVoicer:
    case PB3AuthType_AuthTypeSurface:
    case PB3AuthType_AuthTypeHaveSong:
    case PB3AuthType_AuthTypeStar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AuthStatus

GPBEnumDescriptor *PB3AuthStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AosNone\000AosActivate\000AosBlock\000";
    static const int32_t values[] = {
        PB3AuthStatus_AosNone,
        PB3AuthStatus_AosActivate,
        PB3AuthStatus_AosBlock,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\210\000\002c\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AuthStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AuthStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AuthStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AuthStatus_AosNone:
    case PB3AuthStatus_AosActivate:
    case PB3AuthStatus_AosBlock:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChannelPrefix

GPBEnumDescriptor *PB3ChannelPrefix_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CpZero\000CpFamily\000CpGame\000CpDynamicLoad\000CpA"
        "ctivity\000CpBroadcastIndexMakeFriend\000CpBro"
        "adcastRoomMakeFriend\000CpActivityNotice\000Cp"
        "MobaTeam\000CpActivityPc\000CpHotPoiniIndex\000";
    static const int32_t values[] = {
        PB3ChannelPrefix_CpZero,
        PB3ChannelPrefix_CpFamily,
        PB3ChannelPrefix_CpGame,
        PB3ChannelPrefix_CpDynamicLoad,
        PB3ChannelPrefix_CpActivity,
        PB3ChannelPrefix_CpBroadcastIndexMakeFriend,
        PB3ChannelPrefix_CpBroadcastRoomMakeFriend,
        PB3ChannelPrefix_CpActivityNotice,
        PB3ChannelPrefix_CpMobaTeam,
        PB3ChannelPrefix_CpActivityPc,
        PB3ChannelPrefix_CpHotPoiniIndex,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChannelPrefix)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChannelPrefix_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChannelPrefix_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChannelPrefix_CpZero:
    case PB3ChannelPrefix_CpFamily:
    case PB3ChannelPrefix_CpGame:
    case PB3ChannelPrefix_CpDynamicLoad:
    case PB3ChannelPrefix_CpActivity:
    case PB3ChannelPrefix_CpBroadcastIndexMakeFriend:
    case PB3ChannelPrefix_CpBroadcastRoomMakeFriend:
    case PB3ChannelPrefix_CpActivityNotice:
    case PB3ChannelPrefix_CpMobaTeam:
    case PB3ChannelPrefix_CpActivityPc:
    case PB3ChannelPrefix_CpHotPoiniIndex:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChargeFirstGiftType

GPBEnumDescriptor *PB3ChargeFirstGiftType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CfGiftType\000CfEffect\000CfGift\000";
    static const int32_t values[] = {
        PB3ChargeFirstGiftType_CfGiftType,
        PB3ChargeFirstGiftType_CfEffect,
        PB3ChargeFirstGiftType_CfGift,
    };
    static const char *extraTextFormatInfo = "\003\000\002\204\204\000\001\002\206\000\002b\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChargeFirstGiftType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChargeFirstGiftType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChargeFirstGiftType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChargeFirstGiftType_CfGiftType:
    case PB3ChargeFirstGiftType_CfEffect:
    case PB3ChargeFirstGiftType_CfGift:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IMGiftStatus

GPBEnumDescriptor *PB3IMGiftStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImgsZero\000ImgsNotReceived\000ImgsReceived\000Im"
        "gsTimeout\000ImgsNotTimeout\000";
    static const int32_t values[] = {
        PB3IMGiftStatus_ImgsZero,
        PB3IMGiftStatus_ImgsNotReceived,
        PB3IMGiftStatus_ImgsReceived,
        PB3IMGiftStatus_ImgsTimeout,
        PB3IMGiftStatus_ImgsNotTimeout,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMGiftStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMGiftStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMGiftStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMGiftStatus_ImgsZero:
    case PB3IMGiftStatus_ImgsNotReceived:
    case PB3IMGiftStatus_ImgsReceived:
    case PB3IMGiftStatus_ImgsTimeout:
    case PB3IMGiftStatus_ImgsNotTimeout:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SendGiftSource

GPBEnumDescriptor *PB3SendGiftSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SgsDefault\000SgsVirtualRoom\000SgsImSend\000SgsI"
        "ntimateBox\000SgsLightUp\000SgsWeekTravel\000SgsI"
        "mRedEnvelope\000";
    static const int32_t values[] = {
        PB3SendGiftSource_SgsDefault,
        PB3SendGiftSource_SgsVirtualRoom,
        PB3SendGiftSource_SgsImSend,
        PB3SendGiftSource_SgsIntimateBox,
        PB3SendGiftSource_SgsLightUp,
        PB3SendGiftSource_SgsWeekTravel,
        PB3SendGiftSource_SgsImRedEnvelope,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SendGiftSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SendGiftSource_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SendGiftSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SendGiftSource_SgsDefault:
    case PB3SendGiftSource_SgsVirtualRoom:
    case PB3SendGiftSource_SgsImSend:
    case PB3SendGiftSource_SgsIntimateBox:
    case PB3SendGiftSource_SgsLightUp:
    case PB3SendGiftSource_SgsWeekTravel:
    case PB3SendGiftSource_SgsImRedEnvelope:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SendGiftPosition

GPBEnumDescriptor *PB3SendGiftPosition_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SgpZero\000SgpCpPendant\000SgpImPendant\000SgpInB"
        "istro\000";
    static const int32_t values[] = {
        PB3SendGiftPosition_SgpZero,
        PB3SendGiftPosition_SgpCpPendant,
        PB3SendGiftPosition_SgpImPendant,
        PB3SendGiftPosition_SgpInBistro,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SendGiftPosition)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SendGiftPosition_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SendGiftPosition_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SendGiftPosition_SgpZero:
    case PB3SendGiftPosition_SgpCpPendant:
    case PB3SendGiftPosition_SgpImPendant:
    case PB3SendGiftPosition_SgpInBistro:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IMGiftType

GPBEnumDescriptor *PB3IMGiftType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImgtZero\000ImgtTeaseTa\000ImgtSincereWord\000Img"
        "tAutoChat\000";
    static const int32_t values[] = {
        PB3IMGiftType_ImgtZero,
        PB3IMGiftType_ImgtTeaseTa,
        PB3IMGiftType_ImgtSincereWord,
        PB3IMGiftType_ImgtAutoChat,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMGiftType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMGiftType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMGiftType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMGiftType_ImgtZero:
    case PB3IMGiftType_ImgtTeaseTa:
    case PB3IMGiftType_ImgtSincereWord:
    case PB3IMGiftType_ImgtAutoChat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SyncOptType

GPBEnumDescriptor *PB3SyncOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SoptZero\000SoptMobaTeamKickOut\000SoptMobaTea"
        "mClean\000SoptMobaTeamDelete\000SoptMobaTeamLe"
        "ader\000SoptImpresentpushIgnored\000";
    static const int32_t values[] = {
        PB3SyncOptType_SoptZero,
        PB3SyncOptType_SoptMobaTeamKickOut,
        PB3SyncOptType_SoptMobaTeamClean,
        PB3SyncOptType_SoptMobaTeamDelete,
        PB3SyncOptType_SoptMobaTeamLeader,
        PB3SyncOptType_SoptImpresentpushIgnored,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SyncOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SyncOptType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SyncOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SyncOptType_SoptZero:
    case PB3SyncOptType_SoptMobaTeamKickOut:
    case PB3SyncOptType_SoptMobaTeamClean:
    case PB3SyncOptType_SoptMobaTeamDelete:
    case PB3SyncOptType_SoptMobaTeamLeader:
    case PB3SyncOptType_SoptImpresentpushIgnored:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IMAutoChatStatus

GPBEnumDescriptor *PB3IMAutoChatStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImAutoChatStatusNone\000ImAutoChatStatusNor"
        "mal\000ImAutoChatStatusChatting\000ImAutoChatS"
        "tatusGiftUnlock\000";
    static const int32_t values[] = {
        PB3IMAutoChatStatus_ImAutoChatStatusNone,
        PB3IMAutoChatStatus_ImAutoChatStatusNormal,
        PB3IMAutoChatStatus_ImAutoChatStatusChatting,
        PB3IMAutoChatStatus_ImAutoChatStatusGiftUnlock,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMAutoChatStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMAutoChatStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMAutoChatStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMAutoChatStatus_ImAutoChatStatusNone:
    case PB3IMAutoChatStatus_ImAutoChatStatusNormal:
    case PB3IMAutoChatStatus_ImAutoChatStatusChatting:
    case PB3IMAutoChatStatus_ImAutoChatStatusGiftUnlock:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3QuickChatUserType

GPBEnumDescriptor *PB3QuickChatUserType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "QcutZero\000QcutNew\000QcutOld\000QuctSkill\000";
    static const int32_t values[] = {
        PB3QuickChatUserType_QcutZero,
        PB3QuickChatUserType_QcutNew,
        PB3QuickChatUserType_QcutOld,
        PB3QuickChatUserType_QuctSkill,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3QuickChatUserType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3QuickChatUserType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3QuickChatUserType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3QuickChatUserType_QcutZero:
    case PB3QuickChatUserType_QcutNew:
    case PB3QuickChatUserType_QcutOld:
    case PB3QuickChatUserType_QuctSkill:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CouponJumpType

GPBEnumDescriptor *PB3CouponJumpType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CjtNone\000Cjt1V1\000CjtNobility\000CjtOpenVoice\000"
        "CjtSong\000CjtMatchCp\000CjtMaskDateMatch\000";
    static const int32_t values[] = {
        PB3CouponJumpType_CjtNone,
        PB3CouponJumpType_Cjt1V1,
        PB3CouponJumpType_CjtNobility,
        PB3CouponJumpType_CjtOpenVoice,
        PB3CouponJumpType_CjtSong,
        PB3CouponJumpType_CjtMatchCp,
        PB3CouponJumpType_CjtMaskDateMatch,
    };
    static const char *extraTextFormatInfo = "\001\001c\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CouponJumpType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CouponJumpType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CouponJumpType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CouponJumpType_CjtNone:
    case PB3CouponJumpType_Cjt1V1:
    case PB3CouponJumpType_CjtNobility:
    case PB3CouponJumpType_CjtOpenVoice:
    case PB3CouponJumpType_CjtSong:
    case PB3CouponJumpType_CjtMatchCp:
    case PB3CouponJumpType_CjtMaskDateMatch:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CouponDiscountType

GPBEnumDescriptor *PB3CouponDiscountType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CdtNone\000CdtDikou\000CdtZhekou\000CdtTiyan\000";
    static const int32_t values[] = {
        PB3CouponDiscountType_CdtNone,
        PB3CouponDiscountType_CdtDikou,
        PB3CouponDiscountType_CdtZhekou,
        PB3CouponDiscountType_CdtTiyan,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CouponDiscountType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CouponDiscountType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CouponDiscountType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CouponDiscountType_CdtNone:
    case PB3CouponDiscountType_CdtDikou:
    case PB3CouponDiscountType_CdtZhekou:
    case PB3CouponDiscountType_CdtTiyan:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CouponDiscountUnit

GPBEnumDescriptor *PB3CouponDiscountUnit_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CduNone\000CduYuan\000CduFeng\000";
    static const int32_t values[] = {
        PB3CouponDiscountUnit_CduNone,
        PB3CouponDiscountUnit_CduYuan,
        PB3CouponDiscountUnit_CduFeng,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CouponDiscountUnit)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CouponDiscountUnit_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CouponDiscountUnit_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CouponDiscountUnit_CduNone:
    case PB3CouponDiscountUnit_CduYuan:
    case PB3CouponDiscountUnit_CduFeng:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CouponPackageType

GPBEnumDescriptor *PB3CouponPackageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CptNone\000CptNewRegister\000CptCar\000";
    static const int32_t values[] = {
        PB3CouponPackageType_CptNone,
        PB3CouponPackageType_CptNewRegister,
        PB3CouponPackageType_CptCar,
    };
    static const char *extraTextFormatInfo = "\002\000c\204\000\001c\213\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CouponPackageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CouponPackageType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CouponPackageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CouponPackageType_CptNone:
    case PB3CouponPackageType_CptNewRegister:
    case PB3CouponPackageType_CptCar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CouponStatus

GPBEnumDescriptor *PB3CouponStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CsNone\000CsNormal\000CsStop\000";
    static const int32_t values[] = {
        PB3CouponStatus_CsNone,
        PB3CouponStatus_CsNormal,
        PB3CouponStatus_CsStop,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CouponStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CouponStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CouponStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CouponStatus_CsNone:
    case PB3CouponStatus_CsNormal:
    case PB3CouponStatus_CsStop:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IntimateFansTargetType

GPBEnumDescriptor *PB3IntimateFansTargetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IfttNone\000IfttRoomListenInHost\000IfttRoomLi"
        "stenInHostDuration\000IfttRoomGiftToHost\000If"
        "ttRoomChat\000IfttHostZoneCommenting\000IfttHo"
        "stZoneImpression\000";
    static const int32_t values[] = {
        PB3IntimateFansTargetType_IfttNone,
        PB3IntimateFansTargetType_IfttRoomListenInHost,
        PB3IntimateFansTargetType_IfttRoomListenInHostDuration,
        PB3IntimateFansTargetType_IfttRoomGiftToHost,
        PB3IntimateFansTargetType_IfttRoomChat,
        PB3IntimateFansTargetType_IfttHostZoneCommenting,
        PB3IntimateFansTargetType_IfttHostZoneImpression,
    };
    static const char *extraTextFormatInfo = "\007\000d\204\000\001d\220\000\002d\230\000\003d\216\000\004d\210\000\005d\222\000\006d\222\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IntimateFansTargetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IntimateFansTargetType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IntimateFansTargetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IntimateFansTargetType_IfttNone:
    case PB3IntimateFansTargetType_IfttRoomListenInHost:
    case PB3IntimateFansTargetType_IfttRoomListenInHostDuration:
    case PB3IntimateFansTargetType_IfttRoomGiftToHost:
    case PB3IntimateFansTargetType_IfttRoomChat:
    case PB3IntimateFansTargetType_IfttHostZoneCommenting:
    case PB3IntimateFansTargetType_IfttHostZoneImpression:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CpPublicNoticeStatus

GPBEnumDescriptor *PB3CpPublicNoticeStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CpnsNone\000CpnsActive\000CpnsInActive\000CpnsNot"
        "Show\000";
    static const int32_t values[] = {
        PB3CpPublicNoticeStatus_CpnsNone,
        PB3CpPublicNoticeStatus_CpnsActive,
        PB3CpPublicNoticeStatus_CpnsInActive,
        PB3CpPublicNoticeStatus_CpnsNotShow,
    };
    static const char *extraTextFormatInfo = "\004\000d\204\000\001d\206\000\002d\210\000\003d\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CpPublicNoticeStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CpPublicNoticeStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CpPublicNoticeStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CpPublicNoticeStatus_CpnsNone:
    case PB3CpPublicNoticeStatus_CpnsActive:
    case PB3CpPublicNoticeStatus_CpnsInActive:
    case PB3CpPublicNoticeStatus_CpnsNotShow:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChatCPType

GPBEnumDescriptor *PB3ChatCPType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CcptZero\000CcptDefault\000CcptIm\000CcptHome\000Ccp"
        "tBlackWhale\000CcptTopModel\000CcptCustom\000Ccpt"
        "DialLog\000CcptBistro\000";
    static const int32_t values[] = {
        PB3ChatCPType_CcptZero,
        PB3ChatCPType_CcptDefault,
        PB3ChatCPType_CcptIm,
        PB3ChatCPType_CcptHome,
        PB3ChatCPType_CcptBlackWhale,
        PB3ChatCPType_CcptTopModel,
        PB3ChatCPType_CcptCustom,
        PB3ChatCPType_CcptDialLog,
        PB3ChatCPType_CcptBistro,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChatCPType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChatCPType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChatCPType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChatCPType_CcptZero:
    case PB3ChatCPType_CcptDefault:
    case PB3ChatCPType_CcptIm:
    case PB3ChatCPType_CcptHome:
    case PB3ChatCPType_CcptBlackWhale:
    case PB3ChatCPType_CcptTopModel:
    case PB3ChatCPType_CcptCustom:
    case PB3ChatCPType_CcptDialLog:
    case PB3ChatCPType_CcptBistro:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RedEnvelopeStatus

GPBEnumDescriptor *PB3RedEnvelopeStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ResNull\000ResBegin\000ResAward\000ResNoticeAward"
        "\000ResEnd\000";
    static const int32_t values[] = {
        PB3RedEnvelopeStatus_ResNull,
        PB3RedEnvelopeStatus_ResBegin,
        PB3RedEnvelopeStatus_ResAward,
        PB3RedEnvelopeStatus_ResNoticeAward,
        PB3RedEnvelopeStatus_ResEnd,
    };
    static const char *extraTextFormatInfo = "\005\000c\204\000\001c\205\000\002c\205\000\003c\206\205\000\004c\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RedEnvelopeStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RedEnvelopeStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RedEnvelopeStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RedEnvelopeStatus_ResNull:
    case PB3RedEnvelopeStatus_ResBegin:
    case PB3RedEnvelopeStatus_ResAward:
    case PB3RedEnvelopeStatus_ResNoticeAward:
    case PB3RedEnvelopeStatus_ResEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SubInfoActivityType

GPBEnumDescriptor *PB3SubInfoActivityType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SbiatZero\000SbiatRedEnvelope\000SbiatRandomId"
        "2\000SbiatPkRank\000";
    static const int32_t values[] = {
        PB3SubInfoActivityType_SbiatZero,
        PB3SubInfoActivityType_SbiatRedEnvelope,
        PB3SubInfoActivityType_SbiatRandomId2,
        PB3SubInfoActivityType_SbiatPkRank,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SubInfoActivityType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SubInfoActivityType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SubInfoActivityType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SubInfoActivityType_SbiatZero:
    case PB3SubInfoActivityType_SbiatRedEnvelope:
    case PB3SubInfoActivityType_SbiatRandomId2:
    case PB3SubInfoActivityType_SbiatPkRank:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActGameConfType

GPBEnumDescriptor *PB3ActGameConfType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AgctZero\000AgctRedEnvelope\000AgctRandomId2\000";
    static const int32_t values[] = {
        PB3ActGameConfType_AgctZero,
        PB3ActGameConfType_AgctRedEnvelope,
        PB3ActGameConfType_AgctRandomId2,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActGameConfType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActGameConfType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActGameConfType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActGameConfType_AgctZero:
    case PB3ActGameConfType_AgctRedEnvelope:
    case PB3ActGameConfType_AgctRandomId2:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ClientLoginType

GPBEnumDescriptor *PB3ClientLoginType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CltDev\000CltNative\000CltQq\000CltWeixin\000CltSms\000"
        "CltQuick\000CltApple\000CltFacebook\000CltPhonePa"
        "ssword\000CltWechatSubscription\000CltGoogle\000C"
        "ltQqSmallProgram\000CltWxMiniProgram\000CltQqW"
        "eb\000CltWeixinWeb\000CltGuest\000CltTwitter\000CltC"
        "hange\000";
    static const int32_t values[] = {
        PB3ClientLoginType_CltDev,
        PB3ClientLoginType_CltNative,
        PB3ClientLoginType_CltQq,
        PB3ClientLoginType_CltWeixin,
        PB3ClientLoginType_CltSms,
        PB3ClientLoginType_CltQuick,
        PB3ClientLoginType_CltApple,
        PB3ClientLoginType_CltFacebook,
        PB3ClientLoginType_CltPhonePassword,
        PB3ClientLoginType_CltWechatSubscription,
        PB3ClientLoginType_CltGoogle,
        PB3ClientLoginType_CltQqSmallProgram,
        PB3ClientLoginType_CltWxMiniProgram,
        PB3ClientLoginType_CltQqWeb,
        PB3ClientLoginType_CltWeixinWeb,
        PB3ClientLoginType_CltGuest,
        PB3ClientLoginType_CltTwitter,
        PB3ClientLoginType_CltChange,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ClientLoginType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ClientLoginType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ClientLoginType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ClientLoginType_CltDev:
    case PB3ClientLoginType_CltNative:
    case PB3ClientLoginType_CltQq:
    case PB3ClientLoginType_CltWeixin:
    case PB3ClientLoginType_CltSms:
    case PB3ClientLoginType_CltQuick:
    case PB3ClientLoginType_CltApple:
    case PB3ClientLoginType_CltFacebook:
    case PB3ClientLoginType_CltPhonePassword:
    case PB3ClientLoginType_CltWechatSubscription:
    case PB3ClientLoginType_CltGoogle:
    case PB3ClientLoginType_CltQqSmallProgram:
    case PB3ClientLoginType_CltWxMiniProgram:
    case PB3ClientLoginType_CltQqWeb:
    case PB3ClientLoginType_CltWeixinWeb:
    case PB3ClientLoginType_CltGuest:
    case PB3ClientLoginType_CltTwitter:
    case PB3ClientLoginType_CltChange:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PkMode

GPBEnumDescriptor *PB3PkMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PkmZero\000PkmMatch\000PkmInvite\000";
    static const int32_t values[] = {
        PB3PkMode_PkmZero,
        PB3PkMode_PkmMatch,
        PB3PkMode_PkmInvite,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PkMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PkMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PkMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PkMode_PkmZero:
    case PB3PkMode_PkmMatch:
    case PB3PkMode_PkmInvite:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PkRoomLevel

GPBEnumDescriptor *PB3PkRoomLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PkrlZero\000PkrlS\000PkrlA\000PkrlB\000PkrlC\000PkrlD\000P"
        "krlE\000PkrlF\000PkrlG\000";
    static const int32_t values[] = {
        PB3PkRoomLevel_PkrlZero,
        PB3PkRoomLevel_PkrlS,
        PB3PkRoomLevel_PkrlA,
        PB3PkRoomLevel_PkrlB,
        PB3PkRoomLevel_PkrlC,
        PB3PkRoomLevel_PkrlD,
        PB3PkRoomLevel_PkrlE,
        PB3PkRoomLevel_PkrlF,
        PB3PkRoomLevel_PkrlG,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PkRoomLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PkRoomLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PkRoomLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PkRoomLevel_PkrlZero:
    case PB3PkRoomLevel_PkrlS:
    case PB3PkRoomLevel_PkrlA:
    case PB3PkRoomLevel_PkrlB:
    case PB3PkRoomLevel_PkrlC:
    case PB3PkRoomLevel_PkrlD:
    case PB3PkRoomLevel_PkrlE:
    case PB3PkRoomLevel_PkrlF:
    case PB3PkRoomLevel_PkrlG:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PkSkillType

GPBEnumDescriptor *PB3PkSkillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PksZero\000PksSeckill\000PksTaunt\000";
    static const int32_t values[] = {
        PB3PkSkillType_PksZero,
        PB3PkSkillType_PksSeckill,
        PB3PkSkillType_PksTaunt,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PkSkillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PkSkillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PkSkillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PkSkillType_PksZero:
    case PB3PkSkillType_PksSeckill:
    case PB3PkSkillType_PksTaunt:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BoxAwardType

GPBEnumDescriptor *PB3BoxAwardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AwardZero\000AwardCoupon\000AwardNobility\000Awar"
        "dEffect\000";
    static const int32_t values[] = {
        PB3BoxAwardType_AwardZero,
        PB3BoxAwardType_AwardCoupon,
        PB3BoxAwardType_AwardNobility,
        PB3BoxAwardType_AwardEffect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BoxAwardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BoxAwardType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BoxAwardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BoxAwardType_AwardZero:
    case PB3BoxAwardType_AwardCoupon:
    case PB3BoxAwardType_AwardNobility:
    case PB3BoxAwardType_AwardEffect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3Application

GPBEnumDescriptor *PB3Application_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AppNone\000AppAll\000AppMizhua\000AppOxygen\000AppYu"
        "ngame\000AppHuhu\000AppPomelo\000AppOxygenPc\000AppF"
        "ish\000AppZhuazhua\000AppLemon\000AppHuoxing\000AppJ"
        "iumi\000AppManman\000AppChikii\000AppOxygencar\000Ap"
        "pCallme\000AppOxygentime\000AppOxygenstarry\000Ap"
        "pCaramel\000AppBuding\000AppMangguotang\000";
    static const int32_t values[] = {
        PB3Application_AppNone,
        PB3Application_AppAll,
        PB3Application_AppMizhua,
        PB3Application_AppOxygen,
        PB3Application_AppYungame,
        PB3Application_AppHuhu,
        PB3Application_AppPomelo,
        PB3Application_AppOxygenPc,
        PB3Application_AppFish,
        PB3Application_AppZhuazhua,
        PB3Application_AppLemon,
        PB3Application_AppHuoxing,
        PB3Application_AppJiumi,
        PB3Application_AppManman,
        PB3Application_AppChikii,
        PB3Application_AppOxygencar,
        PB3Application_AppCallme,
        PB3Application_AppOxygentime,
        PB3Application_AppOxygenstarry,
        PB3Application_AppCaramel,
        PB3Application_AppBuding,
        PB3Application_AppMangguotang,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3Application)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3Application_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3Application_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3Application_AppNone:
    case PB3Application_AppAll:
    case PB3Application_AppMizhua:
    case PB3Application_AppOxygen:
    case PB3Application_AppYungame:
    case PB3Application_AppHuhu:
    case PB3Application_AppPomelo:
    case PB3Application_AppOxygenPc:
    case PB3Application_AppFish:
    case PB3Application_AppZhuazhua:
    case PB3Application_AppLemon:
    case PB3Application_AppHuoxing:
    case PB3Application_AppJiumi:
    case PB3Application_AppManman:
    case PB3Application_AppChikii:
    case PB3Application_AppOxygencar:
    case PB3Application_AppCallme:
    case PB3Application_AppOxygentime:
    case PB3Application_AppOxygenstarry:
    case PB3Application_AppCaramel:
    case PB3Application_AppBuding:
    case PB3Application_AppMangguotang:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLivePkMode

GPBEnumDescriptor *PB3SingleLivePkMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlPkmZero\000SlPkmMatch\000SlPkmInvite\000";
    static const int32_t values[] = {
        PB3SingleLivePkMode_SlPkmZero,
        PB3SingleLivePkMode_SlPkmMatch,
        PB3SingleLivePkMode_SlPkmInvite,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLivePkMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLivePkMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLivePkMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLivePkMode_SlPkmZero:
    case PB3SingleLivePkMode_SlPkmMatch:
    case PB3SingleLivePkMode_SlPkmInvite:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLivePkRoomLevel

GPBEnumDescriptor *PB3SingleLivePkRoomLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlPkrlZero\000SlPkrlS\000SlPkrlA\000SlPkrlB\000SlPkr"
        "lC\000SlPkrlD\000SlPkrlE\000SlPkrlF\000SlPkrlG\000";
    static const int32_t values[] = {
        PB3SingleLivePkRoomLevel_SlPkrlZero,
        PB3SingleLivePkRoomLevel_SlPkrlS,
        PB3SingleLivePkRoomLevel_SlPkrlA,
        PB3SingleLivePkRoomLevel_SlPkrlB,
        PB3SingleLivePkRoomLevel_SlPkrlC,
        PB3SingleLivePkRoomLevel_SlPkrlD,
        PB3SingleLivePkRoomLevel_SlPkrlE,
        PB3SingleLivePkRoomLevel_SlPkrlF,
        PB3SingleLivePkRoomLevel_SlPkrlG,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLivePkRoomLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLivePkRoomLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLivePkRoomLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLivePkRoomLevel_SlPkrlZero:
    case PB3SingleLivePkRoomLevel_SlPkrlS:
    case PB3SingleLivePkRoomLevel_SlPkrlA:
    case PB3SingleLivePkRoomLevel_SlPkrlB:
    case PB3SingleLivePkRoomLevel_SlPkrlC:
    case PB3SingleLivePkRoomLevel_SlPkrlD:
    case PB3SingleLivePkRoomLevel_SlPkrlE:
    case PB3SingleLivePkRoomLevel_SlPkrlF:
    case PB3SingleLivePkRoomLevel_SlPkrlG:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SingleLivePkSkillType

GPBEnumDescriptor *PB3SingleLivePkSkillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SlPksZero\000SlPksSeckill\000SlPksTaunt\000";
    static const int32_t values[] = {
        PB3SingleLivePkSkillType_SlPksZero,
        PB3SingleLivePkSkillType_SlPksSeckill,
        PB3SingleLivePkSkillType_SlPksTaunt,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SingleLivePkSkillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SingleLivePkSkillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SingleLivePkSkillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SingleLivePkSkillType_SlPksZero:
    case PB3SingleLivePkSkillType_SlPksSeckill:
    case PB3SingleLivePkSkillType_SlPksTaunt:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RankShowType

GPBEnumDescriptor *PB3RankShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RankShowTypeNone\000RankShowTypeHome\000RankSh"
        "owTypeRoom\000RankShowTypeRoomData\000";
    static const int32_t values[] = {
        PB3RankShowType_RankShowTypeNone,
        PB3RankShowType_RankShowTypeHome,
        PB3RankShowType_RankShowTypeRoom,
        PB3RankShowType_RankShowTypeRoomData,
    };
    static const char *extraTextFormatInfo = "\001\003\004\344\344\344\344\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RankShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RankShowType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RankShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RankShowType_RankShowTypeNone:
    case PB3RankShowType_RankShowTypeHome:
    case PB3RankShowType_RankShowTypeRoom:
    case PB3RankShowType_RankShowTypeRoomData:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OrAnd

GPBEnumDescriptor *PB3OrAnd_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrAndTypeNone\000OrAndTypeAnd\000OrAndTypeOr\000";
    static const int32_t values[] = {
        PB3OrAnd_OrAndTypeNone,
        PB3OrAnd_OrAndTypeAnd,
        PB3OrAnd_OrAndTypeOr,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OrAnd)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OrAnd_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OrAnd_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OrAnd_OrAndTypeNone:
    case PB3OrAnd_OrAndTypeAnd:
    case PB3OrAnd_OrAndTypeOr:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AccountType

GPBEnumDescriptor *PB3AccountType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AtDev\000AtNative\000AtQq\000AtWeixin\000AtChinaMobi"
        "le\000AtChinaTelecom\000AtUmeng\000AtGoogle\000AtFac"
        "ebook\000AtCaiji\000AtApple\000AtWechatSubscripti"
        "on\000AtQqMiniProgram\000AtWxMiniProgram\000AtQqW"
        "eb\000AtWeixinWeb\000AtRobot\000AtPhoneSubsidiary"
        "\000";
    static const int32_t values[] = {
        PB3AccountType_AtDev,
        PB3AccountType_AtNative,
        PB3AccountType_AtQq,
        PB3AccountType_AtWeixin,
        PB3AccountType_AtChinaMobile,
        PB3AccountType_AtChinaTelecom,
        PB3AccountType_AtUmeng,
        PB3AccountType_AtGoogle,
        PB3AccountType_AtFacebook,
        PB3AccountType_AtCaiji,
        PB3AccountType_AtApple,
        PB3AccountType_AtWechatSubscription,
        PB3AccountType_AtQqMiniProgram,
        PB3AccountType_AtWxMiniProgram,
        PB3AccountType_AtQqWeb,
        PB3AccountType_AtWeixinWeb,
        PB3AccountType_AtRobot,
        PB3AccountType_AtPhoneSubsidiary,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AccountType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AccountType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AccountType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AccountType_AtDev:
    case PB3AccountType_AtNative:
    case PB3AccountType_AtQq:
    case PB3AccountType_AtWeixin:
    case PB3AccountType_AtChinaMobile:
    case PB3AccountType_AtChinaTelecom:
    case PB3AccountType_AtUmeng:
    case PB3AccountType_AtGoogle:
    case PB3AccountType_AtFacebook:
    case PB3AccountType_AtCaiji:
    case PB3AccountType_AtApple:
    case PB3AccountType_AtWechatSubscription:
    case PB3AccountType_AtQqMiniProgram:
    case PB3AccountType_AtWxMiniProgram:
    case PB3AccountType_AtQqWeb:
    case PB3AccountType_AtWeixinWeb:
    case PB3AccountType_AtRobot:
    case PB3AccountType_AtPhoneSubsidiary:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3MateChoiceStatus

GPBEnumDescriptor *PB3MateChoiceStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "McsNone\000McsReady\000McsCommunication\000McsCho"
        "ice\000McsPublishResult\000";
    static const int32_t values[] = {
        PB3MateChoiceStatus_McsNone,
        PB3MateChoiceStatus_McsReady,
        PB3MateChoiceStatus_McsCommunication,
        PB3MateChoiceStatus_McsChoice,
        PB3MateChoiceStatus_McsPublishResult,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3MateChoiceStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3MateChoiceStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3MateChoiceStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3MateChoiceStatus_McsNone:
    case PB3MateChoiceStatus_McsReady:
    case PB3MateChoiceStatus_McsCommunication:
    case PB3MateChoiceStatus_McsChoice:
    case PB3MateChoiceStatus_McsPublishResult:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ReqFromType

GPBEnumDescriptor *PB3ReqFromType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RftNormal\000RftPush\000";
    static const int32_t values[] = {
        PB3ReqFromType_RftNormal,
        PB3ReqFromType_RftPush,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ReqFromType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ReqFromType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ReqFromType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ReqFromType_RftNormal:
    case PB3ReqFromType_RftPush:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CreditScoreStatus

GPBEnumDescriptor *PB3CreditScoreStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CssDefault\000CssNotActive\000CssActiveIng\000Css"
        "Actived\000";
    static const int32_t values[] = {
        PB3CreditScoreStatus_CssDefault,
        PB3CreditScoreStatus_CssNotActive,
        PB3CreditScoreStatus_CssActiveIng,
        PB3CreditScoreStatus_CssActived,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CreditScoreStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CreditScoreStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CreditScoreStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CreditScoreStatus_CssDefault:
    case PB3CreditScoreStatus_CssNotActive:
    case PB3CreditScoreStatus_CssActiveIng:
    case PB3CreditScoreStatus_CssActived:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CreditScoreLevel

GPBEnumDescriptor *PB3CreditScoreLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CslevelDefault\000CslevelBad\000CslevelSoso\000Cs"
        "levelGood\000CslevelVeryGood\000CslevelExcelle"
        "nt\000";
    static const int32_t values[] = {
        PB3CreditScoreLevel_CslevelDefault,
        PB3CreditScoreLevel_CslevelBad,
        PB3CreditScoreLevel_CslevelSoso,
        PB3CreditScoreLevel_CslevelGood,
        PB3CreditScoreLevel_CslevelVeryGood,
        PB3CreditScoreLevel_CslevelExcellent,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CreditScoreLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CreditScoreLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CreditScoreLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CreditScoreLevel_CslevelDefault:
    case PB3CreditScoreLevel_CslevelBad:
    case PB3CreditScoreLevel_CslevelSoso:
    case PB3CreditScoreLevel_CslevelGood:
    case PB3CreditScoreLevel_CslevelVeryGood:
    case PB3CreditScoreLevel_CslevelExcellent:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CreditScorePrivilegeType

GPBEnumDescriptor *PB3CreditScorePrivilegeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CsptZero\000CsptFreeCharge20Percent\000CsptFre"
        "eCharge50Percent\000CsptFreeChargeAll\000";
    static const int32_t values[] = {
        PB3CreditScorePrivilegeType_CsptZero,
        PB3CreditScorePrivilegeType_CsptFreeCharge20Percent,
        PB3CreditScorePrivilegeType_CsptFreeCharge50Percent,
        PB3CreditScorePrivilegeType_CsptFreeChargeAll,
    };
    static const char *extraTextFormatInfo = "\002\001d\344\346\202\347\000\002d\344\346\202\347\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CreditScorePrivilegeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CreditScorePrivilegeType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CreditScorePrivilegeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CreditScorePrivilegeType_CsptZero:
    case PB3CreditScorePrivilegeType_CsptFreeCharge20Percent:
    case PB3CreditScorePrivilegeType_CsptFreeCharge50Percent:
    case PB3CreditScorePrivilegeType_CsptFreeChargeAll:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PlayerExpSource

GPBEnumDescriptor *PB3PlayerExpSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Normal\000Admin\000Flower\000SystemDeducted\000Black"
        "WhaleStore\000";
    static const int32_t values[] = {
        PB3PlayerExpSource_Normal,
        PB3PlayerExpSource_Admin,
        PB3PlayerExpSource_Flower,
        PB3PlayerExpSource_SystemDeducted,
        PB3PlayerExpSource_BlackWhaleStore,
    };
    static const char *extraTextFormatInfo = "\004\000\006\000\001\005\000\002\006\000\004\017\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PlayerExpSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PlayerExpSource_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PlayerExpSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PlayerExpSource_Normal:
    case PB3PlayerExpSource_Admin:
    case PB3PlayerExpSource_Flower:
    case PB3PlayerExpSource_SystemDeducted:
    case PB3PlayerExpSource_BlackWhaleStore:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SearchResultType

GPBEnumDescriptor *PB3SearchResultType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SrtZero\000SrtKocCmd\000";
    static const int32_t values[] = {
        PB3SearchResultType_SrtZero,
        PB3SearchResultType_SrtKocCmd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SearchResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SearchResultType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SearchResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SearchResultType_SrtZero:
    case PB3SearchResultType_SrtKocCmd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActGameCfgType

GPBEnumDescriptor *PB3ActGameCfgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AgctNull\000AgctRedEnvelope\000AgctRandomId2\000A"
        "gctIntimateCalendar\000AgctIntimateCultivat"
        "e\000AgctIntimateRank\000";
    static const int32_t values[] = {
        PB3ActGameCfgType_AgctNull,
        PB3ActGameCfgType_AgctRedEnvelope,
        PB3ActGameCfgType_AgctRandomId2,
        PB3ActGameCfgType_AgctIntimateCalendar,
        PB3ActGameCfgType_AgctIntimateCultivate,
        PB3ActGameCfgType_AgctIntimateRank,
    };
    static const char *extraTextFormatInfo = "\006\000d\204\000\001d\203\210\000\002d\206\203\000\003d\210\210\000\004d\210\211\000\005d\210\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActGameCfgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActGameCfgType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActGameCfgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActGameCfgType_AgctNull:
    case PB3ActGameCfgType_AgctRedEnvelope:
    case PB3ActGameCfgType_AgctRandomId2:
    case PB3ActGameCfgType_AgctIntimateCalendar:
    case PB3ActGameCfgType_AgctIntimateCultivate:
    case PB3ActGameCfgType_AgctIntimateRank:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActGameCfgSubType

GPBEnumDescriptor *PB3ActGameCfgSubType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AgctSubNull\000AgctSubCultivateTask\000AgctSub"
        "CultivateStore\000AgctSubCultivateHandbook\000";
    static const int32_t values[] = {
        PB3ActGameCfgSubType_AgctSubNull,
        PB3ActGameCfgSubType_AgctSubCultivateTask,
        PB3ActGameCfgSubType_AgctSubCultivateStore,
        PB3ActGameCfgSubType_AgctSubCultivateHandbook,
    };
    static const char *extraTextFormatInfo = "\004\000d\203\204\000\001d\203\211\204\000\002d\203\211\205\000\003d\203\211\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActGameCfgSubType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActGameCfgSubType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActGameCfgSubType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActGameCfgSubType_AgctSubNull:
    case PB3ActGameCfgSubType_AgctSubCultivateTask:
    case PB3ActGameCfgSubType_AgctSubCultivateStore:
    case PB3ActGameCfgSubType_AgctSubCultivateHandbook:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WeekCPSource

GPBEnumDescriptor *PB3WeekCPSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WcpsZero\000WcpsChatCp\000WcpsIm\000WcpsImList\000Wc"
        "psMatchCp\000";
    static const int32_t values[] = {
        PB3WeekCPSource_WcpsZero,
        PB3WeekCPSource_WcpsChatCp,
        PB3WeekCPSource_WcpsIm,
        PB3WeekCPSource_WcpsImList,
        PB3WeekCPSource_WcpsMatchCp,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WeekCPSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WeekCPSource_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WeekCPSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WeekCPSource_WcpsZero:
    case PB3WeekCPSource_WcpsChatCp:
    case PB3WeekCPSource_WcpsIm:
    case PB3WeekCPSource_WcpsImList:
    case PB3WeekCPSource_WcpsMatchCp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WeekCPInfoStatus

GPBEnumDescriptor *PB3WeekCPInfoStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WcpisZero\000WcpisInvited\000WcpisInCp\000WcpisCa"
        "nInvite\000WcpisNoEntrance\000";
    static const int32_t values[] = {
        PB3WeekCPInfoStatus_WcpisZero,
        PB3WeekCPInfoStatus_WcpisInvited,
        PB3WeekCPInfoStatus_WcpisInCp,
        PB3WeekCPInfoStatus_WcpisCanInvite,
        PB3WeekCPInfoStatus_WcpisNoEntrance,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WeekCPInfoStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WeekCPInfoStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WeekCPInfoStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WeekCPInfoStatus_WcpisZero:
    case PB3WeekCPInfoStatus_WcpisInvited:
    case PB3WeekCPInfoStatus_WcpisInCp:
    case PB3WeekCPInfoStatus_WcpisCanInvite:
    case PB3WeekCPInfoStatus_WcpisNoEntrance:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BlackWhaleModuleStyle

GPBEnumDescriptor *PB3BlackWhaleModuleStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BwmsZero\000BwmsHorizontal\000BwmsListCard\000";
    static const int32_t values[] = {
        PB3BlackWhaleModuleStyle_BwmsZero,
        PB3BlackWhaleModuleStyle_BwmsHorizontal,
        PB3BlackWhaleModuleStyle_BwmsListCard,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BlackWhaleModuleStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BlackWhaleModuleStyle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BlackWhaleModuleStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BlackWhaleModuleStyle_BwmsZero:
    case PB3BlackWhaleModuleStyle_BwmsHorizontal:
    case PB3BlackWhaleModuleStyle_BwmsListCard:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BlackWhaleItemType

GPBEnumDescriptor *PB3BlackWhaleItemType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BwitZero\000BwitCharmCard\000BwitWealthCard\000Bw"
        "itGift\000BwitEffect\000";
    static const int32_t values[] = {
        PB3BlackWhaleItemType_BwitZero,
        PB3BlackWhaleItemType_BwitCharmCard,
        PB3BlackWhaleItemType_BwitWealthCard,
        PB3BlackWhaleItemType_BwitGift,
        PB3BlackWhaleItemType_BwitEffect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BlackWhaleItemType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BlackWhaleItemType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BlackWhaleItemType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BlackWhaleItemType_BwitZero:
    case PB3BlackWhaleItemType_BwitCharmCard:
    case PB3BlackWhaleItemType_BwitWealthCard:
    case PB3BlackWhaleItemType_BwitGift:
    case PB3BlackWhaleItemType_BwitEffect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BlackWhaleLimitType

GPBEnumDescriptor *PB3BlackWhaleLimitType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BwltZero\000BwltNotLimit\000BwltEveryMonth\000Bwl"
        "tEveryQuarter\000BwltEveryYear\000";
    static const int32_t values[] = {
        PB3BlackWhaleLimitType_BwltZero,
        PB3BlackWhaleLimitType_BwltNotLimit,
        PB3BlackWhaleLimitType_BwltEveryMonth,
        PB3BlackWhaleLimitType_BwltEveryQuarter,
        PB3BlackWhaleLimitType_BwltEveryYear,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BlackWhaleLimitType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BlackWhaleLimitType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BlackWhaleLimitType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BlackWhaleLimitType_BwltZero:
    case PB3BlackWhaleLimitType_BwltNotLimit:
    case PB3BlackWhaleLimitType_BwltEveryMonth:
    case PB3BlackWhaleLimitType_BwltEveryQuarter:
    case PB3BlackWhaleLimitType_BwltEveryYear:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IMCustomType

GPBEnumDescriptor *PB3IMCustomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImctZero\000ImctBindWeekCp\000ImctWeekCpTaskCo"
        "mplete\000ImctWeekCpAllTaskComplete\000ImctWee"
        "kCpRefuce\000ImctWeekCpTaskFailed\000ImctWeekC"
        "pInvite\000ImctBistroEnd\000ImctBistroCancel\000I"
        "mctBistroInvite\000ImctBistroReject\000ImctMat"
        "chWeekCpInvite\000ImctWeekCpInviteExpire\000Im"
        "ctMatchWeekCpInviteSendSuccess\000ImctCpGui"
        "deReject\000ImctCpGuideCancel\000ImctCpGuideCo"
        "uple\000ImctCpGuideTimeout\000ImctCpGuideInvit"
        "e\000ImctCommonText\000";
    static const int32_t values[] = {
        PB3IMCustomType_ImctZero,
        PB3IMCustomType_ImctBindWeekCp,
        PB3IMCustomType_ImctWeekCpTaskComplete,
        PB3IMCustomType_ImctWeekCpAllTaskComplete,
        PB3IMCustomType_ImctWeekCpRefuce,
        PB3IMCustomType_ImctWeekCpTaskFailed,
        PB3IMCustomType_ImctWeekCpInvite,
        PB3IMCustomType_ImctBistroEnd,
        PB3IMCustomType_ImctBistroCancel,
        PB3IMCustomType_ImctBistroInvite,
        PB3IMCustomType_ImctBistroReject,
        PB3IMCustomType_ImctMatchWeekCpInvite,
        PB3IMCustomType_ImctWeekCpInviteExpire,
        PB3IMCustomType_ImctMatchWeekCpInviteSendSuccess,
        PB3IMCustomType_ImctCpGuideReject,
        PB3IMCustomType_ImctCpGuideCancel,
        PB3IMCustomType_ImctCpGuideCouple,
        PB3IMCustomType_ImctCpGuideTimeout,
        PB3IMCustomType_ImctCpGuideInvite,
        PB3IMCustomType_ImctCommonText,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMCustomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMCustomType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMCustomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMCustomType_ImctZero:
    case PB3IMCustomType_ImctBindWeekCp:
    case PB3IMCustomType_ImctWeekCpTaskComplete:
    case PB3IMCustomType_ImctWeekCpAllTaskComplete:
    case PB3IMCustomType_ImctWeekCpRefuce:
    case PB3IMCustomType_ImctWeekCpTaskFailed:
    case PB3IMCustomType_ImctWeekCpInvite:
    case PB3IMCustomType_ImctBistroEnd:
    case PB3IMCustomType_ImctBistroCancel:
    case PB3IMCustomType_ImctBistroInvite:
    case PB3IMCustomType_ImctBistroReject:
    case PB3IMCustomType_ImctMatchWeekCpInvite:
    case PB3IMCustomType_ImctWeekCpInviteExpire:
    case PB3IMCustomType_ImctMatchWeekCpInviteSendSuccess:
    case PB3IMCustomType_ImctCpGuideReject:
    case PB3IMCustomType_ImctCpGuideCancel:
    case PB3IMCustomType_ImctCpGuideCouple:
    case PB3IMCustomType_ImctCpGuideTimeout:
    case PB3IMCustomType_ImctCpGuideInvite:
    case PB3IMCustomType_ImctCommonText:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3HighlightGiftLevel

GPBEnumDescriptor *PB3HighlightGiftLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "HlglZero\000HlglN\000HlglR\000HlglSr\000HlglSsr\000Hlgl"
        "Ur\000";
    static const int32_t values[] = {
        PB3HighlightGiftLevel_HlglZero,
        PB3HighlightGiftLevel_HlglN,
        PB3HighlightGiftLevel_HlglR,
        PB3HighlightGiftLevel_HlglSr,
        PB3HighlightGiftLevel_HlglSsr,
        PB3HighlightGiftLevel_HlglUr,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3HighlightGiftLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3HighlightGiftLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3HighlightGiftLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3HighlightGiftLevel_HlglZero:
    case PB3HighlightGiftLevel_HlglN:
    case PB3HighlightGiftLevel_HlglR:
    case PB3HighlightGiftLevel_HlglSr:
    case PB3HighlightGiftLevel_HlglSsr:
    case PB3HighlightGiftLevel_HlglUr:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PublicSettleAddType

GPBEnumDescriptor *PB3PublicSettleAddType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PsatNone\000PsatAdmin\000PsatPerson\000";
    static const int32_t values[] = {
        PB3PublicSettleAddType_PsatNone,
        PB3PublicSettleAddType_PsatAdmin,
        PB3PublicSettleAddType_PsatPerson,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PublicSettleAddType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PublicSettleAddType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PublicSettleAddType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PublicSettleAddType_PsatNone:
    case PB3PublicSettleAddType_PsatAdmin:
    case PB3PublicSettleAddType_PsatPerson:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomTopRightCornerLabelType

GPBEnumDescriptor *PB3RoomTopRightCornerLabelType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtrcltNone\000RtrcltRank\000RtrcltLove\000RtrcltT"
        "imeLimit\000RtrcltProgressBar\000";
    static const int32_t values[] = {
        PB3RoomTopRightCornerLabelType_RtrcltNone,
        PB3RoomTopRightCornerLabelType_RtrcltRank,
        PB3RoomTopRightCornerLabelType_RtrcltLove,
        PB3RoomTopRightCornerLabelType_RtrcltTimeLimit,
        PB3RoomTopRightCornerLabelType_RtrcltProgressBar,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomTopRightCornerLabelType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomTopRightCornerLabelType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomTopRightCornerLabelType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomTopRightCornerLabelType_RtrcltNone:
    case PB3RoomTopRightCornerLabelType_RtrcltRank:
    case PB3RoomTopRightCornerLabelType_RtrcltLove:
    case PB3RoomTopRightCornerLabelType_RtrcltTimeLimit:
    case PB3RoomTopRightCornerLabelType_RtrcltProgressBar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WeekTravelSource

GPBEnumDescriptor *PB3WeekTravelSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WtsZero\000WtsRoom\000WtsIm\000";
    static const int32_t values[] = {
        PB3WeekTravelSource_WtsZero,
        PB3WeekTravelSource_WtsRoom,
        PB3WeekTravelSource_WtsIm,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WeekTravelSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WeekTravelSource_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WeekTravelSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WeekTravelSource_WtsZero:
    case PB3WeekTravelSource_WtsRoom:
    case PB3WeekTravelSource_WtsIm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WeekTravelInviteStatus

GPBEnumDescriptor *PB3WeekTravelInviteStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WtisNone\000WtisCanInvite\000WtisInviting\000Wtis"
        "Reject\000WtisOngoing\000WtisFinished\000WtisNoIn"
        "viteTimes\000WtisBlackList\000WtisNoEntrance\000W"
        "tisInviteExpired\000WtisInWeekCp\000WtisOutOfR"
        "eceive\000WtisWealthLimit\000";
    static const int32_t values[] = {
        PB3WeekTravelInviteStatus_WtisNone,
        PB3WeekTravelInviteStatus_WtisCanInvite,
        PB3WeekTravelInviteStatus_WtisInviting,
        PB3WeekTravelInviteStatus_WtisReject,
        PB3WeekTravelInviteStatus_WtisOngoing,
        PB3WeekTravelInviteStatus_WtisFinished,
        PB3WeekTravelInviteStatus_WtisNoInviteTimes,
        PB3WeekTravelInviteStatus_WtisBlackList,
        PB3WeekTravelInviteStatus_WtisNoEntrance,
        PB3WeekTravelInviteStatus_WtisInviteExpired,
        PB3WeekTravelInviteStatus_WtisInWeekCp,
        PB3WeekTravelInviteStatus_WtisOutOfReceive,
        PB3WeekTravelInviteStatus_WtisWealthLimit,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WeekTravelInviteStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WeekTravelInviteStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WeekTravelInviteStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WeekTravelInviteStatus_WtisNone:
    case PB3WeekTravelInviteStatus_WtisCanInvite:
    case PB3WeekTravelInviteStatus_WtisInviting:
    case PB3WeekTravelInviteStatus_WtisReject:
    case PB3WeekTravelInviteStatus_WtisOngoing:
    case PB3WeekTravelInviteStatus_WtisFinished:
    case PB3WeekTravelInviteStatus_WtisNoInviteTimes:
    case PB3WeekTravelInviteStatus_WtisBlackList:
    case PB3WeekTravelInviteStatus_WtisNoEntrance:
    case PB3WeekTravelInviteStatus_WtisInviteExpired:
    case PB3WeekTravelInviteStatus_WtisInWeekCp:
    case PB3WeekTravelInviteStatus_WtisOutOfReceive:
    case PB3WeekTravelInviteStatus_WtisWealthLimit:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WeekTravelExpSource

GPBEnumDescriptor *PB3WeekTravelExpSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CommonWtesNone\000CommonWtesTask\000CommonWtes"
        "Admin\000";
    static const int32_t values[] = {
        PB3WeekTravelExpSource_CommonWtesNone,
        PB3WeekTravelExpSource_CommonWtesTask,
        PB3WeekTravelExpSource_CommonWtesAdmin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WeekTravelExpSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WeekTravelExpSource_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WeekTravelExpSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WeekTravelExpSource_CommonWtesNone:
    case PB3WeekTravelExpSource_CommonWtesTask:
    case PB3WeekTravelExpSource_CommonWtesAdmin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CpChatHealLevel

GPBEnumDescriptor *PB3CpChatHealLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CchlNone\000CchlLevelS\000CchlLevelA\000CchlLevel"
        "B\000CchlLevelC\000";
    static const int32_t values[] = {
        PB3CpChatHealLevel_CchlNone,
        PB3CpChatHealLevel_CchlLevelS,
        PB3CpChatHealLevel_CchlLevelA,
        PB3CpChatHealLevel_CchlLevelB,
        PB3CpChatHealLevel_CchlLevelC,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CpChatHealLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CpChatHealLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CpChatHealLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CpChatHealLevel_CchlNone:
    case PB3CpChatHealLevel_CchlLevelS:
    case PB3CpChatHealLevel_CchlLevelA:
    case PB3CpChatHealLevel_CchlLevelB:
    case PB3CpChatHealLevel_CchlLevelC:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NoticeStyleType

GPBEnumDescriptor *PB3NoticeStyleType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000ActivityDragonBoat\000";
    static const int32_t values[] = {
        PB3NoticeStyleType_None,
        PB3NoticeStyleType_ActivityDragonBoat,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NoticeStyleType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NoticeStyleType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NoticeStyleType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NoticeStyleType_None:
    case PB3NoticeStyleType_ActivityDragonBoat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomTopRightCornerLabelFiledType

GPBEnumDescriptor *PB3RoomTopRightCornerLabelFiledType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtrclftNone\000RtrclftCurrentNum\000RtrclftGoa"
        "lNum\000RtrclftNumberContent\000";
    static const int32_t values[] = {
        PB3RoomTopRightCornerLabelFiledType_RtrclftNone,
        PB3RoomTopRightCornerLabelFiledType_RtrclftCurrentNum,
        PB3RoomTopRightCornerLabelFiledType_RtrclftGoalNum,
        PB3RoomTopRightCornerLabelFiledType_RtrclftNumberContent,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomTopRightCornerLabelFiledType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomTopRightCornerLabelFiledType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomTopRightCornerLabelFiledType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomTopRightCornerLabelFiledType_RtrclftNone:
    case PB3RoomTopRightCornerLabelFiledType_RtrclftCurrentNum:
    case PB3RoomTopRightCornerLabelFiledType_RtrclftGoalNum:
    case PB3RoomTopRightCornerLabelFiledType_RtrclftNumberContent:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3OnlineStatus

@implementation PB3OnlineStatus

@dynamic state;
@dynamic roomId;

typedef struct PB3OnlineStatus__storage_ {
  uint32_t _has_storage_[1];
  PB3OnlineStateType state;
  int64_t roomId;
} PB3OnlineStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = PB3OnlineStateType_EnumDescriptor,
        .number = PB3OnlineStatus_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OnlineStatus__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnlineStatus_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OnlineStatus__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OnlineStatus class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OnlineStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OnlineStatus_State_RawValue(PB3OnlineStatus *message) {
  GPBDescriptor *descriptor = [PB3OnlineStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OnlineStatus_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OnlineStatus_State_RawValue(PB3OnlineStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OnlineStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OnlineStatus_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Player

@implementation PB3Player

@dynamic id_p;
@dynamic nickname;
@dynamic sex;
@dynamic id2;
@dynamic icon;
@dynamic flags;
@dynamic flags2;
@dynamic charm;
@dynamic charmLevel;
@dynamic wealthLevel;
@dynamic wealth;
@dynamic onlineExp;
@dynamic createAt;
@dynamic hasPasswd;
@dynamic isPhone;
@dynamic flowerLevel;
@dynamic flower;
@dynamic isOnline;
@dynamic flagsKv, flagsKv_Count;
@dynamic newWealth;
@dynamic isDelete;
@dynamic authInfoArray, authInfoArray_Count;
@dynamic guardNum;
@dynamic intimateFansOnOff;
@dynamic havePlaylist;
@dynamic channelListArray, channelListArray_Count;
@dynamic needChangeSex;
@dynamic callCondition;
@dynamic fishCharm;
@dynamic fishCharmLevel;
@dynamic fishWealth;
@dynamic fishWealthLevel;
@dynamic flags3;

typedef struct PB3Player__storage_ {
  uint32_t _has_storage_[2];
  PB3SexType sex;
  int32_t wealth;
  uint32_t onlineExp;
  uint32_t createAt;
  int32_t charmLevel;
  int32_t wealthLevel;
  int32_t flowerLevel;
  int32_t guardNum;
  int32_t fishCharmLevel;
  int32_t fishWealthLevel;
  NSString *nickname;
  NSString *icon;
  GPBInt32Int32Dictionary *flagsKv;
  NSMutableArray *authInfoArray;
  GPBEnumArray *channelListArray;
  NSString *callCondition;
  int64_t id_p;
  int64_t id2;
  int64_t flags;
  int64_t charm;
  int64_t flags2;
  int64_t flower;
  int64_t newWealth;
  int64_t fishCharm;
  int64_t fishWealth;
  int64_t flags3;
} PB3Player__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Player__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Player__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3Player_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Player__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Id2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Player__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Player__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Flags,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Player__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "charm",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Charm,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Player__storage_, charm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Wealth,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3Player__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "onlineExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_OnlineExp,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3Player__storage_, onlineExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_CreateAt,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3Player__storage_, createAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasPasswd",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_HasPasswd,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_IsPhone,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_CharmLevel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Player__storage_, charmLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flags2",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Flags2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Player__storage_, flags2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_WealthLevel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3Player__storage_, wealthLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flowerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_FlowerLevel,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3Player__storage_, flowerLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flower",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Flower,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3Player__storage_, flower),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isOnline",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_IsOnline,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "flagsKv",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_FlagsKv,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Player__storage_, flagsKv),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newWealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_NewWealth,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3Player__storage_, newWealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isDelete",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_IsDelete,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "authInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AuthInfo),
        .number = PB3Player_FieldNumber_AuthInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Player__storage_, authInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "guardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_GuardNum,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3Player__storage_, guardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "intimateFansOnOff",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_IntimateFansOnOff,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "havePlaylist",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_HavePlaylist,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "channelListArray",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3Player_FieldNumber_ChannelListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Player__storage_, channelListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "needChangeSex",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_NeedChangeSex,
        .hasIndex = 29,
        .offset = 30,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "callCondition",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_CallCondition,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3Player__storage_, callCondition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fishCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_FishCharm,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PB3Player__storage_, fishCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishCharmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_FishCharmLevel,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(PB3Player__storage_, fishCharmLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "fishWealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_FishWealth,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(PB3Player__storage_, fishWealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishWealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_FishWealthLevel,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(PB3Player__storage_, fishWealthLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "flags3",
        .dataTypeSpecific.className = NULL,
        .number = PB3Player_FieldNumber_Flags3,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(PB3Player__storage_, flags3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Player class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Player__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\013\010\000\017\n\000 \013\000!\013\000/\004\252\0001\004\253\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Player_Sex_RawValue(PB3Player *message) {
  GPBDescriptor *descriptor = [PB3Player descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Player_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Player_Sex_RawValue(PB3Player *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Player descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Player_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CaijiPlayer

@implementation PB3CaijiPlayer

@dynamic id_p;
@dynamic name;
@dynamic icon;
@dynamic wealth;
@dynamic charm;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic sex;

typedef struct PB3CaijiPlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealth;
  int32_t wealthLevel;
  int32_t charmLevel;
  PB3SexType sex;
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t charm;
} PB3CaijiPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CaijiPlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CaijiPlayer_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3CaijiPlayer_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3CaijiPlayer_FieldNumber_Wealth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "charm",
        .dataTypeSpecific.className = NULL,
        .number = PB3CaijiPlayer_FieldNumber_Charm,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, charm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3CaijiPlayer_FieldNumber_WealthLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3CaijiPlayer_FieldNumber_CharmLevel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3CaijiPlayer_FieldNumber_Sex,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CaijiPlayer__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CaijiPlayer class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CaijiPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CaijiPlayer_Sex_RawValue(PB3CaijiPlayer *message) {
  GPBDescriptor *descriptor = [PB3CaijiPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CaijiPlayer_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CaijiPlayer_Sex_RawValue(PB3CaijiPlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CaijiPlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CaijiPlayer_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UserInfo

@implementation PB3UserInfo

@dynamic userId;
@dynamic city;
@dynamic signature;
@dynamic birthday;
@dynamic intimateSlot;
@dynamic mind;
@dynamic shortIdSlot;
@dynamic constellation;
@dynamic voiceURL;
@dynamic age;
@dynamic voiceTime;
@dynamic genderNum;
@dynamic isVoiceTag;
@dynamic constellationText;
@dynamic sex;
@dynamic cubismIcon;
@dynamic genderPattern;
@dynamic cubismIconWidth;
@dynamic cubismIconHeight;

typedef struct PB3UserInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateSlot;
  int32_t shortIdSlot;
  int32_t age;
  int32_t voiceTime;
  int32_t genderNum;
  PB3SexType sex;
  PB3GenderPattern genderPattern;
  NSString *city;
  NSString *signature;
  NSString *birthday;
  NSString *mind;
  NSString *constellation;
  NSString *voiceURL;
  NSString *constellationText;
  NSString *cubismIcon;
  int64_t userId;
  int64_t cubismIconWidth;
  int64_t cubismIconHeight;
} PB3UserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_City,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthday",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_Birthday,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, birthday),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intimateSlot",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_IntimateSlot,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, intimateSlot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "mind",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_Mind,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, mind),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortIdSlot",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_ShortIdSlot,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, shortIdSlot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "constellation",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_Constellation,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, constellation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_VoiceURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, voiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_Age,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_VoiceTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, voiceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "genderNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_GenderNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, genderNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isVoiceTag",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_IsVoiceTag,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "constellationText",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_ConstellationText,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, constellationText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3UserInfo_FieldNumber_Sex,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cubismIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_CubismIcon,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, cubismIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "genderPattern",
        .dataTypeSpecific.enumDescFunc = PB3GenderPattern_EnumDescriptor,
        .number = PB3UserInfo_FieldNumber_GenderPattern,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, genderPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cubismIconWidth",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_CubismIconWidth,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, cubismIconWidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cubismIconHeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfo_FieldNumber_CubismIconHeight,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3UserInfo__storage_, cubismIconHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\t\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UserInfo_Sex_RawValue(PB3UserInfo *message) {
  GPBDescriptor *descriptor = [PB3UserInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfo_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserInfo_Sex_RawValue(PB3UserInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfo_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserInfo_GenderPattern_RawValue(PB3UserInfo *message) {
  GPBDescriptor *descriptor = [PB3UserInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfo_FieldNumber_GenderPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserInfo_GenderPattern_RawValue(PB3UserInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfo_FieldNumber_GenderPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlayerInfo

@implementation PB3PlayerInfo

@dynamic hasPlayer, player;
@dynamic hasUser, user;
@dynamic effectArray, effectArray_Count;
@dynamic certifsArray, certifsArray_Count;
@dynamic hasClan, clan;
@dynamic fansNum;
@dynamic roomId;
@dynamic friendAlias;
@dynamic charmWeekRank;
@dynamic wealthWeekRank;
@dynamic hasBillPlayer, billPlayer;
@dynamic caijiId;
@dynamic playerGiftRankArray, playerGiftRankArray_Count;
@dynamic roomName;
@dynamic roomIcon;
@dynamic showRoomInfo;
@dynamic friendType;
@dynamic isOnChair;
@dynamic logoutAt;
@dynamic isMask;
@dynamic imTimes;
@dynamic status;
@dynamic giftId;
@dynamic hasPk, pk;
@dynamic hasGiftCollectLevel, giftCollectLevel;
@dynamic ipArea;
@dynamic hasImCpDialogInfo, imCpDialogInfo;
@dynamic isBlockUser;
@dynamic hasWeekCp, weekCp;
@dynamic bistroLabel;
@dynamic hasLightUpData, lightUpData;
@dynamic ifCpGuide;

typedef struct PB3PlayerInfo__storage_ {
  uint32_t _has_storage_[2];
  int32_t fansNum;
  int32_t charmWeekRank;
  int32_t wealthWeekRank;
  int32_t friendType;
  int32_t imTimes;
  PB3IMAutoChatStatus status;
  int32_t giftId;
  PB3Player *player;
  PB3UserInfo *user;
  NSMutableArray *effectArray;
  NSMutableArray *certifsArray;
  PB3ClanInfo *clan;
  NSString *friendAlias;
  PB3BillPlayerCard *billPlayer;
  NSMutableArray *playerGiftRankArray;
  NSString *roomName;
  NSString *roomIcon;
  PB3PkData *pk;
  PB3GiftCollectLevelInfo *giftCollectLevel;
  NSString *ipArea;
  PB3IMCPDialog *imCpDialogInfo;
  PB3WeekCPInfo *weekCp;
  NSString *bistroLabel;
  PB3LightUpGiftWall *lightUpData;
  int64_t roomId;
  int64_t caijiId;
  int64_t logoutAt;
} PB3PlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3PlayerInfo_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserInfo),
        .number = PB3PlayerInfo_FieldNumber_User,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Effect),
        .number = PB3PlayerInfo_FieldNumber_EffectArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, effectArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "certifsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Certif),
        .number = PB3PlayerInfo_FieldNumber_CertifsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, certifsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clan",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClanInfo),
        .number = PB3PlayerInfo_FieldNumber_Clan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, clan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_FansNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, fansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_RoomId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendAlias",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_FriendAlias,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, friendAlias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "charmWeekRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_CharmWeekRank,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, charmWeekRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealthWeekRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_WealthWeekRank,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, wealthWeekRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "billPlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayerCard),
        .number = PB3PlayerInfo_FieldNumber_BillPlayer,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, billPlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "caijiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_CaijiId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, caijiId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerGiftRankArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerGiftRank),
        .number = PB3PlayerInfo_FieldNumber_PlayerGiftRankArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, playerGiftRankArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_RoomName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_RoomIcon,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, roomIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showRoomInfo",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_ShowRoomInfo,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "friendType",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_FriendType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, friendType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isOnChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_IsOnChair,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "logoutAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_LogoutAt,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, logoutAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isMask",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_IsMask,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "imTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_ImTimes,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, imTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3IMAutoChatStatus_EnumDescriptor,
        .number = PB3PlayerInfo_FieldNumber_Status,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_GiftId,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pk",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PkData),
        .number = PB3PlayerInfo_FieldNumber_Pk,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, pk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftCollectLevel",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftCollectLevelInfo),
        .number = PB3PlayerInfo_FieldNumber_GiftCollectLevel,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, giftCollectLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ipArea",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_IpArea,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, ipArea),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imCpDialogInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IMCPDialog),
        .number = PB3PlayerInfo_FieldNumber_ImCpDialogInfo,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, imCpDialogInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isBlockUser",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_IsBlockUser,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "weekCp",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WeekCPInfo),
        .number = PB3PlayerInfo_FieldNumber_WeekCp,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, weekCp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bistroLabel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_BistroLabel,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, bistroLabel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lightUpData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LightUpGiftWall),
        .number = PB3PlayerInfo_FieldNumber_LightUpData,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3PlayerInfo__storage_, lightUpData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ifCpGuide",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfo_FieldNumber_IfCpGuide,
        .hasIndex = 32,
        .offset = 33,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerInfo_Status_RawValue(PB3PlayerInfo *message) {
  GPBDescriptor *descriptor = [PB3PlayerInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerInfo_Status_RawValue(PB3PlayerInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LightUpGiftWall

@implementation PB3LightUpGiftWall

@dynamic illuminatedNum;
@dynamic notLit;
@dynamic rule;
@dynamic lightUpGiftItemListArray, lightUpGiftItemListArray_Count;

typedef struct PB3LightUpGiftWall__storage_ {
  uint32_t _has_storage_[1];
  NSString *rule;
  NSMutableArray *lightUpGiftItemListArray;
  int64_t illuminatedNum;
  int64_t notLit;
} PB3LightUpGiftWall__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "illuminatedNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LightUpGiftWall_FieldNumber_IlluminatedNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LightUpGiftWall__storage_, illuminatedNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "notLit",
        .dataTypeSpecific.className = NULL,
        .number = PB3LightUpGiftWall_FieldNumber_NotLit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LightUpGiftWall__storage_, notLit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rule",
        .dataTypeSpecific.className = NULL,
        .number = PB3LightUpGiftWall_FieldNumber_Rule,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LightUpGiftWall__storage_, rule),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lightUpGiftItemListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LightUpGiftItem),
        .number = PB3LightUpGiftWall_FieldNumber_LightUpGiftItemListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LightUpGiftWall__storage_, lightUpGiftItemListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LightUpGiftWall class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LightUpGiftWall__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LightUpGiftItem

@implementation PB3LightUpGiftItem

@dynamic giftId;
@dynamic giftIcon;

typedef struct PB3LightUpGiftItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  NSString *giftIcon;
} PB3LightUpGiftItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LightUpGiftItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LightUpGiftItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3LightUpGiftItem_FieldNumber_GiftIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LightUpGiftItem__storage_, giftIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LightUpGiftItem class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LightUpGiftItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IMCPDialog

@implementation PB3IMCPDialog

@dynamic card;
@dynamic cardBtn;
@dynamic topDialogTitle;
@dynamic topDialogSubtitle;

typedef struct PB3IMCPDialog__storage_ {
  uint32_t _has_storage_[1];
  NSString *card;
  NSString *cardBtn;
  NSString *topDialogTitle;
  NSString *topDialogSubtitle;
} PB3IMCPDialog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "card",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMCPDialog_FieldNumber_Card,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IMCPDialog__storage_, card),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardBtn",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMCPDialog_FieldNumber_CardBtn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IMCPDialog__storage_, cardBtn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topDialogTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMCPDialog_FieldNumber_TopDialogTitle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IMCPDialog__storage_, topDialogTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topDialogSubtitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMCPDialog_FieldNumber_TopDialogSubtitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IMCPDialog__storage_, topDialogSubtitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMCPDialog class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMCPDialog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PkData

@implementation PB3PkData

@dynamic rank;
@dynamic winRate;
@dynamic winTimes;

typedef struct PB3PkData__storage_ {
  uint32_t _has_storage_[1];
  int32_t rank;
  int32_t winTimes;
  NSString *winRate;
} PB3PkData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkData_FieldNumber_Rank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PkData__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "winRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkData_FieldNumber_WinRate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PkData__storage_, winRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "winTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkData_FieldNumber_WinTimes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PkData__storage_, winTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PkData class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PkData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerGiftRank

@implementation PB3PlayerGiftRank

@dynamic giftId;
@dynamic giftIcon;
@dynamic giftIconPc;
@dynamic ranking;
@dynamic giftName;
@dynamic weight;

typedef struct PB3PlayerGiftRank__storage_ {
  uint32_t _has_storage_[1];
  int32_t ranking;
  int32_t weight;
  NSString *giftIcon;
  NSString *giftIconPc;
  NSString *giftName;
  int64_t giftId;
} PB3PlayerGiftRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerGiftRank_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerGiftRank__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerGiftRank_FieldNumber_GiftIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerGiftRank__storage_, giftIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftIconPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerGiftRank_FieldNumber_GiftIconPc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerGiftRank__storage_, giftIconPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ranking",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerGiftRank_FieldNumber_Ranking,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerGiftRank__storage_, ranking),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerGiftRank_FieldNumber_GiftName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerGiftRank__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerGiftRank_FieldNumber_Weight,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerGiftRank__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerGiftRank class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerGiftRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftCollectLevelInfo

@implementation PB3GiftCollectLevelInfo

@dynamic level;
@dynamic levelIcon;

typedef struct PB3GiftCollectLevelInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  NSString *levelIcon;
} PB3GiftCollectLevelInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectLevelInfo_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftCollectLevelInfo__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftCollectLevelInfo_FieldNumber_LevelIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftCollectLevelInfo__storage_, levelIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftCollectLevelInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftCollectLevelInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BagItem

@implementation PB3BagItem

@dynamic giftId;
@dynamic amount;
@dynamic cteateAt;
@dynamic hasValidGift, validGift;

typedef struct PB3BagItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  uint32_t amount;
  NSString *cteateAt;
  PB3GiftValidDate *validGift;
} PB3BagItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BagItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BagItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB3BagItem_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BagItem__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cteateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3BagItem_FieldNumber_CteateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BagItem__storage_, cteateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validGift",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftValidDate),
        .number = PB3BagItem_FieldNumber_ValidGift,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BagItem__storage_, validGift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BagItem class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BagItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftValidDate

@implementation PB3GiftValidDate

@dynamic amount;
@dynamic validDate;

typedef struct PB3GiftValidDate__storage_ {
  uint32_t _has_storage_[1];
  uint32_t amount;
  int64_t validDate;
} PB3GiftValidDate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftValidDate_FieldNumber_Amount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftValidDate__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "validDate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftValidDate_FieldNumber_ValidDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftValidDate__storage_, validDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftValidDate class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftValidDate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AgodaKey

@implementation PB3AgodaKey

@dynamic permissionKey;

typedef struct PB3AgodaKey__storage_ {
  uint32_t _has_storage_[1];
  NSString *permissionKey;
} PB3AgodaKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "permissionKey",
        .dataTypeSpecific.className = NULL,
        .number = PB3AgodaKey_FieldNumber_PermissionKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AgodaKey__storage_, permissionKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AgodaKey class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AgodaKey__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OnOffStatus

@implementation PB3OnOffStatus

@dynamic status;
@dynamic type;

typedef struct PB3OnOffStatus__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  PB3OnOffType type;
} PB3OnOffStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnOffStatus_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OnOffStatus__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3OnOffType_EnumDescriptor,
        .number = PB3OnOffStatus_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OnOffStatus__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OnOffStatus class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OnOffStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OnOffStatus_Type_RawValue(PB3OnOffStatus *message) {
  GPBDescriptor *descriptor = [PB3OnOffStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OnOffStatus_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OnOffStatus_Type_RawValue(PB3OnOffStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OnOffStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OnOffStatus_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IndexTips

@implementation PB3IndexTips

@dynamic id_p;
@dynamic color;
@dynamic URL;
@dynamic msg;
@dynamic roomDisplay;

typedef struct PB3IndexTips__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *color;
  NSString *URL;
  NSString *msg;
} PB3IndexTips__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexTips_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IndexTips__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "color",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexTips_FieldNumber_Color,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IndexTips__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexTips_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IndexTips__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexTips_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IndexTips__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomDisplay",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexTips_FieldNumber_RoomDisplay,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IndexTips class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IndexTips__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IndexTipRooms

@implementation PB3IndexTipRooms

@dynamic roomId;
@dynamic tipId;

typedef struct PB3IndexTipRooms__storage_ {
  uint32_t _has_storage_[1];
  int32_t tipId;
  int64_t roomId;
} PB3IndexTipRooms__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexTipRooms_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IndexTipRooms__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tipId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexTipRooms_FieldNumber_TipId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IndexTipRooms__storage_, tipId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IndexTipRooms class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IndexTipRooms__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomIndexConfig

@implementation PB3RoomIndexConfig

@dynamic roomNums;
@dynamic hasIndexTips, indexTips;

typedef struct PB3RoomIndexConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomNums;
  PB3IndexTips *indexTips;
} PB3RoomIndexConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomNums",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomIndexConfig_FieldNumber_RoomNums,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomIndexConfig__storage_, roomNums),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "indexTips",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IndexTips),
        .number = PB3RoomIndexConfig_FieldNumber_IndexTips,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomIndexConfig__storage_, indexTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomIndexConfig class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomIndexConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchPlayerEntry

@implementation PB3SearchPlayerEntry

@dynamic id_p;
@dynamic id2;
@dynamic nickname;
@dynamic sex;
@dynamic icon;
@dynamic charm;
@dynamic charmLevel;
@dynamic wealth;
@dynamic wealthlEvel;
@dynamic online;
@dynamic roomId;
@dynamic hasPasswd;
@dynamic authInfoListArray, authInfoListArray_Count;
@dynamic roomName;
@dynamic badgeURL;
@dynamic isBlockUser;
@dynamic playerRoomHasPasswd;
@dynamic resultType;

typedef struct PB3SearchPlayerEntry__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t charmLevel;
  int32_t wealthlEvel;
  PB3SearchResultType resultType;
  NSString *nickname;
  NSString *icon;
  NSMutableArray *authInfoListArray;
  NSString *roomName;
  NSString *badgeURL;
  int64_t id_p;
  int64_t id2;
  int64_t charm;
  int64_t wealth;
  int64_t roomId;
} PB3SearchPlayerEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_Nickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3SearchPlayerEntry_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "charm",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_Charm,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, charm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_CharmLevel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_Wealth,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealthlEvel",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_WealthlEvel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, wealthlEvel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "online",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_Online,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_RoomId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "hasPasswd",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_HasPasswd,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "authInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AuthInfo),
        .number = PB3SearchPlayerEntry_FieldNumber_AuthInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, authInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_RoomName,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "badgeURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_BadgeURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, badgeURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isBlockUser",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_IsBlockUser,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "playerRoomHasPasswd",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayerEntry_FieldNumber_PlayerRoomHasPasswd,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "resultType",
        .dataTypeSpecific.enumDescFunc = PB3SearchResultType_EnumDescriptor,
        .number = PB3SearchPlayerEntry_FieldNumber_ResultType,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3SearchPlayerEntry__storage_, resultType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchPlayerEntry class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchPlayerEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\020\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SearchPlayerEntry_Sex_RawValue(PB3SearchPlayerEntry *message) {
  GPBDescriptor *descriptor = [PB3SearchPlayerEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchPlayerEntry_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SearchPlayerEntry_Sex_RawValue(PB3SearchPlayerEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SearchPlayerEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchPlayerEntry_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SearchPlayerEntry_ResultType_RawValue(PB3SearchPlayerEntry *message) {
  GPBDescriptor *descriptor = [PB3SearchPlayerEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchPlayerEntry_FieldNumber_ResultType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SearchPlayerEntry_ResultType_RawValue(PB3SearchPlayerEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SearchPlayerEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SearchPlayerEntry_FieldNumber_ResultType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IndexEntry

@implementation PB3IndexEntry

@dynamic id_p;
@dynamic type;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic online;
@dynamic hasPasswd;
@dynamic isShow;
@dynamic category;
@dynamic pattern;
@dynamic detailsImg;
@dynamic flags;
@dynamic rank;
@dynamic isTop;
@dynamic tjWord;
@dynamic fans;
@dynamic roomId;
@dynamic highQualityOnline;
@dynamic labelURL;
@dynamic heat;
@dynamic decorateArray, decorateArray_Count;
@dynamic isBlockUser;
@dynamic resultType;

typedef struct PB3IndexEntry__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomType type;
  uint32_t online;
  int32_t isShow;
  int32_t category;
  int32_t pattern;
  uint32_t flags;
  int32_t highQualityOnline;
  int32_t heat;
  PB3SearchResultType resultType;
  NSString *name;
  NSString *icon;
  NSString *detailsImg;
  NSString *tjWord;
  NSString *labelURL;
  NSMutableArray *decorateArray;
  int64_t id_p;
  int64_t id2;
  int64_t rank;
  int64_t fans;
  int64_t roomId;
} PB3IndexEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RoomType_EnumDescriptor,
        .number = PB3IndexEntry_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Id2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "online",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Online,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, online),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasPasswd",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_HasPasswd,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_IsShow,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, isShow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Category,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Pattern,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, pattern),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "detailsImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_DetailsImg,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, detailsImg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Flags,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Rank,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isTop",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_IsTop,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tjWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_TjWord,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, tjWord),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fans",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Fans,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, fans),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_RoomId,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "highQualityOnline",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_HighQualityOnline,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, highQualityOnline),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "labelURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_LabelURL,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, labelURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "heat",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_Heat,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, heat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "decorateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DecorateSignFrame),
        .number = PB3IndexEntry_FieldNumber_DecorateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, decorateArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isBlockUser",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexEntry_FieldNumber_IsBlockUser,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "resultType",
        .dataTypeSpecific.enumDescFunc = PB3SearchResultType_EnumDescriptor,
        .number = PB3IndexEntry_FieldNumber_ResultType,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3IndexEntry__storage_, resultType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IndexEntry class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IndexEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\013\n\000\016\005\000\017\006\000\022\021\000\023\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IndexEntry_Type_RawValue(PB3IndexEntry *message) {
  GPBDescriptor *descriptor = [PB3IndexEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IndexEntry_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IndexEntry_Type_RawValue(PB3IndexEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IndexEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IndexEntry_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3IndexEntry_ResultType_RawValue(PB3IndexEntry *message) {
  GPBDescriptor *descriptor = [PB3IndexEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IndexEntry_FieldNumber_ResultType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IndexEntry_ResultType_RawValue(PB3IndexEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IndexEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IndexEntry_FieldNumber_ResultType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Effect

@implementation PB3Effect

@dynamic id_p;
@dynamic flag;
@dynamic str;
@dynamic timeType;
@dynamic endTime;
@dynamic isUse;
@dynamic effectDecOwn;
@dynamic isAllow;
@dynamic effectDecReview;
@dynamic decCreateAt;
@dynamic protectSecond;
@dynamic protectStartAt;
@dynamic endTimeNew;
@dynamic effectType;
@dynamic effectSubType;
@dynamic counter;
@dynamic hasOtherPlayer, otherPlayer;

typedef struct PB3Effect__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t flag;
  PB3EffectTimeType timeType;
  int32_t endTime;
  int32_t isAllow;
  int32_t protectSecond;
  int32_t effectType;
  int32_t effectSubType;
  int32_t counter;
  NSString *str;
  NSString *effectDecOwn;
  NSString *effectDecReview;
  PB3Player *otherPlayer;
  int64_t decCreateAt;
  int64_t protectStartAt;
  int64_t endTimeNew;
} PB3Effect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_Flag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, flag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "str",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_Str,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, str),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeType",
        .dataTypeSpecific.enumDescFunc = PB3EffectTimeType_EnumDescriptor,
        .number = PB3Effect_FieldNumber_TimeType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, timeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isUse",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_IsUse,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "effectDecOwn",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_EffectDecOwn,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, effectDecOwn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAllow",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_IsAllow,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, isAllow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectDecReview",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_EffectDecReview,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, effectDecReview),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "decCreateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_DecCreateAt,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, decCreateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "protectSecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_ProtectSecond,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, protectSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "protectStartAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_ProtectStartAt,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, protectStartAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTimeNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_EndTimeNew,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, endTimeNew),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "effectType",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_EffectType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, effectType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectSubType",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_EffectSubType,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, effectSubType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "counter",
        .dataTypeSpecific.className = NULL,
        .number = PB3Effect_FieldNumber_Counter,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, counter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "otherPlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3Effect_FieldNumber_OtherPlayer,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3Effect__storage_, otherPlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Effect class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Effect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Effect_TimeType_RawValue(PB3Effect *message) {
  GPBDescriptor *descriptor = [PB3Effect descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Effect_FieldNumber_TimeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Effect_TimeType_RawValue(PB3Effect *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Effect descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Effect_FieldNumber_TimeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EffectLimit

@implementation PB3EffectLimit

@dynamic effectType;
@dynamic effectSubType;
@dynamic putOnNum;

typedef struct PB3EffectLimit__storage_ {
  uint32_t _has_storage_[1];
  PB3EffectType effectType;
  PB3EffectSubType effectSubType;
  int32_t putOnNum;
} PB3EffectLimit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "effectType",
        .dataTypeSpecific.enumDescFunc = PB3EffectType_EnumDescriptor,
        .number = PB3EffectLimit_FieldNumber_EffectType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectLimit__storage_, effectType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "effectSubType",
        .dataTypeSpecific.enumDescFunc = PB3EffectSubType_EnumDescriptor,
        .number = PB3EffectLimit_FieldNumber_EffectSubType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectLimit__storage_, effectSubType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "putOnNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectLimit_FieldNumber_PutOnNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EffectLimit__storage_, putOnNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectLimit class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectLimit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3EffectLimit_EffectType_RawValue(PB3EffectLimit *message) {
  GPBDescriptor *descriptor = [PB3EffectLimit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectLimit_FieldNumber_EffectType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectLimit_EffectType_RawValue(PB3EffectLimit *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectLimit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectLimit_FieldNumber_EffectType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EffectLimit_EffectSubType_RawValue(PB3EffectLimit *message) {
  GPBDescriptor *descriptor = [PB3EffectLimit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectLimit_FieldNumber_EffectSubType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectLimit_EffectSubType_RawValue(PB3EffectLimit *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectLimit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectLimit_FieldNumber_EffectSubType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EffectChairCountTheme

@implementation PB3EffectChairCountTheme

@dynamic num1URL;
@dynamic num2URL;
@dynamic num3URL;
@dynamic num4URL;
@dynamic num5URL;
@dynamic num6URL;
@dynamic num7URL;
@dynamic num8URL;
@dynamic num9URL;
@dynamic num0URL;
@dynamic pointURL;
@dynamic xURL;
@dynamic kURL;
@dynamic kPlusURL;
@dynamic wURL;
@dynamic wPlusURL;

typedef struct PB3EffectChairCountTheme__storage_ {
  uint32_t _has_storage_[1];
  NSString *num1URL;
  NSString *num2URL;
  NSString *num3URL;
  NSString *num4URL;
  NSString *num5URL;
  NSString *num6URL;
  NSString *num7URL;
  NSString *num8URL;
  NSString *num9URL;
  NSString *num0URL;
  NSString *pointURL;
  NSString *xURL;
  NSString *kURL;
  NSString *kPlusURL;
  NSString *wURL;
  NSString *wPlusURL;
} PB3EffectChairCountTheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num1URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num1URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num1URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num2URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num2URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num2URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num3URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num3URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num3URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num4URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num4URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num4URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num5URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num5URL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num5URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num6URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num6URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num6URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num7URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num7URL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num7URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num8URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num8URL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num8URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num9URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num9URL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num9URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num0URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_Num0URL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, num0URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pointURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_PointURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, pointURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "xURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_XURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, xURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_KURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, kURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kPlusURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_KPlusURL,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, kPlusURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_WURL,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, wURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wPlusURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectChairCountTheme_FieldNumber_WPlusURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3EffectChairCountTheme__storage_, wPlusURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectChairCountTheme class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectChairCountTheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001\003\201\241!!\000\002\003\201\241!!\000\003\003\201\241!!\000\004\003\201\241!!\000\005\003\201\241!!\000\006\003\201\241"
        "!!\000\007\003\201\241!!\000\010\003\201\241!!\000\t\003\201\241!!\000\n\003\201\241!!\000\013\005\241!!\000\014\001\241"
        "!!\000\r\001\241!!\000\016\001\244\241!!\000\017\001\241!!\000\020\001\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectConfig

@implementation PB3EffectConfig

@dynamic id_p;
@dynamic type;
@dynamic name;
@dynamic URL;
@dynamic ver;
@dynamic target;
@dynamic timeout;
@dynamic sort;
@dynamic bgURL;
@dynamic showURL;
@dynamic postfixURL;
@dynamic timeType;
@dynamic pcURL;
@dynamic pcURL2;
@dynamic pcURL3;
@dynamic routerURL;
@dynamic effectDesc;
@dynamic bottomURL;
@dynamic textColor;
@dynamic playTime;
@dynamic extraURL;
@dynamic roomPanelClassify;
@dynamic roomPanelShowType;
@dynamic getMethod;
@dynamic starNum;
@dynamic cornerMarkURL;
@dynamic hasEffectBanner, effectBanner;
@dynamic cornerMarkURLPc;
@dynamic playerNameColor;
@dynamic text;
@dynamic effectDec;
@dynamic effectPrivilege;
@dynamic effectMedalWall;
@dynamic isShow;
@dynamic leftOffset;
@dynamic rightOffset;
@dynamic moodShow;
@dynamic moodTips;
@dynamic count;
@dynamic speed;
@dynamic angle;
@dynamic pcCount;
@dynamic pcSpeed;
@dynamic pcAngle;
@dynamic isShowHeaven;
@dynamic canRenew;
@dynamic goodsId;
@dynamic renewMaxDay;
@dynamic showBigEffect;
@dynamic bigEffect;
@dynamic pcBigEffect;
@dynamic renewProtectDay;
@dynamic bigEffectPlayTime;
@dynamic timeoutNew;
@dynamic effectSubType;
@dynamic hasEffectExpand, effectExpand;
@dynamic groupId;
@dynamic weightInGroup;
@dynamic channel;
@dynamic loseHint;
@dynamic loseHintType;
@dynamic getHint;
@dynamic getHintType;
@dynamic isShowChairTheme;
@dynamic hasChairTheme, chairTheme;
@dynamic iosURL;
@dynamic androidURL;
@dynamic targetType;

typedef struct PB3EffectConfig__storage_ {
  uint32_t _has_storage_[3];
  int32_t id_p;
  PB3EffectType type;
  int32_t target;
  int32_t timeout;
  int32_t sort;
  PB3EffectTimeType timeType;
  int32_t playTime;
  int32_t roomPanelClassify;
  PB3RoomPanelShowType roomPanelShowType;
  int32_t starNum;
  PB3EffectMedalWall effectMedalWall;
  int32_t leftOffset;
  int32_t rightOffset;
  int32_t count;
  int32_t speed;
  int32_t angle;
  int32_t pcCount;
  int32_t pcSpeed;
  int32_t pcAngle;
  int32_t goodsId;
  int32_t renewMaxDay;
  int32_t renewProtectDay;
  int32_t bigEffectPlayTime;
  PB3EffectSubType effectSubType;
  int32_t loseHintType;
  int32_t getHintType;
  PB3EffectTargetType targetType;
  NSString *name;
  NSString *URL;
  NSString *ver;
  NSString *bgURL;
  NSString *showURL;
  NSString *postfixURL;
  NSString *pcURL;
  NSString *pcURL2;
  NSString *pcURL3;
  NSString *routerURL;
  NSString *effectDesc;
  NSString *bottomURL;
  NSString *textColor;
  NSString *extraURL;
  NSString *getMethod;
  NSString *cornerMarkURL;
  PB3EffectBanner *effectBanner;
  NSString *cornerMarkURLPc;
  NSString *playerNameColor;
  NSString *text;
  NSString *effectDec;
  NSString *effectPrivilege;
  NSString *moodShow;
  NSString *moodTips;
  NSString *bigEffect;
  NSString *pcBigEffect;
  PB3EffectExpand *effectExpand;
  NSString *channel;
  NSString *loseHint;
  NSString *getHint;
  PB3EffectChairCountTheme *chairTheme;
  NSString *iosURL;
  NSString *androidURL;
  int64_t timeoutNew;
  int64_t groupId;
  int64_t weightInGroup;
} PB3EffectConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3EffectType_EnumDescriptor,
        .number = PB3EffectConfig_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ver",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Ver,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, ver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Target,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Timeout,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, timeout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Sort,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_BgURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, bgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_ShowURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, showURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "postfixURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PostfixURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, postfixURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeType",
        .dataTypeSpecific.enumDescFunc = PB3EffectTimeType_EnumDescriptor,
        .number = PB3EffectConfig_FieldNumber_TimeType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, timeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PcURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, pcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcURL2",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PcURL2,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, pcURL2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcURL3",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PcURL3,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, pcURL3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_RouterURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_EffectDesc,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, effectDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_BottomURL,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, bottomURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_TextColor,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, textColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PlayTime,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, playTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "extraURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_ExtraURL,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, extraURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomPanelClassify",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_RoomPanelClassify,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, roomPanelClassify),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomPanelShowType",
        .dataTypeSpecific.enumDescFunc = PB3RoomPanelShowType_EnumDescriptor,
        .number = PB3EffectConfig_FieldNumber_RoomPanelShowType,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, roomPanelShowType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "getMethod",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_GetMethod,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, getMethod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "starNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_StarNum,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, starNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cornerMarkURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_CornerMarkURL,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, cornerMarkURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectBanner",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EffectBanner),
        .number = PB3EffectConfig_FieldNumber_EffectBanner,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, effectBanner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cornerMarkURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_CornerMarkURLPc,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, cornerMarkURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerNameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PlayerNameColor,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, playerNameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Text,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectDec",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_EffectDec,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, effectDec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectPrivilege",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_EffectPrivilege,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, effectPrivilege),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectMedalWall",
        .dataTypeSpecific.enumDescFunc = PB3EffectMedalWall_EnumDescriptor,
        .number = PB3EffectConfig_FieldNumber_EffectMedalWall,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, effectMedalWall),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_IsShow,
        .hasIndex = 33,
        .offset = 34,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "leftOffset",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_LeftOffset,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, leftOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rightOffset",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_RightOffset,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, rightOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "moodShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_MoodShow,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, moodShow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "moodTips",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_MoodTips,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, moodTips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Count,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "speed",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Speed,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, speed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "angle",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Angle,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, angle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pcCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PcCount,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, pcCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pcSpeed",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PcSpeed,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, pcSpeed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pcAngle",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PcAngle,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, pcAngle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isShowHeaven",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_IsShowHeaven,
        .hasIndex = 45,
        .offset = 46,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "canRenew",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_CanRenew,
        .hasIndex = 47,
        .offset = 48,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_GoodsId,
        .hasIndex = 49,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "renewMaxDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_RenewMaxDay,
        .hasIndex = 50,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, renewMaxDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "showBigEffect",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_ShowBigEffect,
        .hasIndex = 51,
        .offset = 52,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bigEffect",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_BigEffect,
        .hasIndex = 53,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, bigEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcBigEffect",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_PcBigEffect,
        .hasIndex = 54,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, pcBigEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "renewProtectDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_RenewProtectDay,
        .hasIndex = 55,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, renewProtectDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bigEffectPlayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_BigEffectPlayTime,
        .hasIndex = 56,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, bigEffectPlayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timeoutNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_TimeoutNew,
        .hasIndex = 57,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, timeoutNew),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "effectSubType",
        .dataTypeSpecific.enumDescFunc = PB3EffectSubType_EnumDescriptor,
        .number = PB3EffectConfig_FieldNumber_EffectSubType,
        .hasIndex = 58,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, effectSubType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "effectExpand",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EffectExpand),
        .number = PB3EffectConfig_FieldNumber_EffectExpand,
        .hasIndex = 59,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, effectExpand),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_GroupId,
        .hasIndex = 60,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "weightInGroup",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_WeightInGroup,
        .hasIndex = 61,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, weightInGroup),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_Channel,
        .hasIndex = 62,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loseHint",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_LoseHint,
        .hasIndex = 63,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, loseHint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loseHintType",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_LoseHintType,
        .hasIndex = 64,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, loseHintType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "getHint",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_GetHint,
        .hasIndex = 65,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, getHint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "getHintType",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_GetHintType,
        .hasIndex = 66,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, getHintType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isShowChairTheme",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_IsShowChairTheme,
        .hasIndex = 67,
        .offset = 68,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "chairTheme",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EffectChairCountTheme),
        .number = PB3EffectConfig_FieldNumber_ChairTheme,
        .hasIndex = 69,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, chairTheme),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iosURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_IosURL,
        .hasIndex = 70,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, iosURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectConfig_FieldNumber_AndroidURL,
        .hasIndex = 71,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, androidURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetType",
        .dataTypeSpecific.enumDescFunc = PB3EffectTargetType_EnumDescriptor,
        .number = PB3EffectConfig_FieldNumber_TargetType,
        .hasIndex = 72,
        .offset = (uint32_t)offsetof(PB3EffectConfig__storage_, targetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectConfig class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\004!!!\000\t\002\241!!\000\n\004\241!!\000\013\007\241!!\000\r\002\241!!\000\016\002\241!\"\000\017\002\241!"
        "\"\000\020\006\241!!\000\022\006\241!!\000\025\005\241!!\000\032\006\244\241!!\000\034\006\244\241!!\242\000B\003\241!!"
        "\000C\007\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3EffectConfig_Type_RawValue(PB3EffectConfig *message) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectConfig_Type_RawValue(PB3EffectConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EffectConfig_TimeType_RawValue(PB3EffectConfig *message) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_TimeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectConfig_TimeType_RawValue(PB3EffectConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_TimeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EffectConfig_RoomPanelShowType_RawValue(PB3EffectConfig *message) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_RoomPanelShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectConfig_RoomPanelShowType_RawValue(PB3EffectConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_RoomPanelShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EffectConfig_EffectMedalWall_RawValue(PB3EffectConfig *message) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_EffectMedalWall];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectConfig_EffectMedalWall_RawValue(PB3EffectConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_EffectMedalWall];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EffectConfig_EffectSubType_RawValue(PB3EffectConfig *message) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_EffectSubType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectConfig_EffectSubType_RawValue(PB3EffectConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_EffectSubType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EffectConfig_TargetType_RawValue(PB3EffectConfig *message) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_TargetType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectConfig_TargetType_RawValue(PB3EffectConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectConfig_FieldNumber_TargetType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EffectTeacherMedal

@implementation PB3EffectTeacherMedal

@dynamic effectId;
@dynamic isGain;

typedef struct PB3EffectTeacherMedal__storage_ {
  uint32_t _has_storage_[1];
  int64_t effectId;
} PB3EffectTeacherMedal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectTeacherMedal_FieldNumber_EffectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectTeacherMedal__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isGain",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectTeacherMedal_FieldNumber_IsGain,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectTeacherMedal class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectTeacherMedal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectTeacherMedalListReq

@implementation PB3EffectTeacherMedalListReq

@dynamic groupId;

typedef struct PB3EffectTeacherMedalListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t groupId;
} PB3EffectTeacherMedalListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectTeacherMedalListReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectTeacherMedalListReq__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectTeacherMedalListReq class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectTeacherMedalListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectTeacherMedalListRes

@implementation PB3EffectTeacherMedalListRes

@dynamic groupId;
@dynamic medalListArray, medalListArray_Count;

typedef struct PB3EffectTeacherMedalListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *medalListArray;
  int64_t groupId;
} PB3EffectTeacherMedalListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectTeacherMedalListRes_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectTeacherMedalListRes__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "medalListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EffectTeacherMedal),
        .number = PB3EffectTeacherMedalListRes_FieldNumber_MedalListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EffectTeacherMedalListRes__storage_, medalListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectTeacherMedalListRes class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectTeacherMedalListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectExpand

@implementation PB3EffectExpand

@dynamic type;
@dynamic datas;

typedef struct PB3EffectExpand__storage_ {
  uint32_t _has_storage_[1];
  PB3EffectExpandType type;
  NSData *datas;
} PB3EffectExpand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3EffectExpandType_EnumDescriptor,
        .number = PB3EffectExpand_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectExpand__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "datas",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectExpand_FieldNumber_Datas,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectExpand__storage_, datas),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectExpand class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectExpand__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3EffectExpand_Type_RawValue(PB3EffectExpand *message) {
  GPBDescriptor *descriptor = [PB3EffectExpand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectExpand_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EffectExpand_Type_RawValue(PB3EffectExpand *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EffectExpand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EffectExpand_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EffectHonour

@implementation PB3EffectHonour

@dynamic hasSimplePlayer, simplePlayer;
@dynamic hasHonourEffect, honourEffect;
@dynamic effectsArray, effectsArray_Count;

typedef struct PB3EffectHonour__storage_ {
  uint32_t _has_storage_[1];
  PB3SimplePlayer *simplePlayer;
  PB3Effect *honourEffect;
  NSMutableArray *effectsArray;
} PB3EffectHonour__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "simplePlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3EffectHonour_FieldNumber_SimplePlayer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectHonour__storage_, simplePlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "honourEffect",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Effect),
        .number = PB3EffectHonour_FieldNumber_HonourEffect,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectHonour__storage_, honourEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Effect),
        .number = PB3EffectHonour_FieldNumber_EffectsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EffectHonour__storage_, effectsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectHonour class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectHonour__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectBanner

@implementation PB3EffectBanner

@dynamic explainPic;
@dynamic tranType;
@dynamic shareType;
@dynamic triggerControl;
@dynamic buttonIcon;
@dynamic routerURL;
@dynamic effectId;
@dynamic explainPicPc;
@dynamic buttonIconPc;

typedef struct PB3EffectBanner__storage_ {
  uint32_t _has_storage_[1];
  int32_t tranType;
  int32_t shareType;
  int32_t triggerControl;
  int32_t effectId;
  NSString *explainPic;
  NSString *buttonIcon;
  NSString *routerURL;
  NSString *explainPicPc;
  NSString *buttonIconPc;
} PB3EffectBanner__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "explainPic",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_ExplainPic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, explainPic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tranType",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_TranType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, tranType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "shareType",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_ShareType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, shareType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "triggerControl",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_TriggerControl,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, triggerControl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buttonIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_ButtonIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, buttonIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_RouterURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_EffectId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "explainPicPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_ExplainPicPc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, explainPicPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonIconPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectBanner_FieldNumber_ButtonIconPc,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3EffectBanner__storage_, buttonIconPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectBanner class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectBanner__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Certif

@implementation PB3Certif

@dynamic type;
@dynamic level;
@dynamic exp;
@dynamic notify;
@dynamic goldTotal;
@dynamic expTotal;

typedef struct PB3Certif__storage_ {
  uint32_t _has_storage_[1];
  PB3CertifType type;
  int32_t level;
  int32_t exp;
  int32_t notify;
  int32_t expTotal;
  int64_t goldTotal;
} PB3Certif__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CertifType_EnumDescriptor,
        .number = PB3Certif_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Certif__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3Certif_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Certif__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3Certif_FieldNumber_Exp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Certif__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "notify",
        .dataTypeSpecific.className = NULL,
        .number = PB3Certif_FieldNumber_Notify,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Certif__storage_, notify),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goldTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3Certif_FieldNumber_GoldTotal,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Certif__storage_, goldTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3Certif_FieldNumber_ExpTotal,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Certif__storage_, expTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Certif class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Certif__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Certif_Type_RawValue(PB3Certif *message) {
  GPBDescriptor *descriptor = [PB3Certif descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Certif_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Certif_Type_RawValue(PB3Certif *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Certif descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Certif_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CertifList

@implementation PB3CertifList

@dynamic entriesArray, entriesArray_Count;

typedef struct PB3CertifList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entriesArray;
} PB3CertifList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Certif),
        .number = PB3CertifList_FieldNumber_EntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CertifList__storage_, entriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CertifList class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CertifList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ModelOnOff

@implementation PB3ModelOnOff

@dynamic onOff;
@dynamic status;

typedef struct PB3ModelOnOff__storage_ {
  uint32_t _has_storage_[1];
  PB3OnOffType onOff;
  PB3ModelOnOffStatus status;
} PB3ModelOnOff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.enumDescFunc = PB3OnOffType_EnumDescriptor,
        .number = PB3ModelOnOff_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ModelOnOff__storage_, onOff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ModelOnOffStatus_EnumDescriptor,
        .number = PB3ModelOnOff_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ModelOnOff__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ModelOnOff class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ModelOnOff__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ModelOnOff_OnOff_RawValue(PB3ModelOnOff *message) {
  GPBDescriptor *descriptor = [PB3ModelOnOff descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ModelOnOff_FieldNumber_OnOff];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ModelOnOff_OnOff_RawValue(PB3ModelOnOff *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ModelOnOff descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ModelOnOff_FieldNumber_OnOff];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ModelOnOff_Status_RawValue(PB3ModelOnOff *message) {
  GPBDescriptor *descriptor = [PB3ModelOnOff descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ModelOnOff_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ModelOnOff_Status_RawValue(PB3ModelOnOff *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ModelOnOff descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ModelOnOff_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Rank

@implementation PB3Rank

@dynamic id_p;
@dynamic name;
@dynamic sex;
@dynamic level;
@dynamic value;
@dynamic resTime;
@dynamic gapVal;
@dynamic icon;
@dynamic giftId;
@dynamic giftNum;
@dynamic ranking;
@dynamic id2;
@dynamic caijiId;
@dynamic hasMaskInfo, maskInfo;
@dynamic intimacy;
@dynamic lev;
@dynamic cardName;
@dynamic isLive;
@dynamic cubismIcon;
@dynamic cubismLevel;
@dynamic cubismType;
@dynamic setCardURL;

typedef struct PB3Rank__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t level;
  int32_t resTime;
  int32_t giftNum;
  int32_t ranking;
  int32_t intimacy;
  int32_t lev;
  PB3RankCubismItemLevel cubismLevel;
  PB3CubismType cubismType;
  NSString *name;
  NSString *icon;
  PB3MaskInfo *maskInfo;
  NSString *cardName;
  NSString *cubismIcon;
  NSString *setCardURL;
  int64_t id_p;
  int64_t value;
  int64_t gapVal;
  int64_t giftId;
  int64_t id2;
  int64_t caijiId;
} PB3Rank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3Rank_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Level,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Value,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "resTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_ResTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, resTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "gapVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_GapVal,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, gapVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Icon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_GiftId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_GiftNum,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "ranking",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Ranking,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, ranking),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Id2,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "caijiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_CaijiId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, caijiId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "maskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskInfo),
        .number = PB3Rank_FieldNumber_MaskInfo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, maskInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimacy",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Intimacy,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, intimacy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_Lev,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_CardName,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLive",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_IsLive,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cubismIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_CubismIcon,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, cubismIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismLevel",
        .dataTypeSpecific.enumDescFunc = PB3RankCubismItemLevel_EnumDescriptor,
        .number = PB3Rank_FieldNumber_CubismLevel,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, cubismLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cubismType",
        .dataTypeSpecific.enumDescFunc = PB3CubismType_EnumDescriptor,
        .number = PB3Rank_FieldNumber_CubismType,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, cubismType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "setCardURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank_FieldNumber_SetCardURL,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3Rank__storage_, setCardURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Rank class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Rank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\026\003\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Rank_Sex_RawValue(PB3Rank *message) {
  GPBDescriptor *descriptor = [PB3Rank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Rank_Sex_RawValue(PB3Rank *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Rank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3Rank_CubismLevel_RawValue(PB3Rank *message) {
  GPBDescriptor *descriptor = [PB3Rank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank_FieldNumber_CubismLevel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Rank_CubismLevel_RawValue(PB3Rank *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Rank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank_FieldNumber_CubismLevel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3Rank_CubismType_RawValue(PB3Rank *message) {
  GPBDescriptor *descriptor = [PB3Rank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank_FieldNumber_CubismType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Rank_CubismType_RawValue(PB3Rank *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Rank descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank_FieldNumber_CubismType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Rank1

@implementation PB3Rank1

@dynamic id_p;
@dynamic name;
@dynamic sex;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic value;
@dynamic gapVal;
@dynamic icon;
@dynamic ranking;
@dynamic id2;
@dynamic caijiId;
@dynamic hasMaskInfo, maskInfo;
@dynamic isFan;
@dynamic lev;
@dynamic cardName;
@dynamic fansNum;
@dynamic intimacy;

typedef struct PB3Rank1__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t wealthLevel;
  int32_t charmLevel;
  int32_t ranking;
  int32_t lev;
  int32_t fansNum;
  int32_t intimacy;
  NSString *name;
  NSString *icon;
  PB3MaskInfo *maskInfo;
  NSString *cardName;
  int64_t id_p;
  int64_t value;
  int64_t gapVal;
  int64_t id2;
  int64_t caijiId;
} PB3Rank1__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3Rank1_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_WealthLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_CharmLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Value,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "gapVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_GapVal,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, gapVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Icon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ranking",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Ranking,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, ranking),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Id2,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "caijiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_CaijiId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, caijiId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "maskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskInfo),
        .number = PB3Rank1_FieldNumber_MaskInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, maskInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isFan",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_IsFan,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Lev,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_CardName,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_FansNum,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, fansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimacy",
        .dataTypeSpecific.className = NULL,
        .number = PB3Rank1_FieldNumber_Intimacy,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3Rank1__storage_, intimacy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Rank1 class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Rank1__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Rank1_Sex_RawValue(PB3Rank1 *message) {
  GPBDescriptor *descriptor = [PB3Rank1 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank1_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Rank1_Sex_RawValue(PB3Rank1 *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Rank1 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Rank1_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ClanInfo

@implementation PB3ClanInfo

@dynamic id_p;
@dynamic iconWord;
@dynamic levelName;
@dynamic name;
@dynamic level;
@dynamic isRely;
@dynamic isBillClan;
@dynamic iconType;
@dynamic familyId;
@dynamic categoryId;
@dynamic isSignMember;
@dynamic isPublicSettle;
@dynamic bagListArray, bagListArray_Count;
@dynamic isOperator;

typedef struct PB3ClanInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3ClanIconType iconType;
  NSString *iconWord;
  NSString *levelName;
  NSString *name;
  NSMutableArray *bagListArray;
  int64_t id_p;
  int64_t level;
  int64_t familyId;
  int64_t categoryId;
} PB3ClanInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iconWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_IconWord,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, iconWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levelName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_LevelName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, levelName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_Level,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isRely",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_IsRely,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isBillClan",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_IsBillClan,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "iconType",
        .dataTypeSpecific.enumDescFunc = PB3ClanIconType_EnumDescriptor,
        .number = PB3ClanInfo_FieldNumber_IconType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "familyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_FamilyId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, familyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "categoryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_CategoryId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, categoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isSignMember",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_IsSignMember,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPublicSettle",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_IsPublicSettle,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bagListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BoosBag),
        .number = PB3ClanInfo_FieldNumber_BagListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ClanInfo__storage_, bagListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isOperator",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanInfo_FieldNumber_IsOperator,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClanInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClanInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ClanInfo_IconType_RawValue(PB3ClanInfo *message) {
  GPBDescriptor *descriptor = [PB3ClanInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClanInfo_FieldNumber_IconType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ClanInfo_IconType_RawValue(PB3ClanInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ClanInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClanInfo_FieldNumber_IconType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BoosBag

@implementation PB3BoosBag

@dynamic id_p;
@dynamic cfgId;
@dynamic clanId;
@dynamic startTime;
@dynamic endTime;
@dynamic status;
@dynamic frozenTime;
@dynamic boosNum;

typedef struct PB3BoosBag__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t boosNum;
  int64_t id_p;
  int64_t cfgId;
  int64_t clanId;
  int64_t startTime;
  int64_t endTime;
  int64_t frozenTime;
} PB3BoosBag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cfgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_CfgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, cfgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_ClanId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, clanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_StartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "frozenTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_FrozenTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, frozenTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boosNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BoosBag_FieldNumber_BoosNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BoosBag__storage_, boosNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BoosBag class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BoosBag__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SimplePlayer

@implementation PB3SimplePlayer

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic sex;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic flags;
@dynamic flags2;
@dynamic cjid;
@dynamic roomId;
@dynamic roomName;
@dynamic signature;
@dynamic createAt;
@dynamic relationType;

typedef struct PB3SimplePlayer__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t wealthLevel;
  int32_t charmLevel;
  int32_t relationType;
  NSString *name;
  NSString *icon;
  NSString *roomName;
  NSString *signature;
  int64_t id_p;
  int64_t id2;
  int64_t flags;
  int64_t flags2;
  int64_t cjid;
  int64_t roomId;
  int64_t createAt;
} PB3SimplePlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3SimplePlayer_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_WealthLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_CharmLevel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Flags,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "flags2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Flags2,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, flags2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cjid",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Cjid,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, cjid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_RoomId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_RoomName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_Signature,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_CreateAt,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "relationType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayer_FieldNumber_RelationType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3SimplePlayer__storage_, relationType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SimplePlayer class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SimplePlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SimplePlayer_Sex_RawValue(PB3SimplePlayer *message) {
  GPBDescriptor *descriptor = [PB3SimplePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SimplePlayer_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SimplePlayer_Sex_RawValue(PB3SimplePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SimplePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SimplePlayer_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VisitorInfo

@implementation PB3VisitorInfo

@dynamic id_p;
@dynamic playerId;
@dynamic playerId2;
@dynamic nickname;
@dynamic sex;
@dynamic icon;
@dynamic charmLevel;
@dynamic wealthLevel;
@dynamic visitTime;
@dynamic visitDay;
@dynamic visitContent;
@dynamic visitState;
@dynamic onwerId;
@dynamic visitorId;
@dynamic totalNum;
@dynamic roomId;
@dynamic isDelete;

typedef struct PB3VisitorInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t charmLevel;
  int32_t wealthLevel;
  PB3VisitorInfoState visitState;
  NSString *nickname;
  NSString *icon;
  NSString *visitContent;
  int64_t id_p;
  int64_t playerId;
  int64_t playerId2;
  int64_t visitTime;
  int64_t visitDay;
  int64_t onwerId;
  int64_t visitorId;
  int64_t totalNum;
  int64_t roomId;
} PB3VisitorInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_Nickname,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3VisitorInfo_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_Icon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_CharmLevel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_WealthLevel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "visitTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_VisitTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, visitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "visitDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_VisitDay,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, visitDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "visitContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_VisitContent,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, visitContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitState",
        .dataTypeSpecific.enumDescFunc = PB3VisitorInfoState_EnumDescriptor,
        .number = PB3VisitorInfo_FieldNumber_VisitState,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, visitState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "onwerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_OnwerId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, onwerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "visitorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_VisitorId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, visitorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_TotalNum,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, totalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_RoomId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3VisitorInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isDelete",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorInfo_FieldNumber_IsDelete,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitorInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VisitorInfo_Sex_RawValue(PB3VisitorInfo *message) {
  GPBDescriptor *descriptor = [PB3VisitorInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorInfo_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VisitorInfo_Sex_RawValue(PB3VisitorInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VisitorInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorInfo_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3VisitorInfo_VisitState_RawValue(PB3VisitorInfo *message) {
  GPBDescriptor *descriptor = [PB3VisitorInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorInfo_FieldNumber_VisitState];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VisitorInfo_VisitState_RawValue(PB3VisitorInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VisitorInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorInfo_FieldNumber_VisitState];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DecorateSignFrame

@implementation PB3DecorateSignFrame

@dynamic decorateId;
@dynamic decorateType;
@dynamic picURL;
@dynamic pcPicURL;

typedef struct PB3DecorateSignFrame__storage_ {
  uint32_t _has_storage_[1];
  PB3DecorateType decorateType;
  NSString *picURL;
  NSString *pcPicURL;
  int64_t decorateId;
} PB3DecorateSignFrame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DecorateSignFrame_FieldNumber_DecorateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DecorateSignFrame__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "decorateType",
        .dataTypeSpecific.enumDescFunc = PB3DecorateType_EnumDescriptor,
        .number = PB3DecorateSignFrame_FieldNumber_DecorateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DecorateSignFrame__storage_, decorateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DecorateSignFrame_FieldNumber_PicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DecorateSignFrame__storage_, picURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcPicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DecorateSignFrame_FieldNumber_PcPicURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DecorateSignFrame__storage_, pcPicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DecorateSignFrame class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DecorateSignFrame__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\003\241!!\000\004\002\243\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DecorateSignFrame_DecorateType_RawValue(PB3DecorateSignFrame *message) {
  GPBDescriptor *descriptor = [PB3DecorateSignFrame descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DecorateSignFrame_FieldNumber_DecorateType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DecorateSignFrame_DecorateType_RawValue(PB3DecorateSignFrame *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DecorateSignFrame descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DecorateSignFrame_FieldNumber_DecorateType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChargeExtraDataActivity

@implementation PB3ChargeExtraDataActivity

@dynamic remark;

typedef struct PB3ChargeExtraDataActivity__storage_ {
  uint32_t _has_storage_[1];
  NSString *remark;
} PB3ChargeExtraDataActivity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeExtraDataActivity_FieldNumber_Remark,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChargeExtraDataActivity__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChargeExtraDataActivity class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChargeExtraDataActivity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChargeExtraData

@implementation PB3ChargeExtraData

@dynamic type;
@dynamic datas;

typedef struct PB3ChargeExtraData__storage_ {
  uint32_t _has_storage_[1];
  PB3ChargeExtraDataType type;
  NSData *datas;
} PB3ChargeExtraData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ChargeExtraDataType_EnumDescriptor,
        .number = PB3ChargeExtraData_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChargeExtraData__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "datas",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeExtraData_FieldNumber_Datas,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChargeExtraData__storage_, datas),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChargeExtraData class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChargeExtraData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChargeExtraData_Type_RawValue(PB3ChargeExtraData *message) {
  GPBDescriptor *descriptor = [PB3ChargeExtraData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChargeExtraData_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChargeExtraData_Type_RawValue(PB3ChargeExtraData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChargeExtraData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChargeExtraData_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3MaskIcon

@implementation PB3MaskIcon

@dynamic icon;
@dynamic dynamicImg;

typedef struct PB3MaskIcon__storage_ {
  uint32_t _has_storage_[1];
  NSString *icon;
  NSString *dynamicImg;
} PB3MaskIcon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaskIcon_FieldNumber_Icon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MaskIcon__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dynamicImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaskIcon_FieldNumber_DynamicImg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MaskIcon__storage_, dynamicImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MaskIcon class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MaskIcon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MaskInfo

@implementation PB3MaskInfo

@dynamic playerId;
@dynamic maskId;
@dynamic maskName;
@dynamic hasMaskIcon, maskIcon;
@dynamic maskNameId;
@dynamic maskIconId;

typedef struct PB3MaskInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t maskNameId;
  int32_t maskIconId;
  NSString *maskId;
  NSString *maskName;
  PB3MaskIcon *maskIcon;
  int64_t playerId;
} PB3MaskInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaskInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MaskInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maskId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaskInfo_FieldNumber_MaskId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MaskInfo__storage_, maskId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskName",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaskInfo_FieldNumber_MaskName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MaskInfo__storage_, maskName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskIcon",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskIcon),
        .number = PB3MaskInfo_FieldNumber_MaskIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3MaskInfo__storage_, maskIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maskNameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaskInfo_FieldNumber_MaskNameId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3MaskInfo__storage_, maskNameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maskIconId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaskInfo_FieldNumber_MaskIconId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3MaskInfo__storage_, maskIconId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MaskInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MaskInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LongList

@implementation PB3LongList

@dynamic valueArray, valueArray_Count;

typedef struct PB3LongList__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *valueArray;
} PB3LongList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valueArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3LongList_FieldNumber_ValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LongList__storage_, valueArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LongList class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LongList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AuthInfo

@implementation PB3AuthInfo

@dynamic authType;
@dynamic level;
@dynamic levExp;
@dynamic URL;
@dynamic status;
@dynamic songNum;
@dynamic name;
@dynamic startColor;
@dynamic endColor;

typedef struct PB3AuthInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3AuthType authType;
  int32_t level;
  PB3AuthStatus status;
  NSString *URL;
  NSString *name;
  NSString *startColor;
  NSString *endColor;
  int64_t levExp;
  int64_t songNum;
} PB3AuthInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authType",
        .dataTypeSpecific.enumDescFunc = PB3AuthType_EnumDescriptor,
        .number = PB3AuthInfo_FieldNumber_AuthType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, authType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthInfo_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "levExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthInfo_FieldNumber_LevExp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, levExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthInfo_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3AuthStatus_EnumDescriptor,
        .number = PB3AuthInfo_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "songNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthInfo_FieldNumber_SongNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, songNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthInfo_FieldNumber_Name,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthInfo_FieldNumber_StartColor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, startColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthInfo_FieldNumber_EndColor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3AuthInfo__storage_, endColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AuthInfo_AuthType_RawValue(PB3AuthInfo *message) {
  GPBDescriptor *descriptor = [PB3AuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthInfo_FieldNumber_AuthType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AuthInfo_AuthType_RawValue(PB3AuthInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthInfo_FieldNumber_AuthType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3AuthInfo_Status_RawValue(PB3AuthInfo *message) {
  GPBDescriptor *descriptor = [PB3AuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AuthInfo_Status_RawValue(PB3AuthInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AuthInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChargeFirstWelfareItem

@implementation PB3ChargeFirstWelfareItem

@dynamic giftId;
@dynamic giftName;
@dynamic giftType;
@dynamic duration;
@dynamic imageURL;
@dynamic imageBigURL;

typedef struct PB3ChargeFirstWelfareItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  PB3ChargeFirstGiftType giftType;
  NSString *giftName;
  NSString *imageURL;
  NSString *imageBigURL;
  int64_t duration;
} PB3ChargeFirstWelfareItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeFirstWelfareItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChargeFirstWelfareItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeFirstWelfareItem_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChargeFirstWelfareItem__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftType",
        .dataTypeSpecific.enumDescFunc = PB3ChargeFirstGiftType_EnumDescriptor,
        .number = PB3ChargeFirstWelfareItem_FieldNumber_GiftType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChargeFirstWelfareItem__storage_, giftType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeFirstWelfareItem_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChargeFirstWelfareItem__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeFirstWelfareItem_FieldNumber_ImageURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChargeFirstWelfareItem__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageBigURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeFirstWelfareItem_FieldNumber_ImageBigURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChargeFirstWelfareItem__storage_, imageBigURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChargeFirstWelfareItem class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChargeFirstWelfareItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\005\005\241!!\000\006\005\243\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChargeFirstWelfareItem_GiftType_RawValue(PB3ChargeFirstWelfareItem *message) {
  GPBDescriptor *descriptor = [PB3ChargeFirstWelfareItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChargeFirstWelfareItem_FieldNumber_GiftType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChargeFirstWelfareItem_GiftType_RawValue(PB3ChargeFirstWelfareItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChargeFirstWelfareItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChargeFirstWelfareItem_FieldNumber_GiftType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3MobaTeamGameSetting

@implementation PB3MobaTeamGameSetting

@dynamic settingId;
@dynamic valInt;

typedef struct PB3MobaTeamGameSetting__storage_ {
  uint32_t _has_storage_[1];
  int64_t settingId;
  int64_t valInt;
} PB3MobaTeamGameSetting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "settingId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSetting_FieldNumber_SettingId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSetting__storage_, settingId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "valInt",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSetting_FieldNumber_ValInt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSetting__storage_, valInt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MobaTeamGameSetting class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MobaTeamGameSetting__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MobaTeamGameInfo

@implementation PB3MobaTeamGameInfo

@dynamic gameId;
@dynamic demandDesc;
@dynamic maxNumber;
@dynamic settingsArray, settingsArray_Count;

typedef struct PB3MobaTeamGameInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t maxNumber;
  NSString *demandDesc;
  NSMutableArray *settingsArray;
  int64_t gameId;
} PB3MobaTeamGameInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameInfo_FieldNumber_GameId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameInfo__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "demandDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameInfo_FieldNumber_DemandDesc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameInfo__storage_, demandDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxNumber",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameInfo_FieldNumber_MaxNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameInfo__storage_, maxNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "settingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MobaTeamGameSetting),
        .number = PB3MobaTeamGameInfo_FieldNumber_SettingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameInfo__storage_, settingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MobaTeamGameInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MobaTeamGameInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SyncOpt

@implementation PB3SyncOpt

@dynamic type;
@dynamic id_p;

typedef struct PB3SyncOpt__storage_ {
  uint32_t _has_storage_[1];
  PB3SyncOptType type;
  NSString *id_p;
} PB3SyncOpt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3SyncOptType_EnumDescriptor,
        .number = PB3SyncOpt_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SyncOpt__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SyncOpt_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SyncOpt__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SyncOpt class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SyncOpt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SyncOpt_Type_RawValue(PB3SyncOpt *message) {
  GPBDescriptor *descriptor = [PB3SyncOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SyncOpt_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SyncOpt_Type_RawValue(PB3SyncOpt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SyncOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SyncOpt_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChangeDetail

@implementation PB3ChangeDetail

@dynamic originId;
@dynamic targetId;

typedef struct PB3ChangeDetail__storage_ {
  uint32_t _has_storage_[1];
  int32_t originId;
  int32_t targetId;
} PB3ChangeDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "originId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeDetail_FieldNumber_OriginId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeDetail__storage_, originId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeDetail_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChangeDetail__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeDetail class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CouponUsedData

@implementation PB3CouponUsedData

@dynamic id_p;
@dynamic priceGold;
@dynamic discountGold;
@dynamic buyGold;

typedef struct PB3CouponUsedData__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
  int64_t priceGold;
  int64_t discountGold;
  int64_t buyGold;
} PB3CouponUsedData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponUsedData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CouponUsedData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "priceGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponUsedData_FieldNumber_PriceGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CouponUsedData__storage_, priceGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "discountGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponUsedData_FieldNumber_DiscountGold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CouponUsedData__storage_, discountGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "buyGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponUsedData_FieldNumber_BuyGold,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CouponUsedData__storage_, buyGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CouponUsedData class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CouponUsedData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CouponCliCfg

@implementation PB3CouponCliCfg

@dynamic id_p;
@dynamic name;
@dynamic discountType;
@dynamic fullMoney;
@dynamic subMoney;
@dynamic discount;
@dynamic jumpType;
@dynamic jumpURL;
@dynamic usageRemark;
@dynamic status;
@dynamic discountUnit;
@dynamic couponUnit;

typedef struct PB3CouponCliCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3CouponDiscountType discountType;
  int32_t fullMoney;
  int32_t subMoney;
  int32_t discount;
  PB3CouponJumpType jumpType;
  PB3CouponStatus status;
  PB3CouponDiscountUnit couponUnit;
  NSString *name;
  NSString *jumpURL;
  NSString *usageRemark;
  NSString *discountUnit;
  int64_t id_p;
} PB3CouponCliCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "discountType",
        .dataTypeSpecific.enumDescFunc = PB3CouponDiscountType_EnumDescriptor,
        .number = PB3CouponCliCfg_FieldNumber_DiscountType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, discountType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fullMoney",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_FullMoney,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, fullMoney),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "subMoney",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_SubMoney,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, subMoney),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "discount",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_Discount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, discount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "jumpType",
        .dataTypeSpecific.enumDescFunc = PB3CouponJumpType_EnumDescriptor,
        .number = PB3CouponCliCfg_FieldNumber_JumpType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, jumpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_JumpURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usageRemark",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_UsageRemark,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, usageRemark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3CouponStatus_EnumDescriptor,
        .number = PB3CouponCliCfg_FieldNumber_Status,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "discountUnit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCliCfg_FieldNumber_DiscountUnit,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, discountUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "couponUnit",
        .dataTypeSpecific.enumDescFunc = PB3CouponDiscountUnit_EnumDescriptor,
        .number = PB3CouponCliCfg_FieldNumber_CouponUnit,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3CouponCliCfg__storage_, couponUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CouponCliCfg class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CouponCliCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CouponCliCfg_DiscountType_RawValue(PB3CouponCliCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_DiscountType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCliCfg_DiscountType_RawValue(PB3CouponCliCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_DiscountType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CouponCliCfg_JumpType_RawValue(PB3CouponCliCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_JumpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCliCfg_JumpType_RawValue(PB3CouponCliCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_JumpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CouponCliCfg_Status_RawValue(PB3CouponCliCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCliCfg_Status_RawValue(PB3CouponCliCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CouponCliCfg_CouponUnit_RawValue(PB3CouponCliCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_CouponUnit];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCliCfg_CouponUnit_RawValue(PB3CouponCliCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCliCfg_FieldNumber_CouponUnit];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ServerTimestamp

@implementation PB3ServerTimestamp

@dynamic current;
@dynamic currentTime;

typedef struct PB3ServerTimestamp__storage_ {
  uint32_t _has_storage_[1];
  NSString *currentTime;
  int64_t current;
} PB3ServerTimestamp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "current",
        .dataTypeSpecific.className = NULL,
        .number = PB3ServerTimestamp_FieldNumber_Current,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ServerTimestamp__storage_, current),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "currentTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ServerTimestamp_FieldNumber_CurrentTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ServerTimestamp__storage_, currentTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ServerTimestamp class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ServerTimestamp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SubInfoPkRank

@implementation PB3SubInfoPkRank

@dynamic rank;
@dynamic playerIcon;

typedef struct PB3SubInfoPkRank__storage_ {
  uint32_t _has_storage_[1];
  int32_t rank;
  NSString *playerIcon;
} PB3SubInfoPkRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubInfoPkRank_FieldNumber_Rank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SubInfoPkRank__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubInfoPkRank_FieldNumber_PlayerIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SubInfoPkRank__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SubInfoPkRank class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SubInfoPkRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActNewAwardInfo

@implementation PB3ActNewAwardInfo

@dynamic awardId;
@dynamic awardNum;

typedef struct PB3ActNewAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int64_t awardId;
  int64_t awardNum;
} PB3ActNewAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActNewAwardInfo_FieldNumber_AwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActNewAwardInfo__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActNewAwardInfo_FieldNumber_AwardNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActNewAwardInfo__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActNewAwardInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActNewAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RankShow

@implementation PB3RankShow

@dynamic charmLevel;
@dynamic wealthLevel;
@dynamic orAnd;
@dynamic type;

typedef struct PB3RankShow__storage_ {
  uint32_t _has_storage_[1];
  int32_t charmLevel;
  int32_t wealthLevel;
  PB3OrAnd orAnd;
  PB3RankShowType type;
} PB3RankShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankShow_FieldNumber_CharmLevel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RankShow__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankShow_FieldNumber_WealthLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RankShow__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orAnd",
        .dataTypeSpecific.enumDescFunc = PB3OrAnd_EnumDescriptor,
        .number = PB3RankShow_FieldNumber_OrAnd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RankShow__storage_, orAnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RankShowType_EnumDescriptor,
        .number = PB3RankShow_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RankShow__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankShow class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RankShow_OrAnd_RawValue(PB3RankShow *message) {
  GPBDescriptor *descriptor = [PB3RankShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RankShow_FieldNumber_OrAnd];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RankShow_OrAnd_RawValue(PB3RankShow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RankShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RankShow_FieldNumber_OrAnd];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3RankShow_Type_RawValue(PB3RankShow *message) {
  GPBDescriptor *descriptor = [PB3RankShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RankShow_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RankShow_Type_RawValue(PB3RankShow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RankShow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RankShow_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RankShowInfo

@implementation PB3RankShowInfo

@dynamic cfgArray, cfgArray_Count;

typedef struct PB3RankShowInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cfgArray;
} PB3RankShowInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RankShow),
        .number = PB3RankShowInfo_FieldNumber_CfgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RankShowInfo__storage_, cfgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankShowInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankShowInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LiveCharacter

@implementation PB3LiveCharacter

@dynamic modelId;
@dynamic stickerListArray, stickerListArray_Count;
@dynamic codeName;
@dynamic hearts;
@dynamic telepathic;

typedef struct PB3LiveCharacter__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *stickerListArray;
  NSString *codeName;
  int64_t modelId;
  int64_t hearts;
} PB3LiveCharacter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveCharacter_FieldNumber_ModelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LiveCharacter__storage_, modelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "stickerListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveCharacter_FieldNumber_StickerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LiveCharacter__storage_, stickerListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "codeName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveCharacter_FieldNumber_CodeName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LiveCharacter__storage_, codeName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hearts",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveCharacter_FieldNumber_Hearts,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LiveCharacter__storage_, hearts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "telepathic",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveCharacter_FieldNumber_Telepathic,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LiveCharacter class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LiveCharacter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceFeature

@implementation PB3VoiceFeature

@dynamic voiceURL;
@dynamic primaryName;
@dynamic primaryScore;
@dynamic subName1;
@dynamic subScore1;
@dynamic subName2;
@dynamic subScore2;
@dynamic voiceDesc;
@dynamic voiceRank;
@dynamic cpName;

typedef struct PB3VoiceFeature__storage_ {
  uint32_t _has_storage_[1];
  NSString *voiceURL;
  NSString *primaryName;
  NSString *subName1;
  NSString *subName2;
  NSString *voiceDesc;
  NSString *cpName;
  int64_t primaryScore;
  int64_t subScore1;
  int64_t subScore2;
  int64_t voiceRank;
} PB3VoiceFeature__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_VoiceURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, voiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "primaryName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_PrimaryName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, primaryName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "primaryScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_PrimaryScore,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, primaryScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "subName1",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_SubName1,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, subName1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subScore1",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_SubScore1,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, subScore1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "subName2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_SubName2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, subName2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subScore2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_SubScore2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, subScore2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voiceDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_VoiceDesc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, voiceDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_VoiceRank,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, voiceRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cpName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceFeature_FieldNumber_CpName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3VoiceFeature__storage_, cpName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceFeature class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceFeature__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AccountRes

@implementation PB3AccountRes

@dynamic id_p;
@dynamic createAt;
@dynamic loginAt;
@dynamic name;
@dynamic offineAt;
@dynamic salt;
@dynamic loginIp;
@dynamic type;
@dynamic phone;
@dynamic flags;
@dynamic adChannel;
@dynamic adType;
@dynamic createIp;
@dynamic deviceType;
@dynamic deviceId;
@dynamic realChannel;
@dynamic channelTypeId;
@dynamic advendorId;
@dynamic advendorSubid;
@dynamic pkgDeviceType;
@dynamic application;

typedef struct PB3AccountRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t createAt;
  int32_t loginAt;
  int32_t offineAt;
  int32_t type;
  int32_t flags;
  int32_t adChannel;
  int32_t adType;
  PB3DeviceType deviceType;
  int32_t realChannel;
  int32_t pkgDeviceType;
  NSString *name;
  NSString *salt;
  NSString *loginIp;
  NSString *phone;
  NSString *createIp;
  NSString *deviceId;
  NSString *application;
  int64_t id_p;
  int64_t channelTypeId;
  int64_t advendorId;
  int64_t advendorSubid;
} PB3AccountRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_CreateAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "loginAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_LoginAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, loginAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offineAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_OffineAt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, offineAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_Salt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loginIp",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_LoginIp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, loginIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_Phone,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_Flags,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "adChannel",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_AdChannel,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, adChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "adType",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_AdType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, adType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createIp",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_CreateIp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, createIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3AccountRes_FieldNumber_DeviceType,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_DeviceId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realChannel",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_RealChannel,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, realChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channelTypeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_ChannelTypeId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, channelTypeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "advendorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_AdvendorId,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, advendorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "advendorSubid",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_AdvendorSubid,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, advendorSubid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pkgDeviceType",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_PkgDeviceType,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, pkgDeviceType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "application",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccountRes_FieldNumber_Application,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3AccountRes__storage_, application),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AccountRes class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AccountRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\r\t\000\016\006\000\020\n\000\021\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AccountRes_DeviceType_RawValue(PB3AccountRes *message) {
  GPBDescriptor *descriptor = [PB3AccountRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccountRes_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AccountRes_DeviceType_RawValue(PB3AccountRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AccountRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccountRes_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CreditScore

@implementation PB3CreditScore

@dynamic status;
@dynamic score;
@dynamic level;

typedef struct PB3CreditScore__storage_ {
  uint32_t _has_storage_[1];
  PB3CreditScoreStatus status;
  int32_t score;
  PB3CreditScoreLevel level;
} PB3CreditScore__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3CreditScoreStatus_EnumDescriptor,
        .number = PB3CreditScore_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScore__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScore_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScore__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PB3CreditScoreLevel_EnumDescriptor,
        .number = PB3CreditScore_FieldNumber_Level,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScore__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScore class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScore__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CreditScore_Status_RawValue(PB3CreditScore *message) {
  GPBDescriptor *descriptor = [PB3CreditScore descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScore_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CreditScore_Status_RawValue(PB3CreditScore *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CreditScore descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScore_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CreditScore_Level_RawValue(PB3CreditScore *message) {
  GPBDescriptor *descriptor = [PB3CreditScore descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScore_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CreditScore_Level_RawValue(PB3CreditScore *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CreditScore descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScore_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CreditScorePrivilege

@implementation PB3CreditScorePrivilege

@dynamic type;
@dynamic freeChargeNum;
@dynamic depositNum;
@dynamic creditScore;

typedef struct PB3CreditScorePrivilege__storage_ {
  uint32_t _has_storage_[1];
  PB3CreditScorePrivilegeType type;
  int32_t creditScore;
  int64_t freeChargeNum;
  int64_t depositNum;
} PB3CreditScorePrivilege__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CreditScorePrivilegeType_EnumDescriptor,
        .number = PB3CreditScorePrivilege_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreditScorePrivilege__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "freeChargeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePrivilege_FieldNumber_FreeChargeNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CreditScorePrivilege__storage_, freeChargeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "depositNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePrivilege_FieldNumber_DepositNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CreditScorePrivilege__storage_, depositNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "creditScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreditScorePrivilege_FieldNumber_CreditScore,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CreditScorePrivilege__storage_, creditScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreditScorePrivilege class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreditScorePrivilege__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CreditScorePrivilege_Type_RawValue(PB3CreditScorePrivilege *message) {
  GPBDescriptor *descriptor = [PB3CreditScorePrivilege descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScorePrivilege_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CreditScorePrivilege_Type_RawValue(PB3CreditScorePrivilege *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CreditScorePrivilege descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CreditScorePrivilege_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PairInt32Num

@implementation PB3PairInt32Num

@dynamic num1;
@dynamic num2;

typedef struct PB3PairInt32Num__storage_ {
  uint32_t _has_storage_[1];
  int32_t num1;
  int32_t num2;
} PB3PairInt32Num__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num1",
        .dataTypeSpecific.className = NULL,
        .number = PB3PairInt32Num_FieldNumber_Num1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PairInt32Num__storage_, num1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PairInt32Num_FieldNumber_Num2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PairInt32Num__storage_, num2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PairInt32Num class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PairInt32Num__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PairInt64Num

@implementation PB3PairInt64Num

@dynamic num1;
@dynamic num2;

typedef struct PB3PairInt64Num__storage_ {
  uint32_t _has_storage_[1];
  int64_t num1;
  int64_t num2;
} PB3PairInt64Num__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num1",
        .dataTypeSpecific.className = NULL,
        .number = PB3PairInt64Num_FieldNumber_Num1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PairInt64Num__storage_, num1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PairInt64Num_FieldNumber_Num2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PairInt64Num__storage_, num2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PairInt64Num class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PairInt64Num__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerWeekCP

@implementation PB3PlayerWeekCP

@dynamic playerId;
@dynamic name;
@dynamic icon;
@dynamic sex;
@dynamic isClanSign;
@dynamic isInvite;

typedef struct PB3PlayerWeekCP__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *name;
  NSString *icon;
  int64_t playerId;
} PB3PlayerWeekCP__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerWeekCP_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerWeekCP__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerWeekCP_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerWeekCP__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerWeekCP_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerWeekCP__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3PlayerWeekCP_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerWeekCP__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isClanSign",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerWeekCP_FieldNumber_IsClanSign,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isInvite",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerWeekCP_FieldNumber_IsInvite,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerWeekCP class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerWeekCP__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerWeekCP_Sex_RawValue(PB3PlayerWeekCP *message) {
  GPBDescriptor *descriptor = [PB3PlayerWeekCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerWeekCP_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerWeekCP_Sex_RawValue(PB3PlayerWeekCP *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerWeekCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerWeekCP_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3WeekCPInfo

@implementation PB3WeekCPInfo

@dynamic inviteTimes;
@dynamic id_p;
@dynamic status;
@dynamic source;
@dynamic hasCp, cp;
@dynamic expireTime;
@dynamic totalMission;
@dynamic completedMission;
@dynamic rewardsArray, rewardsArray_Count;
@dynamic imInviteTimes;
@dynamic hasInviteConf, inviteConf;

typedef struct PB3WeekCPInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t inviteTimes;
  PB3WeekCPInfoStatus status;
  PB3WeekCPSource source;
  int32_t totalMission;
  int32_t completedMission;
  int32_t imInviteTimes;
  NSString *id_p;
  PB3PlayerWeekCP *cp;
  NSMutableArray *rewardsArray;
  PB3WeekCPInviteConf *inviteConf;
  int64_t expireTime;
} PB3WeekCPInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInfo_FieldNumber_InviteTimes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, inviteTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInfo_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3WeekCPInfoStatus_EnumDescriptor,
        .number = PB3WeekCPInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "source",
        .dataTypeSpecific.enumDescFunc = PB3WeekCPSource_EnumDescriptor,
        .number = PB3WeekCPInfo_FieldNumber_Source,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cp",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerWeekCP),
        .number = PB3WeekCPInfo_FieldNumber_Cp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, cp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInfo_FieldNumber_ExpireTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalMission",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInfo_FieldNumber_TotalMission,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, totalMission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "completedMission",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInfo_FieldNumber_CompletedMission,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, completedMission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rewardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WeekCPReward),
        .number = PB3WeekCPInfo_FieldNumber_RewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, rewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imInviteTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInfo_FieldNumber_ImInviteTimes,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, imInviteTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviteConf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WeekCPInviteConf),
        .number = PB3WeekCPInfo_FieldNumber_InviteConf,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3WeekCPInfo__storage_, inviteConf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeekCPInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeekCPInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WeekCPInfo_Status_RawValue(PB3WeekCPInfo *message) {
  GPBDescriptor *descriptor = [PB3WeekCPInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekCPInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WeekCPInfo_Status_RawValue(PB3WeekCPInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WeekCPInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekCPInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3WeekCPInfo_Source_RawValue(PB3WeekCPInfo *message) {
  GPBDescriptor *descriptor = [PB3WeekCPInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekCPInfo_FieldNumber_Source];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WeekCPInfo_Source_RawValue(PB3WeekCPInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WeekCPInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekCPInfo_FieldNumber_Source];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3WeekCPReward

@implementation PB3WeekCPReward

@dynamic imageURL;
@dynamic rewardName;

typedef struct PB3WeekCPReward__storage_ {
  uint32_t _has_storage_[1];
  NSString *imageURL;
  NSString *rewardName;
} PB3WeekCPReward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPReward_FieldNumber_ImageURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeekCPReward__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rewardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPReward_FieldNumber_RewardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeekCPReward__storage_, rewardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeekCPReward class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeekCPReward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HighlightGift

@implementation PB3HighlightGift

@dynamic giftId;
@dynamic level;
@dynamic starLevel;
@dynamic flashCardImgURL;
@dynamic giftNum;
@dynamic hasSender, sender;
@dynamic hasReceiver, receiver;
@dynamic createdAt;
@dynamic operator_p;
@dynamic giftName;
@dynamic logId;
@dynamic flashCardBgImgURL;
@dynamic bigFlashCardImgURL;
@dynamic bigFlashCardBgImgURL;

typedef struct PB3HighlightGift__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftId;
  PB3HighlightGiftLevel level;
  int32_t starLevel;
  uint32_t giftNum;
  NSString *flashCardImgURL;
  PB3SimplePlayer *sender;
  PB3SimplePlayer *receiver;
  NSString *operator_p;
  NSString *giftName;
  NSString *flashCardBgImgURL;
  NSString *bigFlashCardImgURL;
  NSString *bigFlashCardBgImgURL;
  int64_t createdAt;
  int64_t logId;
} PB3HighlightGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PB3HighlightGiftLevel_EnumDescriptor,
        .number = PB3HighlightGift_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "starLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_StarLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, starLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flashCardImgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_FlashCardImgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, flashCardImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_GiftNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sender",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3HighlightGift_FieldNumber_Sender,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiver",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3HighlightGift_FieldNumber_Receiver,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, receiver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_CreatedAt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "operator_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_Operator_p,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, operator_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_GiftName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logId",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_LogId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, logId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "flashCardBgImgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_FlashCardBgImgURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, flashCardBgImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigFlashCardImgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_BigFlashCardImgURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, bigFlashCardImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigFlashCardBgImgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3HighlightGift_FieldNumber_BigFlashCardBgImgURL,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3HighlightGift__storage_, bigFlashCardBgImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HighlightGift class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HighlightGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\004\005\244\243\241!!\000\014\005\244\242\243\241!!\000\r\003\245\244\243\241!!\000\016\003\245\244\242\243\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3HighlightGift_Level_RawValue(PB3HighlightGift *message) {
  GPBDescriptor *descriptor = [PB3HighlightGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3HighlightGift_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3HighlightGift_Level_RawValue(PB3HighlightGift *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3HighlightGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3HighlightGift_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EnterCubismEffect

@implementation PB3EnterCubismEffect

@dynamic cubismIcon;
@dynamic bannerURL;
@dynamic enterSentence;
@dynamic enterSentenceColor;
@dynamic nicknameColor;

typedef struct PB3EnterCubismEffect__storage_ {
  uint32_t _has_storage_[1];
  NSString *cubismIcon;
  NSString *bannerURL;
  NSString *enterSentence;
  NSString *enterSentenceColor;
  NSString *nicknameColor;
} PB3EnterCubismEffect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterCubismEffect_FieldNumber_CubismIcon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EnterCubismEffect__storage_, cubismIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bannerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterCubismEffect_FieldNumber_BannerURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EnterCubismEffect__storage_, bannerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enterSentence",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterCubismEffect_FieldNumber_EnterSentence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EnterCubismEffect__storage_, enterSentence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enterSentenceColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterCubismEffect_FieldNumber_EnterSentenceColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EnterCubismEffect__storage_, enterSentenceColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nicknameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterCubismEffect_FieldNumber_NicknameColor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EnterCubismEffect__storage_, nicknameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EnterCubismEffect class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EnterCubismEffect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeekCPInviteConf

@implementation PB3WeekCPInviteConf

@dynamic inviteContent;
@dynamic btnContent;
@dynamic URLListArray, URLListArray_Count;
@dynamic tips;

typedef struct PB3WeekCPInviteConf__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteContent;
  NSString *btnContent;
  NSMutableArray *URLListArray;
  NSString *tips;
} PB3WeekCPInviteConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInviteConf_FieldNumber_InviteContent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeekCPInviteConf__storage_, inviteContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInviteConf_FieldNumber_BtnContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeekCPInviteConf__storage_, btnContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URLListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInviteConf_FieldNumber_URLListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WeekCPInviteConf__storage_, URLListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekCPInviteConf_FieldNumber_Tips,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WeekCPInviteConf__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeekCPInviteConf class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeekCPInviteConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\000url_list\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeekTravelInfo

@implementation PB3WeekTravelInfo

@dynamic status;
@dynamic source;
@dynamic hasInviter, inviter;
@dynamic hasInvitee, invitee;
@dynamic travelId;
@dynamic curInviteTimes;
@dynamic inviteTimes;
@dynamic inviteText;
@dynamic validUntil;
@dynamic awardIconListArray, awardIconListArray_Count;
@dynamic cityId;
@dynamic rejectEndTime;
@dynamic inviteExpiredText;
@dynamic curExp;
@dynamic finalExp;
@dynamic expireTime;
@dynamic cityIcon;
@dynamic cityName;
@dynamic startDate;
@dynamic expURL;

typedef struct PB3WeekTravelInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3WeekTravelInviteStatus status;
  PB3WeekTravelSource source;
  int32_t curInviteTimes;
  int32_t inviteTimes;
  int32_t cityId;
  int32_t curExp;
  int32_t finalExp;
  PB3Player *inviter;
  PB3Player *invitee;
  NSString *travelId;
  NSString *inviteText;
  NSMutableArray *awardIconListArray;
  NSString *inviteExpiredText;
  NSString *cityIcon;
  NSString *cityName;
  NSString *expURL;
  int64_t validUntil;
  int64_t rejectEndTime;
  int64_t expireTime;
  int64_t startDate;
} PB3WeekTravelInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3WeekTravelInviteStatus_EnumDescriptor,
        .number = PB3WeekTravelInfo_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "source",
        .dataTypeSpecific.enumDescFunc = PB3WeekTravelSource_EnumDescriptor,
        .number = PB3WeekTravelInfo_FieldNumber_Source,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "inviter",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3WeekTravelInfo_FieldNumber_Inviter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, inviter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "invitee",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3WeekTravelInfo_FieldNumber_Invitee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, invitee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "travelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_TravelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, travelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "curInviteTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_CurInviteTimes,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, curInviteTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviteTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_InviteTimes,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, inviteTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviteText",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_InviteText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, inviteText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validUntil",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_ValidUntil,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, validUntil),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardIconListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_AwardIconListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, awardIconListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_CityId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, cityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rejectEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_RejectEndTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, rejectEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteExpiredText",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_InviteExpiredText,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, inviteExpiredText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "curExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_CurExp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, curExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "finalExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_FinalExp,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, finalExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_ExpireTime,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cityIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_CityIcon,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, cityIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_CityName,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, cityName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startDate",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_StartDate,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, startDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekTravelInfo_FieldNumber_ExpURL,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3WeekTravelInfo__storage_, expURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeekTravelInfo class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeekTravelInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001.\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WeekTravelInfo_Status_RawValue(PB3WeekTravelInfo *message) {
  GPBDescriptor *descriptor = [PB3WeekTravelInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekTravelInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WeekTravelInfo_Status_RawValue(PB3WeekTravelInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WeekTravelInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekTravelInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3WeekTravelInfo_Source_RawValue(PB3WeekTravelInfo *message) {
  GPBDescriptor *descriptor = [PB3WeekTravelInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekTravelInfo_FieldNumber_Source];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WeekTravelInfo_Source_RawValue(PB3WeekTravelInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WeekTravelInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeekTravelInfo_FieldNumber_Source];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3MatchWeekCPInvite

@implementation PB3MatchWeekCPInvite

@dynamic sponsorId;
@dynamic receiverId;

typedef struct PB3MatchWeekCPInvite__storage_ {
  uint32_t _has_storage_[1];
  int64_t sponsorId;
  int64_t receiverId;
} PB3MatchWeekCPInvite__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sponsorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MatchWeekCPInvite_FieldNumber_SponsorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MatchWeekCPInvite__storage_, sponsorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MatchWeekCPInvite_FieldNumber_ReceiverId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MatchWeekCPInvite__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MatchWeekCPInvite class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MatchWeekCPInvite__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SystemNoticeEvent

@implementation PB3SystemNoticeEvent

@dynamic eventType;
@dynamic eventBody;
@dynamic remake;

typedef struct PB3SystemNoticeEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *eventType;
  NSString *eventBody;
  NSString *remake;
} PB3SystemNoticeEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeEvent_FieldNumber_EventType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SystemNoticeEvent__storage_, eventType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventBody",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeEvent_FieldNumber_EventBody,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SystemNoticeEvent__storage_, eventBody),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remake",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeEvent_FieldNumber_Remake,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SystemNoticeEvent__storage_, remake),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SystemNoticeEvent class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SystemNoticeEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityNoticeEvent

@implementation PB3ActivityNoticeEvent

@dynamic funcName;
@dynamic actId;
@dynamic relId;
@dynamic boxId;
@dynamic roomId;

typedef struct PB3ActivityNoticeEvent__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t boxId;
  NSString *funcName;
  int64_t roomId;
} PB3ActivityNoticeEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "funcName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityNoticeEvent_FieldNumber_FuncName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityNoticeEvent__storage_, funcName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityNoticeEvent_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityNoticeEvent__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityNoticeEvent_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityNoticeEvent__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boxId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityNoticeEvent_FieldNumber_BoxId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActivityNoticeEvent__storage_, boxId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityNoticeEvent_FieldNumber_RoomId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActivityNoticeEvent__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityNoticeEvent class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityNoticeEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IMCustomCommonTextMsg

@implementation PB3IMCustomCommonTextMsg

@dynamic content;

typedef struct PB3IMCustomCommonTextMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
} PB3IMCustomCommonTextMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMCustomCommonTextMsg_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IMCustomCommonTextMsg__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMCustomCommonTextMsg class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMCustomCommonTextMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomTopRightCornerLabelChangeField

@implementation PB3RoomTopRightCornerLabelChangeField

@dynamic type;
@dynamic value;

typedef struct PB3RoomTopRightCornerLabelChangeField__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomTopRightCornerLabelFiledType type;
  NSString *value;
} PB3RoomTopRightCornerLabelChangeField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RoomTopRightCornerLabelFiledType_EnumDescriptor,
        .number = PB3RoomTopRightCornerLabelChangeField_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelChangeField__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelChangeField_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelChangeField__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomTopRightCornerLabelChangeField class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomTopRightCornerLabelChangeField__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomTopRightCornerLabelChangeField_Type_RawValue(PB3RoomTopRightCornerLabelChangeField *message) {
  GPBDescriptor *descriptor = [PB3RoomTopRightCornerLabelChangeField descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomTopRightCornerLabelChangeField_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomTopRightCornerLabelChangeField_Type_RawValue(PB3RoomTopRightCornerLabelChangeField *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomTopRightCornerLabelChangeField descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomTopRightCornerLabelChangeField_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3InteractTopicEffect

@implementation PB3InteractTopicEffect

@dynamic topic;
@dynamic playerId;

typedef struct PB3InteractTopicEffect__storage_ {
  uint32_t _has_storage_[1];
  NSString *topic;
  int64_t playerId;
} PB3InteractTopicEffect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topic",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractTopicEffect_FieldNumber_Topic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InteractTopicEffect__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractTopicEffect_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InteractTopicEffect__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractTopicEffect class]
                                     rootClass:[PB3CommonExtRoot class]
                                          file:PB3CommonExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractTopicEffect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
