// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/room.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/RoomExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
#import "pb/BillExt.pbobjc.h"
#import "pb/RedEnvelopeExt.pbobjc.h"
#import "pb/NobilityExt.pbobjc.h"
#import "pb/ShowExt.pbobjc.h"
#import "pb/RoomSingleLiveExt.pbobjc.h"
#import "pb/AcmConfExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3RoomExtRoot

@implementation PB3RoomExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3RoomExtRoot_FileDescriptor

static GPBFileDescriptor *PB3RoomExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3RoomErr

GPBEnumDescriptor *PB3RoomErr_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ReSuccess\000ErrCodePlayerFull\000ErrCodeRoomN"
        "otFound\000ErrCodeBlack\000ErrCodeKickout\000ErrC"
        "odeHasPassword\000ErrCodeRoomClose\000ErrCodeP"
        "asswordErr\000ErrCodeRelogin\000ErrCodeNoInRoo"
        "m\000ErrCodeTargetNoInRoom\000ErrCodePermissio"
        "n\000ErrCodeChairHasPlayer\000ErrCodeChairQueu"
        "eFull\000ErrCodeChairAlready\000ErrCodeFlowerN"
        "otEnough\000ErrCodeTooFrequent\000ErrCodeLever"
        "Low\000ErrCodeMicro\000ErrCodeBanSpeak\000ErrCode"
        "BanBdfriend\000ErrCodeNotOnChair\000ErrCodeCha"
        "irCloseAlready\000ErrCodeChairQueueBan\000ErrC"
        "odeChairTargetAlready\000ErrCodeSitOnlyAdmi"
        "n\000ErrCodeMateChoiceAlready\000ErrCodeMateCh"
        "oiceStop\000ErrCodeVoteAlready\000ErrCodeVoteN"
        "otRun\000ErrCodeVoteNotEnough\000ErrCodeRoomBa"
        "n\000ErrCodeRoomNameDirty\000ErrCodeBfheadline"
        "Late\000ErrCodeBfheadlineLackGold\000ErrCodeBf"
        "headlineTime\000ErrCodeBfheadlinePubGold\000Er"
        "rCodeBfheadlineLevel\000ErrCodeRoomPattern\000"
        "ErrCodeRoomCharmLevel\000ErrCodeNoInRoomRep"
        "eatEnter\000ErrCodeImageNotFound\000ErrCodePat"
        "tenLimit\000ErrCodeImageFriendLimit\000ErrCode"
        "IntimateSit\000ErrCodeIntimateNotOpen\000ErrCo"
        "deRoomFull\000ErrCodeCertifyWord\000ErrCodeCer"
        "tifyOnChair\000ErrCodeCertifyBroadFriend\000Er"
        "rCodeCertifyTiaoTiao\000ErrCodeCertifyHeadl"
        "ine\000ErrCodeRoomOwnerCertifyOldVersionMus"
        "t\000ErrCodeRoomOwnerCertifyNewVersionMust\000"
        "ErrCodeRoomSitChairToQueue\000ErrCodeRoomSi"
        "tChairFull\000ErrCodeRoomSitLvLimit\000ErrCode"
        "CertifyOpenMic\000ErrCodeEffectMoodRoom\000Err"
        "CodeEffectMoodChair\000ErrCodeEffectPriorit"
        "y\000ErrCodeRoomOptChairQueueSingle\000ErrCode"
        "RoomOptChairQueueDouble\000ErrCodeRoomSetCh"
        "airQueueDouble\000ErrCodeLeaveRoomInReconne"
        "ct\000";
    static const int32_t values[] = {
        PB3RoomErr_ReSuccess,
        PB3RoomErr_ErrCodePlayerFull,
        PB3RoomErr_ErrCodeRoomNotFound,
        PB3RoomErr_ErrCodeBlack,
        PB3RoomErr_ErrCodeKickout,
        PB3RoomErr_ErrCodeHasPassword,
        PB3RoomErr_ErrCodeRoomClose,
        PB3RoomErr_ErrCodePasswordErr,
        PB3RoomErr_ErrCodeRelogin,
        PB3RoomErr_ErrCodeNoInRoom,
        PB3RoomErr_ErrCodeTargetNoInRoom,
        PB3RoomErr_ErrCodePermission,
        PB3RoomErr_ErrCodeChairHasPlayer,
        PB3RoomErr_ErrCodeChairQueueFull,
        PB3RoomErr_ErrCodeChairAlready,
        PB3RoomErr_ErrCodeFlowerNotEnough,
        PB3RoomErr_ErrCodeTooFrequent,
        PB3RoomErr_ErrCodeLeverLow,
        PB3RoomErr_ErrCodeMicro,
        PB3RoomErr_ErrCodeBanSpeak,
        PB3RoomErr_ErrCodeBanBdfriend,
        PB3RoomErr_ErrCodeNotOnChair,
        PB3RoomErr_ErrCodeChairCloseAlready,
        PB3RoomErr_ErrCodeChairQueueBan,
        PB3RoomErr_ErrCodeChairTargetAlready,
        PB3RoomErr_ErrCodeSitOnlyAdmin,
        PB3RoomErr_ErrCodeMateChoiceAlready,
        PB3RoomErr_ErrCodeMateChoiceStop,
        PB3RoomErr_ErrCodeVoteAlready,
        PB3RoomErr_ErrCodeVoteNotRun,
        PB3RoomErr_ErrCodeVoteNotEnough,
        PB3RoomErr_ErrCodeRoomBan,
        PB3RoomErr_ErrCodeRoomNameDirty,
        PB3RoomErr_ErrCodeBfheadlineLate,
        PB3RoomErr_ErrCodeBfheadlineLackGold,
        PB3RoomErr_ErrCodeBfheadlineTime,
        PB3RoomErr_ErrCodeBfheadlinePubGold,
        PB3RoomErr_ErrCodeBfheadlineLevel,
        PB3RoomErr_ErrCodeRoomPattern,
        PB3RoomErr_ErrCodeRoomCharmLevel,
        PB3RoomErr_ErrCodeNoInRoomRepeatEnter,
        PB3RoomErr_ErrCodeImageNotFound,
        PB3RoomErr_ErrCodePattenLimit,
        PB3RoomErr_ErrCodeImageFriendLimit,
        PB3RoomErr_ErrCodeIntimateSit,
        PB3RoomErr_ErrCodeIntimateNotOpen,
        PB3RoomErr_ErrCodeRoomFull,
        PB3RoomErr_ErrCodeCertifyWord,
        PB3RoomErr_ErrCodeCertifyOnChair,
        PB3RoomErr_ErrCodeCertifyBroadFriend,
        PB3RoomErr_ErrCodeCertifyTiaoTiao,
        PB3RoomErr_ErrCodeCertifyHeadline,
        PB3RoomErr_ErrCodeRoomOwnerCertifyOldVersionMust,
        PB3RoomErr_ErrCodeRoomOwnerCertifyNewVersionMust,
        PB3RoomErr_ErrCodeRoomSitChairToQueue,
        PB3RoomErr_ErrCodeRoomSitChairFull,
        PB3RoomErr_ErrCodeRoomSitLvLimit,
        PB3RoomErr_ErrCodeCertifyOpenMic,
        PB3RoomErr_ErrCodeEffectMoodRoom,
        PB3RoomErr_ErrCodeEffectMoodChair,
        PB3RoomErr_ErrCodeEffectPriority,
        PB3RoomErr_ErrCodeRoomOptChairQueueSingle,
        PB3RoomErr_ErrCodeRoomOptChairQueueDouble,
        PB3RoomErr_ErrCodeRoomSetChairQueueDouble,
        PB3RoomErr_ErrCodeLeaveRoomInReconnect,
    };
    static const char *extraTextFormatInfo = "A\000b\207\000\001\021\000\002\023\000\003\014\000\004\016\000\005\022\000\006\020\000\007\022\000\010\016\000\t\017\000\n\025\000\013\021\000\014\025\000\r\025\000\016\023\000\017\026\000\020\022\000\021\017\000\022\014\000\023\017\000\024\013b\005\000\025\021\000\026\030\000\027\024\000\030\031\000\031\023\000\032\030\000\033\025\000\034\022\000\035\021\000\036\024\000\037\016\000 \024\000!\010b\013\000\"\010b\017\000#\010b\013\000$\010b\016\000%\010b\014\000&\022\000\'\025\000(\032\000)\024\000*\022\000+\027\000,\022\000-\026\000.\017\000/\022\0000\025\0001\031\0002\026\0003\026\0004\037\006\0005\037\006\0006\032\0007\027\0008\025\0009\025\000:\025\000;\026\000<\025\000=\036\000>\036\000?\036\000@\033\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomErr)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomErr_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomErr_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomErr_ReSuccess:
    case PB3RoomErr_ErrCodePlayerFull:
    case PB3RoomErr_ErrCodeRoomNotFound:
    case PB3RoomErr_ErrCodeBlack:
    case PB3RoomErr_ErrCodeKickout:
    case PB3RoomErr_ErrCodeHasPassword:
    case PB3RoomErr_ErrCodeRoomClose:
    case PB3RoomErr_ErrCodePasswordErr:
    case PB3RoomErr_ErrCodeRelogin:
    case PB3RoomErr_ErrCodeNoInRoom:
    case PB3RoomErr_ErrCodeTargetNoInRoom:
    case PB3RoomErr_ErrCodePermission:
    case PB3RoomErr_ErrCodeChairHasPlayer:
    case PB3RoomErr_ErrCodeChairQueueFull:
    case PB3RoomErr_ErrCodeChairAlready:
    case PB3RoomErr_ErrCodeFlowerNotEnough:
    case PB3RoomErr_ErrCodeTooFrequent:
    case PB3RoomErr_ErrCodeLeverLow:
    case PB3RoomErr_ErrCodeMicro:
    case PB3RoomErr_ErrCodeBanSpeak:
    case PB3RoomErr_ErrCodeBanBdfriend:
    case PB3RoomErr_ErrCodeNotOnChair:
    case PB3RoomErr_ErrCodeChairCloseAlready:
    case PB3RoomErr_ErrCodeChairQueueBan:
    case PB3RoomErr_ErrCodeChairTargetAlready:
    case PB3RoomErr_ErrCodeSitOnlyAdmin:
    case PB3RoomErr_ErrCodeMateChoiceAlready:
    case PB3RoomErr_ErrCodeMateChoiceStop:
    case PB3RoomErr_ErrCodeVoteAlready:
    case PB3RoomErr_ErrCodeVoteNotRun:
    case PB3RoomErr_ErrCodeVoteNotEnough:
    case PB3RoomErr_ErrCodeRoomBan:
    case PB3RoomErr_ErrCodeRoomNameDirty:
    case PB3RoomErr_ErrCodeBfheadlineLate:
    case PB3RoomErr_ErrCodeBfheadlineLackGold:
    case PB3RoomErr_ErrCodeBfheadlineTime:
    case PB3RoomErr_ErrCodeBfheadlinePubGold:
    case PB3RoomErr_ErrCodeBfheadlineLevel:
    case PB3RoomErr_ErrCodeRoomPattern:
    case PB3RoomErr_ErrCodeRoomCharmLevel:
    case PB3RoomErr_ErrCodeNoInRoomRepeatEnter:
    case PB3RoomErr_ErrCodeImageNotFound:
    case PB3RoomErr_ErrCodePattenLimit:
    case PB3RoomErr_ErrCodeImageFriendLimit:
    case PB3RoomErr_ErrCodeIntimateSit:
    case PB3RoomErr_ErrCodeIntimateNotOpen:
    case PB3RoomErr_ErrCodeRoomFull:
    case PB3RoomErr_ErrCodeCertifyWord:
    case PB3RoomErr_ErrCodeCertifyOnChair:
    case PB3RoomErr_ErrCodeCertifyBroadFriend:
    case PB3RoomErr_ErrCodeCertifyTiaoTiao:
    case PB3RoomErr_ErrCodeCertifyHeadline:
    case PB3RoomErr_ErrCodeRoomOwnerCertifyOldVersionMust:
    case PB3RoomErr_ErrCodeRoomOwnerCertifyNewVersionMust:
    case PB3RoomErr_ErrCodeRoomSitChairToQueue:
    case PB3RoomErr_ErrCodeRoomSitChairFull:
    case PB3RoomErr_ErrCodeRoomSitLvLimit:
    case PB3RoomErr_ErrCodeCertifyOpenMic:
    case PB3RoomErr_ErrCodeEffectMoodRoom:
    case PB3RoomErr_ErrCodeEffectMoodChair:
    case PB3RoomErr_ErrCodeEffectPriority:
    case PB3RoomErr_ErrCodeRoomOptChairQueueSingle:
    case PB3RoomErr_ErrCodeRoomOptChairQueueDouble:
    case PB3RoomErr_ErrCodeRoomSetChairQueueDouble:
    case PB3RoomErr_ErrCodeLeaveRoomInReconnect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomCmdId

GPBEnumDescriptor *PB3RoomCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RcZero\000RcPlayerEnter\000RcPlayerLeave\000RcRoo"
        "mSet\000RcForbidSpeak\000RcKickout\000RcRoomAdmin"
        "Set\000RcCloseRoom\000RcRoomReception\000RcChairS"
        "tatus\000RcChairSpeak\000RcChairSpeakOnOff\000RcA"
        "ccompanyOnOff\000RcChair\000RcChairSit\000RcChair"
        "Move\000RcChairLeaveData\000RcChairQueueOpt\000Rc"
        "QueueJump\000RcChairAdminOpt\000RcChairQeueuSt"
        "atus\000RcChairQeueuClear\000RcChairQeueuAddOr"
        "Del\000RcOnlineFlower\000RcPresentFlower\000RcCha"
        "t\000RcPlayDice\000RcMakeFriend\000RcIntimateSitC"
        "hair\000RcIntimateListChair\000RcStartMateChoi"
        "ce\000RcMateChoiceNum\000RcMateChoiceResult\000Rc"
        "MateMatch\000RcMateNotMatch\000RcMateChairGold"
        "Stream\000RcBroadcastDragonBall\000RcMateMatch"
        "Msg\000RcBroadcastStartVote\000RcBroadcastPubl"
        "ishVote\000RcBfHeadline\000RcMakeFriendNew\000RcM"
        "ateMatchNew\000RcPcaChangeUser\000RcPcaStartPu"
        "sh\000RcPcaStopPush\000RcRoomImageChange\000RcRoo"
        "mOwnerCert\000RcLuckyDrawBroadcast\000RcLuckyD"
        "rawCount\000RcLuckyDrawCancelled\000RcLuckyDra"
        "wParticipator\000RcLuckyDrawResult\000RcLuckyD"
        "rawWinner\000RcRoomHeat\000RcChangeShowChairBu"
        "tton\000RcRoomSwitchVoiceSdk\000RcSendBillTime"
        "\000RcPresenter\000RcChairCharm\000RcReceiveWindo"
        "w\000RcRoomSitLvLimit\000RcRoomOnOffStatus\000RcC"
        "lanChairLimit\000RcRoomUpdateDecorateBg\000RcR"
        "oomBuyDecorateBg\000RcRoomRedEnvelope\000RcRoo"
        "mSkillResult\000RcRoomUseSkill\000RcEnterRoomB"
        "yReceiveWindow\000RcDeviceOpenMicNoticeMyse"
        "lf\000RcBroadcastEnterToMyself\000RcPlayOrder\000"
        "RcPlanOrder\000RcProgramFee\000RcShowLyricCtrl"
        "\000RcRoomShow\000RcShowInfo\000RcOnlineNotice\000Rc"
        "BroadcastStopVote\000RcBroadcastEffectMood\000"
        "RcBroadcastCleanPublicScreen\000RcBroadcast"
        "RoomPattern\000RcBroadcastRoomBanSpeak\000RcBr"
        "oadcastCountDownStart\000RcBroadcastChorus\000"
        "RcBroadcastChorusNew\000RcBroadcastFansReca"
        "ll\000RcBroadcastFansRecallSend\000RcBroadcast"
        "FansRecallEnterRoom\000RcBroadcastLeaveRoom"
        "Recommend\000RcBroadcastFansRecallCancel\000Rc"
        "BroadcastAgodaList\000RcPersonalKickout\000RcB"
        "roadcastTeacherStudentSitChair\000RcBroadca"
        "stTeacherStudentChairList\000RcBroadcastTea"
        "cherStudentEnterRoom\000RcBroadcastMobaTeam"
        "SitChair\000RcBroadcastAddVote\000RcBroadcastL"
        "ive\000RcPkEntry\000RcClanHourRankFirst\000RcClan"
        "HourRank\000RcSingleLivePkEntry\000RcRoomPatte"
        "rnCfg\000RcClanTask\000RcClanTaskDone\000RcWishGi"
        "ft\000RcWishGiftTaskDoneNum\000RcEnterFossaRoo"
        "m\000RcLeaveFossaRoom\000RcOtherRejectFossa\000Rc"
        "OtherLeaveFossaEarly\000RcMateChoice2ChairC"
        "harm\000RcMateChoice2Result\000RcMateChoiceHat"
        "Owner\000RcMateChoiceChangeStatusSuccess\000Rc"
        "MateChoiceSelectChairNumber\000RcMateChoice"
        "2Pairs\000RcMateChoice2ChangeStatusToReady\000"
        "RcMateRoomGoldStat\000RcBgmPlayerSwitch\000RcB"
        "roadcastVoteInfo\000RcBroadcastRoomCubism\000R"
        "cRoomTopRightCornerLabel\000RcRoomDayRankCh"
        "ange\000RcRoomTopRightCornerLabelChange\000RcR"
        "oomEffectConf\000RcHostEnterRoomGameMatch\000R"
        "cBarrageGameEntry\000";
    static const int32_t values[] = {
        PB3RoomCmdId_RcZero,
        PB3RoomCmdId_RcPlayerEnter,
        PB3RoomCmdId_RcPlayerLeave,
        PB3RoomCmdId_RcRoomSet,
        PB3RoomCmdId_RcForbidSpeak,
        PB3RoomCmdId_RcKickout,
        PB3RoomCmdId_RcRoomAdminSet,
        PB3RoomCmdId_RcCloseRoom,
        PB3RoomCmdId_RcRoomReception,
        PB3RoomCmdId_RcChairStatus,
        PB3RoomCmdId_RcChairSpeak,
        PB3RoomCmdId_RcChairSpeakOnOff,
        PB3RoomCmdId_RcAccompanyOnOff,
        PB3RoomCmdId_RcChair,
        PB3RoomCmdId_RcChairSit,
        PB3RoomCmdId_RcChairMove,
        PB3RoomCmdId_RcChairLeaveData,
        PB3RoomCmdId_RcChairQueueOpt,
        PB3RoomCmdId_RcQueueJump,
        PB3RoomCmdId_RcChairAdminOpt,
        PB3RoomCmdId_RcChairQeueuStatus,
        PB3RoomCmdId_RcChairQeueuClear,
        PB3RoomCmdId_RcChairQeueuAddOrDel,
        PB3RoomCmdId_RcOnlineFlower,
        PB3RoomCmdId_RcPresentFlower,
        PB3RoomCmdId_RcChat,
        PB3RoomCmdId_RcPlayDice,
        PB3RoomCmdId_RcMakeFriend,
        PB3RoomCmdId_RcIntimateSitChair,
        PB3RoomCmdId_RcIntimateListChair,
        PB3RoomCmdId_RcStartMateChoice,
        PB3RoomCmdId_RcMateChoiceNum,
        PB3RoomCmdId_RcMateChoiceResult,
        PB3RoomCmdId_RcMateMatch,
        PB3RoomCmdId_RcMateNotMatch,
        PB3RoomCmdId_RcMateChairGoldStream,
        PB3RoomCmdId_RcBroadcastDragonBall,
        PB3RoomCmdId_RcMateMatchMsg,
        PB3RoomCmdId_RcBroadcastStartVote,
        PB3RoomCmdId_RcBroadcastPublishVote,
        PB3RoomCmdId_RcBfHeadline,
        PB3RoomCmdId_RcMakeFriendNew,
        PB3RoomCmdId_RcMateMatchNew,
        PB3RoomCmdId_RcPcaChangeUser,
        PB3RoomCmdId_RcPcaStartPush,
        PB3RoomCmdId_RcPcaStopPush,
        PB3RoomCmdId_RcRoomImageChange,
        PB3RoomCmdId_RcRoomOwnerCert,
        PB3RoomCmdId_RcLuckyDrawBroadcast,
        PB3RoomCmdId_RcLuckyDrawCount,
        PB3RoomCmdId_RcLuckyDrawCancelled,
        PB3RoomCmdId_RcLuckyDrawParticipator,
        PB3RoomCmdId_RcLuckyDrawResult,
        PB3RoomCmdId_RcLuckyDrawWinner,
        PB3RoomCmdId_RcRoomHeat,
        PB3RoomCmdId_RcChangeShowChairButton,
        PB3RoomCmdId_RcRoomSwitchVoiceSdk,
        PB3RoomCmdId_RcSendBillTime,
        PB3RoomCmdId_RcPresenter,
        PB3RoomCmdId_RcChairCharm,
        PB3RoomCmdId_RcReceiveWindow,
        PB3RoomCmdId_RcRoomSitLvLimit,
        PB3RoomCmdId_RcRoomOnOffStatus,
        PB3RoomCmdId_RcClanChairLimit,
        PB3RoomCmdId_RcRoomUpdateDecorateBg,
        PB3RoomCmdId_RcRoomBuyDecorateBg,
        PB3RoomCmdId_RcRoomRedEnvelope,
        PB3RoomCmdId_RcRoomSkillResult,
        PB3RoomCmdId_RcRoomUseSkill,
        PB3RoomCmdId_RcEnterRoomByReceiveWindow,
        PB3RoomCmdId_RcDeviceOpenMicNoticeMyself,
        PB3RoomCmdId_RcBroadcastEnterToMyself,
        PB3RoomCmdId_RcPlayOrder,
        PB3RoomCmdId_RcPlanOrder,
        PB3RoomCmdId_RcProgramFee,
        PB3RoomCmdId_RcShowLyricCtrl,
        PB3RoomCmdId_RcRoomShow,
        PB3RoomCmdId_RcShowInfo,
        PB3RoomCmdId_RcOnlineNotice,
        PB3RoomCmdId_RcBroadcastStopVote,
        PB3RoomCmdId_RcBroadcastEffectMood,
        PB3RoomCmdId_RcBroadcastCleanPublicScreen,
        PB3RoomCmdId_RcBroadcastRoomPattern,
        PB3RoomCmdId_RcBroadcastRoomBanSpeak,
        PB3RoomCmdId_RcBroadcastCountDownStart,
        PB3RoomCmdId_RcBroadcastChorus,
        PB3RoomCmdId_RcBroadcastChorusNew,
        PB3RoomCmdId_RcBroadcastFansRecall,
        PB3RoomCmdId_RcBroadcastFansRecallSend,
        PB3RoomCmdId_RcBroadcastFansRecallEnterRoom,
        PB3RoomCmdId_RcBroadcastLeaveRoomRecommend,
        PB3RoomCmdId_RcBroadcastFansRecallCancel,
        PB3RoomCmdId_RcBroadcastAgodaList,
        PB3RoomCmdId_RcPersonalKickout,
        PB3RoomCmdId_RcBroadcastTeacherStudentSitChair,
        PB3RoomCmdId_RcBroadcastTeacherStudentChairList,
        PB3RoomCmdId_RcBroadcastTeacherStudentEnterRoom,
        PB3RoomCmdId_RcBroadcastMobaTeamSitChair,
        PB3RoomCmdId_RcBroadcastAddVote,
        PB3RoomCmdId_RcBroadcastLive,
        PB3RoomCmdId_RcPkEntry,
        PB3RoomCmdId_RcClanHourRankFirst,
        PB3RoomCmdId_RcClanHourRank,
        PB3RoomCmdId_RcSingleLivePkEntry,
        PB3RoomCmdId_RcRoomPatternCfg,
        PB3RoomCmdId_RcClanTask,
        PB3RoomCmdId_RcClanTaskDone,
        PB3RoomCmdId_RcWishGift,
        PB3RoomCmdId_RcWishGiftTaskDoneNum,
        PB3RoomCmdId_RcEnterFossaRoom,
        PB3RoomCmdId_RcLeaveFossaRoom,
        PB3RoomCmdId_RcOtherRejectFossa,
        PB3RoomCmdId_RcOtherLeaveFossaEarly,
        PB3RoomCmdId_RcMateChoice2ChairCharm,
        PB3RoomCmdId_RcMateChoice2Result,
        PB3RoomCmdId_RcMateChoiceHatOwner,
        PB3RoomCmdId_RcMateChoiceChangeStatusSuccess,
        PB3RoomCmdId_RcMateChoiceSelectChairNumber,
        PB3RoomCmdId_RcMateChoice2Pairs,
        PB3RoomCmdId_RcMateChoice2ChangeStatusToReady,
        PB3RoomCmdId_RcMateRoomGoldStat,
        PB3RoomCmdId_RcBgmPlayerSwitch,
        PB3RoomCmdId_RcBroadcastVoteInfo,
        PB3RoomCmdId_RcBroadcastRoomCubism,
        PB3RoomCmdId_RcRoomTopRightCornerLabel,
        PB3RoomCmdId_RcRoomDayRankChange,
        PB3RoomCmdId_RcRoomTopRightCornerLabelChange,
        PB3RoomCmdId_RcRoomEffectConf,
        PB3RoomCmdId_RcHostEnterRoomGameMatch,
        PB3RoomCmdId_RcBarrageGameEntry,
    };
    static const char *extraTextFormatInfo = "}\000b\204\000\001b\213\000\002b\213\000\003b\207\000\004b\213\000\005b\207\000\006b\214\000\007b\211\000\010\002\215\000\tb\213\000\nb\212\000\013b\217\000\014b\216\000\rb\205\000\016b\210\000\017b\211\000\020b\216\000\021b\215\000\022b\211\000\023b\215\000\024b\220\000\025b\217\000\026b\222\000\027b\214\000\030b\215\000\031b\204\000\032b\210\000\033b\212\000\034b\220\000\035b\221\000\036b\217\000\037b\215\000 b\220\000!b\211\000\"b\214\000#b\223\000$b\223\000%b\214\000&b\222\000\'b\224\000(b\342\210\000)b\212\343\000*b\211\343\000+b\215\000,b\214\000-b\213\000.b\217\000/b\215\0000b\222\0001b\216\0002b\222\0003b\225\0004b\217\0005b\217\0006b\210\0007b\206\204\245\206\0008b\222\0009b\214\000:b\211\000;b\212\000<b\215\000=b\216\000>b\217\000?b\216\000@b\224\000Ab\221\000Bb\217\000Cb\217\000Db\214\000Eb\230\000Fb\231\000Gb\226\000Hb\211\000Ib\211\000Jb\212\000Kb\215\000Lb\210\000Mb\210\000Nb\214\000Ob\221\000Pb\223\000Qb\232\000Rb\224\000Sb\225\000Tb\227\000Ub\217\000Vb\222\000Wb\223\000Xb\227\000Yb\234\000Zb\233\000[b\231\000\\b\222\000]b\217\000^b\237\000_b\237\001\000`b\237\001\000ab\231\000bb\220\000cb\215\000db\342\205\000hb\216\000ib\204\204\000jb\204\204\204\000kb\204\204\000lb\204\204\204\204\203\000mb\216\000nb\216\000ob\220\000pb\224\000qb\225\000rb\221\000sb\222\000tb\235\000ub\233\000vb\220\000wb\236\000xb\220\000yb\203\206\206\000zb\221\000{b\223\000|b\227\000}b\221\000~b\235\000\177b\216\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomCmdId_RcZero:
    case PB3RoomCmdId_RcPlayerEnter:
    case PB3RoomCmdId_RcPlayerLeave:
    case PB3RoomCmdId_RcRoomSet:
    case PB3RoomCmdId_RcForbidSpeak:
    case PB3RoomCmdId_RcKickout:
    case PB3RoomCmdId_RcRoomAdminSet:
    case PB3RoomCmdId_RcCloseRoom:
    case PB3RoomCmdId_RcRoomReception:
    case PB3RoomCmdId_RcChairStatus:
    case PB3RoomCmdId_RcChairSpeak:
    case PB3RoomCmdId_RcChairSpeakOnOff:
    case PB3RoomCmdId_RcAccompanyOnOff:
    case PB3RoomCmdId_RcChair:
    case PB3RoomCmdId_RcChairSit:
    case PB3RoomCmdId_RcChairMove:
    case PB3RoomCmdId_RcChairLeaveData:
    case PB3RoomCmdId_RcChairQueueOpt:
    case PB3RoomCmdId_RcQueueJump:
    case PB3RoomCmdId_RcChairAdminOpt:
    case PB3RoomCmdId_RcChairQeueuStatus:
    case PB3RoomCmdId_RcChairQeueuClear:
    case PB3RoomCmdId_RcChairQeueuAddOrDel:
    case PB3RoomCmdId_RcOnlineFlower:
    case PB3RoomCmdId_RcPresentFlower:
    case PB3RoomCmdId_RcChat:
    case PB3RoomCmdId_RcPlayDice:
    case PB3RoomCmdId_RcMakeFriend:
    case PB3RoomCmdId_RcIntimateSitChair:
    case PB3RoomCmdId_RcIntimateListChair:
    case PB3RoomCmdId_RcStartMateChoice:
    case PB3RoomCmdId_RcMateChoiceNum:
    case PB3RoomCmdId_RcMateChoiceResult:
    case PB3RoomCmdId_RcMateMatch:
    case PB3RoomCmdId_RcMateNotMatch:
    case PB3RoomCmdId_RcMateChairGoldStream:
    case PB3RoomCmdId_RcBroadcastDragonBall:
    case PB3RoomCmdId_RcMateMatchMsg:
    case PB3RoomCmdId_RcBroadcastStartVote:
    case PB3RoomCmdId_RcBroadcastPublishVote:
    case PB3RoomCmdId_RcBfHeadline:
    case PB3RoomCmdId_RcMakeFriendNew:
    case PB3RoomCmdId_RcMateMatchNew:
    case PB3RoomCmdId_RcPcaChangeUser:
    case PB3RoomCmdId_RcPcaStartPush:
    case PB3RoomCmdId_RcPcaStopPush:
    case PB3RoomCmdId_RcRoomImageChange:
    case PB3RoomCmdId_RcRoomOwnerCert:
    case PB3RoomCmdId_RcLuckyDrawBroadcast:
    case PB3RoomCmdId_RcLuckyDrawCount:
    case PB3RoomCmdId_RcLuckyDrawCancelled:
    case PB3RoomCmdId_RcLuckyDrawParticipator:
    case PB3RoomCmdId_RcLuckyDrawResult:
    case PB3RoomCmdId_RcLuckyDrawWinner:
    case PB3RoomCmdId_RcRoomHeat:
    case PB3RoomCmdId_RcChangeShowChairButton:
    case PB3RoomCmdId_RcRoomSwitchVoiceSdk:
    case PB3RoomCmdId_RcSendBillTime:
    case PB3RoomCmdId_RcPresenter:
    case PB3RoomCmdId_RcChairCharm:
    case PB3RoomCmdId_RcReceiveWindow:
    case PB3RoomCmdId_RcRoomSitLvLimit:
    case PB3RoomCmdId_RcRoomOnOffStatus:
    case PB3RoomCmdId_RcClanChairLimit:
    case PB3RoomCmdId_RcRoomUpdateDecorateBg:
    case PB3RoomCmdId_RcRoomBuyDecorateBg:
    case PB3RoomCmdId_RcRoomRedEnvelope:
    case PB3RoomCmdId_RcRoomSkillResult:
    case PB3RoomCmdId_RcRoomUseSkill:
    case PB3RoomCmdId_RcEnterRoomByReceiveWindow:
    case PB3RoomCmdId_RcDeviceOpenMicNoticeMyself:
    case PB3RoomCmdId_RcBroadcastEnterToMyself:
    case PB3RoomCmdId_RcPlayOrder:
    case PB3RoomCmdId_RcPlanOrder:
    case PB3RoomCmdId_RcProgramFee:
    case PB3RoomCmdId_RcShowLyricCtrl:
    case PB3RoomCmdId_RcRoomShow:
    case PB3RoomCmdId_RcShowInfo:
    case PB3RoomCmdId_RcOnlineNotice:
    case PB3RoomCmdId_RcBroadcastStopVote:
    case PB3RoomCmdId_RcBroadcastEffectMood:
    case PB3RoomCmdId_RcBroadcastCleanPublicScreen:
    case PB3RoomCmdId_RcBroadcastRoomPattern:
    case PB3RoomCmdId_RcBroadcastRoomBanSpeak:
    case PB3RoomCmdId_RcBroadcastCountDownStart:
    case PB3RoomCmdId_RcBroadcastChorus:
    case PB3RoomCmdId_RcBroadcastChorusNew:
    case PB3RoomCmdId_RcBroadcastFansRecall:
    case PB3RoomCmdId_RcBroadcastFansRecallSend:
    case PB3RoomCmdId_RcBroadcastFansRecallEnterRoom:
    case PB3RoomCmdId_RcBroadcastLeaveRoomRecommend:
    case PB3RoomCmdId_RcBroadcastFansRecallCancel:
    case PB3RoomCmdId_RcBroadcastAgodaList:
    case PB3RoomCmdId_RcPersonalKickout:
    case PB3RoomCmdId_RcBroadcastTeacherStudentSitChair:
    case PB3RoomCmdId_RcBroadcastTeacherStudentChairList:
    case PB3RoomCmdId_RcBroadcastTeacherStudentEnterRoom:
    case PB3RoomCmdId_RcBroadcastMobaTeamSitChair:
    case PB3RoomCmdId_RcBroadcastAddVote:
    case PB3RoomCmdId_RcBroadcastLive:
    case PB3RoomCmdId_RcPkEntry:
    case PB3RoomCmdId_RcClanHourRankFirst:
    case PB3RoomCmdId_RcClanHourRank:
    case PB3RoomCmdId_RcSingleLivePkEntry:
    case PB3RoomCmdId_RcRoomPatternCfg:
    case PB3RoomCmdId_RcClanTask:
    case PB3RoomCmdId_RcClanTaskDone:
    case PB3RoomCmdId_RcWishGift:
    case PB3RoomCmdId_RcWishGiftTaskDoneNum:
    case PB3RoomCmdId_RcEnterFossaRoom:
    case PB3RoomCmdId_RcLeaveFossaRoom:
    case PB3RoomCmdId_RcOtherRejectFossa:
    case PB3RoomCmdId_RcOtherLeaveFossaEarly:
    case PB3RoomCmdId_RcMateChoice2ChairCharm:
    case PB3RoomCmdId_RcMateChoice2Result:
    case PB3RoomCmdId_RcMateChoiceHatOwner:
    case PB3RoomCmdId_RcMateChoiceChangeStatusSuccess:
    case PB3RoomCmdId_RcMateChoiceSelectChairNumber:
    case PB3RoomCmdId_RcMateChoice2Pairs:
    case PB3RoomCmdId_RcMateChoice2ChangeStatusToReady:
    case PB3RoomCmdId_RcMateRoomGoldStat:
    case PB3RoomCmdId_RcBgmPlayerSwitch:
    case PB3RoomCmdId_RcBroadcastVoteInfo:
    case PB3RoomCmdId_RcBroadcastRoomCubism:
    case PB3RoomCmdId_RcRoomTopRightCornerLabel:
    case PB3RoomCmdId_RcRoomDayRankChange:
    case PB3RoomCmdId_RcRoomTopRightCornerLabelChange:
    case PB3RoomCmdId_RcRoomEffectConf:
    case PB3RoomCmdId_RcHostEnterRoomGameMatch:
    case PB3RoomCmdId_RcBarrageGameEntry:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3HourRankRoomPushType

GPBEnumDescriptor *PB3HourRankRoomPushType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "HrrpyNone\000HrrpyEnterRoom\000HrrpyFirst\000Hrrp"
        "yRankNum\000HrrpyCharm\000";
    static const int32_t values[] = {
        PB3HourRankRoomPushType_HrrpyNone,
        PB3HourRankRoomPushType_HrrpyEnterRoom,
        PB3HourRankRoomPushType_HrrpyFirst,
        PB3HourRankRoomPushType_HrrpyRankNum,
        PB3HourRankRoomPushType_HrrpyCharm,
    };
    static const char *extraTextFormatInfo = "\005\000e\204\000\001e\211\000\002e\205\000\003e\207\000\004e\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3HourRankRoomPushType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3HourRankRoomPushType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3HourRankRoomPushType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3HourRankRoomPushType_HrrpyNone:
    case PB3HourRankRoomPushType_HrrpyEnterRoom:
    case PB3HourRankRoomPushType_HrrpyFirst:
    case PB3HourRankRoomPushType_HrrpyRankNum:
    case PB3HourRankRoomPushType_HrrpyCharm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewFollowType

GPBEnumDescriptor *PB3NewFollowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NftDefault\000NftText\000NftBroadcast\000NftOther"
        "\000NftIndex\000NftVoice\000NftVideo\000NftLeave\000";
    static const int32_t values[] = {
        PB3NewFollowType_NftDefault,
        PB3NewFollowType_NftText,
        PB3NewFollowType_NftBroadcast,
        PB3NewFollowType_NftOther,
        PB3NewFollowType_NftIndex,
        PB3NewFollowType_NftVoice,
        PB3NewFollowType_NftVideo,
        PB3NewFollowType_NftLeave,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewFollowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewFollowType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewFollowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewFollowType_NftDefault:
    case PB3NewFollowType_NftText:
    case PB3NewFollowType_NftBroadcast:
    case PB3NewFollowType_NftOther:
    case PB3NewFollowType_NftIndex:
    case PB3NewFollowType_NftVoice:
    case PB3NewFollowType_NftVideo:
    case PB3NewFollowType_NftLeave:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EnterRoomOpt

GPBEnumDescriptor *PB3EnterRoomOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EroZero\000EroLightningOrder\000RoomQuickGameP"
        "re\000SetChairIng\000EroMobaTeam\000";
    static const int32_t values[] = {
        PB3EnterRoomOpt_EroZero,
        PB3EnterRoomOpt_EroLightningOrder,
        PB3EnterRoomOpt_RoomQuickGamePre,
        PB3EnterRoomOpt_SetChairIng,
        PB3EnterRoomOpt_EroMobaTeam,
    };
    static const char *extraTextFormatInfo = "\002\002\020\000\003\013\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EnterRoomOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EnterRoomOpt_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EnterRoomOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EnterRoomOpt_EroZero:
    case PB3EnterRoomOpt_EroLightningOrder:
    case PB3EnterRoomOpt_RoomQuickGamePre:
    case PB3EnterRoomOpt_SetChairIng:
    case PB3EnterRoomOpt_EroMobaTeam:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EnterRoomWay

GPBEnumDescriptor *PB3EnterRoomWay_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EroWayZero\000EroWayReceiveWin\000EroWaySearch"
        "\000EroWayFansRecall\000EroWayMobaTeamDepartur"
        "e\000EroWayHomeList\000EroWayPlayerCard\000EroWay"
        "HomeRoom\000EroWayPlayerPage\000EroWayGameList"
        "\000EroWayRadar\000EroWayMatch\000EroWayRank\000EroW"
        "ayFootprint\000EroWayIm\000EroWayOxygenBar\000Ero"
        "WayTopHeadline\000EroWayRadarGift\000EroWayRoo"
        "mWorldGift\000EroWayOtherZone\000EroWayNotice\000"
        "EroWayNameClan\000EroWayMessageNotice\000EroWa"
        "yImShare\000EroWayCpEnd\000EroWayPk\000EroWayHotp"
        "oint\000EroWayHeadline\000EroWayImPage\000EroInde"
        "xClickEnter\000";
    static const int32_t values[] = {
        PB3EnterRoomWay_EroWayZero,
        PB3EnterRoomWay_EroWayReceiveWin,
        PB3EnterRoomWay_EroWaySearch,
        PB3EnterRoomWay_EroWayFansRecall,
        PB3EnterRoomWay_EroWayMobaTeamDeparture,
        PB3EnterRoomWay_EroWayHomeList,
        PB3EnterRoomWay_EroWayPlayerCard,
        PB3EnterRoomWay_EroWayHomeRoom,
        PB3EnterRoomWay_EroWayPlayerPage,
        PB3EnterRoomWay_EroWayGameList,
        PB3EnterRoomWay_EroWayRadar,
        PB3EnterRoomWay_EroWayMatch,
        PB3EnterRoomWay_EroWayRank,
        PB3EnterRoomWay_EroWayFootprint,
        PB3EnterRoomWay_EroWayIm,
        PB3EnterRoomWay_EroWayOxygenBar,
        PB3EnterRoomWay_EroWayTopHeadline,
        PB3EnterRoomWay_EroWayRadarGift,
        PB3EnterRoomWay_EroWayRoomWorldGift,
        PB3EnterRoomWay_EroWayOtherZone,
        PB3EnterRoomWay_EroWayNotice,
        PB3EnterRoomWay_EroWayNameClan,
        PB3EnterRoomWay_EroWayMessageNotice,
        PB3EnterRoomWay_EroWayImShare,
        PB3EnterRoomWay_EroWayCpEnd,
        PB3EnterRoomWay_EroWayPk,
        PB3EnterRoomWay_EroWayHotpoint,
        PB3EnterRoomWay_EroWayHeadline,
        PB3EnterRoomWay_EroWayImPage,
        PB3EnterRoomWay_EroIndexClickEnter,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EnterRoomWay)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EnterRoomWay_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EnterRoomWay_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EnterRoomWay_EroWayZero:
    case PB3EnterRoomWay_EroWayReceiveWin:
    case PB3EnterRoomWay_EroWaySearch:
    case PB3EnterRoomWay_EroWayFansRecall:
    case PB3EnterRoomWay_EroWayMobaTeamDeparture:
    case PB3EnterRoomWay_EroWayHomeList:
    case PB3EnterRoomWay_EroWayPlayerCard:
    case PB3EnterRoomWay_EroWayHomeRoom:
    case PB3EnterRoomWay_EroWayPlayerPage:
    case PB3EnterRoomWay_EroWayGameList:
    case PB3EnterRoomWay_EroWayRadar:
    case PB3EnterRoomWay_EroWayMatch:
    case PB3EnterRoomWay_EroWayRank:
    case PB3EnterRoomWay_EroWayFootprint:
    case PB3EnterRoomWay_EroWayIm:
    case PB3EnterRoomWay_EroWayOxygenBar:
    case PB3EnterRoomWay_EroWayTopHeadline:
    case PB3EnterRoomWay_EroWayRadarGift:
    case PB3EnterRoomWay_EroWayRoomWorldGift:
    case PB3EnterRoomWay_EroWayOtherZone:
    case PB3EnterRoomWay_EroWayNotice:
    case PB3EnterRoomWay_EroWayNameClan:
    case PB3EnterRoomWay_EroWayMessageNotice:
    case PB3EnterRoomWay_EroWayImShare:
    case PB3EnterRoomWay_EroWayCpEnd:
    case PB3EnterRoomWay_EroWayPk:
    case PB3EnterRoomWay_EroWayHotpoint:
    case PB3EnterRoomWay_EroWayHeadline:
    case PB3EnterRoomWay_EroWayImPage:
    case PB3EnterRoomWay_EroIndexClickEnter:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BarrageGameStatus

GPBEnumDescriptor *PB3BarrageGameStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BgsNone\000BgsStart\000BgsEnd\000BgsAbort\000";
    static const int32_t values[] = {
        PB3BarrageGameStatus_BgsNone,
        PB3BarrageGameStatus_BgsStart,
        PB3BarrageGameStatus_BgsEnd,
        PB3BarrageGameStatus_BgsAbort,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BarrageGameStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BarrageGameStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BarrageGameStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BarrageGameStatus_BgsNone:
    case PB3BarrageGameStatus_BgsStart:
    case PB3BarrageGameStatus_BgsEnd:
    case PB3BarrageGameStatus_BgsAbort:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BarrageGameMatchConfirmStatus

GPBEnumDescriptor *PB3BarrageGameMatchConfirmStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BgmcsNone\000BgmcsAgree\000BgmcsRefuse\000";
    static const int32_t values[] = {
        PB3BarrageGameMatchConfirmStatus_BgmcsNone,
        PB3BarrageGameMatchConfirmStatus_BgmcsAgree,
        PB3BarrageGameMatchConfirmStatus_BgmcsRefuse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BarrageGameMatchConfirmStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BarrageGameMatchConfirmStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BarrageGameMatchConfirmStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BarrageGameMatchConfirmStatus_BgmcsNone:
    case PB3BarrageGameMatchConfirmStatus_BgmcsAgree:
    case PB3BarrageGameMatchConfirmStatus_BgmcsRefuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BarrageGameMatchStatus

GPBEnumDescriptor *PB3BarrageGameMatchStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BgmsNone\000BgmsSuccess\000BgmsTimeOut\000BgmsMat"
        "ching\000BgmsRematch\000BgmsNotConfirm\000BgmsCan"
        "cel\000BgmsRefuseMatch\000BgmsWaitRecall\000";
    static const int32_t values[] = {
        PB3BarrageGameMatchStatus_BgmsNone,
        PB3BarrageGameMatchStatus_BgmsSuccess,
        PB3BarrageGameMatchStatus_BgmsTimeOut,
        PB3BarrageGameMatchStatus_BgmsMatching,
        PB3BarrageGameMatchStatus_BgmsRematch,
        PB3BarrageGameMatchStatus_BgmsNotConfirm,
        PB3BarrageGameMatchStatus_BgmsCancel,
        PB3BarrageGameMatchStatus_BgmsRefuseMatch,
        PB3BarrageGameMatchStatus_BgmsWaitRecall,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BarrageGameMatchStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BarrageGameMatchStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BarrageGameMatchStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BarrageGameMatchStatus_BgmsNone:
    case PB3BarrageGameMatchStatus_BgmsSuccess:
    case PB3BarrageGameMatchStatus_BgmsTimeOut:
    case PB3BarrageGameMatchStatus_BgmsMatching:
    case PB3BarrageGameMatchStatus_BgmsRematch:
    case PB3BarrageGameMatchStatus_BgmsNotConfirm:
    case PB3BarrageGameMatchStatus_BgmsCancel:
    case PB3BarrageGameMatchStatus_BgmsRefuseMatch:
    case PB3BarrageGameMatchStatus_BgmsWaitRecall:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomClanType

GPBEnumDescriptor *PB3RoomClanType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RctZero\000RctSinging\000";
    static const int32_t values[] = {
        PB3RoomClanType_RctZero,
        PB3RoomClanType_RctSinging,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomClanType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomClanType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomClanType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomClanType_RctZero:
    case PB3RoomClanType_RctSinging:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PrivilegePreventOpt

GPBEnumDescriptor *PB3PrivilegePreventOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Zero\000BanSpeak\000Kickout\000";
    static const int32_t values[] = {
        PB3PrivilegePreventOpt_Zero,
        PB3PrivilegePreventOpt_BanSpeak,
        PB3PrivilegePreventOpt_Kickout,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PrivilegePreventOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PrivilegePreventOpt_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PrivilegePreventOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PrivilegePreventOpt_Zero:
    case PB3PrivilegePreventOpt_BanSpeak:
    case PB3PrivilegePreventOpt_Kickout:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PCRoomGreetingOperationType

GPBEnumDescriptor *PB3PCRoomGreetingOperationType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PcAdd\000PcModify\000PcDel\000";
    static const int32_t values[] = {
        PB3PCRoomGreetingOperationType_PcAdd,
        PB3PCRoomGreetingOperationType_PcModify,
        PB3PCRoomGreetingOperationType_PcDel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PCRoomGreetingOperationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PCRoomGreetingOperationType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PCRoomGreetingOperationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PCRoomGreetingOperationType_PcAdd:
    case PB3PCRoomGreetingOperationType_PcModify:
    case PB3PCRoomGreetingOperationType_PcDel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChairStatus

GPBEnumDescriptor *PB3ChairStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CsOpen\000CsClose\000";
    static const int32_t values[] = {
        PB3ChairStatus_CsOpen,
        PB3ChairStatus_CsClose,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChairStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChairStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChairStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChairStatus_CsOpen:
    case PB3ChairStatus_CsClose:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SitChairType

GPBEnumDescriptor *PB3SitChairType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SctNormalSit\000SctMaskSit\000SctFollowLast\000";
    static const int32_t values[] = {
        PB3SitChairType_SctNormalSit,
        PB3SitChairType_SctMaskSit,
        PB3SitChairType_SctFollowLast,
    };
    static const char *extraTextFormatInfo = "\003\000c\211\000\001c\207\000\002c\212\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SitChairType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SitChairType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SitChairType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SitChairType_SctNormalSit:
    case PB3SitChairType_SctMaskSit:
    case PB3SitChairType_SctFollowLast:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ClearChairType

GPBEnumDescriptor *PB3ClearChairType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CctZero\000CctClearChair\000";
    static const int32_t values[] = {
        PB3ClearChairType_CctZero,
        PB3ClearChairType_CctClearChair,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ClearChairType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ClearChairType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ClearChairType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ClearChairType_CctZero:
    case PB3ClearChairType_CctClearChair:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChatShowSiteType

GPBEnumDescriptor *PB3ChatShowSiteType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CsstNone\000CsstOnlyPublicScreen\000";
    static const int32_t values[] = {
        PB3ChatShowSiteType_CsstNone,
        PB3ChatShowSiteType_CsstOnlyPublicScreen,
    };
    static const char *extraTextFormatInfo = "\002\000d\204\000\001d\220\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChatShowSiteType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChatShowSiteType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChatShowSiteType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChatShowSiteType_CsstNone:
    case PB3ChatShowSiteType_CsstOnlyPublicScreen:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UserSpeakOrigin

GPBEnumDescriptor *PB3UserSpeakOrigin_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UsoNone\000UsoDefault\000UsoMoba\000";
    static const int32_t values[] = {
        PB3UserSpeakOrigin_UsoNone,
        PB3UserSpeakOrigin_UsoDefault,
        PB3UserSpeakOrigin_UsoMoba,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserSpeakOrigin)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserSpeakOrigin_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserSpeakOrigin_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserSpeakOrigin_UsoNone:
    case PB3UserSpeakOrigin_UsoDefault:
    case PB3UserSpeakOrigin_UsoMoba:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ExtendKey

GPBEnumDescriptor *PB3ExtendKey_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EkNone\000EkGameBgBro\000EkGameFrameBro\000EkGame"
        "FrameColor\000EkCarId\000EkGameBgBroPc\000";
    static const int32_t values[] = {
        PB3ExtendKey_EkNone,
        PB3ExtendKey_EkGameBgBro,
        PB3ExtendKey_EkGameFrameBro,
        PB3ExtendKey_EkGameFrameColor,
        PB3ExtendKey_EkCarId,
        PB3ExtendKey_EkGameBgBroPc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ExtendKey)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ExtendKey_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ExtendKey_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ExtendKey_EkNone:
    case PB3ExtendKey_EkGameBgBro:
    case PB3ExtendKey_EkGameFrameBro:
    case PB3ExtendKey_EkGameFrameColor:
    case PB3ExtendKey_EkCarId:
    case PB3ExtendKey_EkGameBgBroPc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VoteType

GPBEnumDescriptor *PB3VoteType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VoteTypeDefault\000VoteTypeDefined\000";
    static const int32_t values[] = {
        PB3VoteType_VoteTypeDefault,
        PB3VoteType_VoteTypeDefined,
    };
    static const char *extraTextFormatInfo = "\002\000\010\207\000\001\010\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VoteType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VoteType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VoteType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VoteType_VoteTypeDefault:
    case PB3VoteType_VoteTypeDefined:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3HeadLineStyle

GPBEnumDescriptor *PB3HeadLineStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "HlsNone\000HlsNormal\000HlsLuxury\000HlsSuper\000";
    static const int32_t values[] = {
        PB3HeadLineStyle_HlsNone,
        PB3HeadLineStyle_HlsNormal,
        PB3HeadLineStyle_HlsLuxury,
        PB3HeadLineStyle_HlsSuper,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3HeadLineStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3HeadLineStyle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3HeadLineStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3HeadLineStyle_HlsNone:
    case PB3HeadLineStyle_HlsNormal:
    case PB3HeadLineStyle_HlsLuxury:
    case PB3HeadLineStyle_HlsSuper:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PushHeadlineType

GPBEnumDescriptor *PB3PushHeadlineType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PhtNormal\000PhtSeckill\000PhtHot\000";
    static const int32_t values[] = {
        PB3PushHeadlineType_PhtNormal,
        PB3PushHeadlineType_PhtSeckill,
        PB3PushHeadlineType_PhtHot,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PushHeadlineType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PushHeadlineType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PushHeadlineType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PushHeadlineType_PhtNormal:
    case PB3PushHeadlineType_PhtSeckill:
    case PB3PushHeadlineType_PhtHot:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LuckyDrawType

GPBEnumDescriptor *PB3LuckyDrawType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LdtNone\000LdtImmediately\000LdtSignUp\000";
    static const int32_t values[] = {
        PB3LuckyDrawType_LdtNone,
        PB3LuckyDrawType_LdtImmediately,
        PB3LuckyDrawType_LdtSignUp,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LuckyDrawType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LuckyDrawType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LuckyDrawType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LuckyDrawType_LdtNone:
    case PB3LuckyDrawType_LdtImmediately:
    case PB3LuckyDrawType_LdtSignUp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SettingOptionType

GPBEnumDescriptor *PB3SettingOptionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SotNone\000SotOnChairOnly\000SotExcludeOwner\000S"
        "otWealthLevel\000";
    static const int32_t values[] = {
        PB3SettingOptionType_SotNone,
        PB3SettingOptionType_SotOnChairOnly,
        PB3SettingOptionType_SotExcludeOwner,
        PB3SettingOptionType_SotWealthLevel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SettingOptionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SettingOptionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SettingOptionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SettingOptionType_SotNone:
    case PB3SettingOptionType_SotOnChairOnly:
    case PB3SettingOptionType_SotExcludeOwner:
    case PB3SettingOptionType_SotWealthLevel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LuckyDrawStage

GPBEnumDescriptor *PB3LuckyDrawStage_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LdsNone\000LdsSignUp\000LdsResult\000";
    static const int32_t values[] = {
        PB3LuckyDrawStage_LdsNone,
        PB3LuckyDrawStage_LdsSignUp,
        PB3LuckyDrawStage_LdsResult,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LuckyDrawStage)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LuckyDrawStage_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LuckyDrawStage_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LuckyDrawStage_LdsNone:
    case PB3LuckyDrawStage_LdsSignUp:
    case PB3LuckyDrawStage_LdsResult:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ConfirmWinnerOption

GPBEnumDescriptor *PB3ConfirmWinnerOption_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CwoNone\000CwoNoWinner\000CwoAnnounceWinner\000";
    static const int32_t values[] = {
        PB3ConfirmWinnerOption_CwoNone,
        PB3ConfirmWinnerOption_CwoNoWinner,
        PB3ConfirmWinnerOption_CwoAnnounceWinner,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ConfirmWinnerOption)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ConfirmWinnerOption_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ConfirmWinnerOption_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ConfirmWinnerOption_CwoNone:
    case PB3ConfirmWinnerOption_CwoNoWinner:
    case PB3ConfirmWinnerOption_CwoAnnounceWinner:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3VoiceSdkType

GPBEnumDescriptor *PB3VoiceSdkType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VstNone\000VstTencent\000VstAgora\000VstNetease\000";
    static const int32_t values[] = {
        PB3VoiceSdkType_VstNone,
        PB3VoiceSdkType_VstTencent,
        PB3VoiceSdkType_VstAgora,
        PB3VoiceSdkType_VstNetease,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3VoiceSdkType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3VoiceSdkType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3VoiceSdkType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3VoiceSdkType_VstNone:
    case PB3VoiceSdkType_VstTencent:
    case PB3VoiceSdkType_VstAgora:
    case PB3VoiceSdkType_VstNetease:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomOptType

GPBEnumDescriptor *PB3RoomOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RotZero\000RotAcceptSendBill\000";
    static const int32_t values[] = {
        PB3RoomOptType_RotZero,
        PB3RoomOptType_RotAcceptSendBill,
    };
    static const char *extraTextFormatInfo = "\002\000c\204\000\001c\216\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomOptType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomOptType_RotZero:
    case PB3RoomOptType_RotAcceptSendBill:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SetPresenterOpt

GPBEnumDescriptor *PB3SetPresenterOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SptZero\000SptAdd\000SptDel\000";
    static const int32_t values[] = {
        PB3SetPresenterOpt_SptZero,
        PB3SetPresenterOpt_SptAdd,
        PB3SetPresenterOpt_SptDel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SetPresenterOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SetPresenterOpt_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SetPresenterOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SetPresenterOpt_SptZero:
    case PB3SetPresenterOpt_SptAdd:
    case PB3SetPresenterOpt_SptDel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ReceiveRoomType

GPBEnumDescriptor *PB3ReceiveRoomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ReceiveRoomZero\000ReceiveRoomInteract\000Rece"
        "iveRoomSing\000ReceiveRoomMakeFriend\000Receiv"
        "eRoomExpansion\000ReceiveRoomRadio\000ReceiveR"
        "oomAccompany\000ReceiveRoomBill\000ReceiveRoom"
        "Game\000ReceiveRoomFate\000";
    static const int32_t values[] = {
        PB3ReceiveRoomType_ReceiveRoomZero,
        PB3ReceiveRoomType_ReceiveRoomInteract,
        PB3ReceiveRoomType_ReceiveRoomSing,
        PB3ReceiveRoomType_ReceiveRoomMakeFriend,
        PB3ReceiveRoomType_ReceiveRoomExpansion,
        PB3ReceiveRoomType_ReceiveRoomRadio,
        PB3ReceiveRoomType_ReceiveRoomAccompany,
        PB3ReceiveRoomType_ReceiveRoomBill,
        PB3ReceiveRoomType_ReceiveRoomGame,
        PB3ReceiveRoomType_ReceiveRoomFate,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ReceiveRoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ReceiveRoomType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ReceiveRoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ReceiveRoomType_ReceiveRoomZero:
    case PB3ReceiveRoomType_ReceiveRoomInteract:
    case PB3ReceiveRoomType_ReceiveRoomSing:
    case PB3ReceiveRoomType_ReceiveRoomMakeFriend:
    case PB3ReceiveRoomType_ReceiveRoomExpansion:
    case PB3ReceiveRoomType_ReceiveRoomRadio:
    case PB3ReceiveRoomType_ReceiveRoomAccompany:
    case PB3ReceiveRoomType_ReceiveRoomBill:
    case PB3ReceiveRoomType_ReceiveRoomGame:
    case PB3ReceiveRoomType_ReceiveRoomFate:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CancelReceiveWindowType

GPBEnumDescriptor *PB3CancelReceiveWindowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CrwtZero\000CrwtButton\000CrwtTopTab\000CrwtIcon\000"
        "CrwtEnterRoom\000CrwtRoomOther\000CrwtBottomTa"
        "b\000CrwtOther\000";
    static const int32_t values[] = {
        PB3CancelReceiveWindowType_CrwtZero,
        PB3CancelReceiveWindowType_CrwtButton,
        PB3CancelReceiveWindowType_CrwtTopTab,
        PB3CancelReceiveWindowType_CrwtIcon,
        PB3CancelReceiveWindowType_CrwtEnterRoom,
        PB3CancelReceiveWindowType_CrwtRoomOther,
        PB3CancelReceiveWindowType_CrwtBottomTab,
        PB3CancelReceiveWindowType_CrwtOther,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CancelReceiveWindowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CancelReceiveWindowType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CancelReceiveWindowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CancelReceiveWindowType_CrwtZero:
    case PB3CancelReceiveWindowType_CrwtButton:
    case PB3CancelReceiveWindowType_CrwtTopTab:
    case PB3CancelReceiveWindowType_CrwtIcon:
    case PB3CancelReceiveWindowType_CrwtEnterRoom:
    case PB3CancelReceiveWindowType_CrwtRoomOther:
    case PB3CancelReceiveWindowType_CrwtBottomTab:
    case PB3CancelReceiveWindowType_CrwtOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DiscardReceiveWindowType

GPBEnumDescriptor *PB3DiscardReceiveWindowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DrwtDefault\000DrwtOther\000";
    static const int32_t values[] = {
        PB3DiscardReceiveWindowType_DrwtDefault,
        PB3DiscardReceiveWindowType_DrwtOther,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DiscardReceiveWindowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DiscardReceiveWindowType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DiscardReceiveWindowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DiscardReceiveWindowType_DrwtDefault:
    case PB3DiscardReceiveWindowType_DrwtOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ReceiveWindowPosition

GPBEnumDescriptor *PB3ReceiveWindowPosition_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RwpZero\000RwpTop\000RwpMiddle\000RwpBottom\000";
    static const int32_t values[] = {
        PB3ReceiveWindowPosition_RwpZero,
        PB3ReceiveWindowPosition_RwpTop,
        PB3ReceiveWindowPosition_RwpMiddle,
        PB3ReceiveWindowPosition_RwpBottom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ReceiveWindowPosition)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ReceiveWindowPosition_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ReceiveWindowPosition_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ReceiveWindowPosition_RwpZero:
    case PB3ReceiveWindowPosition_RwpTop:
    case PB3ReceiveWindowPosition_RwpMiddle:
    case PB3ReceiveWindowPosition_RwpBottom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ReceiveWindowStyle

GPBEnumDescriptor *PB3ReceiveWindowStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RwsDefault\000RwsHorizontal\000RwsVertical\000";
    static const int32_t values[] = {
        PB3ReceiveWindowStyle_RwsDefault,
        PB3ReceiveWindowStyle_RwsHorizontal,
        PB3ReceiveWindowStyle_RwsVertical,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ReceiveWindowStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ReceiveWindowStyle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ReceiveWindowStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ReceiveWindowStyle_RwsDefault:
    case PB3ReceiveWindowStyle_RwsHorizontal:
    case PB3ReceiveWindowStyle_RwsVertical:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WinType

GPBEnumDescriptor *PB3WinType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WinZero\000WinReceive\000WinNewGift\000";
    static const int32_t values[] = {
        PB3WinType_WinZero,
        PB3WinType_WinReceive,
        PB3WinType_WinNewGift,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WinType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WinType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WinType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WinType_WinZero:
    case PB3WinType_WinReceive:
    case PB3WinType_WinNewGift:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomOnOffType

GPBEnumDescriptor *PB3RoomOnOffType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RootNone\000RootChairCharm\000RootChairSer\000Roo"
        "tClanChairLimit\000RootRedEnvelope\000RootRoom"
        "Decorate\000RootActivityRoomDecorate\000RootAu"
        "toClanChairLimit\000RootAcRoomChargeNotice\000"
        "RootAuditRoom\000RootRedEnvelopeLevel\000TextF"
        "ilterRoomScreenEncrypted\000TextFilterRoomS"
        "creenUnencrypted\000RootEntryEffectSwitch\000C"
        "onsortiaQuitPunish\000RootNoNobility\000RootRa"
        "ndomRedEnvelopeLevel\000RootRandomRedEnvelo"
        "pe\000RootActivityRoomEffect\000RootGameAutoBf"
        "\000RootChangeGamePatternButton\000RootActivit"
        "yRoomEmoji\000RootActivityRoomEffectGift\000Ro"
        "otActivityRoomSceneEffect\000RootEffectMood"
        "\000RootAcGameList\000RoomWelfare\000RoomShowMode"
        "PlanSign\000RootCleanPubliCScreen\000RoomShowM"
        "odePlan\000RoomGameAutoInvite\000RoomBanSpeak\000"
        "Chorus\000ChorusClient\000ChorusApp\000RootMultiC"
        "hannel\000RoomRankDay\000PcRoomGreeting\000RoomPr"
        "esentWelcome\000RoomChannelFilter\000RoomLeave"
        "Recommend\000RoomLeaveRecommendBlackList\000Ro"
        "omUserWeightRankNew\000SongWaitList\000RoomBan"
        "ScreenShot\000ChatEffect\000RoomVoteWhitelist\000"
        "RoomMobaTeamOpenGame\000RoomCpPublicNotice\000"
        "RoomAudioPlayer\000ClanHourRankBlacklist\000Ro"
        "omPkPunishment\000ClanHourRankInlet\000RoomSin"
        "gleLivePkPunishment\000RoomEmptyChairSedime"
        "nt\000RoomCloudDiscoRock\000RoomCloudDiscoRobo"
        "t\000RoomWishGiftSwitch\000RoomClanTaskSwitch\000"
        "ClanSitChairLimit\000NotSameClanSitChairLim"
        "it\000RoomAuditApplyLimitPeopleNumSwitch\000Ro"
        "omBgmPlayerSwitch\000RoomBarrageGameEntry\000";
    static const int32_t values[] = {
        PB3RoomOnOffType_RootNone,
        PB3RoomOnOffType_RootChairCharm,
        PB3RoomOnOffType_RootChairSer,
        PB3RoomOnOffType_RootClanChairLimit,
        PB3RoomOnOffType_RootRedEnvelope,
        PB3RoomOnOffType_RootRoomDecorate,
        PB3RoomOnOffType_RootActivityRoomDecorate,
        PB3RoomOnOffType_RootAutoClanChairLimit,
        PB3RoomOnOffType_RootAcRoomChargeNotice,
        PB3RoomOnOffType_RootAuditRoom,
        PB3RoomOnOffType_RootRedEnvelopeLevel,
        PB3RoomOnOffType_TextFilterRoomScreenEncrypted,
        PB3RoomOnOffType_TextFilterRoomScreenUnencrypted,
        PB3RoomOnOffType_RootEntryEffectSwitch,
        PB3RoomOnOffType_ConsortiaQuitPunish,
        PB3RoomOnOffType_RootNoNobility,
        PB3RoomOnOffType_RootRandomRedEnvelopeLevel,
        PB3RoomOnOffType_RootRandomRedEnvelope,
        PB3RoomOnOffType_RootActivityRoomEffect,
        PB3RoomOnOffType_RootGameAutoBf,
        PB3RoomOnOffType_RootChangeGamePatternButton,
        PB3RoomOnOffType_RootActivityRoomEmoji,
        PB3RoomOnOffType_RootActivityRoomEffectGift,
        PB3RoomOnOffType_RootActivityRoomSceneEffect,
        PB3RoomOnOffType_RootEffectMood,
        PB3RoomOnOffType_RootAcGameList,
        PB3RoomOnOffType_RoomWelfare,
        PB3RoomOnOffType_RoomShowModePlanSign,
        PB3RoomOnOffType_RootCleanPubliCScreen,
        PB3RoomOnOffType_RoomShowModePlan,
        PB3RoomOnOffType_RoomGameAutoInvite,
        PB3RoomOnOffType_RoomBanSpeak,
        PB3RoomOnOffType_Chorus,
        PB3RoomOnOffType_ChorusClient,
        PB3RoomOnOffType_ChorusApp,
        PB3RoomOnOffType_RootMultiChannel,
        PB3RoomOnOffType_RoomRankDay,
        PB3RoomOnOffType_PcRoomGreeting,
        PB3RoomOnOffType_RoomPresentWelcome,
        PB3RoomOnOffType_RoomChannelFilter,
        PB3RoomOnOffType_RoomLeaveRecommend,
        PB3RoomOnOffType_RoomLeaveRecommendBlackList,
        PB3RoomOnOffType_RoomUserWeightRankNew,
        PB3RoomOnOffType_SongWaitList,
        PB3RoomOnOffType_RoomBanScreenShot,
        PB3RoomOnOffType_ChatEffect,
        PB3RoomOnOffType_RoomVoteWhitelist,
        PB3RoomOnOffType_RoomMobaTeamOpenGame,
        PB3RoomOnOffType_RoomCpPublicNotice,
        PB3RoomOnOffType_RoomAudioPlayer,
        PB3RoomOnOffType_ClanHourRankBlacklist,
        PB3RoomOnOffType_RoomPkPunishment,
        PB3RoomOnOffType_ClanHourRankInlet,
        PB3RoomOnOffType_RoomSingleLivePkPunishment,
        PB3RoomOnOffType_RoomEmptyChairSediment,
        PB3RoomOnOffType_RoomCloudDiscoRock,
        PB3RoomOnOffType_RoomCloudDiscoRobot,
        PB3RoomOnOffType_RoomWishGiftSwitch,
        PB3RoomOnOffType_RoomClanTaskSwitch,
        PB3RoomOnOffType_ClanSitChairLimit,
        PB3RoomOnOffType_NotSameClanSitChairLimit,
        PB3RoomOnOffType_RoomAuditApplyLimitPeopleNumSwitch,
        PB3RoomOnOffType_RoomBgmPlayerSwitch,
        PB3RoomOnOffType_RoomBarrageGameEntry,
    };
    static const char *extraTextFormatInfo = "\006\034d\345\344\002\346\000*d\344\346\344\203\0009d\204\204\206\000:d\204\204\206\000=d\205\205\205\206\203\206\000>d\343\206\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomOnOffType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomOnOffType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomOnOffType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomOnOffType_RootNone:
    case PB3RoomOnOffType_RootChairCharm:
    case PB3RoomOnOffType_RootChairSer:
    case PB3RoomOnOffType_RootClanChairLimit:
    case PB3RoomOnOffType_RootRedEnvelope:
    case PB3RoomOnOffType_RootRoomDecorate:
    case PB3RoomOnOffType_RootActivityRoomDecorate:
    case PB3RoomOnOffType_RootAutoClanChairLimit:
    case PB3RoomOnOffType_RootAcRoomChargeNotice:
    case PB3RoomOnOffType_RootAuditRoom:
    case PB3RoomOnOffType_RootRedEnvelopeLevel:
    case PB3RoomOnOffType_TextFilterRoomScreenEncrypted:
    case PB3RoomOnOffType_TextFilterRoomScreenUnencrypted:
    case PB3RoomOnOffType_RootEntryEffectSwitch:
    case PB3RoomOnOffType_ConsortiaQuitPunish:
    case PB3RoomOnOffType_RootNoNobility:
    case PB3RoomOnOffType_RootRandomRedEnvelopeLevel:
    case PB3RoomOnOffType_RootRandomRedEnvelope:
    case PB3RoomOnOffType_RootActivityRoomEffect:
    case PB3RoomOnOffType_RootGameAutoBf:
    case PB3RoomOnOffType_RootChangeGamePatternButton:
    case PB3RoomOnOffType_RootActivityRoomEmoji:
    case PB3RoomOnOffType_RootActivityRoomEffectGift:
    case PB3RoomOnOffType_RootActivityRoomSceneEffect:
    case PB3RoomOnOffType_RootEffectMood:
    case PB3RoomOnOffType_RootAcGameList:
    case PB3RoomOnOffType_RoomWelfare:
    case PB3RoomOnOffType_RoomShowModePlanSign:
    case PB3RoomOnOffType_RootCleanPubliCScreen:
    case PB3RoomOnOffType_RoomShowModePlan:
    case PB3RoomOnOffType_RoomGameAutoInvite:
    case PB3RoomOnOffType_RoomBanSpeak:
    case PB3RoomOnOffType_Chorus:
    case PB3RoomOnOffType_ChorusClient:
    case PB3RoomOnOffType_ChorusApp:
    case PB3RoomOnOffType_RootMultiChannel:
    case PB3RoomOnOffType_RoomRankDay:
    case PB3RoomOnOffType_PcRoomGreeting:
    case PB3RoomOnOffType_RoomPresentWelcome:
    case PB3RoomOnOffType_RoomChannelFilter:
    case PB3RoomOnOffType_RoomLeaveRecommend:
    case PB3RoomOnOffType_RoomLeaveRecommendBlackList:
    case PB3RoomOnOffType_RoomUserWeightRankNew:
    case PB3RoomOnOffType_SongWaitList:
    case PB3RoomOnOffType_RoomBanScreenShot:
    case PB3RoomOnOffType_ChatEffect:
    case PB3RoomOnOffType_RoomVoteWhitelist:
    case PB3RoomOnOffType_RoomMobaTeamOpenGame:
    case PB3RoomOnOffType_RoomCpPublicNotice:
    case PB3RoomOnOffType_RoomAudioPlayer:
    case PB3RoomOnOffType_ClanHourRankBlacklist:
    case PB3RoomOnOffType_RoomPkPunishment:
    case PB3RoomOnOffType_ClanHourRankInlet:
    case PB3RoomOnOffType_RoomSingleLivePkPunishment:
    case PB3RoomOnOffType_RoomEmptyChairSediment:
    case PB3RoomOnOffType_RoomCloudDiscoRock:
    case PB3RoomOnOffType_RoomCloudDiscoRobot:
    case PB3RoomOnOffType_RoomWishGiftSwitch:
    case PB3RoomOnOffType_RoomClanTaskSwitch:
    case PB3RoomOnOffType_ClanSitChairLimit:
    case PB3RoomOnOffType_NotSameClanSitChairLimit:
    case PB3RoomOnOffType_RoomAuditApplyLimitPeopleNumSwitch:
    case PB3RoomOnOffType_RoomBgmPlayerSwitch:
    case PB3RoomOnOffType_RoomBarrageGameEntry:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BF_RECORD_KIND

GPBEnumDescriptor *PB3BF_RECORD_KIND_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BfrkNormal\000BfrkTiaoTiao\000BfrkWorldGift\000";
    static const int32_t values[] = {
        PB3BF_RECORD_KIND_BfrkNormal,
        PB3BF_RECORD_KIND_BfrkTiaoTiao,
        PB3BF_RECORD_KIND_BfrkWorldGift,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BF_RECORD_KIND)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BF_RECORD_KIND_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BF_RECORD_KIND_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BF_RECORD_KIND_BfrkNormal:
    case PB3BF_RECORD_KIND_BfrkTiaoTiao:
    case PB3BF_RECORD_KIND_BfrkWorldGift:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ROOM_SKILL_TYPE

GPBEnumDescriptor *PB3ROOM_SKILL_TYPE_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RstNormal\000RstFruit\000RstThunder\000";
    static const int32_t values[] = {
        PB3ROOM_SKILL_TYPE_RstNormal,
        PB3ROOM_SKILL_TYPE_RstFruit,
        PB3ROOM_SKILL_TYPE_RstThunder,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ROOM_SKILL_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ROOM_SKILL_TYPE_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ROOM_SKILL_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ROOM_SKILL_TYPE_RstNormal:
    case PB3ROOM_SKILL_TYPE_RstFruit:
    case PB3ROOM_SKILL_TYPE_RstThunder:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ROOM_SKILL_DATA

GPBEnumDescriptor *PB3ROOM_SKILL_DATA_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RsdNormal\000RsdPlayer\000RsdChair\000";
    static const int32_t values[] = {
        PB3ROOM_SKILL_DATA_RsdNormal,
        PB3ROOM_SKILL_DATA_RsdPlayer,
        PB3ROOM_SKILL_DATA_RsdChair,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ROOM_SKILL_DATA)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ROOM_SKILL_DATA_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ROOM_SKILL_DATA_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ROOM_SKILL_DATA_RsdNormal:
    case PB3ROOM_SKILL_DATA_RsdPlayer:
    case PB3ROOM_SKILL_DATA_RsdChair:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChangeRoomSetType

GPBEnumDescriptor *PB3ChangeRoomSetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CrstNone\000CrstRoomInfo\000CrstPattern\000CrstVo"
        "ice\000CrstCharm\000CrstChairLimit\000CrstPwdEnab"
        "le\000CrstGameAutoBf\000CrstSingleLiveNotify\000C"
        "rstSingleLiveTpl\000CrstCloudDiscoRoomShake"
        "\000CrstCubism\000";
    static const int32_t values[] = {
        PB3ChangeRoomSetType_CrstNone,
        PB3ChangeRoomSetType_CrstRoomInfo,
        PB3ChangeRoomSetType_CrstPattern,
        PB3ChangeRoomSetType_CrstVoice,
        PB3ChangeRoomSetType_CrstCharm,
        PB3ChangeRoomSetType_CrstChairLimit,
        PB3ChangeRoomSetType_CrstPwdEnable,
        PB3ChangeRoomSetType_CrstGameAutoBf,
        PB3ChangeRoomSetType_CrstSingleLiveNotify,
        PB3ChangeRoomSetType_CrstSingleLiveTpl,
        PB3ChangeRoomSetType_CrstCloudDiscoRoomShake,
        PB3ChangeRoomSetType_CrstCubism,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChangeRoomSetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChangeRoomSetType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChangeRoomSetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChangeRoomSetType_CrstNone:
    case PB3ChangeRoomSetType_CrstRoomInfo:
    case PB3ChangeRoomSetType_CrstPattern:
    case PB3ChangeRoomSetType_CrstVoice:
    case PB3ChangeRoomSetType_CrstCharm:
    case PB3ChangeRoomSetType_CrstChairLimit:
    case PB3ChangeRoomSetType_CrstPwdEnable:
    case PB3ChangeRoomSetType_CrstGameAutoBf:
    case PB3ChangeRoomSetType_CrstSingleLiveNotify:
    case PB3ChangeRoomSetType_CrstSingleLiveTpl:
    case PB3ChangeRoomSetType_CrstCloudDiscoRoomShake:
    case PB3ChangeRoomSetType_CrstCubism:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChorusOptType

GPBEnumDescriptor *PB3ChorusOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CotNone\000CotInvite\000CotRefuse\000CotAccept\000Co"
        "tStop\000CotStart\000CotSdkError\000";
    static const int32_t values[] = {
        PB3ChorusOptType_CotNone,
        PB3ChorusOptType_CotInvite,
        PB3ChorusOptType_CotRefuse,
        PB3ChorusOptType_CotAccept,
        PB3ChorusOptType_CotStop,
        PB3ChorusOptType_CotStart,
        PB3ChorusOptType_CotSdkError,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChorusOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChorusOptType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChorusOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChorusOptType_CotNone:
    case PB3ChorusOptType_CotInvite:
    case PB3ChorusOptType_CotRefuse:
    case PB3ChorusOptType_CotAccept:
    case PB3ChorusOptType_CotStop:
    case PB3ChorusOptType_CotStart:
    case PB3ChorusOptType_CotSdkError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomBanSpeakType

GPBEnumDescriptor *PB3RoomBanSpeakType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RbstNone\000RbstBan\000RbstRelease\000";
    static const int32_t values[] = {
        PB3RoomBanSpeakType_RbstNone,
        PB3RoomBanSpeakType_RbstBan,
        PB3RoomBanSpeakType_RbstRelease,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomBanSpeakType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomBanSpeakType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomBanSpeakType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomBanSpeakType_RbstNone:
    case PB3RoomBanSpeakType_RbstBan:
    case PB3RoomBanSpeakType_RbstRelease:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RecallContentStatus

GPBEnumDescriptor *PB3RecallContentStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RcsNone\000RcsPass\000RcsChecking\000RcsRefuse\000";
    static const int32_t values[] = {
        PB3RecallContentStatus_RcsNone,
        PB3RecallContentStatus_RcsPass,
        PB3RecallContentStatus_RcsChecking,
        PB3RecallContentStatus_RcsRefuse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RecallContentStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RecallContentStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RecallContentStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RecallContentStatus_RcsNone:
    case PB3RecallContentStatus_RcsPass:
    case PB3RecallContentStatus_RcsChecking:
    case PB3RecallContentStatus_RcsRefuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChatClassify

GPBEnumDescriptor *PB3ChatClassify_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChatZero\000ChatIm\000ChatRoom\000";
    static const int32_t values[] = {
        PB3ChatClassify_ChatZero,
        PB3ChatClassify_ChatIm,
        PB3ChatClassify_ChatRoom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChatClassify)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChatClassify_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChatClassify_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChatClassify_ChatZero:
    case PB3ChatClassify_ChatIm:
    case PB3ChatClassify_ChatRoom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomChatShowType

GPBEnumDescriptor *PB3RoomChatShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RcstZero\000RcstRoom\000RcstKeyboard\000";
    static const int32_t values[] = {
        PB3RoomChatShowType_RcstZero,
        PB3RoomChatShowType_RcstRoom,
        PB3RoomChatShowType_RcstKeyboard,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomChatShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomChatShowType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomChatShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomChatShowType_RcstZero:
    case PB3RoomChatShowType_RcstRoom:
    case PB3RoomChatShowType_RcstKeyboard:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PkRewardType

GPBEnumDescriptor *PB3PkRewardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PkrtZero\000PkrtHost\000PkrtSingleLive\000";
    static const int32_t values[] = {
        PB3PkRewardType_PkrtZero,
        PB3PkRewardType_PkrtHost,
        PB3PkRewardType_PkrtSingleLive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PkRewardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PkRewardType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PkRewardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PkRewardType_PkrtZero:
    case PB3PkRewardType_PkrtHost:
    case PB3PkRewardType_PkrtSingleLive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AsyncReconnectedInRoomType

GPBEnumDescriptor *PB3AsyncReconnectedInRoomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ArirtNone\000ArirtCloudDisco\000";
    static const int32_t values[] = {
        PB3AsyncReconnectedInRoomType_ArirtNone,
        PB3AsyncReconnectedInRoomType_ArirtCloudDisco,
    };
    static const char *extraTextFormatInfo = "\002\000e\204\000\001e\212\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AsyncReconnectedInRoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AsyncReconnectedInRoomType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AsyncReconnectedInRoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AsyncReconnectedInRoomType_ArirtNone:
    case PB3AsyncReconnectedInRoomType_ArirtCloudDisco:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WishGiftType

GPBEnumDescriptor *PB3WishGiftType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WgtNone\000WgtUpdate\000WgtGet\000";
    static const int32_t values[] = {
        PB3WishGiftType_WgtNone,
        PB3WishGiftType_WgtUpdate,
        PB3WishGiftType_WgtGet,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WishGiftType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WishGiftType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WishGiftType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WishGiftType_WgtNone:
    case PB3WishGiftType_WgtUpdate:
    case PB3WishGiftType_WgtGet:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ClanTaskType

GPBEnumDescriptor *PB3ClanTaskType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CttZero\000CttSave\000CttGet\000CttTaskDone\000CttGe"
        "tUser\000";
    static const int32_t values[] = {
        PB3ClanTaskType_CttZero,
        PB3ClanTaskType_CttSave,
        PB3ClanTaskType_CttGet,
        PB3ClanTaskType_CttTaskDone,
        PB3ClanTaskType_CttGetUser,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ClanTaskType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ClanTaskType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ClanTaskType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ClanTaskType_CttZero:
    case PB3ClanTaskType_CttSave:
    case PB3ClanTaskType_CttGet:
    case PB3ClanTaskType_CttTaskDone:
    case PB3ClanTaskType_CttGetUser:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EnumOfficialExamResult

GPBEnumDescriptor *PB3EnumOfficialExamResult_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OerNone\000OerNotPass\000OerPass\000OerWaitPass\000";
    static const int32_t values[] = {
        PB3EnumOfficialExamResult_OerNone,
        PB3EnumOfficialExamResult_OerNotPass,
        PB3EnumOfficialExamResult_OerPass,
        PB3EnumOfficialExamResult_OerWaitPass,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EnumOfficialExamResult)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EnumOfficialExamResult_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EnumOfficialExamResult_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EnumOfficialExamResult_OerNone:
    case PB3EnumOfficialExamResult_OerNotPass:
    case PB3EnumOfficialExamResult_OerPass:
    case PB3EnumOfficialExamResult_OerWaitPass:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3NotifyRankPush

@implementation PB3NotifyRankPush

@dynamic roomRankListArray, roomRankListArray_Count;

typedef struct PB3NotifyRankPush__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *roomRankListArray;
} PB3NotifyRankPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomRankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Rank),
        .number = PB3NotifyRankPush_FieldNumber_RoomRankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NotifyRankPush__storage_, roomRankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NotifyRankPush class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NotifyRankPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HourRankPush

@implementation PB3HourRankPush

@dynamic isHourRankFirst;
@dynamic expire;
@dynamic firstImage;

typedef struct PB3HourRankPush__storage_ {
  uint32_t _has_storage_[1];
  NSString *firstImage;
  int64_t expire;
} PB3HourRankPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isHourRankFirst",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankPush_FieldNumber_IsHourRankFirst,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "expire",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankPush_FieldNumber_Expire,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3HourRankPush__storage_, expire),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "firstImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankPush_FieldNumber_FirstImage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3HourRankPush__storage_, firstImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HourRankPush class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HourRankPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendBillTime

@implementation PB3SendBillTime

@dynamic sendTime;

typedef struct PB3SendBillTime__storage_ {
  uint32_t _has_storage_[1];
  int32_t sendTime;
} PB3SendBillTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendBillTime_FieldNumber_SendTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendBillTime__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendBillTime class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendBillTime__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ScenePlayer

@implementation PB3ScenePlayer

@dynamic id_p;
@dynamic name;
@dynamic icon;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic id2;
@dynamic onlineState;
@dynamic adminType;
@dynamic createAt;
@dynamic flags;
@dynamic flags2;
@dynamic isCharge;
@dynamic forbidSpeakTime;
@dynamic chairBanSpeak;
@dynamic chairSpeakOnoff;
@dynamic accompanyOnoff;
@dynamic soundOnoff;
@dynamic sex;
@dynamic effectArray, effectArray_Count;
@dynamic activityAdchannel;
@dynamic onlineExp;
@dynamic caijiId;
@dynamic isPresenter;
@dynamic hasNobilityInfo, nobilityInfo;
@dynamic hasIntimateEffect, intimateEffect;
@dynamic isShow;
@dynamic showIntimateBanners;
@dynamic isIntimateFansAuthority;
@dynamic havePlaylist;
@dynamic authInfoArray, authInfoArray_Count;
@dynamic chairSpeakClientType;
@dynamic hasTeacherStudentEffect, teacherStudentEffect;
@dynamic showTeacherStudentBanners;
@dynamic fishWealthLevel;
@dynamic fishCharmLevel;
@dynamic hasIntimateEffectPrivate, intimateEffectPrivate;
@dynamic hasCubismEffect, cubismEffect;

typedef struct PB3ScenePlayer__storage_ {
  uint32_t _has_storage_[2];
  int32_t wealthLevel;
  int32_t charmLevel;
  PB3OnlineStateType onlineState;
  PB3RoomAdminType adminType;
  uint32_t createAt;
  PB3SexType sex;
  int32_t activityAdchannel;
  uint32_t onlineExp;
  int32_t fishWealthLevel;
  int32_t fishCharmLevel;
  NSString *name;
  NSString *icon;
  NSMutableArray *effectArray;
  PB3RoomNobilityInfo *nobilityInfo;
  PB3IntimateEffect *intimateEffect;
  NSMutableArray *authInfoArray;
  NSString *chairSpeakClientType;
  PB3TeacherStudentEffect *teacherStudentEffect;
  PB3IntimateEffect *intimateEffectPrivate;
  PB3EnterCubismEffect *cubismEffect;
  int64_t id_p;
  int64_t id2;
  int64_t flags;
  int64_t flags2;
  int64_t forbidSpeakTime;
  int64_t caijiId;
} PB3ScenePlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_WealthLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_CharmLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_Id2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "onlineState",
        .dataTypeSpecific.enumDescFunc = PB3OnlineStateType_EnumDescriptor,
        .number = PB3ScenePlayer_FieldNumber_OnlineState,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, onlineState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "adminType",
        .dataTypeSpecific.enumDescFunc = PB3RoomAdminType_EnumDescriptor,
        .number = PB3ScenePlayer_FieldNumber_AdminType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, adminType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_CreateAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_Flags,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "flags2",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_Flags2,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, flags2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isCharge",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_IsCharge,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "forbidSpeakTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_ForbidSpeakTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, forbidSpeakTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairBanSpeak",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_ChairBanSpeak,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "chairSpeakOnoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_ChairSpeakOnoff,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "accompanyOnoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_AccompanyOnoff,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "soundOnoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_SoundOnoff,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3ScenePlayer_FieldNumber_Sex,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "effectArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Effect),
        .number = PB3ScenePlayer_FieldNumber_EffectArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, effectArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "activityAdchannel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_ActivityAdchannel,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, activityAdchannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "onlineExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_OnlineExp,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, onlineExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "caijiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_CaijiId,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, caijiId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isPresenter",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_IsPresenter,
        .hasIndex = 26,
        .offset = 27,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3ScenePlayer_FieldNumber_NobilityInfo,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimateEffect",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateEffect),
        .number = PB3ScenePlayer_FieldNumber_IntimateEffect,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, intimateEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_IsShow,
        .hasIndex = 30,
        .offset = 31,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showIntimateBanners",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_ShowIntimateBanners,
        .hasIndex = 32,
        .offset = 33,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isIntimateFansAuthority",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_IsIntimateFansAuthority,
        .hasIndex = 34,
        .offset = 35,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "havePlaylist",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_HavePlaylist,
        .hasIndex = 36,
        .offset = 37,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "authInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AuthInfo),
        .number = PB3ScenePlayer_FieldNumber_AuthInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, authInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chairSpeakClientType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_ChairSpeakClientType,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, chairSpeakClientType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "teacherStudentEffect",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TeacherStudentEffect),
        .number = PB3ScenePlayer_FieldNumber_TeacherStudentEffect,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, teacherStudentEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "showTeacherStudentBanners",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_ShowTeacherStudentBanners,
        .hasIndex = 40,
        .offset = 41,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fishWealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_FishWealthLevel,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, fishWealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fishCharmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ScenePlayer_FieldNumber_FishCharmLevel,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, fishCharmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateEffectPrivate",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateEffect),
        .number = PB3ScenePlayer_FieldNumber_IntimateEffectPrivate,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, intimateEffectPrivate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cubismEffect",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EnterCubismEffect),
        .number = PB3ScenePlayer_FieldNumber_CubismEffect,
        .hasIndex = 45,
        .offset = (uint32_t)offsetof(PB3ScenePlayer__storage_, cubismEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ScenePlayer class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ScenePlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ScenePlayer_OnlineState_RawValue(PB3ScenePlayer *message) {
  GPBDescriptor *descriptor = [PB3ScenePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ScenePlayer_FieldNumber_OnlineState];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ScenePlayer_OnlineState_RawValue(PB3ScenePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ScenePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ScenePlayer_FieldNumber_OnlineState];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ScenePlayer_AdminType_RawValue(PB3ScenePlayer *message) {
  GPBDescriptor *descriptor = [PB3ScenePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ScenePlayer_FieldNumber_AdminType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ScenePlayer_AdminType_RawValue(PB3ScenePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ScenePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ScenePlayer_FieldNumber_AdminType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ScenePlayer_Sex_RawValue(PB3ScenePlayer *message) {
  GPBDescriptor *descriptor = [PB3ScenePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ScenePlayer_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ScenePlayer_Sex_RawValue(PB3ScenePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ScenePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ScenePlayer_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateEffect

@implementation PB3IntimateEffect

@dynamic intimateConfId;
@dynamic playerId;
@dynamic playerId2;
@dynamic name;
@dynamic icon;

typedef struct PB3IntimateEffect__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateConfId;
  NSString *name;
  NSString *icon;
  int64_t playerId;
  int64_t playerId2;
} PB3IntimateEffect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intimateConfId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateEffect_FieldNumber_IntimateConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateEffect__storage_, intimateConfId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateEffect_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateEffect__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateEffect_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateEffect__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateEffect_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateEffect__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateEffect_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateEffect__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateEffect class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateEffect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TeacherStudentEffect

@implementation PB3TeacherStudentEffect

@dynamic effectId;
@dynamic playerId;
@dynamic playerId2;
@dynamic name;
@dynamic icon;
@dynamic publicText;
@dynamic isShowIcon;

typedef struct PB3TeacherStudentEffect__storage_ {
  uint32_t _has_storage_[1];
  int32_t effectId;
  NSString *name;
  NSString *icon;
  NSString *publicText;
  int64_t playerId;
  int64_t playerId2;
} PB3TeacherStudentEffect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentEffect_FieldNumber_EffectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TeacherStudentEffect__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentEffect_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TeacherStudentEffect__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentEffect_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TeacherStudentEffect__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentEffect_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TeacherStudentEffect__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentEffect_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TeacherStudentEffect__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicText",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentEffect_FieldNumber_PublicText,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TeacherStudentEffect__storage_, publicText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isShowIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentEffect_FieldNumber_IsShowIcon,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TeacherStudentEffect class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TeacherStudentEffect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EnterRoomReq

@implementation PB3EnterRoomReq

@dynamic roomId;
@dynamic password;
@dynamic deviceType;
@dynamic followId;
@dynamic followName;
@dynamic followType;
@dynamic followMsg;
@dynamic modName;
@dynamic hasCaiji, caiji;
@dynamic enterRoomOpt;
@dynamic enterRoomWay;
@dynamic newPattern;
@dynamic newFollowType;
@dynamic content;
@dynamic fansRecallId;
@dynamic extraData;
@dynamic recmdSourceId;
@dynamic flowSupportType;
@dynamic isReconnect;

typedef struct PB3EnterRoomReq__storage_ {
  uint32_t _has_storage_[1];
  PB3DeviceType deviceType;
  int32_t followType;
  PB3EnterRoomOpt enterRoomOpt;
  PB3EnterRoomWay enterRoomWay;
  PB3NewRoomPattern newPattern;
  PB3NewFollowType newFollowType;
  int32_t flowSupportType;
  NSString *password;
  NSString *followName;
  NSString *followMsg;
  NSString *modName;
  PB3CaijiPlayer *caiji;
  NSString *content;
  NSString *recmdSourceId;
  int64_t roomId;
  int64_t followId;
  int64_t fansRecallId;
  int64_t extraData;
} PB3EnterRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3EnterRoomReq_FieldNumber_DeviceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "followId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_FollowId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, followId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "followName",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_FollowName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, followName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "followType",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_FollowType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, followType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_FollowMsg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, followMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modName",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_ModName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, modName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "caiji",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CaijiPlayer),
        .number = PB3EnterRoomReq_FieldNumber_Caiji,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, caiji),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enterRoomOpt",
        .dataTypeSpecific.enumDescFunc = PB3EnterRoomOpt_EnumDescriptor,
        .number = PB3EnterRoomReq_FieldNumber_EnterRoomOpt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, enterRoomOpt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "enterRoomWay",
        .dataTypeSpecific.enumDescFunc = PB3EnterRoomWay_EnumDescriptor,
        .number = PB3EnterRoomReq_FieldNumber_EnterRoomWay,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, enterRoomWay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "newPattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3EnterRoomReq_FieldNumber_NewPattern,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, newPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "newFollowType",
        .dataTypeSpecific.enumDescFunc = PB3NewFollowType_EnumDescriptor,
        .number = PB3EnterRoomReq_FieldNumber_NewFollowType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, newFollowType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_Content,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansRecallId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_FansRecallId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, fansRecallId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "extraData",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_ExtraData,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, extraData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "recmdSourceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_RecmdSourceId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, recmdSourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flowSupportType",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_FlowSupportType,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3EnterRoomReq__storage_, flowSupportType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isReconnect",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomReq_FieldNumber_IsReconnect,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EnterRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EnterRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3EnterRoomReq_DeviceType_RawValue(PB3EnterRoomReq *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomReq_DeviceType_RawValue(PB3EnterRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomReq_EnterRoomOpt_RawValue(PB3EnterRoomReq *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_EnterRoomOpt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomReq_EnterRoomOpt_RawValue(PB3EnterRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_EnterRoomOpt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomReq_EnterRoomWay_RawValue(PB3EnterRoomReq *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_EnterRoomWay];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomReq_EnterRoomWay_RawValue(PB3EnterRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_EnterRoomWay];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomReq_NewPattern_RawValue(PB3EnterRoomReq *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_NewPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomReq_NewPattern_RawValue(PB3EnterRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_NewPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomReq_NewFollowType_RawValue(PB3EnterRoomReq *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_NewFollowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomReq_NewFollowType_RawValue(PB3EnterRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomReq_FieldNumber_NewFollowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EnterRoomRes

@implementation PB3EnterRoomRes

@dynamic roomId;
@dynamic name;
@dynamic greeting;
@dynamic viewerNum;
@dynamic hasMaster, master;
@dynamic category;
@dynamic id2;
@dynamic pattern;
@dynamic password;
@dynamic adminType;
@dynamic chairsArray, chairsArray_Count;
@dynamic intimatesArray, intimatesArray_Count;
@dynamic type;
@dynamic hasAgodaKey, agodaKey;
@dynamic reception;
@dynamic notice;
@dynamic labelURL;
@dynamic imageId;
@dynamic ownerInRoom;
@dynamic maxOnlineNotice;
@dynamic heat;
@dynamic isMizhua;
@dynamic isShowChairButton;
@dynamic sdkType;
@dynamic newPattern;
@dynamic voice;
@dynamic chairCharmStatus;
@dynamic ownerChairCharm;
@dynamic isPresenter;
@dynamic onOffStatusListArray, onOffStatusListArray_Count;
@dynamic clanChairLimitStatus;
@dynamic roomBgURL;
@dynamic isShowRedEnvelope;
@dynamic decorateList, decorateList_Count;
@dynamic hasMySceneInfo, mySceneInfo;
@dynamic underChairNum;
@dynamic isFirstTime;
@dynamic showType;
@dynamic hasEffectMood, effectMood;
@dynamic isClan;
@dynamic hasSingleLiveInfo, singleLiveInfo;
@dynamic hasIntimateFansInfo, intimateFansInfo;
@dynamic gmeAuthListArray, gmeAuthListArray_Count;
@dynamic agodaKeyListArray, agodaKeyListArray_Count;
@dynamic clanCategory;
@dynamic isReferralTraffic;
@dynamic roomClanType;
@dynamic teacherStudentChairArray, teacherStudentChairArray_Count;
@dynamic singleLiveTplType;
@dynamic patternChairArray, patternChairArray_Count;
@dynamic hasHourRankRoomInfo, hourRankRoomInfo;
@dynamic cubismEnable;
@dynamic genderPattern;
@dynamic hasGameInfo, gameInfo;

typedef struct PB3EnterRoomRes__storage_ {
  uint32_t _has_storage_[2];
  uint32_t viewerNum;
  int32_t category;
  PB3RoomPattern pattern;
  PB3RoomAdminType adminType;
  PB3RoomType type;
  PB3OwnerInRoom ownerInRoom;
  int32_t heat;
  PB3VoiceSdkType sdkType;
  PB3NewRoomPattern newPattern;
  PB3RoomVoice voice;
  int32_t chairCharmStatus;
  int32_t ownerChairCharm;
  int32_t underChairNum;
  PB3ShowType showType;
  int32_t clanCategory;
  PB3RoomClanType roomClanType;
  PB3SingleLiveTplType singleLiveTplType;
  PB3GenderPattern genderPattern;
  NSString *name;
  NSString *greeting;
  PB3ScenePlayer *master;
  NSString *password;
  NSMutableArray *chairsArray;
  PB3AgodaKey *agodaKey;
  NSMutableArray *intimatesArray;
  NSString *reception;
  NSString *notice;
  NSString *labelURL;
  NSString *maxOnlineNotice;
  NSMutableArray *onOffStatusListArray;
  NSString *roomBgURL;
  GPBInt32ObjectDictionary *decorateList;
  PB3ScenePlayer *mySceneInfo;
  PB3BroadcastEffectMood *effectMood;
  PB3SingleLiveInfo *singleLiveInfo;
  PB3IntimateFansInfo *intimateFansInfo;
  NSMutableArray *gmeAuthListArray;
  NSMutableArray *agodaKeyListArray;
  NSMutableArray *teacherStudentChairArray;
  NSMutableArray *patternChairArray;
  PB3HourRankRoomInfo *hourRankRoomInfo;
  PB3BarrageGameInfo *gameInfo;
  int64_t roomId;
  int64_t id2;
  int64_t imageId;
} PB3EnterRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Greeting,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_ViewerNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, viewerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "master",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3EnterRoomRes_FieldNumber_Master,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, master),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Category,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Id2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3RoomPattern_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_Pattern,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Password,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adminType",
        .dataTypeSpecific.enumDescFunc = PB3RoomAdminType_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_AdminType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, adminType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chairsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Chair),
        .number = PB3EnterRoomRes_FieldNumber_ChairsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, chairsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RoomType_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_Type,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "agodaKey",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AgodaKey),
        .number = PB3EnterRoomRes_FieldNumber_AgodaKey,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, agodaKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimatesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateChair),
        .number = PB3EnterRoomRes_FieldNumber_IntimatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, intimatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reception",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Reception,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, reception),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notice",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Notice,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, notice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labelURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_LabelURL,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, labelURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_ImageId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, imageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ownerInRoom",
        .dataTypeSpecific.enumDescFunc = PB3OwnerInRoom_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_OwnerInRoom,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, ownerInRoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "maxOnlineNotice",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_MaxOnlineNotice,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, maxOnlineNotice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "heat",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_Heat,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, heat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isMizhua",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_IsMizhua,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShowChairButton",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_IsShowChairButton,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sdkType",
        .dataTypeSpecific.enumDescFunc = PB3VoiceSdkType_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_SdkType,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, sdkType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "newPattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_NewPattern,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, newPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voice",
        .dataTypeSpecific.enumDescFunc = PB3RoomVoice_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_Voice,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, voice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chairCharmStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_ChairCharmStatus,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, chairCharmStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "ownerChairCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_OwnerChairCharm,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, ownerChairCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isPresenter",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_IsPresenter,
        .hasIndex = 28,
        .offset = 29,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "onOffStatusListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomOnOffStatus),
        .number = PB3EnterRoomRes_FieldNumber_OnOffStatusListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, onOffStatusListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clanChairLimitStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_ClanChairLimitStatus,
        .hasIndex = 30,
        .offset = 31,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_RoomBgURL,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, roomBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isShowRedEnvelope",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_IsShowRedEnvelope,
        .hasIndex = 33,
        .offset = 34,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "decorateList",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UsingDecorateList),
        .number = PB3EnterRoomRes_FieldNumber_DecorateList,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, decorateList),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mySceneInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3EnterRoomRes_FieldNumber_MySceneInfo,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, mySceneInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "underChairNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_UnderChairNum,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, underChairNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isFirstTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_IsFirstTime,
        .hasIndex = 37,
        .offset = 38,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showType",
        .dataTypeSpecific.enumDescFunc = PB3ShowType_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_ShowType,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "effectMood",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastEffectMood),
        .number = PB3EnterRoomRes_FieldNumber_EffectMood,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, effectMood),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isClan",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_IsClan,
        .hasIndex = 41,
        .offset = 42,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "singleLiveInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SingleLiveInfo),
        .number = PB3EnterRoomRes_FieldNumber_SingleLiveInfo,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, singleLiveInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimateFansInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansInfo),
        .number = PB3EnterRoomRes_FieldNumber_IntimateFansInfo,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, intimateFansInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gmeAuthListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_GmeAuthListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, gmeAuthListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "agodaKeyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AgodaKey),
        .number = PB3EnterRoomRes_FieldNumber_AgodaKeyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, agodaKeyListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clanCategory",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_ClanCategory,
        .hasIndex = 45,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, clanCategory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isReferralTraffic",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_IsReferralTraffic,
        .hasIndex = 46,
        .offset = 47,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomClanType",
        .dataTypeSpecific.enumDescFunc = PB3RoomClanType_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_RoomClanType,
        .hasIndex = 48,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, roomClanType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "teacherStudentChairArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TeacherStudentChair),
        .number = PB3EnterRoomRes_FieldNumber_TeacherStudentChairArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, teacherStudentChairArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "singleLiveTplType",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveTplType_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_SingleLiveTplType,
        .hasIndex = 49,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, singleLiveTplType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "patternChairArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomChairStatus),
        .number = PB3EnterRoomRes_FieldNumber_PatternChairArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, patternChairArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hourRankRoomInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3HourRankRoomInfo),
        .number = PB3EnterRoomRes_FieldNumber_HourRankRoomInfo,
        .hasIndex = 50,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, hourRankRoomInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cubismEnable",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomRes_FieldNumber_CubismEnable,
        .hasIndex = 51,
        .offset = 52,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "genderPattern",
        .dataTypeSpecific.enumDescFunc = PB3GenderPattern_EnumDescriptor,
        .number = PB3EnterRoomRes_FieldNumber_GenderPattern,
        .hasIndex = 53,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, genderPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gameInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BarrageGameInfo),
        .number = PB3EnterRoomRes_FieldNumber_GameInfo,
        .hasIndex = 54,
        .offset = (uint32_t)offsetof(PB3EnterRoomRes__storage_, gameInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EnterRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EnterRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\022\005\241!!\000$\004\242\241!!\0007\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3EnterRoomRes_Pattern_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_Pattern_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_AdminType_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_AdminType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_AdminType_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_AdminType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_Type_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_Type_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_OwnerInRoom_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_OwnerInRoom];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_OwnerInRoom_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_OwnerInRoom];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_SdkType_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_SdkType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_SdkType_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_SdkType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_NewPattern_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_NewPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_NewPattern_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_NewPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_Voice_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_Voice];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_Voice_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_Voice];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_ShowType_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_ShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_ShowType_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_ShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_RoomClanType_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_RoomClanType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_RoomClanType_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_RoomClanType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_SingleLiveTplType_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_SingleLiveTplType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_SingleLiveTplType_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_SingleLiveTplType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomRes_GenderPattern_RawValue(PB3EnterRoomRes *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_GenderPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomRes_GenderPattern_RawValue(PB3EnterRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomRes_FieldNumber_GenderPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BarrageGameTeam

@implementation PB3BarrageGameTeam

@dynamic roomId;
@dynamic roomName;
@dynamic roomIcon;
@dynamic hostId;
@dynamic hostName;
@dynamic hostIcon;

typedef struct PB3BarrageGameTeam__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomName;
  NSString *roomIcon;
  NSString *hostName;
  NSString *hostIcon;
  int64_t roomId;
  int64_t hostId;
} PB3BarrageGameTeam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameTeam_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BarrageGameTeam__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameTeam_FieldNumber_RoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BarrageGameTeam__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameTeam_FieldNumber_RoomIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BarrageGameTeam__storage_, roomIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameTeam_FieldNumber_HostId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BarrageGameTeam__storage_, hostId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hostName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameTeam_FieldNumber_HostName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BarrageGameTeam__storage_, hostName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameTeam_FieldNumber_HostIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BarrageGameTeam__storage_, hostIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BarrageGameTeam class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BarrageGameTeam__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BarrageGameInfo

@implementation PB3BarrageGameInfo

@dynamic gameId;
@dynamic sessionId;
@dynamic hasRedTeam, redTeam;
@dynamic hasBlueTeam, blueTeam;
@dynamic status;
@dynamic appPullLiveURL;
@dynamic pcPullLiveURL;

typedef struct PB3BarrageGameInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3BarrageGameStatus status;
  NSString *sessionId;
  PB3BarrageGameTeam *redTeam;
  PB3BarrageGameTeam *blueTeam;
  NSString *appPullLiveURL;
  NSString *pcPullLiveURL;
  int64_t gameId;
} PB3BarrageGameInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameInfo_FieldNumber_GameId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BarrageGameInfo__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameInfo_FieldNumber_SessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BarrageGameInfo__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redTeam",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BarrageGameTeam),
        .number = PB3BarrageGameInfo_FieldNumber_RedTeam,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BarrageGameInfo__storage_, redTeam),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blueTeam",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BarrageGameTeam),
        .number = PB3BarrageGameInfo_FieldNumber_BlueTeam,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BarrageGameInfo__storage_, blueTeam),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BarrageGameStatus_EnumDescriptor,
        .number = PB3BarrageGameInfo_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BarrageGameInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "appPullLiveURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameInfo_FieldNumber_AppPullLiveURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BarrageGameInfo__storage_, appPullLiveURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcPullLiveURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameInfo_FieldNumber_PcPullLiveURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BarrageGameInfo__storage_, pcPullLiveURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BarrageGameInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BarrageGameInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\003\244\244\241!!\000\007\002\244\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BarrageGameInfo_Status_RawValue(PB3BarrageGameInfo *message) {
  GPBDescriptor *descriptor = [PB3BarrageGameInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BarrageGameInfo_Status_RawValue(PB3BarrageGameInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BarrageGameInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BarrageGameMatchConfirmData

@implementation PB3BarrageGameMatchConfirmData

@dynamic sessionId;
@dynamic theOtherId;
@dynamic theOtherIcon;
@dynamic theOtherStatus;
@dynamic selfStatus;
@dynamic countDown;

typedef struct PB3BarrageGameMatchConfirmData__storage_ {
  uint32_t _has_storage_[1];
  PB3BarrageGameMatchConfirmStatus theOtherStatus;
  PB3BarrageGameMatchConfirmStatus selfStatus;
  NSString *sessionId;
  NSString *theOtherIcon;
  int64_t theOtherId;
  int64_t countDown;
} PB3BarrageGameMatchConfirmData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameMatchConfirmData_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchConfirmData__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "theOtherId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameMatchConfirmData_FieldNumber_TheOtherId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchConfirmData__storage_, theOtherId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "theOtherIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameMatchConfirmData_FieldNumber_TheOtherIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchConfirmData__storage_, theOtherIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "theOtherStatus",
        .dataTypeSpecific.enumDescFunc = PB3BarrageGameMatchConfirmStatus_EnumDescriptor,
        .number = PB3BarrageGameMatchConfirmData_FieldNumber_TheOtherStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchConfirmData__storage_, theOtherStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "selfStatus",
        .dataTypeSpecific.enumDescFunc = PB3BarrageGameMatchConfirmStatus_EnumDescriptor,
        .number = PB3BarrageGameMatchConfirmData_FieldNumber_SelfStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchConfirmData__storage_, selfStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "countDown",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameMatchConfirmData_FieldNumber_CountDown,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchConfirmData__storage_, countDown),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BarrageGameMatchConfirmData class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BarrageGameMatchConfirmData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BarrageGameMatchConfirmData_TheOtherStatus_RawValue(PB3BarrageGameMatchConfirmData *message) {
  GPBDescriptor *descriptor = [PB3BarrageGameMatchConfirmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameMatchConfirmData_FieldNumber_TheOtherStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BarrageGameMatchConfirmData_TheOtherStatus_RawValue(PB3BarrageGameMatchConfirmData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BarrageGameMatchConfirmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameMatchConfirmData_FieldNumber_TheOtherStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BarrageGameMatchConfirmData_SelfStatus_RawValue(PB3BarrageGameMatchConfirmData *message) {
  GPBDescriptor *descriptor = [PB3BarrageGameMatchConfirmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameMatchConfirmData_FieldNumber_SelfStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BarrageGameMatchConfirmData_SelfStatus_RawValue(PB3BarrageGameMatchConfirmData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BarrageGameMatchConfirmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameMatchConfirmData_FieldNumber_SelfStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BarrageGameMatchInfo

@implementation PB3BarrageGameMatchInfo

@dynamic status;
@dynamic startAt;
@dynamic hasData_p, data_p;
@dynamic gameId;

typedef struct PB3BarrageGameMatchInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3BarrageGameMatchStatus status;
  PB3BarrageGameMatchConfirmData *data_p;
  int64_t startAt;
  int64_t gameId;
} PB3BarrageGameMatchInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3BarrageGameMatchStatus_EnumDescriptor,
        .number = PB3BarrageGameMatchInfo_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameMatchInfo_FieldNumber_StartAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchInfo__storage_, startAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BarrageGameMatchConfirmData),
        .number = PB3BarrageGameMatchInfo_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchInfo__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameMatchInfo_FieldNumber_GameId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BarrageGameMatchInfo__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BarrageGameMatchInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BarrageGameMatchInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BarrageGameMatchInfo_Status_RawValue(PB3BarrageGameMatchInfo *message) {
  GPBDescriptor *descriptor = [PB3BarrageGameMatchInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameMatchInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BarrageGameMatchInfo_Status_RawValue(PB3BarrageGameMatchInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BarrageGameMatchInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BarrageGameMatchInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3HourRankRoomInfo

@implementation PB3HourRankRoomInfo

@dynamic isHourRankFirst;
@dynamic isHourRankFirstExpire;
@dynamic rankNum;
@dynamic rankName;
@dynamic firstGapText;
@dynamic firstImage;
@dynamic rankNumText;
@dynamic pushType;

typedef struct PB3HourRankRoomInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3HourRankRoomPushType pushType;
  NSString *rankName;
  NSString *firstGapText;
  NSString *firstImage;
  NSString *rankNumText;
  int64_t isHourRankFirstExpire;
  int64_t rankNum;
} PB3HourRankRoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isHourRankFirst",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankRoomInfo_FieldNumber_IsHourRankFirst,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isHourRankFirstExpire",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankRoomInfo_FieldNumber_IsHourRankFirstExpire,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3HourRankRoomInfo__storage_, isHourRankFirstExpire),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rankNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankRoomInfo_FieldNumber_RankNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3HourRankRoomInfo__storage_, rankNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rankName",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankRoomInfo_FieldNumber_RankName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3HourRankRoomInfo__storage_, rankName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstGapText",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankRoomInfo_FieldNumber_FirstGapText,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3HourRankRoomInfo__storage_, firstGapText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankRoomInfo_FieldNumber_FirstImage,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3HourRankRoomInfo__storage_, firstImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rankNumText",
        .dataTypeSpecific.className = NULL,
        .number = PB3HourRankRoomInfo_FieldNumber_RankNumText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3HourRankRoomInfo__storage_, rankNumText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushType",
        .dataTypeSpecific.enumDescFunc = PB3HourRankRoomPushType_EnumDescriptor,
        .number = PB3HourRankRoomInfo_FieldNumber_PushType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3HourRankRoomInfo__storage_, pushType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HourRankRoomInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HourRankRoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3HourRankRoomInfo_PushType_RawValue(PB3HourRankRoomInfo *message) {
  GPBDescriptor *descriptor = [PB3HourRankRoomInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3HourRankRoomInfo_FieldNumber_PushType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3HourRankRoomInfo_PushType_RawValue(PB3HourRankRoomInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3HourRankRoomInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3HourRankRoomInfo_FieldNumber_PushType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastPlayerEnter

@implementation PB3BroadcastPlayerEnter

@dynamic hasPlayer, player;
@dynamic viewerNum;
@dynamic followId;
@dynamic followName;
@dynamic followType;
@dynamic followMsg;
@dynamic modName;
@dynamic hasFollowNobility, followNobility;
@dynamic underChairNum;
@dynamic followSex;
@dynamic deviceType;
@dynamic hasIntimateFansInfo, intimateFansInfo;
@dynamic isRobot;
@dynamic flowSupportType;

typedef struct PB3BroadcastPlayerEnter__storage_ {
  uint32_t _has_storage_[1];
  uint32_t viewerNum;
  int32_t followType;
  int32_t underChairNum;
  PB3SexType followSex;
  PB3DeviceType deviceType;
  int32_t flowSupportType;
  PB3ScenePlayer *player;
  NSString *followName;
  NSString *followMsg;
  NSString *modName;
  PB3RoomNobilityInfo *followNobility;
  PB3IntimateFansInfo *intimateFansInfo;
  int64_t followId;
} PB3BroadcastPlayerEnter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3BroadcastPlayerEnter_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "viewerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_ViewerNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, viewerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "followId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_FollowId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, followId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "followName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_FollowName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, followName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "followType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_FollowType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, followType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_FollowMsg,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, followMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_ModName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, modName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "followNobility",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3BroadcastPlayerEnter_FieldNumber_FollowNobility,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, followNobility),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "underChairNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_UnderChairNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, underChairNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followSex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3BroadcastPlayerEnter_FieldNumber_FollowSex,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, followSex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3BroadcastPlayerEnter_FieldNumber_DeviceType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "intimateFansInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansInfo),
        .number = PB3BroadcastPlayerEnter_FieldNumber_IntimateFansInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, intimateFansInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isRobot",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_IsRobot,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "flowSupportType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerEnter_FieldNumber_FlowSupportType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerEnter__storage_, flowSupportType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastPlayerEnter class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastPlayerEnter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastPlayerEnter_FollowSex_RawValue(PB3BroadcastPlayerEnter *message) {
  GPBDescriptor *descriptor = [PB3BroadcastPlayerEnter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastPlayerEnter_FieldNumber_FollowSex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastPlayerEnter_FollowSex_RawValue(PB3BroadcastPlayerEnter *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastPlayerEnter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastPlayerEnter_FieldNumber_FollowSex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BroadcastPlayerEnter_DeviceType_RawValue(PB3BroadcastPlayerEnter *message) {
  GPBDescriptor *descriptor = [PB3BroadcastPlayerEnter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastPlayerEnter_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastPlayerEnter_DeviceType_RawValue(PB3BroadcastPlayerEnter *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastPlayerEnter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastPlayerEnter_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastEnterToMyself

@implementation PB3BroadcastEnterToMyself

@dynamic roomId;
@dynamic roomPwd;
@dynamic deviceId;
@dynamic deviceType;
@dynamic isEntering;
@dynamic roomName;
@dynamic timestamp;

typedef struct PB3BroadcastEnterToMyself__storage_ {
  uint32_t _has_storage_[1];
  PB3DeviceType deviceType;
  NSString *roomPwd;
  NSString *deviceId;
  NSString *roomName;
  int64_t roomId;
  int64_t timestamp;
} PB3BroadcastEnterToMyself__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEnterToMyself_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastEnterToMyself__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomPwd",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEnterToMyself_FieldNumber_RoomPwd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastEnterToMyself__storage_, roomPwd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEnterToMyself_FieldNumber_DeviceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastEnterToMyself__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3BroadcastEnterToMyself_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastEnterToMyself__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isEntering",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEnterToMyself_FieldNumber_IsEntering,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEnterToMyself_FieldNumber_RoomName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastEnterToMyself__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEnterToMyself_FieldNumber_Timestamp,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastEnterToMyself__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastEnterToMyself class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastEnterToMyself__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastEnterToMyself_DeviceType_RawValue(PB3BroadcastEnterToMyself *message) {
  GPBDescriptor *descriptor = [PB3BroadcastEnterToMyself descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastEnterToMyself_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastEnterToMyself_DeviceType_RawValue(PB3BroadcastEnterToMyself *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastEnterToMyself descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastEnterToMyself_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LeaveRoomReq

@implementation PB3LeaveRoomReq

@dynamic playerId;

typedef struct PB3LeaveRoomReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3LeaveRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveRoomReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LeaveRoomReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LeaveRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LeaveRoomRes

@implementation PB3LeaveRoomRes


typedef struct PB3LeaveRoomRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LeaveRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LeaveRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastPlayerLeave

@implementation PB3BroadcastPlayerLeave

@dynamic roomId;
@dynamic playerId;
@dynamic name;
@dynamic viewerNum;
@dynamic underChairNum;

typedef struct PB3BroadcastPlayerLeave__storage_ {
  uint32_t _has_storage_[1];
  int32_t viewerNum;
  int32_t underChairNum;
  NSString *name;
  int64_t roomId;
  int64_t playerId;
} PB3BroadcastPlayerLeave__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerLeave_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerLeave__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerLeave_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerLeave__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerLeave_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerLeave__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerLeave_FieldNumber_ViewerNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerLeave__storage_, viewerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "underChairNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayerLeave_FieldNumber_UnderChairNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayerLeave__storage_, underChairNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastPlayerLeave class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastPlayerLeave__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomHeat

@implementation PB3BroadcastRoomHeat

@dynamic roomId;
@dynamic heat;

typedef struct PB3BroadcastRoomHeat__storage_ {
  uint32_t _has_storage_[1];
  int32_t heat;
  int64_t roomId;
} PB3BroadcastRoomHeat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomHeat_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomHeat__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "heat",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomHeat_FieldNumber_Heat,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomHeat__storage_, heat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomHeat class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomHeat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairButton

@implementation PB3BroadcastChairButton

@dynamic roomId;
@dynamic isShowChairButton;

typedef struct PB3BroadcastChairButton__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3BroadcastChairButton__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairButton_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairButton__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isShowChairButton",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairButton_FieldNumber_IsShowChairButton,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairButton class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairButton__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastPresenter

@implementation PB3BroadcastPresenter

@dynamic roomId;
@dynamic playerId;
@dynamic playerName;
@dynamic opt;

typedef struct PB3BroadcastPresenter__storage_ {
  uint32_t _has_storage_[1];
  PB3SetPresenterOpt opt;
  NSString *playerName;
  int64_t roomId;
  int64_t playerId;
} PB3BroadcastPresenter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresenter_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastPresenter__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresenter_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastPresenter__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresenter_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastPresenter__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3SetPresenterOpt_EnumDescriptor,
        .number = PB3BroadcastPresenter_FieldNumber_Opt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastPresenter__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastPresenter class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastPresenter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastPresenter_Opt_RawValue(PB3BroadcastPresenter *message) {
  GPBDescriptor *descriptor = [PB3BroadcastPresenter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastPresenter_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastPresenter_Opt_RawValue(PB3BroadcastPresenter *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastPresenter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastPresenter_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlayerListRes

@implementation PB3PlayerListRes

@dynamic valueArray, valueArray_Count;
@dynamic nextIndex;
@dynamic nobilityNum;
@dynamic stealthNum;

typedef struct PB3PlayerListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  int32_t nobilityNum;
  int32_t stealthNum;
  NSMutableArray *valueArray;
} PB3PlayerListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3PlayerListRes_FieldNumber_ValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerListRes__storage_, valueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerListRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerListRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nobilityNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerListRes_FieldNumber_NobilityNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerListRes__storage_, nobilityNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stealthNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerListRes_FieldNumber_StealthNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerListRes__storage_, stealthNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerListRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetRoomReq

@implementation PB3SetRoomReq

@dynamic name;
@dynamic password;
@dynamic greeting;
@dynamic category;
@dynamic pattern;
@dynamic newPattern;
@dynamic voice;
@dynamic chairCharmStatus;
@dynamic clanChairLimitStatus;
@dynamic pwdEnable;

typedef struct PB3SetRoomReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t category;
  PB3RoomPattern pattern;
  PB3NewRoomPattern newPattern;
  PB3RoomVoice voice;
  int32_t chairCharmStatus;
  NSString *name;
  NSString *password;
  NSString *greeting;
} PB3SetRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomReq_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomReq_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomReq_FieldNumber_Greeting,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomReq_FieldNumber_Category,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3RoomPattern_EnumDescriptor,
        .number = PB3SetRoomReq_FieldNumber_Pattern,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "newPattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3SetRoomReq_FieldNumber_NewPattern,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, newPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voice",
        .dataTypeSpecific.enumDescFunc = PB3RoomVoice_EnumDescriptor,
        .number = PB3SetRoomReq_FieldNumber_Voice,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, voice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chairCharmStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomReq_FieldNumber_ChairCharmStatus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SetRoomReq__storage_, chairCharmStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "clanChairLimitStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomReq_FieldNumber_ClanChairLimitStatus,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "pwdEnable",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomReq_FieldNumber_PwdEnable,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetRoomReq_Pattern_RawValue(PB3SetRoomReq *message) {
  GPBDescriptor *descriptor = [PB3SetRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomReq_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetRoomReq_Pattern_RawValue(PB3SetRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomReq_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SetRoomReq_NewPattern_RawValue(PB3SetRoomReq *message) {
  GPBDescriptor *descriptor = [PB3SetRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomReq_FieldNumber_NewPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetRoomReq_NewPattern_RawValue(PB3SetRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomReq_FieldNumber_NewPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SetRoomReq_Voice_RawValue(PB3SetRoomReq *message) {
  GPBDescriptor *descriptor = [PB3SetRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomReq_FieldNumber_Voice];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetRoomReq_Voice_RawValue(PB3SetRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomReq_FieldNumber_Voice];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SetRoomRes

@implementation PB3SetRoomRes

@dynamic nameGreetStatus;
@dynamic oldName;
@dynamic newName;
@dynamic oldGreeting;
@dynamic newGreeting;
@dynamic isModify;

typedef struct PB3SetRoomRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AuditStatus nameGreetStatus;
  NSString *oldName;
  NSString *newName;
  NSString *oldGreeting;
  NSString *newGreeting;
} PB3SetRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameGreetStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3SetRoomRes_FieldNumber_NameGreetStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetRoomRes__storage_, nameGreetStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "oldName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomRes_FieldNumber_OldName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetRoomRes__storage_, oldName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomRes_FieldNumber_NewName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SetRoomRes__storage_, newName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oldGreeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomRes_FieldNumber_OldGreeting,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SetRoomRes__storage_, oldGreeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newGreeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomRes_FieldNumber_NewGreeting,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SetRoomRes__storage_, newGreeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isModify",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomRes_FieldNumber_IsModify,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetRoomRes_NameGreetStatus_RawValue(PB3SetRoomRes *message) {
  GPBDescriptor *descriptor = [PB3SetRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomRes_FieldNumber_NameGreetStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetRoomRes_NameGreetStatus_RawValue(PB3SetRoomRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetRoomRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomRes_FieldNumber_NameGreetStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastRoomSet

@implementation PB3BroadcastRoomSet

@dynamic roomId;
@dynamic playerId;
@dynamic name;
@dynamic password;
@dynamic greeting;
@dynamic category;
@dynamic pattern;
@dynamic newPattern;
@dynamic voice;
@dynamic chairCharmStatus;
@dynamic singleLiveTpl;
@dynamic patternChairArray, patternChairArray_Count;
@dynamic isCloudDiscoRoomShake;
@dynamic isCloudDiscoChairShake;

typedef struct PB3BroadcastRoomSet__storage_ {
  uint32_t _has_storage_[1];
  int32_t category;
  PB3RoomPattern pattern;
  PB3NewRoomPattern newPattern;
  PB3RoomVoice voice;
  int32_t chairCharmStatus;
  PB3SingleLiveTplType singleLiveTpl;
  NSString *name;
  NSString *password;
  NSString *greeting;
  NSMutableArray *patternChairArray;
  int64_t roomId;
  int64_t playerId;
} PB3BroadcastRoomSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_Password,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_Greeting,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_Category,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3RoomPattern_EnumDescriptor,
        .number = PB3BroadcastRoomSet_FieldNumber_Pattern,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "newPattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3BroadcastRoomSet_FieldNumber_NewPattern,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, newPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voice",
        .dataTypeSpecific.enumDescFunc = PB3RoomVoice_EnumDescriptor,
        .number = PB3BroadcastRoomSet_FieldNumber_Voice,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, voice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chairCharmStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_ChairCharmStatus,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, chairCharmStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "singleLiveTpl",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveTplType_EnumDescriptor,
        .number = PB3BroadcastRoomSet_FieldNumber_SingleLiveTpl,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, singleLiveTpl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "patternChairArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomChairStatus),
        .number = PB3BroadcastRoomSet_FieldNumber_PatternChairArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomSet__storage_, patternChairArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isCloudDiscoRoomShake",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_IsCloudDiscoRoomShake,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isCloudDiscoChairShake",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomSet_FieldNumber_IsCloudDiscoChairShake,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomSet class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomSet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastRoomSet_Pattern_RawValue(PB3BroadcastRoomSet *message) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastRoomSet_Pattern_RawValue(PB3BroadcastRoomSet *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BroadcastRoomSet_NewPattern_RawValue(PB3BroadcastRoomSet *message) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_NewPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastRoomSet_NewPattern_RawValue(PB3BroadcastRoomSet *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_NewPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BroadcastRoomSet_Voice_RawValue(PB3BroadcastRoomSet *message) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_Voice];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastRoomSet_Voice_RawValue(PB3BroadcastRoomSet *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_Voice];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BroadcastRoomSet_SingleLiveTpl_RawValue(PB3BroadcastRoomSet *message) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_SingleLiveTpl];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastRoomSet_SingleLiveTpl_RawValue(PB3BroadcastRoomSet *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomSet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomSet_FieldNumber_SingleLiveTpl];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastChairLimit

@implementation PB3BroadcastChairLimit

@dynamic clanChairLimitStatus;

typedef struct PB3BroadcastChairLimit__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastChairLimit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clanChairLimitStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairLimit_FieldNumber_ClanChairLimitStatus,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairLimit class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairLimit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRedEnvelope

@implementation PB3BroadcastRedEnvelope

@dynamic isShowRedEnvelope;

typedef struct PB3BroadcastRedEnvelope__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastRedEnvelope__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isShowRedEnvelope",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRedEnvelope_FieldNumber_IsShowRedEnvelope,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRedEnvelope class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRedEnvelope__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetReceptionReq

@implementation PB3SetReceptionReq

@dynamic value;

typedef struct PB3SetReceptionReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
} PB3SetReceptionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetReceptionReq_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetReceptionReq__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetReceptionReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetReceptionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetReceptionRes

@implementation PB3SetReceptionRes

@dynamic receptionStatus;
@dynamic oldValue;
@dynamic newValue;

typedef struct PB3SetReceptionRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AuditStatus receptionStatus;
  NSString *oldValue;
  NSString *newValue;
} PB3SetReceptionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "receptionStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3SetReceptionRes_FieldNumber_ReceptionStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetReceptionRes__storage_, receptionStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "oldValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetReceptionRes_FieldNumber_OldValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetReceptionRes__storage_, oldValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetReceptionRes_FieldNumber_NewValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SetReceptionRes__storage_, newValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetReceptionRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetReceptionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetReceptionRes_ReceptionStatus_RawValue(PB3SetReceptionRes *message) {
  GPBDescriptor *descriptor = [PB3SetReceptionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetReceptionRes_FieldNumber_ReceptionStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetReceptionRes_ReceptionStatus_RawValue(PB3SetReceptionRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetReceptionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetReceptionRes_FieldNumber_ReceptionStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastReception

@implementation PB3BroadcastReception

@dynamic value;
@dynamic playerId;
@dynamic hasNobilityInfo, nobilityInfo;

typedef struct PB3BroadcastReception__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
  PB3RoomNobilityInfo *nobilityInfo;
  int64_t playerId;
} PB3BroadcastReception__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastReception_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastReception__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastReception_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastReception__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3BroadcastReception_FieldNumber_NobilityInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastReception__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastReception class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastReception__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastCloseRoom

@implementation PB3BroadcastCloseRoom

@dynamic roomId;

typedef struct PB3BroadcastCloseRoom__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3BroadcastCloseRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastCloseRoom_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastCloseRoom__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastCloseRoom class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastCloseRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetRoomAdminReq

@implementation PB3SetRoomAdminReq

@dynamic toPlayerId;
@dynamic adminType;

typedef struct PB3SetRoomAdminReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomAdminType adminType;
  int64_t toPlayerId;
} PB3SetRoomAdminReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomAdminReq_FieldNumber_ToPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetRoomAdminReq__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "adminType",
        .dataTypeSpecific.enumDescFunc = PB3RoomAdminType_EnumDescriptor,
        .number = PB3SetRoomAdminReq_FieldNumber_AdminType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetRoomAdminReq__storage_, adminType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRoomAdminReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetRoomAdminReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetRoomAdminReq_AdminType_RawValue(PB3SetRoomAdminReq *message) {
  GPBDescriptor *descriptor = [PB3SetRoomAdminReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomAdminReq_FieldNumber_AdminType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetRoomAdminReq_AdminType_RawValue(PB3SetRoomAdminReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetRoomAdminReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomAdminReq_FieldNumber_AdminType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SetRoomAdminRes

@implementation PB3SetRoomAdminRes

@dynamic playerId;
@dynamic adminType;

typedef struct PB3SetRoomAdminRes__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomAdminType adminType;
  int64_t playerId;
} PB3SetRoomAdminRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetRoomAdminRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetRoomAdminRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "adminType",
        .dataTypeSpecific.enumDescFunc = PB3RoomAdminType_EnumDescriptor,
        .number = PB3SetRoomAdminRes_FieldNumber_AdminType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetRoomAdminRes__storage_, adminType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRoomAdminRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetRoomAdminRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetRoomAdminRes_AdminType_RawValue(PB3SetRoomAdminRes *message) {
  GPBDescriptor *descriptor = [PB3SetRoomAdminRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomAdminRes_FieldNumber_AdminType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetRoomAdminRes_AdminType_RawValue(PB3SetRoomAdminRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetRoomAdminRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetRoomAdminRes_FieldNumber_AdminType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomPasswordReq

@implementation PB3RoomPasswordReq


typedef struct PB3RoomPasswordReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomPasswordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPasswordReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomPasswordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomPasswordRes

@implementation PB3RoomPasswordRes

@dynamic password;
@dynamic enable;

typedef struct PB3RoomPasswordRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *password;
} PB3RoomPasswordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPasswordRes_FieldNumber_Password,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomPasswordRes__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enable",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPasswordRes_FieldNumber_Enable,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPasswordRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomPasswordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastSetRoomAdmin

@implementation PB3BroadcastSetRoomAdmin

@dynamic roomId;
@dynamic managerId;
@dynamic managerName;
@dynamic playerId;
@dynamic playerName;
@dynamic adminType;

typedef struct PB3BroadcastSetRoomAdmin__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomAdminType adminType;
  NSString *managerName;
  NSString *playerName;
  int64_t roomId;
  int64_t managerId;
  int64_t playerId;
} PB3BroadcastSetRoomAdmin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastSetRoomAdmin_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastSetRoomAdmin__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "managerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastSetRoomAdmin_FieldNumber_ManagerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastSetRoomAdmin__storage_, managerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "managerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastSetRoomAdmin_FieldNumber_ManagerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastSetRoomAdmin__storage_, managerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastSetRoomAdmin_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastSetRoomAdmin__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastSetRoomAdmin_FieldNumber_PlayerName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastSetRoomAdmin__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adminType",
        .dataTypeSpecific.enumDescFunc = PB3RoomAdminType_EnumDescriptor,
        .number = PB3BroadcastSetRoomAdmin_FieldNumber_AdminType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastSetRoomAdmin__storage_, adminType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastSetRoomAdmin class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastSetRoomAdmin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastSetRoomAdmin_AdminType_RawValue(PB3BroadcastSetRoomAdmin *message) {
  GPBDescriptor *descriptor = [PB3BroadcastSetRoomAdmin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastSetRoomAdmin_FieldNumber_AdminType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastSetRoomAdmin_AdminType_RawValue(PB3BroadcastSetRoomAdmin *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastSetRoomAdmin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastSetRoomAdmin_FieldNumber_AdminType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ForbidSpeakReq

@implementation PB3ForbidSpeakReq

@dynamic toPlayerId;
@dynamic forbidSpeakTime;

typedef struct PB3ForbidSpeakReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t forbidSpeakTime;
  int64_t toPlayerId;
} PB3ForbidSpeakReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ForbidSpeakReq_FieldNumber_ToPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ForbidSpeakReq__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "forbidSpeakTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ForbidSpeakReq_FieldNumber_ForbidSpeakTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ForbidSpeakReq__storage_, forbidSpeakTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ForbidSpeakReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ForbidSpeakReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ForbidSpeakRes

@implementation PB3ForbidSpeakRes

@dynamic nobilityId;

typedef struct PB3ForbidSpeakRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nobilityId;
} PB3ForbidSpeakRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nobilityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ForbidSpeakRes_FieldNumber_NobilityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ForbidSpeakRes__storage_, nobilityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ForbidSpeakRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ForbidSpeakRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastForbidSpeak

@implementation PB3BroadcastForbidSpeak

@dynamic roomId;
@dynamic playerId;
@dynamic playerName;
@dynamic managerId;
@dynamic managerName;
@dynamic times;

typedef struct PB3BroadcastForbidSpeak__storage_ {
  uint32_t _has_storage_[1];
  uint32_t times;
  NSString *managerName;
  NSString *playerName;
  int64_t roomId;
  int64_t managerId;
  int64_t playerId;
} PB3BroadcastForbidSpeak__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastForbidSpeak_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastForbidSpeak__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "managerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastForbidSpeak_FieldNumber_ManagerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastForbidSpeak__storage_, managerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "managerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastForbidSpeak_FieldNumber_ManagerName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastForbidSpeak__storage_, managerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastForbidSpeak_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastForbidSpeak__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastForbidSpeak_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastForbidSpeak__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "times",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastForbidSpeak_FieldNumber_Times,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastForbidSpeak__storage_, times),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastForbidSpeak class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastForbidSpeak__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3KickoutRoomReq

@implementation PB3KickoutRoomReq

@dynamic toPlayerId;
@dynamic cfgId;
@dynamic expiredTime;
@dynamic unitTime;

typedef struct PB3KickoutRoomReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t cfgId;
  PB3XcmKickOutRoomType unitTime;
  int64_t toPlayerId;
  int64_t expiredTime;
} PB3KickoutRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3KickoutRoomReq_FieldNumber_ToPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3KickoutRoomReq__storage_, toPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "cfgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3KickoutRoomReq_FieldNumber_CfgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3KickoutRoomReq__storage_, cfgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expiredTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3KickoutRoomReq_FieldNumber_ExpiredTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3KickoutRoomReq__storage_, expiredTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unitTime",
        .dataTypeSpecific.enumDescFunc = PB3XcmKickOutRoomType_EnumDescriptor,
        .number = PB3KickoutRoomReq_FieldNumber_UnitTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3KickoutRoomReq__storage_, unitTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3KickoutRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3KickoutRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3KickoutRoomReq_UnitTime_RawValue(PB3KickoutRoomReq *message) {
  GPBDescriptor *descriptor = [PB3KickoutRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3KickoutRoomReq_FieldNumber_UnitTime];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3KickoutRoomReq_UnitTime_RawValue(PB3KickoutRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3KickoutRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3KickoutRoomReq_FieldNumber_UnitTime];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3KickoutRoomRes

@implementation PB3KickoutRoomRes

@dynamic nobilityId;

typedef struct PB3KickoutRoomRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nobilityId;
} PB3KickoutRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nobilityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3KickoutRoomRes_FieldNumber_NobilityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3KickoutRoomRes__storage_, nobilityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3KickoutRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3KickoutRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetKickOutRoomCfgReq

@implementation PB3GetKickOutRoomCfgReq


typedef struct PB3GetKickOutRoomCfgReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetKickOutRoomCfgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetKickOutRoomCfgReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetKickOutRoomCfgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetKickOutRoomCfgRes

@implementation PB3GetKickOutRoomCfgRes

@dynamic listArray, listArray_Count;

typedef struct PB3GetKickOutRoomCfgRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GetKickOutRoomCfgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3XcmKickOutRoomCfg),
        .number = PB3GetKickOutRoomCfgRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetKickOutRoomCfgRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetKickOutRoomCfgRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetKickOutRoomCfgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastKickout

@implementation PB3BroadcastKickout

@dynamic roomId;
@dynamic playerId;
@dynamic playerName;
@dynamic managerId;
@dynamic managerName;

typedef struct PB3BroadcastKickout__storage_ {
  uint32_t _has_storage_[1];
  NSString *managerName;
  NSString *playerName;
  int64_t roomId;
  int64_t managerId;
  int64_t playerId;
} PB3BroadcastKickout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastKickout_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastKickout__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "managerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastKickout_FieldNumber_ManagerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastKickout__storage_, managerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "managerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastKickout_FieldNumber_ManagerName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastKickout__storage_, managerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastKickout_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastKickout__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastKickout_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastKickout__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastKickout class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastKickout__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomPlayerListReq

@implementation PB3RoomPlayerListReq

@dynamic index;

typedef struct PB3RoomPlayerListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3RoomPlayerListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerListReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomPlayerListReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPlayerListReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomPlayerListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetRoomRankReq

@implementation PB3GetRoomRankReq

@dynamic type;
@dynamic rankFlag;

typedef struct PB3GetRoomRankReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t rankFlag;
} PB3GetRoomRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomRankReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetRoomRankReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "rankFlag",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomRankReq_FieldNumber_RankFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetRoomRankReq__storage_, rankFlag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetRoomRankReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetRoomRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetRoomRankRes

@implementation PB3GetRoomRankRes

@dynamic roomId;
@dynamic type;
@dynamic rankFlag;
@dynamic roomRankListArray, roomRankListArray_Count;
@dynamic totalValue;
@dynamic hasMyRank, myRank;
@dynamic roomRankListNotFlowerArray, roomRankListNotFlowerArray_Count;

typedef struct PB3GetRoomRankRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t rankFlag;
  NSMutableArray *roomRankListArray;
  PB3Rank1 *myRank;
  NSMutableArray *roomRankListNotFlowerArray;
  int64_t roomId;
  uint64_t totalValue;
} PB3GetRoomRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomRankRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetRoomRankRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomRankRes_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetRoomRankRes__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "rankFlag",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomRankRes_FieldNumber_RankFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetRoomRankRes__storage_, rankFlag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "roomRankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Rank),
        .number = PB3GetRoomRankRes_FieldNumber_RoomRankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetRoomRankRes__storage_, roomRankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomRankRes_FieldNumber_TotalValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetRoomRankRes__storage_, totalValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Rank1),
        .number = PB3GetRoomRankRes_FieldNumber_MyRank,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetRoomRankRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomRankListNotFlowerArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Rank),
        .number = PB3GetRoomRankRes_FieldNumber_RoomRankListNotFlowerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetRoomRankRes__storage_, roomRankListNotFlowerArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetRoomRankRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetRoomRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Greeting

@implementation PB3Greeting

@dynamic index;
@dynamic content;

typedef struct PB3Greeting__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  int64_t index;
} PB3Greeting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3Greeting_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Greeting__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3Greeting_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Greeting__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Greeting class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Greeting__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PCRoomGreetingOperationReq

@implementation PB3PCRoomGreetingOperationReq

@dynamic type;
@dynamic hasItem, item;

typedef struct PB3PCRoomGreetingOperationReq__storage_ {
  uint32_t _has_storage_[1];
  PB3PCRoomGreetingOperationType type;
  PB3Greeting *item;
} PB3PCRoomGreetingOperationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3PCRoomGreetingOperationType_EnumDescriptor,
        .number = PB3PCRoomGreetingOperationReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PCRoomGreetingOperationReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "item",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Greeting),
        .number = PB3PCRoomGreetingOperationReq_FieldNumber_Item,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PCRoomGreetingOperationReq__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PCRoomGreetingOperationReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PCRoomGreetingOperationReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PCRoomGreetingOperationReq_Type_RawValue(PB3PCRoomGreetingOperationReq *message) {
  GPBDescriptor *descriptor = [PB3PCRoomGreetingOperationReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PCRoomGreetingOperationReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PCRoomGreetingOperationReq_Type_RawValue(PB3PCRoomGreetingOperationReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PCRoomGreetingOperationReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PCRoomGreetingOperationReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PCRoomGreetingOperationRes

@implementation PB3PCRoomGreetingOperationRes


typedef struct PB3PCRoomGreetingOperationRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PCRoomGreetingOperationRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PCRoomGreetingOperationRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PCRoomGreetingOperationRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPCRoomGreetingsReq

@implementation PB3GetPCRoomGreetingsReq


typedef struct PB3GetPCRoomGreetingsReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetPCRoomGreetingsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPCRoomGreetingsReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetPCRoomGreetingsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPCRoomGreetingsRes

@implementation PB3GetPCRoomGreetingsRes

@dynamic itemsArray, itemsArray_Count;
@dynamic displayTime;
@dynamic isDisplay;

typedef struct PB3GetPCRoomGreetingsRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t displayTime;
  NSMutableArray *itemsArray;
} PB3GetPCRoomGreetingsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Greeting),
        .number = PB3GetPCRoomGreetingsRes_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetPCRoomGreetingsRes__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "displayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPCRoomGreetingsRes_FieldNumber_DisplayTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPCRoomGreetingsRes__storage_, displayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isDisplay",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPCRoomGreetingsRes_FieldNumber_IsDisplay,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPCRoomGreetingsRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPCRoomGreetingsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Chair

@implementation PB3Chair

@dynamic id_p;
@dynamic status;
@dynamic hasPlayer, player;
@dynamic operator_p;
@dynamic goldLevel;
@dynamic chairCharm;
@dynamic mateChairCharm;
@dynamic hasTopicEffect, topicEffect;

typedef struct PB3Chair__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3ChairStatus status;
  int32_t goldLevel;
  int32_t chairCharm;
  int32_t mateChairCharm;
  PB3ScenePlayer *player;
  PB3InteractTopicEffect *topicEffect;
  int64_t operator_p;
} PB3Chair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chair_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ChairStatus_EnumDescriptor,
        .number = PB3Chair_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3Chair_FieldNumber_Player,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "operator_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chair_FieldNumber_Operator_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, operator_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "goldLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chair_FieldNumber_GoldLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, goldLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chairCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chair_FieldNumber_ChairCharm,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, chairCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mateChairCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chair_FieldNumber_MateChairCharm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, mateChairCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "topicEffect",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InteractTopicEffect),
        .number = PB3Chair_FieldNumber_TopicEffect,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Chair__storage_, topicEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Chair class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Chair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Chair_Status_RawValue(PB3Chair *message) {
  GPBDescriptor *descriptor = [PB3Chair descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Chair_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Chair_Status_RawValue(PB3Chair *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Chair descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Chair_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChairStatusReq

@implementation PB3ChairStatusReq

@dynamic chairId;
@dynamic status;

typedef struct PB3ChairStatusReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  PB3ChairStatus status;
} PB3ChairStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairStatusReq_FieldNumber_ChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairStatusReq__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ChairStatus_EnumDescriptor,
        .number = PB3ChairStatusReq_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChairStatusReq__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairStatusReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChairStatusReq_Status_RawValue(PB3ChairStatusReq *message) {
  GPBDescriptor *descriptor = [PB3ChairStatusReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairStatusReq_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChairStatusReq_Status_RawValue(PB3ChairStatusReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChairStatusReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairStatusReq_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChairStatusRes

@implementation PB3ChairStatusRes


typedef struct PB3ChairStatusRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairStatusRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChairStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairSpeakReq

@implementation PB3ChairSpeakReq

@dynamic targetId;
@dynamic chairBanSpeak;

typedef struct PB3ChairSpeakReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t targetId;
} PB3ChairSpeakReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairSpeakReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairSpeakReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairBanSpeak",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairSpeakReq_FieldNumber_ChairBanSpeak,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairSpeakReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairSpeakReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairSpeakRes

@implementation PB3ChairSpeakRes


typedef struct PB3ChairSpeakRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairSpeakRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairSpeakRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChairSpeakRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairSpeak

@implementation PB3BroadcastChairSpeak

@dynamic targetId;
@dynamic chairBanSpeak;
@dynamic targetName;
@dynamic operatorId;
@dynamic operatorName;

typedef struct PB3BroadcastChairSpeak__storage_ {
  uint32_t _has_storage_[1];
  NSString *targetName;
  NSString *operatorName;
  int64_t targetId;
  int64_t operatorId;
} PB3BroadcastChairSpeak__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeak_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSpeak__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairBanSpeak",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeak_FieldNumber_ChairBanSpeak,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "targetName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeak_FieldNumber_TargetName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSpeak__storage_, targetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeak_FieldNumber_OperatorId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSpeak__storage_, operatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "operatorName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeak_FieldNumber_OperatorName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSpeak__storage_, operatorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairSpeak class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairSpeak__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairSpeakOnOffReq

@implementation PB3ChairSpeakOnOffReq

@dynamic chairSpeakOnoff;

typedef struct PB3ChairSpeakOnOffReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairSpeakOnOffReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairSpeakOnoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairSpeakOnOffReq_FieldNumber_ChairSpeakOnoff,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairSpeakOnOffReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairSpeakOnOffReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairSpeakOnOffRes

@implementation PB3ChairSpeakOnOffRes


typedef struct PB3ChairSpeakOnOffRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairSpeakOnOffRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairSpeakOnOffRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChairSpeakOnOffRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairSpeakOnOff

@implementation PB3BroadcastChairSpeakOnOff

@dynamic targetId;
@dynamic chairSpeakOnoff;
@dynamic deviceId;
@dynamic deviceType;

typedef struct PB3BroadcastChairSpeakOnOff__storage_ {
  uint32_t _has_storage_[1];
  PB3DeviceType deviceType;
  NSString *deviceId;
  int64_t targetId;
} PB3BroadcastChairSpeakOnOff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeakOnOff_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSpeakOnOff__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairSpeakOnoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeakOnOff_FieldNumber_ChairSpeakOnoff,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSpeakOnOff_FieldNumber_DeviceId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSpeakOnOff__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3BroadcastChairSpeakOnOff_FieldNumber_DeviceType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSpeakOnOff__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairSpeakOnOff class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairSpeakOnOff__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastChairSpeakOnOff_DeviceType_RawValue(PB3BroadcastChairSpeakOnOff *message) {
  GPBDescriptor *descriptor = [PB3BroadcastChairSpeakOnOff descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChairSpeakOnOff_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastChairSpeakOnOff_DeviceType_RawValue(PB3BroadcastChairSpeakOnOff *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastChairSpeakOnOff descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChairSpeakOnOff_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AccompanyOnOffReq

@implementation PB3AccompanyOnOffReq

@dynamic accompanyOnoff;

typedef struct PB3AccompanyOnOffReq__storage_ {
  uint32_t _has_storage_[1];
} PB3AccompanyOnOffReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accompanyOnoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccompanyOnOffReq_FieldNumber_AccompanyOnoff,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AccompanyOnOffReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AccompanyOnOffReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AccompanyOnOffRes

@implementation PB3AccompanyOnOffRes


typedef struct PB3AccompanyOnOffRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AccompanyOnOffRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AccompanyOnOffRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AccompanyOnOffRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastAccompanyOnOff

@implementation PB3BroadcastAccompanyOnOff

@dynamic targetId;
@dynamic accompanyOnoff;

typedef struct PB3BroadcastAccompanyOnOff__storage_ {
  uint32_t _has_storage_[1];
  int64_t targetId;
} PB3BroadcastAccompanyOnOff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastAccompanyOnOff_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastAccompanyOnOff__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "accompanyOnoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastAccompanyOnOff_FieldNumber_AccompanyOnoff,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastAccompanyOnOff class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastAccompanyOnOff__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairStatus

@implementation PB3BroadcastChairStatus

@dynamic chairId;
@dynamic status;

typedef struct PB3BroadcastChairStatus__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  PB3ChairStatus status;
} PB3BroadcastChairStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairStatus_FieldNumber_ChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairStatus__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ChairStatus_EnumDescriptor,
        .number = PB3BroadcastChairStatus_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChairStatus__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairStatus class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastChairStatus_Status_RawValue(PB3BroadcastChairStatus *message) {
  GPBDescriptor *descriptor = [PB3BroadcastChairStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChairStatus_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastChairStatus_Status_RawValue(PB3BroadcastChairStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastChairStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChairStatus_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastChair

@implementation PB3BroadcastChair

@dynamic chairId;
@dynamic hasChair, chair;
@dynamic underChairNum;

typedef struct PB3BroadcastChair__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  int32_t underChairNum;
  PB3Chair *chair;
} PB3BroadcastChair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChair_FieldNumber_ChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChair__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "chair",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Chair),
        .number = PB3BroadcastChair_FieldNumber_Chair,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChair__storage_, chair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "underChairNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChair_FieldNumber_UnderChairNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastChair__storage_, underChairNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChair class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairSitReq

@implementation PB3ChairSitReq

@dynamic targetId;
@dynamic chairId;
@dynamic sitType;

typedef struct PB3ChairSitReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  PB3SitChairType sitType;
  int64_t targetId;
} PB3ChairSitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairSitReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairSitReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairSitReq_FieldNumber_ChairId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChairSitReq__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "sitType",
        .dataTypeSpecific.enumDescFunc = PB3SitChairType_EnumDescriptor,
        .number = PB3ChairSitReq_FieldNumber_SitType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChairSitReq__storage_, sitType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairSitReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairSitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChairSitReq_SitType_RawValue(PB3ChairSitReq *message) {
  GPBDescriptor *descriptor = [PB3ChairSitReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairSitReq_FieldNumber_SitType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChairSitReq_SitType_RawValue(PB3ChairSitReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChairSitReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairSitReq_FieldNumber_SitType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChairSitRes

@implementation PB3ChairSitRes

@dynamic hasAgodaKey, agodaKey;

typedef struct PB3ChairSitRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AgodaKey *agodaKey;
} PB3ChairSitRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agodaKey",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AgodaKey),
        .number = PB3ChairSitRes_FieldNumber_AgodaKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairSitRes__storage_, agodaKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairSitRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairSitRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairSit

@implementation PB3BroadcastChairSit

@dynamic operatorId;
@dynamic targetId;
@dynamic chairId;

typedef struct PB3BroadcastChairSit__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  int64_t operatorId;
  int64_t targetId;
} PB3BroadcastChairSit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSit_FieldNumber_OperatorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSit__storage_, operatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSit_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSit__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairSit_FieldNumber_ChairId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastChairSit__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairSit class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairSit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairMoveReq

@implementation PB3ChairMoveReq

@dynamic fromChairId;
@dynamic toChairId;

typedef struct PB3ChairMoveReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t fromChairId;
  int32_t toChairId;
} PB3ChairMoveReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromChairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairMoveReq_FieldNumber_FromChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairMoveReq__storage_, fromChairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "toChairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairMoveReq_FieldNumber_ToChairId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChairMoveReq__storage_, toChairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairMoveReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairMoveReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairMoveRes

@implementation PB3ChairMoveRes


typedef struct PB3ChairMoveRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairMoveRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairMoveRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChairMoveRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairMove

@implementation PB3BroadcastChairMove

@dynamic playerId;
@dynamic fromChairId;
@dynamic toChairId;
@dynamic chairCharm;
@dynamic mateChairCharm;

typedef struct PB3BroadcastChairMove__storage_ {
  uint32_t _has_storage_[1];
  int32_t fromChairId;
  int32_t toChairId;
  int32_t chairCharm;
  int32_t mateChairCharm;
  int64_t playerId;
} PB3BroadcastChairMove__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairMove_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairMove__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fromChairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairMove_FieldNumber_FromChairId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChairMove__storage_, fromChairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "toChairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairMove_FieldNumber_ToChairId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastChairMove__storage_, toChairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "chairCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairMove_FieldNumber_ChairCharm,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastChairMove__storage_, chairCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mateChairCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairMove_FieldNumber_MateChairCharm,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastChairMove__storage_, mateChairCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairMove class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairMove__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairLeaveReq

@implementation PB3ChairLeaveReq

@dynamic targetId;
@dynamic chairId;
@dynamic optType;

typedef struct PB3ChairLeaveReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  PB3ClearChairType optType;
  int64_t targetId;
} PB3ChairLeaveReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairLeaveReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairLeaveReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairLeaveReq_FieldNumber_ChairId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChairLeaveReq__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3ClearChairType_EnumDescriptor,
        .number = PB3ChairLeaveReq_FieldNumber_OptType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChairLeaveReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairLeaveReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairLeaveReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChairLeaveReq_OptType_RawValue(PB3ChairLeaveReq *message) {
  GPBDescriptor *descriptor = [PB3ChairLeaveReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairLeaveReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChairLeaveReq_OptType_RawValue(PB3ChairLeaveReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChairLeaveReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairLeaveReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChairLeaveRes

@implementation PB3ChairLeaveRes

@dynamic hasAgodaKey, agodaKey;

typedef struct PB3ChairLeaveRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AgodaKey *agodaKey;
} PB3ChairLeaveRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agodaKey",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AgodaKey),
        .number = PB3ChairLeaveRes_FieldNumber_AgodaKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairLeaveRes__storage_, agodaKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairLeaveRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairLeaveRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairLeave

@implementation PB3BroadcastChairLeave

@dynamic operatorId;
@dynamic targetId;
@dynamic chairId;

typedef struct PB3BroadcastChairLeave__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  int64_t operatorId;
  int64_t targetId;
} PB3BroadcastChairLeave__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairLeave_FieldNumber_OperatorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairLeave__storage_, operatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairLeave_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChairLeave__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairLeave_FieldNumber_ChairId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastChairLeave__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairLeave class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairLeave__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairAdminOpt

@implementation PB3BroadcastChairAdminOpt

@dynamic operatorId;
@dynamic operatorName;
@dynamic targetId;
@dynamic targetName;
@dynamic optType;

typedef struct PB3BroadcastChairAdminOpt__storage_ {
  uint32_t _has_storage_[1];
  int32_t optType;
  NSString *operatorName;
  NSString *targetName;
  int64_t operatorId;
  int64_t targetId;
} PB3BroadcastChairAdminOpt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairAdminOpt_FieldNumber_OperatorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairAdminOpt__storage_, operatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "operatorName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairAdminOpt_FieldNumber_OperatorName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChairAdminOpt__storage_, operatorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairAdminOpt_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastChairAdminOpt__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "targetName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairAdminOpt_FieldNumber_TargetName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastChairAdminOpt__storage_, targetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "optType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairAdminOpt_FieldNumber_OptType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastChairAdminOpt__storage_, optType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairAdminOpt class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairAdminOpt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairQueueOptReq

@implementation PB3ChairQueueOptReq

@dynamic type;
@dynamic targetId;
@dynamic sitType;

typedef struct PB3ChairQueueOptReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  PB3SitChairType sitType;
  int64_t targetId;
} PB3ChairQueueOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairQueueOptReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairQueueOptReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairQueueOptReq_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChairQueueOptReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sitType",
        .dataTypeSpecific.enumDescFunc = PB3SitChairType_EnumDescriptor,
        .number = PB3ChairQueueOptReq_FieldNumber_SitType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChairQueueOptReq__storage_, sitType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairQueueOptReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairQueueOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChairQueueOptReq_SitType_RawValue(PB3ChairQueueOptReq *message) {
  GPBDescriptor *descriptor = [PB3ChairQueueOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairQueueOptReq_FieldNumber_SitType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChairQueueOptReq_SitType_RawValue(PB3ChairQueueOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChairQueueOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChairQueueOptReq_FieldNumber_SitType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChairQueueOptRes

@implementation PB3ChairQueueOptRes


typedef struct PB3ChairQueueOptRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairQueueOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairQueueOptRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChairQueueOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairQueueOpt

@implementation PB3BroadcastChairQueueOpt

@dynamic type;
@dynamic queueArray, queueArray_Count;

typedef struct PB3BroadcastChairQueueOpt__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSMutableArray *queueArray;
} PB3BroadcastChairQueueOpt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairQueueOpt_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairQueueOpt__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "queueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3BroadcastChairQueueOpt_FieldNumber_QueueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastChairQueueOpt__storage_, queueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairQueueOpt class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairQueueOpt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairQueueJumpReq

@implementation PB3ChairQueueJumpReq

@dynamic targetId;

typedef struct PB3ChairQueueJumpReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t targetId;
} PB3ChairQueueJumpReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairQueueJumpReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChairQueueJumpReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairQueueJumpReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairQueueJumpReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairQueueJumpRes

@implementation PB3ChairQueueJumpRes


typedef struct PB3ChairQueueJumpRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairQueueJumpRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairQueueJumpRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChairQueueJumpRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairQueueReq

@implementation PB3ChairQueueReq


typedef struct PB3ChairQueueReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ChairQueueReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairQueueReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChairQueueReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChairQueueRes

@implementation PB3ChairQueueRes

@dynamic queueArray, queueArray_Count;
@dynamic banQueueStatus;

typedef struct PB3ChairQueueRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *queueArray;
} PB3ChairQueueRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "banQueueStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChairQueueRes_FieldNumber_BanQueueStatus,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "queueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3ChairQueueRes_FieldNumber_QueueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChairQueueRes__storage_, queueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChairQueueRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChairQueueRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OnlineFlower

@implementation PB3OnlineFlower

@dynamic id_p;
@dynamic giveTime;
@dynamic currCount;
@dynamic nextTime;
@dynamic periodTime;
@dynamic maxCount;

typedef struct PB3OnlineFlower__storage_ {
  uint32_t _has_storage_[1];
  int32_t giveTime;
  int32_t currCount;
  int32_t nextTime;
  int32_t periodTime;
  int32_t maxCount;
  int64_t id_p;
} PB3OnlineFlower__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnlineFlower_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OnlineFlower__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "giveTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnlineFlower_FieldNumber_GiveTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OnlineFlower__storage_, giveTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnlineFlower_FieldNumber_CurrCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OnlineFlower__storage_, currCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnlineFlower_FieldNumber_NextTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OnlineFlower__storage_, nextTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnlineFlower_FieldNumber_PeriodTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OnlineFlower__storage_, periodTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnlineFlower_FieldNumber_MaxCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3OnlineFlower__storage_, maxCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OnlineFlower class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OnlineFlower__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\010\000\003\t\000\004\010\000\005\n\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FlowerInfoReq

@implementation PB3FlowerInfoReq


typedef struct PB3FlowerInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FlowerInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FlowerInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FlowerInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FlowerInfoRes

@implementation PB3FlowerInfoRes

@dynamic hasInfo, info;

typedef struct PB3FlowerInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3OnlineFlower *info;
} PB3FlowerInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OnlineFlower),
        .number = PB3FlowerInfoRes_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FlowerInfoRes__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FlowerInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FlowerInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastOnlineFlower

@implementation PB3BroadcastOnlineFlower

@dynamic hasInfo, info;

typedef struct PB3BroadcastOnlineFlower__storage_ {
  uint32_t _has_storage_[1];
  PB3OnlineFlower *info;
} PB3BroadcastOnlineFlower__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OnlineFlower),
        .number = PB3BroadcastOnlineFlower_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastOnlineFlower__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastOnlineFlower class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastOnlineFlower__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PresentFlowerReq

@implementation PB3PresentFlowerReq

@dynamic targetIdsArray, targetIdsArray_Count;

typedef struct PB3PresentFlowerReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *targetIdsArray;
} PB3PresentFlowerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresentFlowerReq_FieldNumber_TargetIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PresentFlowerReq__storage_, targetIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PresentFlowerReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PresentFlowerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PresentFlowerRes

@implementation PB3PresentFlowerRes


typedef struct PB3PresentFlowerRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PresentFlowerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PresentFlowerRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PresentFlowerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastPresentFlower

@implementation PB3BroadcastPresentFlower

@dynamic id_p;
@dynamic name;
@dynamic icon;
@dynamic wealthLevel;
@dynamic receiveName;
@dynamic receiveId;
@dynamic hasSendNobility, sendNobility;
@dynamic hasReceiveNobility, receiveNobility;

typedef struct PB3BroadcastPresentFlower__storage_ {
  uint32_t _has_storage_[1];
  uint32_t wealthLevel;
  NSString *name;
  NSString *icon;
  NSString *receiveName;
  PB3RoomNobilityInfo *sendNobility;
  PB3RoomNobilityInfo *receiveNobility;
  int64_t id_p;
  int64_t receiveId;
} PB3BroadcastPresentFlower__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresentFlower_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresentFlower_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresentFlower_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresentFlower_FieldNumber_WealthLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "receiveName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresentFlower_FieldNumber_ReceiveName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, receiveName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPresentFlower_FieldNumber_ReceiveId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, receiveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "sendNobility",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3BroadcastPresentFlower_FieldNumber_SendNobility,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, sendNobility),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiveNobility",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3BroadcastPresentFlower_FieldNumber_ReceiveNobility,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastPresentFlower__storage_, receiveNobility),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastPresentFlower class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastPresentFlower__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChatReq

@implementation PB3ChatReq

@dynamic content;
@dynamic options;
@dynamic toId;
@dynamic isPrivate;
@dynamic channel;
@dynamic fastSpeakId;

typedef struct PB3ChatReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelType channel;
  NSString *content;
  NSData *options;
  int64_t toId;
  int64_t fastSpeakId;
} PB3ChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatReq_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "options",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatReq_FieldNumber_Options,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatReq__storage_, options),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatReq_FieldNumber_ToId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatReq__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isPrivate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatReq_FieldNumber_IsPrivate,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3ChatReq_FieldNumber_Channel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChatReq__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fastSpeakId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatReq_FieldNumber_FastSpeakId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ChatReq__storage_, fastSpeakId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChatReq_Channel_RawValue(PB3ChatReq *message) {
  GPBDescriptor *descriptor = [PB3ChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatReq_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatReq_Channel_RawValue(PB3ChatReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatReq_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChatRes

@implementation PB3ChatRes


typedef struct PB3ChatRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChat

@implementation PB3BroadcastChat

@dynamic hasChat, chat;
@dynamic atTime;
@dynamic playerId;
@dynamic name;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic flags;
@dynamic flags2;
@dynamic isCharge;
@dynamic effectArray, effectArray_Count;
@dynamic isNewUser;
@dynamic id2;
@dynamic caijiId;
@dynamic hasNobilityInfo, nobilityInfo;
@dynamic chatShow;
@dynamic deviceType;
@dynamic isExposure;
@dynamic hasIntimateFansInfo, intimateFansInfo;
@dynamic nickname;
@dynamic hasChatEffect, chatEffect;
@dynamic fishWealthLevel;
@dynamic fishCharmLevel;

typedef struct PB3BroadcastChat__storage_ {
  uint32_t _has_storage_[1];
  int32_t atTime;
  int32_t wealthLevel;
  int32_t charmLevel;
  PB3ChatShowSiteType chatShow;
  PB3DeviceType deviceType;
  int32_t fishWealthLevel;
  int32_t fishCharmLevel;
  PB3ChatReq *chat;
  NSString *name;
  NSMutableArray *effectArray;
  PB3ChatNobilityInfo *nobilityInfo;
  PB3IntimateFansInfo *intimateFansInfo;
  NSString *nickname;
  PB3ChatEffect *chatEffect;
  int64_t playerId;
  int64_t flags;
  int64_t flags2;
  int64_t id2;
  int64_t caijiId;
} PB3BroadcastChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chat",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatReq),
        .number = PB3BroadcastChat_FieldNumber_Chat,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, chat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "atTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_AtTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, atTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_WealthLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_CharmLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_Flags,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "flags2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_Flags2,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, flags2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "isCharge",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_IsCharge,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "effectArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Effect),
        .number = PB3BroadcastChat_FieldNumber_EffectArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, effectArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isNewUser",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_IsNewUser,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_Id2,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "caijiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_CaijiId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, caijiId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatNobilityInfo),
        .number = PB3BroadcastChat_FieldNumber_NobilityInfo,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatShow",
        .dataTypeSpecific.enumDescFunc = PB3ChatShowSiteType_EnumDescriptor,
        .number = PB3BroadcastChat_FieldNumber_ChatShow,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, chatShow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3BroadcastChat_FieldNumber_DeviceType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isExposure",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_IsExposure,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "intimateFansInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansInfo),
        .number = PB3BroadcastChat_FieldNumber_IntimateFansInfo,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, intimateFansInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_Nickname,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatEffect",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatEffect),
        .number = PB3BroadcastChat_FieldNumber_ChatEffect,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, chatEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fishWealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_FishWealthLevel,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, fishWealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fishCharmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChat_FieldNumber_FishCharmLevel,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3BroadcastChat__storage_, fishCharmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChat class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastChat_ChatShow_RawValue(PB3BroadcastChat *message) {
  GPBDescriptor *descriptor = [PB3BroadcastChat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChat_FieldNumber_ChatShow];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastChat_ChatShow_RawValue(PB3BroadcastChat *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastChat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChat_FieldNumber_ChatShow];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BroadcastChat_DeviceType_RawValue(PB3BroadcastChat *message) {
  GPBDescriptor *descriptor = [PB3BroadcastChat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChat_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastChat_DeviceType_RawValue(PB3BroadcastChat *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastChat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastChat_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChatNobilityInfo

@implementation PB3ChatNobilityInfo

@dynamic nobilityId;
@dynamic nobilityPrefix;
@dynamic nobilityColor;
@dynamic hasMaskInfo, maskInfo;
@dynamic chairId;

typedef struct PB3ChatNobilityInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t nobilityId;
  int32_t chairId;
  NSString *nobilityPrefix;
  NSString *nobilityColor;
  PB3MaskInfo *maskInfo;
} PB3ChatNobilityInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nobilityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatNobilityInfo_FieldNumber_NobilityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatNobilityInfo__storage_, nobilityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nobilityPrefix",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatNobilityInfo_FieldNumber_NobilityPrefix,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatNobilityInfo__storage_, nobilityPrefix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nobilityColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatNobilityInfo_FieldNumber_NobilityColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatNobilityInfo__storage_, nobilityColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskInfo),
        .number = PB3ChatNobilityInfo_FieldNumber_MaskInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChatNobilityInfo__storage_, maskInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatNobilityInfo_FieldNumber_ChairId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChatNobilityInfo__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatNobilityInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatNobilityInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayDiceReq

@implementation PB3PlayDiceReq

@dynamic emojiId;

typedef struct PB3PlayDiceReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t emojiId;
} PB3PlayDiceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "emojiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayDiceReq_FieldNumber_EmojiId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayDiceReq__storage_, emojiId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayDiceReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayDiceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayDiceRes

@implementation PB3PlayDiceRes


typedef struct PB3PlayDiceRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PlayDiceRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayDiceRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PlayDiceRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastPlayDice

@implementation PB3BroadcastPlayDice

@dynamic playerId;
@dynamic point;
@dynamic hasMaskInfo, maskInfo;
@dynamic chairId;
@dynamic hasChats, chats;
@dynamic emojiId;

typedef struct PB3BroadcastPlayDice__storage_ {
  uint32_t _has_storage_[1];
  int32_t point;
  int32_t chairId;
  PB3MaskInfo *maskInfo;
  PB3BroadcastChat *chats;
  int64_t playerId;
  int64_t emojiId;
} PB3BroadcastPlayDice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayDice_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayDice__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayDice_FieldNumber_Point,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayDice__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MaskInfo),
        .number = PB3BroadcastPlayDice_FieldNumber_MaskInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayDice__storage_, maskInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayDice_FieldNumber_ChairId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayDice__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chats",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastChat),
        .number = PB3BroadcastPlayDice_FieldNumber_Chats,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayDice__storage_, chats),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "emojiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPlayDice_FieldNumber_EmojiId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastPlayDice__storage_, emojiId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastPlayDice class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastPlayDice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserSpeakReq

@implementation PB3UserSpeakReq

@dynamic content;
@dynamic tiaotiao;

typedef struct PB3UserSpeakReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t tiaotiao;
  NSString *content;
} PB3UserSpeakReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSpeakReq_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserSpeakReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tiaotiao",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSpeakReq_FieldNumber_Tiaotiao,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserSpeakReq__storage_, tiaotiao),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserSpeakReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserSpeakReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserSpeakRes

@implementation PB3UserSpeakRes

@dynamic nextTime;

typedef struct PB3UserSpeakRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextTime;
} PB3UserSpeakRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nextTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSpeakRes_FieldNumber_NextTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserSpeakRes__storage_, nextTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserSpeakRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserSpeakRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMakeFriend

@implementation PB3BroadcastMakeFriend

@dynamic playerId;
@dynamic icon;
@dynamic sex;
@dynamic wealthLevel;
@dynamic name;
@dynamic broadcastContent;
@dynamic id2;
@dynamic roomId;
@dynamic charmLevel;
@dynamic pos;
@dynamic time;
@dynamic infoType;
@dynamic hasGift, gift;
@dynamic clicks;
@dynamic id_p;
@dynamic roomOnlineNum;
@dynamic leftIconBgColor;
@dynamic leftText;
@dynamic leftTextColor;
@dynamic pattern;
@dynamic roomType;
@dynamic extends, extends_Count;
@dynamic labelsArray, labelsArray_Count;
@dynamic fishWealthLevel;
@dynamic fishCharmLevel;

typedef struct PB3BroadcastMakeFriend__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t wealthLevel;
  int32_t charmLevel;
  int32_t pos;
  int32_t infoType;
  int32_t clicks;
  PB3NewRoomPattern pattern;
  int32_t roomType;
  int32_t fishWealthLevel;
  int32_t fishCharmLevel;
  NSString *icon;
  NSString *name;
  NSString *broadcastContent;
  PB3GiveGift *gift;
  NSString *id_p;
  NSString *leftIconBgColor;
  NSString *leftText;
  NSString *leftTextColor;
  GPBInt32ObjectDictionary *extends;
  NSMutableArray *labelsArray;
  int64_t playerId;
  int64_t id2;
  int64_t roomId;
  int64_t time;
  int64_t roomOnlineNum;
} PB3BroadcastMakeFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Icon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3BroadcastMakeFriend_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_WealthLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "broadcastContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_BroadcastContent,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, broadcastContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Id2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_RoomId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_CharmLevel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pos",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Pos,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, pos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Time,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "infoType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_InfoType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, infoType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "gift",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiveGift),
        .number = PB3BroadcastMakeFriend_FieldNumber_Gift,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, gift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clicks",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Clicks,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, clicks),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Id_p,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomOnlineNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_RoomOnlineNum,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, roomOnlineNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "leftIconBgColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_LeftIconBgColor,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, leftIconBgColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "leftText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_LeftText,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, leftText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "leftTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_LeftTextColor,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, leftTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3BroadcastMakeFriend_FieldNumber_Pattern,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_RoomType,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, roomType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "extends",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_Extends,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, extends),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labelsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_LabelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, labelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fishWealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_FishWealthLevel,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, fishWealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "fishCharmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMakeFriend_FieldNumber_FishCharmLevel,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3BroadcastMakeFriend__storage_, fishCharmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMakeFriend class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMakeFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastMakeFriend_Sex_RawValue(PB3BroadcastMakeFriend *message) {
  GPBDescriptor *descriptor = [PB3BroadcastMakeFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastMakeFriend_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastMakeFriend_Sex_RawValue(PB3BroadcastMakeFriend *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastMakeFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastMakeFriend_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BroadcastMakeFriend_Pattern_RawValue(PB3BroadcastMakeFriend *message) {
  GPBDescriptor *descriptor = [PB3BroadcastMakeFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastMakeFriend_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastMakeFriend_Pattern_RawValue(PB3BroadcastMakeFriend *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastMakeFriend descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastMakeFriend_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GiveGift

@implementation PB3GiveGift

@dynamic sendId;
@dynamic sendName;
@dynamic sendIcon;
@dynamic sendSex;
@dynamic recvId;
@dynamic recvName;
@dynamic recvIcon;
@dynamic recvSex;
@dynamic roomId;
@dynamic roomPwd;
@dynamic giftId;
@dynamic giftNum;
@dynamic createTime;
@dynamic gold;
@dynamic roomId2;
@dynamic hasSendNobilityInfo, sendNobilityInfo;
@dynamic hasRevNobilityInfo, revNobilityInfo;
@dynamic isWorld;
@dynamic giftIcon;
@dynamic giftType;
@dynamic fromIdCubismIcon;
@dynamic toIdCubismIcon;
@dynamic roomName;
@dynamic message;

typedef struct PB3GiveGift__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sendSex;
  PB3SexType recvSex;
  int32_t giftId;
  int32_t giftNum;
  int32_t gold;
  int32_t giftType;
  NSString *sendName;
  NSString *sendIcon;
  NSString *recvName;
  NSString *recvIcon;
  NSString *roomPwd;
  PB3RoomNobilityInfo *sendNobilityInfo;
  PB3RoomNobilityInfo *revNobilityInfo;
  NSString *giftIcon;
  NSString *fromIdCubismIcon;
  NSString *toIdCubismIcon;
  NSString *roomName;
  NSString *message;
  int64_t sendId;
  int64_t recvId;
  int64_t roomId;
  int64_t createTime;
  int64_t roomId2;
} PB3GiveGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_SendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, sendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "sendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_SendName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, sendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_SendIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, sendIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendSex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3GiveGift_FieldNumber_SendSex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, sendSex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "recvId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_RecvId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, recvId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "recvName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_RecvName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, recvName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recvIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_RecvIcon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, recvIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recvSex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3GiveGift_FieldNumber_RecvSex,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, recvSex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_RoomId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "roomPwd",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_RoomPwd,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, roomPwd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_GiftId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_GiftNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_CreateTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_Gold,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, gold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "roomId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_RoomId2,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, roomId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "sendNobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3GiveGift_FieldNumber_SendNobilityInfo,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, sendNobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "revNobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3GiveGift_FieldNumber_RevNobilityInfo,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, revNobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isWorld",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_IsWorld,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "giftIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_GiftIcon,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, giftIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_GiftType,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, giftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fromIdCubismIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_FromIdCubismIcon,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, fromIdCubismIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toIdCubismIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_ToIdCubismIcon,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, toIdCubismIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_RoomName,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiveGift_FieldNumber_Message,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3GiveGift__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiveGift class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiveGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\016D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GiveGift_SendSex_RawValue(PB3GiveGift *message) {
  GPBDescriptor *descriptor = [PB3GiveGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiveGift_FieldNumber_SendSex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiveGift_SendSex_RawValue(PB3GiveGift *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiveGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiveGift_FieldNumber_SendSex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GiveGift_RecvSex_RawValue(PB3GiveGift *message) {
  GPBDescriptor *descriptor = [PB3GiveGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiveGift_FieldNumber_RecvSex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GiveGift_RecvSex_RawValue(PB3GiveGift *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GiveGift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GiveGift_FieldNumber_RecvSex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetBroadcastListReq

@implementation PB3GetBroadcastListReq

@dynamic pos;

typedef struct PB3GetBroadcastListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t pos;
} PB3GetBroadcastListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pos",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBroadcastListReq_FieldNumber_Pos,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBroadcastListReq__storage_, pos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBroadcastListReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBroadcastListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBroadcastListRes

@implementation PB3GetBroadcastListRes

@dynamic listArray, listArray_Count;
@dynamic status;
@dynamic time;
@dynamic survivalTime;

typedef struct PB3GetBroadcastListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t survivalTime;
  NSMutableArray *listArray;
  int64_t time;
} PB3GetBroadcastListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastMakeFriend),
        .number = PB3GetBroadcastListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetBroadcastListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBroadcastListRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBroadcastListRes__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBroadcastListRes_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetBroadcastListRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "survivalTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBroadcastListRes_FieldNumber_SurvivalTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetBroadcastListRes__storage_, survivalTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBroadcastListRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBroadcastListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClickTiaoTiaoReq

@implementation PB3ClickTiaoTiaoReq

@dynamic playerId;
@dynamic createTime;

typedef struct PB3ClickTiaoTiaoReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t createTime;
} PB3ClickTiaoTiaoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClickTiaoTiaoReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClickTiaoTiaoReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClickTiaoTiaoReq_FieldNumber_CreateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClickTiaoTiaoReq__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClickTiaoTiaoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClickTiaoTiaoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClickTiaoTiaoRes

@implementation PB3ClickTiaoTiaoRes


typedef struct PB3ClickTiaoTiaoRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ClickTiaoTiaoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClickTiaoTiaoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClickTiaoTiaoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastIntimateSitChair

@implementation PB3BroadcastIntimateSitChair

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic friendId;
@dynamic friendName;
@dynamic friendIcon;
@dynamic type;
@dynamic publicText;
@dynamic publicTextConfig;

typedef struct PB3BroadcastIntimateSitChair__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *playerName;
  NSString *playerIcon;
  NSString *friendName;
  NSString *friendIcon;
  NSString *publicText;
  NSString *publicTextConfig;
  int64_t playerId;
  int64_t friendId;
} PB3BroadcastIntimateSitChair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_FriendId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_FriendName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, friendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_FriendIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, friendIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "publicText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_PublicText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, publicText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicTextConfig",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateSitChair_FieldNumber_PublicTextConfig,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateSitChair__storage_, publicTextConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastIntimateSitChair class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastIntimateSitChair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateChair

@implementation PB3IntimateChair

@dynamic playerId;
@dynamic type;
@dynamic sort;
@dynamic privateFriendId;
@dynamic privateType;
@dynamic privateSort;

typedef struct PB3IntimateChair__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t sort;
  int32_t privateType;
  int32_t privateSort;
  int64_t playerId;
  int64_t privateFriendId;
} PB3IntimateChair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateChair_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateChair__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateChair_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateChair__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateChair_FieldNumber_Sort,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateChair__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "privateFriendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateChair_FieldNumber_PrivateFriendId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateChair__storage_, privateFriendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "privateType",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateChair_FieldNumber_PrivateType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateChair__storage_, privateType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "privateSort",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateChair_FieldNumber_PrivateSort,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateChair__storage_, privateSort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateChair class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateChair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastIntimateChairList

@implementation PB3BroadcastIntimateChairList

@dynamic intimatesArray, intimatesArray_Count;

typedef struct PB3BroadcastIntimateChairList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *intimatesArray;
} PB3BroadcastIntimateChairList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intimatesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateChair),
        .number = PB3BroadcastIntimateChairList_FieldNumber_IntimatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateChairList__storage_, intimatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastIntimateChairList class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastIntimateChairList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3StartMateChoiceReq

@implementation PB3StartMateChoiceReq


typedef struct PB3StartMateChoiceReq__storage_ {
  uint32_t _has_storage_[1];
} PB3StartMateChoiceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StartMateChoiceReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3StartMateChoiceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3StartMateChoiceRes

@implementation PB3StartMateChoiceRes


typedef struct PB3StartMateChoiceRes__storage_ {
  uint32_t _has_storage_[1];
} PB3StartMateChoiceRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StartMateChoiceRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3StartMateChoiceRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastStartMateChoice

@implementation PB3BroadcastStartMateChoice


typedef struct PB3BroadcastStartMateChoice__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastStartMateChoice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastStartMateChoice class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BroadcastStartMateChoice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoiceChairReq

@implementation PB3MateChoiceChairReq

@dynamic playerId;

typedef struct PB3MateChoiceChairReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3MateChoiceChairReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateChoiceChairReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MateChoiceChairReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoiceChairReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MateChoiceChairReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoiceChairRes

@implementation PB3MateChoiceChairRes


typedef struct PB3MateChoiceChairRes__storage_ {
  uint32_t _has_storage_[1];
} PB3MateChoiceChairRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoiceChairRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MateChoiceChairRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateChoiceNum

@implementation PB3BroadcastMateChoiceNum

@dynamic num;

typedef struct PB3BroadcastMateChoiceNum__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
} PB3BroadcastMateChoiceNum__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceNum_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceNum__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateChoiceNum class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateChoiceNum__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoiceResultReq

@implementation PB3MateChoiceResultReq


typedef struct PB3MateChoiceResultReq__storage_ {
  uint32_t _has_storage_[1];
} PB3MateChoiceResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoiceResultReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MateChoiceResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoiceResultRes

@implementation PB3MateChoiceResultRes


typedef struct PB3MateChoiceResultRes__storage_ {
  uint32_t _has_storage_[1];
} PB3MateChoiceResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoiceResultRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MateChoiceResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeMateChoiceStatusReq

@implementation PB3ChangeMateChoiceStatusReq

@dynamic status;

typedef struct PB3ChangeMateChoiceStatusReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
} PB3ChangeMateChoiceStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeMateChoiceStatusReq_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeMateChoiceStatusReq__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeMateChoiceStatusReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeMateChoiceStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeMateChoiceStatusRes

@implementation PB3ChangeMateChoiceStatusRes


typedef struct PB3ChangeMateChoiceStatusRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChangeMateChoiceStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeMateChoiceStatusRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChangeMateChoiceStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryMateChoiceInfoReq

@implementation PB3QueryMateChoiceInfoReq


typedef struct PB3QueryMateChoiceInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryMateChoiceInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryMateChoiceInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryMateChoiceInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryMateChoiceInfoRes

@implementation PB3QueryMateChoiceInfoRes

@dynamic status;
@dynamic choiceEndUnix;
@dynamic pairs, pairs_Count;
@dynamic hatOwnerId;
@dynamic hatIcon;

typedef struct PB3QueryMateChoiceInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  GPBInt64Int64Dictionary *pairs;
  NSString *hatIcon;
  int64_t choiceEndUnix;
  int64_t hatOwnerId;
} PB3QueryMateChoiceInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryMateChoiceInfoRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryMateChoiceInfoRes__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "choiceEndUnix",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryMateChoiceInfoRes_FieldNumber_ChoiceEndUnix,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryMateChoiceInfoRes__storage_, choiceEndUnix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pairs",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryMateChoiceInfoRes_FieldNumber_Pairs,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QueryMateChoiceInfoRes__storage_, pairs),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hatOwnerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryMateChoiceInfoRes_FieldNumber_HatOwnerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QueryMateChoiceInfoRes__storage_, hatOwnerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hatIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryMateChoiceInfoRes_FieldNumber_HatIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3QueryMateChoiceInfoRes__storage_, hatIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryMateChoiceInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryMateChoiceInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoicePublishResultReq

@implementation PB3MateChoicePublishResultReq

@dynamic playerId;

typedef struct PB3MateChoicePublishResultReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3MateChoicePublishResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateChoicePublishResultReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MateChoicePublishResultReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoicePublishResultReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MateChoicePublishResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoicePublishResultRes

@implementation PB3MateChoicePublishResultRes


typedef struct PB3MateChoicePublishResultRes__storage_ {
  uint32_t _has_storage_[1];
} PB3MateChoicePublishResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoicePublishResultRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MateChoicePublishResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateChoiceResult

@implementation PB3BroadcastMateChoiceResult

@dynamic pairs, pairs_Count;

typedef struct PB3BroadcastMateChoiceResult__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Int64Dictionary *pairs;
} PB3BroadcastMateChoiceResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pairs",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceResult_FieldNumber_Pairs,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceResult__storage_, pairs),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateChoiceResult class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateChoiceResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateRoomMatch

@implementation PB3MateRoomMatch

@dynamic goldStream;
@dynamic roomId;
@dynamic cardKey;
@dynamic cardType;
@dynamic player1Id;
@dynamic player1Name;
@dynamic player1Icon;
@dynamic player2Id;
@dynamic player2Name;
@dynamic player2Icon;
@dynamic isWorldBroadcast;
@dynamic hasNobilityInfo1, nobilityInfo1;
@dynamic hasNobilityInfo2, nobilityInfo2;
@dynamic isMatch;
@dynamic broadcastMsg;
@dynamic roomName;

typedef struct PB3MateRoomMatch__storage_ {
  uint32_t _has_storage_[1];
  int32_t goldStream;
  int32_t cardType;
  NSString *cardKey;
  NSString *player1Name;
  NSString *player1Icon;
  NSString *player2Name;
  NSString *player2Icon;
  PB3RoomNobilityInfo *nobilityInfo1;
  PB3RoomNobilityInfo *nobilityInfo2;
  NSString *broadcastMsg;
  NSString *roomName;
  int64_t roomId;
  int64_t player1Id;
  int64_t player2Id;
} PB3MateRoomMatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "goldStream",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_GoldStream,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, goldStream),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cardKey",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_CardKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, cardKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardType",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_CardType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, cardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "player1Id",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_Player1Id,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, player1Id),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "player1Name",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_Player1Name,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, player1Name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player1Icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_Player1Icon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, player1Icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player2Id",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_Player2Id,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, player2Id),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "player2Name",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_Player2Name,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, player2Name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player2Icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_Player2Icon,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, player2Icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isWorldBroadcast",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_IsWorldBroadcast,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nobilityInfo1",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3MateRoomMatch_FieldNumber_NobilityInfo1,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, nobilityInfo1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nobilityInfo2",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3MateRoomMatch_FieldNumber_NobilityInfo2,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, nobilityInfo2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isMatch",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_IsMatch,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "broadcastMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_BroadcastMsg,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, broadcastMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomMatch_FieldNumber_RoomName,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3MateRoomMatch__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateRoomMatch class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MateRoomMatch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateRoomMatch

@implementation PB3BroadcastMateRoomMatch

@dynamic hasMatch, match;

typedef struct PB3BroadcastMateRoomMatch__storage_ {
  uint32_t _has_storage_[1];
  PB3MateRoomMatch *match;
} PB3BroadcastMateRoomMatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "match",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MateRoomMatch),
        .number = PB3BroadcastMateRoomMatch_FieldNumber_Match,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMateRoomMatch__storage_, match),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateRoomMatch class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateRoomMatch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateMatchMsg

@implementation PB3BroadcastMateMatchMsg

@dynamic targetId;
@dynamic targetName;
@dynamic cardPath;
@dynamic tip;

typedef struct PB3BroadcastMateMatchMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *targetName;
  NSString *cardPath;
  NSString *tip;
  int64_t targetId;
} PB3BroadcastMateMatchMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateMatchMsg_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMateMatchMsg__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "targetName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateMatchMsg_FieldNumber_TargetName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastMateMatchMsg__storage_, targetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardPath",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateMatchMsg_FieldNumber_CardPath,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastMateMatchMsg__storage_, cardPath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tip",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateMatchMsg_FieldNumber_Tip,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastMateMatchMsg__storage_, tip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateMatchMsg class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateMatchMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateNotMatch

@implementation PB3BroadcastMateNotMatch


typedef struct PB3BroadcastMateNotMatch__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastMateNotMatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateNotMatch class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BroadcastMateNotMatch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadMateChairGoldStream

@implementation PB3BroadMateChairGoldStream

@dynamic playerId;
@dynamic goldLevel;
@dynamic sex;

typedef struct PB3BroadMateChairGoldStream__storage_ {
  uint32_t _has_storage_[1];
  int32_t goldLevel;
  PB3SexType sex;
  int64_t playerId;
} PB3BroadMateChairGoldStream__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadMateChairGoldStream_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadMateChairGoldStream__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "goldLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadMateChairGoldStream_FieldNumber_GoldLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadMateChairGoldStream__storage_, goldLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3BroadMateChairGoldStream_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadMateChairGoldStream__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadMateChairGoldStream class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadMateChairGoldStream__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadMateChairGoldStream_Sex_RawValue(PB3BroadMateChairGoldStream *message) {
  GPBDescriptor *descriptor = [PB3BroadMateChairGoldStream descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadMateChairGoldStream_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadMateChairGoldStream_Sex_RawValue(PB3BroadMateChairGoldStream *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadMateChairGoldStream descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadMateChairGoldStream_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadMateChairCharm

@implementation PB3BroadMateChairCharm

@dynamic playerId;
@dynamic chairCharm;
@dynamic chairId;

typedef struct PB3BroadMateChairCharm__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairCharm;
  int32_t chairId;
  int64_t playerId;
} PB3BroadMateChairCharm__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadMateChairCharm_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadMateChairCharm__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chairCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadMateChairCharm_FieldNumber_ChairCharm,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadMateChairCharm__storage_, chairCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadMateChairCharm_FieldNumber_ChairId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadMateChairCharm__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadMateChairCharm class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadMateChairCharm__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DragonBallReq

@implementation PB3DragonBallReq

@dynamic type;

typedef struct PB3DragonBallReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
} PB3DragonBallReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3DragonBallReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DragonBallReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DragonBallReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DragonBallReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DragonBallRes

@implementation PB3DragonBallRes

@dynamic id_p;
@dynamic dragonBallArray, dragonBallArray_Count;
@dynamic type;
@dynamic name;

typedef struct PB3DragonBallRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  GPBInt32Array *dragonBallArray;
  NSString *name;
  int64_t id_p;
} PB3DragonBallRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DragonBallRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DragonBallRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "dragonBallArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DragonBallRes_FieldNumber_DragonBallArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DragonBallRes__storage_, dragonBallArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3DragonBallRes_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DragonBallRes__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3DragonBallRes_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DragonBallRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DragonBallRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DragonBallRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000dragonBall\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastDragonBall

@implementation PB3BroadcastDragonBall

@dynamic id_p;
@dynamic dragonBallArray, dragonBallArray_Count;
@dynamic type;
@dynamic name;

typedef struct PB3BroadcastDragonBall__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  GPBInt32Array *dragonBallArray;
  NSString *name;
  int64_t id_p;
} PB3BroadcastDragonBall__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastDragonBall_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastDragonBall__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "dragonBallArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastDragonBall_FieldNumber_DragonBallArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastDragonBall__storage_, dragonBallArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastDragonBall_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastDragonBall__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastDragonBall_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastDragonBall__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastDragonBall class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastDragonBall__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000dragonBall\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Vote

@implementation PB3Vote

@dynamic voteId;
@dynamic voteName;
@dynamic beginAt;
@dynamic endAt;
@dynamic ret;
@dynamic playerId;
@dynamic playerName;
@dynamic voteArray, voteArray_Count;
@dynamic hasNobilityInfo, nobilityInfo;
@dynamic type;

typedef struct PB3Vote__storage_ {
  uint32_t _has_storage_[1];
  int32_t voteId;
  int32_t ret;
  PB3VoteType type;
  NSString *voteName;
  NSString *playerName;
  NSMutableArray *voteArray;
  PB3RoomNobilityInfo *nobilityInfo;
  int64_t beginAt;
  int64_t endAt;
  int64_t playerId;
} PB3Vote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Vote_FieldNumber_VoteId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, voteId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voteName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Vote_FieldNumber_VoteName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, voteName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "beginAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3Vote_FieldNumber_BeginAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, beginAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3Vote_FieldNumber_EndAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, endAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = PB3Vote_FieldNumber_Ret,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Vote_FieldNumber_PlayerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Vote_FieldNumber_PlayerName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voteArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VotePlayer),
        .number = PB3Vote_FieldNumber_VoteArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, voteArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3Vote_FieldNumber_NobilityInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3VoteType_EnumDescriptor,
        .number = PB3Vote_FieldNumber_Type,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Vote__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Vote class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Vote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Vote_Type_RawValue(PB3Vote *message) {
  GPBDescriptor *descriptor = [PB3Vote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Vote_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Vote_Type_RawValue(PB3Vote *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Vote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Vote_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VotePlayer

@implementation PB3VotePlayer

@dynamic optionIndex;
@dynamic optionName;
@dynamic icon;
@dynamic vote;
@dynamic hasNobilityInfo, nobilityInfo;
@dynamic type;

typedef struct PB3VotePlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t vote;
  PB3VoteType type;
  NSString *optionName;
  NSString *icon;
  PB3RoomNobilityInfo *nobilityInfo;
  int64_t optionIndex;
} PB3VotePlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optionIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3VotePlayer_FieldNumber_OptionIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VotePlayer__storage_, optionIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "optionName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VotePlayer_FieldNumber_OptionName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VotePlayer__storage_, optionName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VotePlayer_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VotePlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vote",
        .dataTypeSpecific.className = NULL,
        .number = PB3VotePlayer_FieldNumber_Vote,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VotePlayer__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3VoteType_EnumDescriptor,
        .number = PB3VotePlayer_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VotePlayer__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3VotePlayer_FieldNumber_NobilityInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VotePlayer__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VotePlayer class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VotePlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VotePlayer_Type_RawValue(PB3VotePlayer *message) {
  GPBDescriptor *descriptor = [PB3VotePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VotePlayer_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VotePlayer_Type_RawValue(PB3VotePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VotePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VotePlayer_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VoteOption

@implementation PB3VoteOption

@dynamic index;
@dynamic name;

typedef struct PB3VoteOption__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  int64_t index;
} PB3VoteOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteOption_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteOption__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteOption_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoteOption__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteOption class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteOption__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3StartVoteReq

@implementation PB3StartVoteReq

@dynamic voteName;
@dynamic limitAt;
@dynamic idsArray, idsArray_Count;
@dynamic type;
@dynamic optionsArray, optionsArray_Count;

typedef struct PB3StartVoteReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t limitAt;
  PB3VoteType type;
  NSString *voteName;
  GPBInt64Array *idsArray;
  NSMutableArray *optionsArray;
} PB3StartVoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteName",
        .dataTypeSpecific.className = NULL,
        .number = PB3StartVoteReq_FieldNumber_VoteName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3StartVoteReq__storage_, voteName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "limitAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3StartVoteReq_FieldNumber_LimitAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3StartVoteReq__storage_, limitAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "idsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3StartVoteReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3StartVoteReq__storage_, idsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3VoteType_EnumDescriptor,
        .number = PB3StartVoteReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3StartVoteReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteOption),
        .number = PB3StartVoteReq_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3StartVoteReq__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StartVoteReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3StartVoteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3StartVoteReq_Type_RawValue(PB3StartVoteReq *message) {
  GPBDescriptor *descriptor = [PB3StartVoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3StartVoteReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3StartVoteReq_Type_RawValue(PB3StartVoteReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3StartVoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3StartVoteReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3StartVoteRes

@implementation PB3StartVoteRes


typedef struct PB3StartVoteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3StartVoteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StartVoteRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3StartVoteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastStartVote

@implementation PB3BroadcastStartVote

@dynamic hasVote, vote;

typedef struct PB3BroadcastStartVote__storage_ {
  uint32_t _has_storage_[1];
  PB3Vote *vote;
} PB3BroadcastStartVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vote",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Vote),
        .number = PB3BroadcastStartVote_FieldNumber_Vote,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastStartVote__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastStartVote class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastStartVote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetVoteConfReq

@implementation PB3GetVoteConfReq


typedef struct PB3GetVoteConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetVoteConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetVoteConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetVoteConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetVoteConfRes

@implementation PB3GetVoteConfRes

@dynamic maxVoteOptionCount;

typedef struct PB3GetVoteConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t maxVoteOptionCount;
} PB3GetVoteConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxVoteOptionCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetVoteConfRes_FieldNumber_MaxVoteOptionCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetVoteConfRes__storage_, maxVoteOptionCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetVoteConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetVoteConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetVoteInfoReq

@implementation PB3GetVoteInfoReq


typedef struct PB3GetVoteInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetVoteInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetVoteInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetVoteInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetVoteInfoRes

@implementation PB3GetVoteInfoRes

@dynamic hasVote, vote;

typedef struct PB3GetVoteInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3Vote *vote;
} PB3GetVoteInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vote",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Vote),
        .number = PB3GetVoteInfoRes_FieldNumber_Vote,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetVoteInfoRes__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetVoteInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetVoteInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastVoteInfo

@implementation PB3BroadcastVoteInfo

@dynamic hasVote, vote;

typedef struct PB3BroadcastVoteInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3Vote *vote;
} PB3BroadcastVoteInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vote",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Vote),
        .number = PB3BroadcastVoteInfo_FieldNumber_Vote,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastVoteInfo__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastVoteInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastVoteInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteReq

@implementation PB3VoteReq

@dynamic targetId;

typedef struct PB3VoteReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t targetId;
} PB3VoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteRes

@implementation PB3VoteRes


typedef struct PB3VoteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3VoteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VoteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PublishVoteReq

@implementation PB3PublishVoteReq


typedef struct PB3PublishVoteReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PublishVoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PublishVoteReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PublishVoteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PublishVoteRes

@implementation PB3PublishVoteRes


typedef struct PB3PublishVoteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PublishVoteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PublishVoteRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PublishVoteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastPublishVote

@implementation PB3BroadcastPublishVote

@dynamic voteArray, voteArray_Count;

typedef struct PB3BroadcastPublishVote__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voteArray;
} PB3BroadcastPublishVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VotePlayer),
        .number = PB3BroadcastPublishVote_FieldNumber_VoteArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastPublishVote__storage_, voteArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastPublishVote class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastPublishVote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastAddVote

@implementation PB3BroadcastAddVote

@dynamic voteArray, voteArray_Count;

typedef struct PB3BroadcastAddVote__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voteArray;
} PB3BroadcastAddVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VotePlayer),
        .number = PB3BroadcastAddVote_FieldNumber_VoteArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastAddVote__storage_, voteArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastAddVote class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastAddVote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteLog

@implementation PB3VoteLog

@dynamic optionIndex;
@dynamic optionName;
@dynamic icon;
@dynamic vote;
@dynamic hasNobilityInfo, nobilityInfo;
@dynamic type;

typedef struct PB3VoteLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t vote;
  PB3VoteType type;
  NSString *optionName;
  NSString *icon;
  PB3RoomNobilityInfo *nobilityInfo;
  int64_t optionIndex;
} PB3VoteLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optionIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteLog_FieldNumber_OptionIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteLog__storage_, optionIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "optionName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteLog_FieldNumber_OptionName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoteLog__storage_, optionName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteLog_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoteLog__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vote",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteLog_FieldNumber_Vote,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoteLog__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3VoteLog_FieldNumber_NobilityInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoteLog__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3VoteType_EnumDescriptor,
        .number = PB3VoteLog_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoteLog__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteLog class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VoteLog_Type_RawValue(PB3VoteLog *message) {
  GPBDescriptor *descriptor = [PB3VoteLog descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VoteLog_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VoteLog_Type_RawValue(PB3VoteLog *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VoteLog descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VoteLog_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomVoteLog

@implementation PB3RoomVoteLog

@dynamic time;
@dynamic name;
@dynamic count;
@dynamic logsArray, logsArray_Count;

typedef struct PB3RoomVoteLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSString *name;
  NSMutableArray *logsArray;
  int64_t time;
} PB3RoomVoteLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomVoteLog_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomVoteLog__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomVoteLog_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomVoteLog__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomVoteLog_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomVoteLog__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoteLog),
        .number = PB3RoomVoteLog_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomVoteLog__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomVoteLog class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomVoteLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomVoteLogReq

@implementation PB3RoomVoteLogReq

@dynamic roomId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3RoomVoteLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  int64_t roomId;
} PB3RoomVoteLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomVoteLogReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomVoteLogReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomVoteLogReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomVoteLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomVoteLogReq_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomVoteLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomVoteLogReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomVoteLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomVoteLogRes

@implementation PB3RoomVoteLogRes

@dynamic voteLogsArray, voteLogsArray_Count;

typedef struct PB3RoomVoteLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voteLogsArray;
} PB3RoomVoteLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteLogsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomVoteLog),
        .number = PB3RoomVoteLogRes_FieldNumber_VoteLogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomVoteLogRes__storage_, voteLogsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomVoteLogRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomVoteLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserVoteLog

@implementation PB3UserVoteLog

@dynamic optionIndex;
@dynamic optionName;
@dynamic voteName;
@dynamic time;
@dynamic hasNobilityInfo, nobilityInfo;
@dynamic type;

typedef struct PB3UserVoteLog__storage_ {
  uint32_t _has_storage_[1];
  PB3VoteType type;
  NSString *optionName;
  NSString *voteName;
  PB3RoomNobilityInfo *nobilityInfo;
  int64_t optionIndex;
  int64_t time;
} PB3UserVoteLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optionIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserVoteLog_FieldNumber_OptionIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserVoteLog__storage_, optionIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "optionName",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserVoteLog_FieldNumber_OptionName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserVoteLog__storage_, optionName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voteName",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserVoteLog_FieldNumber_VoteName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserVoteLog__storage_, voteName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserVoteLog_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserVoteLog__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3UserVoteLog_FieldNumber_NobilityInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UserVoteLog__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3VoteType_EnumDescriptor,
        .number = PB3UserVoteLog_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UserVoteLog__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserVoteLog class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserVoteLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UserVoteLog_Type_RawValue(PB3UserVoteLog *message) {
  GPBDescriptor *descriptor = [PB3UserVoteLog descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserVoteLog_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserVoteLog_Type_RawValue(PB3UserVoteLog *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserVoteLog descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserVoteLog_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UserVoteLogReq

@implementation PB3UserVoteLogReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3UserVoteLogReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3UserVoteLogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserVoteLogReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserVoteLogReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserVoteLogReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserVoteLogReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserVoteLogReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserVoteLogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserVoteLogRes

@implementation PB3UserVoteLogRes

@dynamic voteLogsArray, voteLogsArray_Count;

typedef struct PB3UserVoteLogRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voteLogsArray;
} PB3UserVoteLogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteLogsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserVoteLog),
        .number = PB3UserVoteLogRes_FieldNumber_VoteLogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3UserVoteLogRes__storage_, voteLogsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserVoteLogRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserVoteLogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastHeadline

@implementation PB3BroadcastHeadline

@dynamic hasHeadline, headline;

typedef struct PB3BroadcastHeadline__storage_ {
  uint32_t _has_storage_[1];
  PB3Headline *headline;
} PB3BroadcastHeadline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "headline",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Headline),
        .number = PB3BroadcastHeadline_FieldNumber_Headline,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastHeadline__storage_, headline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastHeadline class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastHeadline__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadFriendRoomIdReq

@implementation PB3BroadFriendRoomIdReq

@dynamic playerId;
@dynamic toId;
@dynamic giftRoomId;

typedef struct PB3BroadFriendRoomIdReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t toId;
  int64_t giftRoomId;
} PB3BroadFriendRoomIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadFriendRoomIdReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadFriendRoomIdReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadFriendRoomIdReq_FieldNumber_ToId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadFriendRoomIdReq__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftRoomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadFriendRoomIdReq_FieldNumber_GiftRoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadFriendRoomIdReq__storage_, giftRoomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadFriendRoomIdReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadFriendRoomIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadFriendRoomIdRes

@implementation PB3BroadFriendRoomIdRes

@dynamic roomId;
@dynamic isInRoom;

typedef struct PB3BroadFriendRoomIdRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3BroadFriendRoomIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadFriendRoomIdRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadFriendRoomIdRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isInRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadFriendRoomIdRes_FieldNumber_IsInRoom,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadFriendRoomIdRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadFriendRoomIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FollowCheckReq

@implementation PB3FollowCheckReq

@dynamic followId;

typedef struct PB3FollowCheckReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t followId;
} PB3FollowCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "followId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FollowCheckReq_FieldNumber_FollowId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FollowCheckReq__storage_, followId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FollowCheckReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FollowCheckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FollowCheckRes

@implementation PB3FollowCheckRes

@dynamic roomId;
@dynamic nobilityId;
@dynamic roomName;

typedef struct PB3FollowCheckRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nobilityId;
  NSString *roomName;
  int64_t roomId;
} PB3FollowCheckRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FollowCheckRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FollowCheckRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nobilityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FollowCheckRes_FieldNumber_NobilityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FollowCheckRes__storage_, nobilityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FollowCheckRes_FieldNumber_RoomName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FollowCheckRes__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FollowCheckRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FollowCheckRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PcaChangeUser

@implementation PB3PcaChangeUser

@dynamic userId;

typedef struct PB3PcaChangeUser__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} PB3PcaChangeUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PcaChangeUser_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PcaChangeUser__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PcaChangeUser class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PcaChangeUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PcaStartPushReq

@implementation PB3PcaStartPushReq


typedef struct PB3PcaStartPushReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PcaStartPushReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PcaStartPushReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PcaStartPushReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PcaStartPushRes

@implementation PB3PcaStartPushRes

@dynamic result;
@dynamic roomId;

typedef struct PB3PcaStartPushRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t result;
  int64_t roomId;
} PB3PcaStartPushRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = PB3PcaStartPushRes_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PcaStartPushRes__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PcaStartPushRes_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PcaStartPushRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PcaStartPushRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PcaStartPushRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastPcaStartPush

@implementation PB3BroadcastPcaStartPush

@dynamic userId;

typedef struct PB3BroadcastPcaStartPush__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} PB3BroadcastPcaStartPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastPcaStartPush_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastPcaStartPush__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastPcaStartPush class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastPcaStartPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PcaStopPushReq

@implementation PB3PcaStopPushReq


typedef struct PB3PcaStopPushReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PcaStopPushReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PcaStopPushReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PcaStopPushReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PcaStopPushRes

@implementation PB3PcaStopPushRes


typedef struct PB3PcaStopPushRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PcaStopPushRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PcaStopPushRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PcaStopPushRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PcaChangeUserAckReq

@implementation PB3PcaChangeUserAckReq


typedef struct PB3PcaChangeUserAckReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PcaChangeUserAckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PcaChangeUserAckReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PcaChangeUserAckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PcaChangeUserAckRes

@implementation PB3PcaChangeUserAckRes


typedef struct PB3PcaChangeUserAckRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PcaChangeUserAckRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PcaChangeUserAckRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PcaChangeUserAckRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Headline

@implementation PB3Headline

@dynamic playerId;
@dynamic name;
@dynamic icon;
@dynamic sex;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic content;
@dynamic showTime;
@dynamic protectTime;
@dynamic gold;
@dynamic roomOnlineNum;
@dynamic leftIconBg;
@dynamic leftText;
@dynamic leftTextColor;
@dynamic pattern;
@dynamic grabStatus;
@dynamic style;

typedef struct PB3Headline__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t wealthLevel;
  int32_t charmLevel;
  int32_t showTime;
  int32_t protectTime;
  int32_t gold;
  PB3NewRoomPattern pattern;
  PB3HeadLineStyle style;
  NSString *name;
  NSString *icon;
  NSString *content;
  NSString *leftIconBg;
  NSString *leftText;
  NSString *leftTextColor;
  int64_t playerId;
  int64_t roomOnlineNum;
} PB3Headline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3Headline_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_WealthLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_CharmLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_ShowTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, showTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "protectTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_ProtectTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, protectTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_Gold,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "roomOnlineNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_RoomOnlineNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, roomOnlineNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "leftIconBg",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_LeftIconBg,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, leftIconBg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "leftText",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_LeftText,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, leftText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "leftTextColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_LeftTextColor,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, leftTextColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3Headline_FieldNumber_Pattern,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "grabStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3Headline_FieldNumber_GrabStatus,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "style",
        .dataTypeSpecific.enumDescFunc = PB3HeadLineStyle_EnumDescriptor,
        .number = PB3Headline_FieldNumber_Style,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3Headline__storage_, style),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Headline class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Headline__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Headline_Sex_RawValue(PB3Headline *message) {
  GPBDescriptor *descriptor = [PB3Headline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Headline_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Headline_Sex_RawValue(PB3Headline *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Headline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Headline_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3Headline_Pattern_RawValue(PB3Headline *message) {
  GPBDescriptor *descriptor = [PB3Headline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Headline_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Headline_Pattern_RawValue(PB3Headline *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Headline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Headline_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3Headline_Style_RawValue(PB3Headline *message) {
  GPBDescriptor *descriptor = [PB3Headline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Headline_FieldNumber_Style];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Headline_Style_RawValue(PB3Headline *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Headline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Headline_FieldNumber_Style];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetBFHeadlineReq

@implementation PB3GetBFHeadlineReq


typedef struct PB3GetBFHeadlineReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetBFHeadlineReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBFHeadlineReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetBFHeadlineReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBFHeadlineRes

@implementation PB3GetBFHeadlineRes

@dynamic hasHeadline, headline;

typedef struct PB3GetBFHeadlineRes__storage_ {
  uint32_t _has_storage_[1];
  PB3Headline *headline;
} PB3GetBFHeadlineRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "headline",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Headline),
        .number = PB3GetBFHeadlineRes_FieldNumber_Headline,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBFHeadlineRes__storage_, headline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBFHeadlineRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBFHeadlineRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PushHeadlineReq

@implementation PB3PushHeadlineReq

@dynamic content;
@dynamic gold;
@dynamic pushType;

typedef struct PB3PushHeadlineReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t gold;
  PB3PushHeadlineType pushType;
  NSString *content;
} PB3PushHeadlineReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushHeadlineReq_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PushHeadlineReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushHeadlineReq_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PushHeadlineReq__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pushType",
        .dataTypeSpecific.enumDescFunc = PB3PushHeadlineType_EnumDescriptor,
        .number = PB3PushHeadlineReq_FieldNumber_PushType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PushHeadlineReq__storage_, pushType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PushHeadlineReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PushHeadlineReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PushHeadlineReq_PushType_RawValue(PB3PushHeadlineReq *message) {
  GPBDescriptor *descriptor = [PB3PushHeadlineReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PushHeadlineReq_FieldNumber_PushType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PushHeadlineReq_PushType_RawValue(PB3PushHeadlineReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PushHeadlineReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PushHeadlineReq_FieldNumber_PushType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PushHeadlineRes

@implementation PB3PushHeadlineRes

@dynamic baseGold;
@dynamic addGold;
@dynamic tip;

typedef struct PB3PushHeadlineRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t baseGold;
  int32_t addGold;
  NSString *tip;
} PB3PushHeadlineRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushHeadlineRes_FieldNumber_BaseGold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PushHeadlineRes__storage_, baseGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "addGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushHeadlineRes_FieldNumber_AddGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PushHeadlineRes__storage_, addGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "tip",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushHeadlineRes_FieldNumber_Tip,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PushHeadlineRes__storage_, tip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PushHeadlineRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PushHeadlineRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBFHeadlineBaseReq

@implementation PB3GetBFHeadlineBaseReq

@dynamic pushType;

typedef struct PB3GetBFHeadlineBaseReq__storage_ {
  uint32_t _has_storage_[1];
  PB3PushHeadlineType pushType;
} PB3GetBFHeadlineBaseReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pushType",
        .dataTypeSpecific.enumDescFunc = PB3PushHeadlineType_EnumDescriptor,
        .number = PB3GetBFHeadlineBaseReq_FieldNumber_PushType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBFHeadlineBaseReq__storage_, pushType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBFHeadlineBaseReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBFHeadlineBaseReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetBFHeadlineBaseReq_PushType_RawValue(PB3GetBFHeadlineBaseReq *message) {
  GPBDescriptor *descriptor = [PB3GetBFHeadlineBaseReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetBFHeadlineBaseReq_FieldNumber_PushType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetBFHeadlineBaseReq_PushType_RawValue(PB3GetBFHeadlineBaseReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetBFHeadlineBaseReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetBFHeadlineBaseReq_FieldNumber_PushType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetBFHeadlineBaseRes

@implementation PB3GetBFHeadlineBaseRes

@dynamic baseGold;
@dynamic addGold;
@dynamic tip;

typedef struct PB3GetBFHeadlineBaseRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t baseGold;
  int32_t addGold;
  NSString *tip;
} PB3GetBFHeadlineBaseRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFHeadlineBaseRes_FieldNumber_BaseGold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBFHeadlineBaseRes__storage_, baseGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "addGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFHeadlineBaseRes_FieldNumber_AddGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetBFHeadlineBaseRes__storage_, addGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "tip",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFHeadlineBaseRes_FieldNumber_Tip,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetBFHeadlineBaseRes__storage_, tip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBFHeadlineBaseRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBFHeadlineBaseRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetWorldGiftReq

@implementation PB3GetWorldGiftReq

@dynamic opType;
@dynamic playerId;

typedef struct PB3GetWorldGiftReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t opType;
  int64_t playerId;
} PB3GetWorldGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWorldGiftReq_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetWorldGiftReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWorldGiftReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetWorldGiftReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetWorldGiftReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetWorldGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetWorldGiftRes

@implementation PB3GetWorldGiftRes

@dynamic giftInfoArray, giftInfoArray_Count;
@dynamic hasTop, top;

typedef struct PB3GetWorldGiftRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftInfoArray;
  PB3GiveGift *top;
} PB3GetWorldGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiveGift),
        .number = PB3GetWorldGiftRes_FieldNumber_GiftInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetWorldGiftRes__storage_, giftInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "top",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiveGift),
        .number = PB3GetWorldGiftRes_FieldNumber_Top,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetWorldGiftRes__storage_, top),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetWorldGiftRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetWorldGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBFInfoReq

@implementation PB3GetBFInfoReq

@dynamic onType;

typedef struct PB3GetBFInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t onType;
} PB3GetBFInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onType",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFInfoReq_FieldNumber_OnType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBFInfoReq__storage_, onType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBFInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBFInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBFInfoRes

@implementation PB3GetBFInfoRes

@dynamic listArray, listArray_Count;
@dynamic status;
@dynamic time;
@dynamic limitCharm;
@dynamic survivalTime;

typedef struct PB3GetBFInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t limitCharm;
  int32_t survivalTime;
  NSMutableArray *listArray;
  int64_t time;
} PB3GetBFInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastMakeFriend),
        .number = PB3GetBFInfoRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetBFInfoRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFInfoRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetBFInfoRes__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFInfoRes_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetBFInfoRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "limitCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFInfoRes_FieldNumber_LimitCharm,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetBFInfoRes__storage_, limitCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "survivalTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBFInfoRes_FieldNumber_SurvivalTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetBFInfoRes__storage_, survivalTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBFInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBFInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelHeadlineReq

@implementation PB3DelHeadlineReq


typedef struct PB3DelHeadlineReq__storage_ {
  uint32_t _has_storage_[1];
} PB3DelHeadlineReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelHeadlineReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DelHeadlineReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelHeadlineRes

@implementation PB3DelHeadlineRes


typedef struct PB3DelHeadlineRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DelHeadlineRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelHeadlineRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DelHeadlineRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyChairInfoReq

@implementation PB3MyChairInfoReq


typedef struct PB3MyChairInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3MyChairInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyChairInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MyChairInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyChairInfoRes

@implementation PB3MyChairInfoRes

@dynamic roomId;
@dynamic onChair;

typedef struct PB3MyChairInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3MyChairInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyChairInfoRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MyChairInfoRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "onChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyChairInfoRes_FieldNumber_OnChair,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyChairInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MyChairInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetScenePlayerReq

@implementation PB3GetScenePlayerReq

@dynamic playerId;

typedef struct PB3GetScenePlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GetScenePlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetScenePlayerReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetScenePlayerReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetScenePlayerReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetScenePlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetScenePlayerRes

@implementation PB3GetScenePlayerRes

@dynamic roomId;
@dynamic chairId;
@dynamic hasPlayer, player;

typedef struct PB3GetScenePlayerRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  PB3ScenePlayer *player;
  int64_t roomId;
} PB3GetScenePlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetScenePlayerRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetScenePlayerRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetScenePlayerRes_FieldNumber_ChairId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetScenePlayerRes__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3GetScenePlayerRes_FieldNumber_Player,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetScenePlayerRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetScenePlayerRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetScenePlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LockAllChairReq

@implementation PB3LockAllChairReq

@dynamic optType;

typedef struct PB3LockAllChairReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t optType;
} PB3LockAllChairReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optType",
        .dataTypeSpecific.className = NULL,
        .number = PB3LockAllChairReq_FieldNumber_OptType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LockAllChairReq__storage_, optType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LockAllChairReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LockAllChairReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LockAllChairRes

@implementation PB3LockAllChairRes

@dynamic optType;

typedef struct PB3LockAllChairRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t optType;
} PB3LockAllChairRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optType",
        .dataTypeSpecific.className = NULL,
        .number = PB3LockAllChairRes_FieldNumber_OptType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LockAllChairRes__storage_, optType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LockAllChairRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LockAllChairRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetChairBanQueueReq

@implementation PB3SetChairBanQueueReq

@dynamic banQueueStatus;

typedef struct PB3SetChairBanQueueReq__storage_ {
  uint32_t _has_storage_[1];
} PB3SetChairBanQueueReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "banQueueStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetChairBanQueueReq_FieldNumber_BanQueueStatus,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetChairBanQueueReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetChairBanQueueReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetChairBanQueueRes

@implementation PB3SetChairBanQueueRes


typedef struct PB3SetChairBanQueueRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetChairBanQueueRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetChairBanQueueRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetChairBanQueueRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairBanQueue

@implementation PB3BroadcastChairBanQueue

@dynamic banQueueStatus;

typedef struct PB3BroadcastChairBanQueue__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastChairBanQueue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "banQueueStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairBanQueue_FieldNumber_BanQueueStatus,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairBanQueue class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairBanQueue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearChairQueueReq

@implementation PB3ClearChairQueueReq


typedef struct PB3ClearChairQueueReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearChairQueueReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearChairQueueReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearChairQueueReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearChairQueueRes

@implementation PB3ClearChairQueueRes


typedef struct PB3ClearChairQueueRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearChairQueueRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearChairQueueRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearChairQueueRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastClearChairQueue

@implementation PB3BroadcastClearChairQueue


typedef struct PB3BroadcastClearChairQueue__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastClearChairQueue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastClearChairQueue class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BroadcastClearChairQueue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastAddChairQueue

@implementation PB3BroadcastAddChairQueue

@dynamic type;

typedef struct PB3BroadcastAddChairQueue__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
} PB3BroadcastAddChairQueue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastAddChairQueue_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastAddChairQueue__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastAddChairQueue class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastAddChairQueue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetRoomConfReq

@implementation PB3GetRoomConfReq


typedef struct PB3GetRoomConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetRoomConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetRoomConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetRoomConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetRoomConfRes

@implementation PB3GetRoomConfRes

@dynamic isHighQuality;
@dynamic isIntimate;
@dynamic imagesArray, imagesArray_Count;
@dynamic isSendBill;
@dynamic isShowPresenter;
@dynamic roomName;
@dynamic greet;
@dynamic nameGreetStatus;
@dynamic reception;
@dynamic receptionStatus;
@dynamic patternsArray, patternsArray_Count;
@dynamic gameAutoBf;
@dynamic singleLiveNotify;
@dynamic singleLiveTpl;
@dynamic showSingleLiveTpl;
@dynamic isRoomShake;
@dynamic isRoomChairShake;

typedef struct PB3GetRoomConfRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AuditStatus nameGreetStatus;
  PB3AuditStatus receptionStatus;
  PB3SingleLiveTplType singleLiveTpl;
  PB3ShowSingleLiveTplType showSingleLiveTpl;
  NSMutableArray *imagesArray;
  NSString *roomName;
  NSString *greet;
  NSString *reception;
  NSMutableArray *patternsArray;
} PB3GetRoomConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isHighQuality",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_IsHighQuality,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isIntimate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_IsIntimate,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "imagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomImage),
        .number = PB3GetRoomConfRes_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isSendBill",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_IsSendBill,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShowPresenter",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_IsShowPresenter,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_RoomName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greet",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_Greet,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, greet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nameGreetStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3GetRoomConfRes_FieldNumber_NameGreetStatus,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, nameGreetStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "reception",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_Reception,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, reception),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receptionStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3GetRoomConfRes_FieldNumber_ReceptionStatus,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, receptionStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "patternsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomPatternInfo),
        .number = PB3GetRoomConfRes_FieldNumber_PatternsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, patternsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameAutoBf",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_GameAutoBf,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "singleLiveNotify",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_SingleLiveNotify,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "singleLiveTpl",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveTplType_EnumDescriptor,
        .number = PB3GetRoomConfRes_FieldNumber_SingleLiveTpl,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, singleLiveTpl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "showSingleLiveTpl",
        .dataTypeSpecific.enumDescFunc = PB3ShowSingleLiveTplType_EnumDescriptor,
        .number = PB3GetRoomConfRes_FieldNumber_ShowSingleLiveTpl,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3GetRoomConfRes__storage_, showSingleLiveTpl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isRoomShake",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_IsRoomShake,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isRoomChairShake",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetRoomConfRes_FieldNumber_IsRoomChairShake,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetRoomConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetRoomConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetRoomConfRes_NameGreetStatus_RawValue(PB3GetRoomConfRes *message) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_NameGreetStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetRoomConfRes_NameGreetStatus_RawValue(PB3GetRoomConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_NameGreetStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GetRoomConfRes_ReceptionStatus_RawValue(PB3GetRoomConfRes *message) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_ReceptionStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetRoomConfRes_ReceptionStatus_RawValue(PB3GetRoomConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_ReceptionStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GetRoomConfRes_SingleLiveTpl_RawValue(PB3GetRoomConfRes *message) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_SingleLiveTpl];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetRoomConfRes_SingleLiveTpl_RawValue(PB3GetRoomConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_SingleLiveTpl];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GetRoomConfRes_ShowSingleLiveTpl_RawValue(PB3GetRoomConfRes *message) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_ShowSingleLiveTpl];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetRoomConfRes_ShowSingleLiveTpl_RawValue(PB3GetRoomConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetRoomConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetRoomConfRes_FieldNumber_ShowSingleLiveTpl];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomPatternInfo

@implementation PB3RoomPatternInfo

@dynamic pattern;
@dynamic name;
@dynamic intro;

typedef struct PB3RoomPatternInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3NewRoomPattern pattern;
  NSString *name;
  NSString *intro;
} PB3RoomPatternInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3RoomPatternInfo_FieldNumber_Pattern,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomPatternInfo__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPatternInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomPatternInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intro",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPatternInfo_FieldNumber_Intro,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomPatternInfo__storage_, intro),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPatternInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomPatternInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomPatternInfo_Pattern_RawValue(PB3RoomPatternInfo *message) {
  GPBDescriptor *descriptor = [PB3RoomPatternInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomPatternInfo_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomPatternInfo_Pattern_RawValue(PB3RoomPatternInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomPatternInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomPatternInfo_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomImage

@implementation PB3RoomImage

@dynamic imageId;
@dynamic imageName;
@dynamic expireAt;
@dynamic friendId;
@dynamic friendName;

typedef struct PB3RoomImage__storage_ {
  uint32_t _has_storage_[1];
  int32_t expireAt;
  NSString *imageName;
  NSString *friendName;
  int64_t imageId;
  int64_t friendId;
} PB3RoomImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomImage_FieldNumber_ImageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomImage__storage_, imageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imageName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomImage_FieldNumber_ImageName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomImage__storage_, imageName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expireAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomImage_FieldNumber_ExpireAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomImage__storage_, expireAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomImage_FieldNumber_FriendId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomImage__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomImage_FieldNumber_FriendName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomImage__storage_, friendName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomImage class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomImageListReq

@implementation PB3RoomImageListReq

@dynamic friendId;

typedef struct PB3RoomImageListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t friendId;
} PB3RoomImageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomImageListReq_FieldNumber_FriendId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomImageListReq__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomImageListReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomImageListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomImageListRes

@implementation PB3RoomImageListRes

@dynamic imagesArray, imagesArray_Count;

typedef struct PB3RoomImageListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *imagesArray;
} PB3RoomImageListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomImage),
        .number = PB3RoomImageListRes_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomImageListRes__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomImageListRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomImageListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeRoomImageReq

@implementation PB3ChangeRoomImageReq

@dynamic imageId;
@dynamic friendId;

typedef struct PB3ChangeRoomImageReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t imageId;
  int64_t friendId;
} PB3ChangeRoomImageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomImageReq_FieldNumber_ImageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeRoomImageReq__storage_, imageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomImageReq_FieldNumber_FriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChangeRoomImageReq__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeRoomImageReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeRoomImageReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeRoomImageRes

@implementation PB3ChangeRoomImageRes


typedef struct PB3ChangeRoomImageRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChangeRoomImageRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeRoomImageRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChangeRoomImageRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomImage

@implementation PB3BroadcastRoomImage

@dynamic imageId;
@dynamic friendId;

typedef struct PB3BroadcastRoomImage__storage_ {
  uint32_t _has_storage_[1];
  int64_t imageId;
  int64_t friendId;
} PB3BroadcastRoomImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomImage_FieldNumber_ImageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomImage__storage_, imageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "friendId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomImage_FieldNumber_FriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomImage__storage_, friendId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomImage class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomOwnerCert

@implementation PB3BroadcastRoomOwnerCert

@dynamic msg;

typedef struct PB3BroadcastRoomOwnerCert__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
} PB3BroadcastRoomOwnerCert__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomOwnerCert_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomOwnerCert__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomOwnerCert class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomOwnerCert__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomInfoExt

@implementation PB3RoomInfoExt

@dynamic roomId;
@dynamic name;
@dynamic greeting;
@dynamic pattern;
@dynamic isEnterPwd;

typedef struct PB3RoomInfoExt__storage_ {
  uint32_t _has_storage_[1];
  int32_t pattern;
  NSString *name;
  NSString *greeting;
  int64_t roomId;
} PB3RoomInfoExt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomInfoExt_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomInfoExt__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomInfoExt_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomInfoExt__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomInfoExt_FieldNumber_Greeting,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomInfoExt__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomInfoExt_FieldNumber_Pattern,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomInfoExt__storage_, pattern),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isEnterPwd",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomInfoExt_FieldNumber_IsEnterPwd,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomInfoExt class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomInfoExt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomInfoExtReq

@implementation PB3RoomInfoExtReq

@dynamic roomIdArray, roomIdArray_Count;

typedef struct PB3RoomInfoExtReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *roomIdArray;
} PB3RoomInfoExtReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomInfoExtReq_FieldNumber_RoomIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomInfoExtReq__storage_, roomIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomInfoExtReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomInfoExtReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomInfoExtRes

@implementation PB3RoomInfoExtRes

@dynamic roomArray, roomArray_Count;

typedef struct PB3RoomInfoExtRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *roomArray;
} PB3RoomInfoExtRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomInfoExt),
        .number = PB3RoomInfoExtRes_FieldNumber_RoomArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomInfoExtRes__storage_, roomArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomInfoExtRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomInfoExtRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SettingOption

@implementation PB3SettingOption

@dynamic type;
@dynamic value;

typedef struct PB3SettingOption__storage_ {
  uint32_t _has_storage_[1];
  PB3SettingOptionType type;
  NSString *value;
} PB3SettingOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3SettingOptionType_EnumDescriptor,
        .number = PB3SettingOption_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SettingOption__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3SettingOption_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SettingOption__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SettingOption class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SettingOption__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SettingOption_Type_RawValue(PB3SettingOption *message) {
  GPBDescriptor *descriptor = [PB3SettingOption descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SettingOption_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SettingOption_Type_RawValue(PB3SettingOption *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SettingOption descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SettingOption_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LuckyDrawStartReq

@implementation PB3LuckyDrawStartReq

@dynamic type;
@dynamic optionsArray, optionsArray_Count;

typedef struct PB3LuckyDrawStartReq__storage_ {
  uint32_t _has_storage_[1];
  PB3LuckyDrawType type;
  NSMutableArray *optionsArray;
} PB3LuckyDrawStartReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3LuckyDrawType_EnumDescriptor,
        .number = PB3LuckyDrawStartReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckyDrawStartReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SettingOption),
        .number = PB3LuckyDrawStartReq_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckyDrawStartReq__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawStartReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawStartReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LuckyDrawStartReq_Type_RawValue(PB3LuckyDrawStartReq *message) {
  GPBDescriptor *descriptor = [PB3LuckyDrawStartReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckyDrawStartReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LuckyDrawStartReq_Type_RawValue(PB3LuckyDrawStartReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LuckyDrawStartReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckyDrawStartReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LuckyDrawStartRes

@implementation PB3LuckyDrawStartRes


typedef struct PB3LuckyDrawStartRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawStartRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawStartRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawStartRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawMakeResultReq

@implementation PB3LuckyDrawMakeResultReq


typedef struct PB3LuckyDrawMakeResultReq__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawMakeResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawMakeResultReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawMakeResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawMakeResultRes

@implementation PB3LuckyDrawMakeResultRes


typedef struct PB3LuckyDrawMakeResultRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawMakeResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawMakeResultRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawMakeResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawEndReq

@implementation PB3LuckyDrawEndReq

@dynamic option;

typedef struct PB3LuckyDrawEndReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ConfirmWinnerOption option;
} PB3LuckyDrawEndReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "option",
        .dataTypeSpecific.enumDescFunc = PB3ConfirmWinnerOption_EnumDescriptor,
        .number = PB3LuckyDrawEndReq_FieldNumber_Option,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckyDrawEndReq__storage_, option),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawEndReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawEndReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LuckyDrawEndReq_Option_RawValue(PB3LuckyDrawEndReq *message) {
  GPBDescriptor *descriptor = [PB3LuckyDrawEndReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckyDrawEndReq_FieldNumber_Option];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LuckyDrawEndReq_Option_RawValue(PB3LuckyDrawEndReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LuckyDrawEndReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LuckyDrawEndReq_FieldNumber_Option];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LuckyDrawEndRes

@implementation PB3LuckyDrawEndRes


typedef struct PB3LuckyDrawEndRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawEndRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawEndRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawEndRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawSignUpReq

@implementation PB3LuckyDrawSignUpReq


typedef struct PB3LuckyDrawSignUpReq__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawSignUpReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawSignUpReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawSignUpReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawSignUpRes

@implementation PB3LuckyDrawSignUpRes


typedef struct PB3LuckyDrawSignUpRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawSignUpRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawSignUpRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawSignUpRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawCancelReq

@implementation PB3LuckyDrawCancelReq


typedef struct PB3LuckyDrawCancelReq__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawCancelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawCancelReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawCancelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawCancelRes

@implementation PB3LuckyDrawCancelRes


typedef struct PB3LuckyDrawCancelRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawCancelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawCancelRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawCancelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawStageReq

@implementation PB3LuckyDrawStageReq


typedef struct PB3LuckyDrawStageReq__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawStageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawStageReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawStageReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawStageRes

@implementation PB3LuckyDrawStageRes

@dynamic isAuth;

typedef struct PB3LuckyDrawStageRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawStageRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAuth",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckyDrawStageRes_FieldNumber_IsAuth,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawStageRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawStageRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawBroadcast

@implementation PB3LuckyDrawBroadcast

@dynamic excludePlayerIdArray, excludePlayerIdArray_Count;

typedef struct PB3LuckyDrawBroadcast__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *excludePlayerIdArray;
} PB3LuckyDrawBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "excludePlayerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckyDrawBroadcast_FieldNumber_ExcludePlayerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckyDrawBroadcast__storage_, excludePlayerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawBroadcast class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawCount

@implementation PB3LuckyDrawCount

@dynamic participatorCount;
@dynamic endTime;

typedef struct PB3LuckyDrawCount__storage_ {
  uint32_t _has_storage_[1];
  int32_t participatorCount;
  int64_t endTime;
} PB3LuckyDrawCount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "participatorCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckyDrawCount_FieldNumber_ParticipatorCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckyDrawCount__storage_, participatorCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckyDrawCount_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LuckyDrawCount__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawCount class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawCount__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawCancelled

@implementation PB3LuckyDrawCancelled


typedef struct PB3LuckyDrawCancelled__storage_ {
  uint32_t _has_storage_[1];
} PB3LuckyDrawCancelled__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawCancelled class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LuckyDrawCancelled__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawParticipator

@implementation PB3LuckyDrawParticipator

@dynamic playersArray, playersArray_Count;
@dynamic ownerId;

typedef struct PB3LuckyDrawParticipator__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *playersArray;
  int64_t ownerId;
} PB3LuckyDrawParticipator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3LuckyDrawParticipator_FieldNumber_PlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckyDrawParticipator__storage_, playersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckyDrawParticipator_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckyDrawParticipator__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawParticipator class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawParticipator__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawResult

@implementation PB3LuckyDrawResult

@dynamic playersArray, playersArray_Count;
@dynamic endTime;

typedef struct PB3LuckyDrawResult__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *playersArray;
  int64_t endTime;
} PB3LuckyDrawResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3LuckyDrawResult_FieldNumber_PlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckyDrawResult__storage_, playersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LuckyDrawResult_FieldNumber_EndTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LuckyDrawResult__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawResult class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LuckyDrawWinner

@implementation PB3LuckyDrawWinner

@dynamic winnersArray, winnersArray_Count;

typedef struct PB3LuckyDrawWinner__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *winnersArray;
} PB3LuckyDrawWinner__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "winnersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3LuckyDrawWinner_FieldNumber_WinnersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LuckyDrawWinner__storage_, winnersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LuckyDrawWinner class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LuckyDrawWinner__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSwitchVoiceSdk

@implementation PB3RoomSwitchVoiceSdk

@dynamic sdkType;

typedef struct PB3RoomSwitchVoiceSdk__storage_ {
  uint32_t _has_storage_[1];
  PB3VoiceSdkType sdkType;
} PB3RoomSwitchVoiceSdk__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sdkType",
        .dataTypeSpecific.enumDescFunc = PB3VoiceSdkType_EnumDescriptor,
        .number = PB3RoomSwitchVoiceSdk_FieldNumber_SdkType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomSwitchVoiceSdk__storage_, sdkType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSwitchVoiceSdk class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomSwitchVoiceSdk__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomSwitchVoiceSdk_SdkType_RawValue(PB3RoomSwitchVoiceSdk *message) {
  GPBDescriptor *descriptor = [PB3RoomSwitchVoiceSdk descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomSwitchVoiceSdk_FieldNumber_SdkType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomSwitchVoiceSdk_SdkType_RawValue(PB3RoomSwitchVoiceSdk *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomSwitchVoiceSdk descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomSwitchVoiceSdk_FieldNumber_SdkType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChangeChairReq

@implementation PB3ChangeChairReq


typedef struct PB3ChangeChairReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ChangeChairReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeChairReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChangeChairReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeChairRes

@implementation PB3ChangeChairRes


typedef struct PB3ChangeChairRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChangeChairRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeChairRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChangeChairRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AcceptSendBillReq

@implementation PB3AcceptSendBillReq

@dynamic optType;

typedef struct PB3AcceptSendBillReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomOptType optType;
} PB3AcceptSendBillReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3RoomOptType_EnumDescriptor,
        .number = PB3AcceptSendBillReq_FieldNumber_OptType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AcceptSendBillReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AcceptSendBillReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AcceptSendBillReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AcceptSendBillReq_OptType_RawValue(PB3AcceptSendBillReq *message) {
  GPBDescriptor *descriptor = [PB3AcceptSendBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AcceptSendBillReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AcceptSendBillReq_OptType_RawValue(PB3AcceptSendBillReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AcceptSendBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AcceptSendBillReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AcceptSendBillRes

@implementation PB3AcceptSendBillRes

@dynamic tip;

typedef struct PB3AcceptSendBillRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *tip;
} PB3AcceptSendBillRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tip",
        .dataTypeSpecific.className = NULL,
        .number = PB3AcceptSendBillRes_FieldNumber_Tip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AcceptSendBillRes__storage_, tip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AcceptSendBillRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AcceptSendBillRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetPresenterReq

@implementation PB3SetPresenterReq

@dynamic playerId;
@dynamic opt;

typedef struct PB3SetPresenterReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SetPresenterOpt opt;
  int64_t playerId;
} PB3SetPresenterReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetPresenterReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetPresenterReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3SetPresenterOpt_EnumDescriptor,
        .number = PB3SetPresenterReq_FieldNumber_Opt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetPresenterReq__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetPresenterReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetPresenterReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SetPresenterReq_Opt_RawValue(PB3SetPresenterReq *message) {
  GPBDescriptor *descriptor = [PB3SetPresenterReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetPresenterReq_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SetPresenterReq_Opt_RawValue(PB3SetPresenterReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SetPresenterReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SetPresenterReq_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SetPresenterRes

@implementation PB3SetPresenterRes


typedef struct PB3SetPresenterRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetPresenterRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetPresenterRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetPresenterRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PresenterWelcomeInfoReq

@implementation PB3PresenterWelcomeInfoReq


typedef struct PB3PresenterWelcomeInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PresenterWelcomeInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PresenterWelcomeInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PresenterWelcomeInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PresenterWelcomeInfoRes

@implementation PB3PresenterWelcomeInfoRes

@dynamic male;
@dynamic female;
@dynamic welcomeText;
@dynamic welcomeFunction;
@dynamic wealthLevel;
@dynamic intervalStr;
@dynamic interval;
@dynamic autoWelcome;

typedef struct PB3PresenterWelcomeInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealthLevel;
  int32_t interval;
  NSString *male;
  NSString *female;
  NSString *welcomeText;
  NSString *welcomeFunction;
  NSString *intervalStr;
} PB3PresenterWelcomeInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "male",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_Male,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PresenterWelcomeInfoRes__storage_, male),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "female",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_Female,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PresenterWelcomeInfoRes__storage_, female),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "welcomeText",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_WelcomeText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PresenterWelcomeInfoRes__storage_, welcomeText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "welcomeFunction",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_WelcomeFunction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PresenterWelcomeInfoRes__storage_, welcomeFunction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_WealthLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PresenterWelcomeInfoRes__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intervalStr",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_IntervalStr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PresenterWelcomeInfoRes__storage_, intervalStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "interval",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_Interval,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PresenterWelcomeInfoRes__storage_, interval),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "autoWelcome",
        .dataTypeSpecific.className = NULL,
        .number = PB3PresenterWelcomeInfoRes_FieldNumber_AutoWelcome,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PresenterWelcomeInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PresenterWelcomeInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetPresenterWelcomeInfoReq

@implementation PB3SetPresenterWelcomeInfoReq

@dynamic male;
@dynamic female;
@dynamic welcomeText;
@dynamic autoWelcome;

typedef struct PB3SetPresenterWelcomeInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *male;
  NSString *female;
  NSString *welcomeText;
} PB3SetPresenterWelcomeInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "male",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetPresenterWelcomeInfoReq_FieldNumber_Male,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetPresenterWelcomeInfoReq__storage_, male),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "female",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetPresenterWelcomeInfoReq_FieldNumber_Female,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetPresenterWelcomeInfoReq__storage_, female),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "welcomeText",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetPresenterWelcomeInfoReq_FieldNumber_WelcomeText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SetPresenterWelcomeInfoReq__storage_, welcomeText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "autoWelcome",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetPresenterWelcomeInfoReq_FieldNumber_AutoWelcome,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetPresenterWelcomeInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetPresenterWelcomeInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetPresenterWelcomeInfoRes

@implementation PB3SetPresenterWelcomeInfoRes


typedef struct PB3SetPresenterWelcomeInfoRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetPresenterWelcomeInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetPresenterWelcomeInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetPresenterWelcomeInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastChairCharm

@implementation PB3BroadcastChairCharm

@dynamic id_p;
@dynamic playerId;
@dynamic chairCharm;

typedef struct PB3BroadcastChairCharm__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t chairCharm;
  int64_t playerId;
} PB3BroadcastChairCharm__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairCharm_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastChairCharm__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairCharm_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastChairCharm__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastChairCharm_FieldNumber_ChairCharm,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastChairCharm__storage_, chairCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastChairCharm class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastChairCharm__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearChairCharmReq

@implementation PB3ClearChairCharmReq

@dynamic chairId;
@dynamic playerId;

typedef struct PB3ClearChairCharmReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  int64_t playerId;
} PB3ClearChairCharmReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClearChairCharmReq_FieldNumber_ChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClearChairCharmReq__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClearChairCharmReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClearChairCharmReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearChairCharmReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClearChairCharmReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClearChairCharmRes

@implementation PB3ClearChairCharmRes


typedef struct PB3ClearChairCharmRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearChairCharmRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearChairCharmRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearChairCharmRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewestSendChatReq

@implementation PB3NewestSendChatReq

@dynamic channel;

typedef struct PB3NewestSendChatReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelType channel;
} PB3NewestSendChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3NewestSendChatReq_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewestSendChatReq__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewestSendChatReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewestSendChatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3NewestSendChatReq_Channel_RawValue(PB3NewestSendChatReq *message) {
  GPBDescriptor *descriptor = [PB3NewestSendChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewestSendChatReq_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3NewestSendChatReq_Channel_RawValue(PB3NewestSendChatReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3NewestSendChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewestSendChatReq_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3NewestSendChatRes

@implementation PB3NewestSendChatRes

@dynamic chatsArray, chatsArray_Count;

typedef struct PB3NewestSendChatRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatsArray;
} PB3NewestSendChatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastChat),
        .number = PB3NewestSendChatRes_FieldNumber_ChatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewestSendChatRes__storage_, chatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewestSendChatRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewestSendChatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewestAllChannelChat

@implementation PB3NewestAllChannelChat

@dynamic type;
@dynamic hasChat, chat;
@dynamic hasGlobal, global;

typedef struct PB3NewestAllChannelChat__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelType type;
  PB3BroadcastChat *chat;
  PB3BroadcastMakeFriend *global;
} PB3NewestAllChannelChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3NewestAllChannelChat_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewestAllChannelChat__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chat",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastChat),
        .number = PB3NewestAllChannelChat_FieldNumber_Chat,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewestAllChannelChat__storage_, chat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "global",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastMakeFriend),
        .number = PB3NewestAllChannelChat_FieldNumber_Global,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewestAllChannelChat__storage_, global),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewestAllChannelChat class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewestAllChannelChat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3NewestAllChannelChat_Type_RawValue(PB3NewestAllChannelChat *message) {
  GPBDescriptor *descriptor = [PB3NewestAllChannelChat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewestAllChannelChat_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3NewestAllChannelChat_Type_RawValue(PB3NewestAllChannelChat *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3NewestAllChannelChat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NewestAllChannelChat_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3NewestAllChatReq

@implementation PB3NewestAllChatReq


typedef struct PB3NewestAllChatReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NewestAllChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewestAllChatReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NewestAllChatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewestAllChatRes

@implementation PB3NewestAllChatRes

@dynamic chatsArray, chatsArray_Count;

typedef struct PB3NewestAllChatRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatsArray;
} PB3NewestAllChatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewestAllChannelChat),
        .number = PB3NewestAllChatRes_FieldNumber_ChatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewestAllChatRes__storage_, chatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewestAllChatRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewestAllChatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AllChatCfg

@implementation PB3AllChatCfg

@dynamic type;
@dynamic name;
@dynamic isShow;
@dynamic isDefault;
@dynamic isShowHeadline;
@dynamic applicationsArray, applicationsArray_Count;

typedef struct PB3AllChatCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelType type;
  NSString *name;
  NSMutableArray *applicationsArray;
} PB3AllChatCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3AllChatCfg_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AllChatCfg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3AllChatCfg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AllChatCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3AllChatCfg_FieldNumber_IsShow,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isDefault",
        .dataTypeSpecific.className = NULL,
        .number = PB3AllChatCfg_FieldNumber_IsDefault,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShowHeadline",
        .dataTypeSpecific.className = NULL,
        .number = PB3AllChatCfg_FieldNumber_IsShowHeadline,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applicationsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3AllChatCfg_FieldNumber_ApplicationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AllChatCfg__storage_, applicationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AllChatCfg class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AllChatCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AllChatCfg_Type_RawValue(PB3AllChatCfg *message) {
  GPBDescriptor *descriptor = [PB3AllChatCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AllChatCfg_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AllChatCfg_Type_RawValue(PB3AllChatCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AllChatCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AllChatCfg_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReceiveChair

@implementation PB3ReceiveChair

@dynamic chairId;
@dynamic image;
@dynamic chairName;
@dynamic sex;
@dynamic flags;
@dynamic chairSign;

typedef struct PB3ReceiveChair__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  NSString *image;
  NSString *chairName;
  NSString *chairSign;
  int64_t chairId;
  int64_t flags;
} PB3ReceiveChair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChair_FieldNumber_ChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveChair__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChair_FieldNumber_Image,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveChair__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chairName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChair_FieldNumber_ChairName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReceiveChair__storage_, chairName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChair_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ReceiveChair__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChair_FieldNumber_Flags,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ReceiveChair__storage_, flags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chairSign",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChair_FieldNumber_ChairSign,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ReceiveChair__storage_, chairSign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveChair class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveChair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveWindow

@implementation PB3ReceiveWindow

@dynamic roomId;
@dynamic hasChair, chair;
@dynamic receiveContent;
@dynamic roomType;
@dynamic style;
@dynamic data_p;

typedef struct PB3ReceiveWindow__storage_ {
  uint32_t _has_storage_[1];
  PB3ReceiveRoomType roomType;
  PB3ReceiveWindowStyle style;
  PB3ReceiveChair *chair;
  NSString *receiveContent;
  NSData *data_p;
  int64_t roomId;
} PB3ReceiveWindow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindow_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveWindow__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "chair",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ReceiveChair),
        .number = PB3ReceiveWindow_FieldNumber_Chair,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveWindow__storage_, chair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiveContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindow_FieldNumber_ReceiveContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReceiveWindow__storage_, receiveContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomType",
        .dataTypeSpecific.enumDescFunc = PB3ReceiveRoomType_EnumDescriptor,
        .number = PB3ReceiveWindow_FieldNumber_RoomType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ReceiveWindow__storage_, roomType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "style",
        .dataTypeSpecific.enumDescFunc = PB3ReceiveWindowStyle_EnumDescriptor,
        .number = PB3ReceiveWindow_FieldNumber_Style,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ReceiveWindow__storage_, style),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindow_FieldNumber_Data_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ReceiveWindow__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveWindow class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveWindow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReceiveWindow_RoomType_RawValue(PB3ReceiveWindow *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindow_FieldNumber_RoomType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindow_RoomType_RawValue(PB3ReceiveWindow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindow_FieldNumber_RoomType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReceiveWindow_Style_RawValue(PB3ReceiveWindow *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindow_FieldNumber_Style];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindow_Style_RawValue(PB3ReceiveWindow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindow_FieldNumber_Style];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EnterRoomByReceiveWindow

@implementation PB3EnterRoomByReceiveWindow

@dynamic playerId;
@dynamic nickname;
@dynamic sex;
@dynamic enterRoomMsg;

typedef struct PB3EnterRoomByReceiveWindow__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *nickname;
  NSString *enterRoomMsg;
  int64_t playerId;
} PB3EnterRoomByReceiveWindow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomByReceiveWindow_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EnterRoomByReceiveWindow__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomByReceiveWindow_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EnterRoomByReceiveWindow__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3EnterRoomByReceiveWindow_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EnterRoomByReceiveWindow__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "enterRoomMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomByReceiveWindow_FieldNumber_EnterRoomMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EnterRoomByReceiveWindow__storage_, enterRoomMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EnterRoomByReceiveWindow class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EnterRoomByReceiveWindow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3EnterRoomByReceiveWindow_Sex_RawValue(PB3EnterRoomByReceiveWindow *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomByReceiveWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomByReceiveWindow_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomByReceiveWindow_Sex_RawValue(PB3EnterRoomByReceiveWindow *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomByReceiveWindow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomByReceiveWindow_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CancelReceiveWindowReq

@implementation PB3CancelReceiveWindowReq

@dynamic hasWindowData, windowData;

typedef struct PB3CancelReceiveWindowReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ReceiveWindow *windowData;
} PB3CancelReceiveWindowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "windowData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ReceiveWindow),
        .number = PB3CancelReceiveWindowReq_FieldNumber_WindowData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CancelReceiveWindowReq__storage_, windowData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelReceiveWindowReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CancelReceiveWindowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CancelReceiveWindowRes

@implementation PB3CancelReceiveWindowRes


typedef struct PB3CancelReceiveWindowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CancelReceiveWindowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelReceiveWindowRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CancelReceiveWindowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveWindowOpt

@implementation PB3ReceiveWindowOpt

@dynamic playerId;
@dynamic roomId;
@dynamic name;
@dynamic sex;
@dynamic icon;
@dynamic recommendWord;
@dynamic voiceURL;
@dynamic voiceTime;
@dynamic voiceTagText;
@dynamic URL;
@dynamic btn;
@dynamic algorithmId;
@dynamic style;
@dynamic position;
@dynamic peopleNum;
@dynamic pattern;
@dynamic roomType;
@dynamic stayTime;
@dynamic isClick;
@dynamic closeType;
@dynamic isPlayVoice;
@dynamic discardType;
@dynamic homeStayTime;
@dynamic abGroupId;
@dynamic playerSex;
@dynamic chairPlayer, chairPlayer_Count;

typedef struct PB3ReceiveWindowOpt__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t voiceTime;
  PB3ReceiveWindowStyle style;
  PB3ReceiveWindowPosition position;
  int32_t peopleNum;
  PB3NewRoomPattern pattern;
  int32_t roomType;
  int32_t stayTime;
  PB3CancelReceiveWindowType closeType;
  PB3DiscardReceiveWindowType discardType;
  int32_t homeStayTime;
  int32_t playerSex;
  NSString *name;
  NSString *icon;
  NSString *recommendWord;
  NSString *voiceURL;
  NSString *voiceTagText;
  NSString *URL;
  NSString *btn;
  NSString *algorithmId;
  NSString *abGroupId;
  GPBInt32Int64Dictionary *chairPlayer;
  int64_t playerId;
  int64_t roomId;
} PB3ReceiveWindowOpt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3ReceiveWindowOpt_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recommendWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_RecommendWord,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, recommendWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_VoiceURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, voiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_VoiceTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, voiceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceTagText",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_VoiceTagText,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, voiceTagText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_URL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btn",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_Btn,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, btn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "algorithmId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_AlgorithmId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, algorithmId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "style",
        .dataTypeSpecific.enumDescFunc = PB3ReceiveWindowStyle_EnumDescriptor,
        .number = PB3ReceiveWindowOpt_FieldNumber_Style,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, style),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "position",
        .dataTypeSpecific.enumDescFunc = PB3ReceiveWindowPosition_EnumDescriptor,
        .number = PB3ReceiveWindowOpt_FieldNumber_Position,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, position),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "peopleNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_PeopleNum,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, peopleNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3ReceiveWindowOpt_FieldNumber_Pattern,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_RoomType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, roomType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_StayTime,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, stayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isClick",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_IsClick,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "closeType",
        .dataTypeSpecific.enumDescFunc = PB3CancelReceiveWindowType_EnumDescriptor,
        .number = PB3ReceiveWindowOpt_FieldNumber_CloseType,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, closeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isPlayVoice",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_IsPlayVoice,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "discardType",
        .dataTypeSpecific.enumDescFunc = PB3DiscardReceiveWindowType_EnumDescriptor,
        .number = PB3ReceiveWindowOpt_FieldNumber_DiscardType,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, discardType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "homeStayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_HomeStayTime,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, homeStayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "abGroupId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_AbGroupId,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, abGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerSex",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_PlayerSex,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, playerSex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chairPlayer",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowOpt_FieldNumber_ChairPlayer,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowOpt__storage_, chairPlayer),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveWindowOpt class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveWindowOpt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\007\005\241!!\000\n!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReceiveWindowOpt_Sex_RawValue(PB3ReceiveWindowOpt *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindowOpt_Sex_RawValue(PB3ReceiveWindowOpt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReceiveWindowOpt_Style_RawValue(PB3ReceiveWindowOpt *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Style];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindowOpt_Style_RawValue(PB3ReceiveWindowOpt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Style];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReceiveWindowOpt_Position_RawValue(PB3ReceiveWindowOpt *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Position];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindowOpt_Position_RawValue(PB3ReceiveWindowOpt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Position];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReceiveWindowOpt_Pattern_RawValue(PB3ReceiveWindowOpt *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindowOpt_Pattern_RawValue(PB3ReceiveWindowOpt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReceiveWindowOpt_CloseType_RawValue(PB3ReceiveWindowOpt *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_CloseType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindowOpt_CloseType_RawValue(PB3ReceiveWindowOpt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_CloseType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReceiveWindowOpt_DiscardType_RawValue(PB3ReceiveWindowOpt *message) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_DiscardType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveWindowOpt_DiscardType_RawValue(PB3ReceiveWindowOpt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveWindowOpt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveWindowOpt_FieldNumber_DiscardType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OpenWindowReq

@implementation PB3OpenWindowReq

@dynamic winType;

typedef struct PB3OpenWindowReq__storage_ {
  uint32_t _has_storage_[1];
  PB3WinType winType;
} PB3OpenWindowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "winType",
        .dataTypeSpecific.enumDescFunc = PB3WinType_EnumDescriptor,
        .number = PB3OpenWindowReq_FieldNumber_WinType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OpenWindowReq__storage_, winType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenWindowReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OpenWindowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OpenWindowReq_WinType_RawValue(PB3OpenWindowReq *message) {
  GPBDescriptor *descriptor = [PB3OpenWindowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OpenWindowReq_FieldNumber_WinType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OpenWindowReq_WinType_RawValue(PB3OpenWindowReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OpenWindowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OpenWindowReq_FieldNumber_WinType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OpenWindowRes

@implementation PB3OpenWindowRes


typedef struct PB3OpenWindowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3OpenWindowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenWindowRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OpenWindowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSitLvLimit

@implementation PB3RoomSitLvLimit

@dynamic errorCode;
@dynamic errorMsg;

typedef struct PB3RoomSitLvLimit__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomErr errorCode;
  NSString *errorMsg;
} PB3RoomSitLvLimit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.enumDescFunc = PB3RoomErr_EnumDescriptor,
        .number = PB3RoomSitLvLimit_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomSitLvLimit__storage_, errorCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "errorMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomSitLvLimit_FieldNumber_ErrorMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomSitLvLimit__storage_, errorMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSitLvLimit class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomSitLvLimit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomSitLvLimit_ErrorCode_RawValue(PB3RoomSitLvLimit *message) {
  GPBDescriptor *descriptor = [PB3RoomSitLvLimit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomSitLvLimit_FieldNumber_ErrorCode];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomSitLvLimit_ErrorCode_RawValue(PB3RoomSitLvLimit *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomSitLvLimit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomSitLvLimit_FieldNumber_ErrorCode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomOnOffStatus

@implementation PB3RoomOnOffStatus

@dynamic type;
@dynamic status;

typedef struct PB3RoomOnOffStatus__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomOnOffType type;
  int32_t status;
} PB3RoomOnOffStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RoomOnOffType_EnumDescriptor,
        .number = PB3RoomOnOffStatus_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomOnOffStatus__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomOnOffStatus_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomOnOffStatus__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomOnOffStatus class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomOnOffStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomOnOffStatus_Type_RawValue(PB3RoomOnOffStatus *message) {
  GPBDescriptor *descriptor = [PB3RoomOnOffStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomOnOffStatus_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomOnOffStatus_Type_RawValue(PB3RoomOnOffStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomOnOffStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomOnOffStatus_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FirstChargeReq

@implementation PB3FirstChargeReq


typedef struct PB3FirstChargeReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FirstChargeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirstChargeReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FirstChargeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FirstChargeRes

@implementation PB3FirstChargeRes

@dynamic giftTipTime;
@dynamic giftTip;
@dynamic windowStay;
@dynamic giftJump;
@dynamic windowJump;
@dynamic isCharge;
@dynamic giftIcon;

typedef struct PB3FirstChargeRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftTipTime;
  int32_t windowStay;
  int32_t isCharge;
  int32_t giftIcon;
  NSString *giftTip;
  NSString *giftJump;
  NSString *windowJump;
} PB3FirstChargeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftTipTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstChargeRes_FieldNumber_GiftTipTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FirstChargeRes__storage_, giftTipTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftTip",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstChargeRes_FieldNumber_GiftTip,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FirstChargeRes__storage_, giftTip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "windowStay",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstChargeRes_FieldNumber_WindowStay,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FirstChargeRes__storage_, windowStay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftJump",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstChargeRes_FieldNumber_GiftJump,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FirstChargeRes__storage_, giftJump),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "windowJump",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstChargeRes_FieldNumber_WindowJump,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FirstChargeRes__storage_, windowJump),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isCharge",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstChargeRes_FieldNumber_IsCharge,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3FirstChargeRes__storage_, isCharge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3FirstChargeRes_FieldNumber_GiftIcon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3FirstChargeRes__storage_, giftIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirstChargeRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FirstChargeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FirstChargeWindowReq

@implementation PB3FirstChargeWindowReq


typedef struct PB3FirstChargeWindowReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FirstChargeWindowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirstChargeWindowReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FirstChargeWindowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FirstChargeWindowRes

@implementation PB3FirstChargeWindowRes


typedef struct PB3FirstChargeWindowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FirstChargeWindowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FirstChargeWindowRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FirstChargeWindowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AllDecorateConfReq

@implementation PB3AllDecorateConfReq

@dynamic decorateType;

typedef struct PB3AllDecorateConfReq__storage_ {
  uint32_t _has_storage_[1];
  PB3DecorateType decorateType;
} PB3AllDecorateConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateType",
        .dataTypeSpecific.enumDescFunc = PB3DecorateType_EnumDescriptor,
        .number = PB3AllDecorateConfReq_FieldNumber_DecorateType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AllDecorateConfReq__storage_, decorateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AllDecorateConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AllDecorateConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AllDecorateConfReq_DecorateType_RawValue(PB3AllDecorateConfReq *message) {
  GPBDescriptor *descriptor = [PB3AllDecorateConfReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AllDecorateConfReq_FieldNumber_DecorateType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AllDecorateConfReq_DecorateType_RawValue(PB3AllDecorateConfReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AllDecorateConfReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AllDecorateConfReq_FieldNumber_DecorateType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AllDecorateConfRes

@implementation PB3AllDecorateConfRes

@dynamic itemArray, itemArray_Count;

typedef struct PB3AllDecorateConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemArray;
} PB3AllDecorateConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomAllDecorateItem),
        .number = PB3AllDecorateConfRes_FieldNumber_ItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AllDecorateConfRes__storage_, itemArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AllDecorateConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AllDecorateConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UsingDecorateList

@implementation PB3UsingDecorateList

@dynamic decorateIdArray, decorateIdArray_Count;

typedef struct PB3UsingDecorateList__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *decorateIdArray;
} PB3UsingDecorateList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3UsingDecorateList_FieldNumber_DecorateIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3UsingDecorateList__storage_, decorateIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UsingDecorateList class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UsingDecorateList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyDecorateReq

@implementation PB3BuyDecorateReq

@dynamic shopId;
@dynamic decorateId;

typedef struct PB3BuyDecorateReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t shopId;
  int64_t decorateId;
} PB3BuyDecorateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shopId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyDecorateReq_FieldNumber_ShopId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyDecorateReq__storage_, shopId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BuyDecorateReq_FieldNumber_DecorateId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BuyDecorateReq__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyDecorateReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyDecorateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyDecorateRes

@implementation PB3BuyDecorateRes


typedef struct PB3BuyDecorateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BuyDecorateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyDecorateRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BuyDecorateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UseDecorateReq

@implementation PB3UseDecorateReq

@dynamic decorateId;

typedef struct PB3UseDecorateReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t decorateId;
} PB3UseDecorateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UseDecorateReq_FieldNumber_DecorateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UseDecorateReq__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UseDecorateReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UseDecorateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UseDecorateRes

@implementation PB3UseDecorateRes


typedef struct PB3UseDecorateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UseDecorateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UseDecorateRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UseDecorateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastUseDecorate

@implementation PB3BroadcastUseDecorate

@dynamic roomBgURL;
@dynamic pcRoomBgURL;
@dynamic decorateId;

typedef struct PB3BroadcastUseDecorate__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomBgURL;
  NSString *pcRoomBgURL;
  int64_t decorateId;
} PB3BroadcastUseDecorate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastUseDecorate_FieldNumber_RoomBgURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastUseDecorate__storage_, roomBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcRoomBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastUseDecorate_FieldNumber_PcRoomBgURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastUseDecorate__storage_, pcRoomBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastUseDecorate_FieldNumber_DecorateId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastUseDecorate__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastUseDecorate class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastUseDecorate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\004\242\241!!\000\002B\244\242\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastBuyDecorate

@implementation PB3BroadcastBuyDecorate

@dynamic decorateId;

typedef struct PB3BroadcastBuyDecorate__storage_ {
  uint32_t _has_storage_[1];
  int64_t decorateId;
} PB3BroadcastBuyDecorate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBuyDecorate_FieldNumber_DecorateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastBuyDecorate__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastBuyDecorate class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastBuyDecorate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BaseDecorateConfItem

@implementation PB3BaseDecorateConfItem

@dynamic decorateId;
@dynamic decorateType;
@dynamic name;
@dynamic bgURL;
@dynamic smallBgURL;
@dynamic pcURL;
@dynamic smallPcURL;
@dynamic describe;
@dynamic shelterURL;
@dynamic pcShelterURL;
@dynamic stretchableURL;
@dynamic bgVideoURL;
@dynamic bgVideoPcURL;

typedef struct PB3BaseDecorateConfItem__storage_ {
  uint32_t _has_storage_[1];
  PB3DecorateType decorateType;
  NSString *name;
  NSString *bgURL;
  NSString *smallBgURL;
  NSString *pcURL;
  NSString *smallPcURL;
  NSString *describe;
  NSString *shelterURL;
  NSString *pcShelterURL;
  NSString *stretchableURL;
  NSString *bgVideoURL;
  NSString *bgVideoPcURL;
  int64_t decorateId;
} PB3BaseDecorateConfItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_DecorateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "decorateType",
        .dataTypeSpecific.enumDescFunc = PB3DecorateType_EnumDescriptor,
        .number = PB3BaseDecorateConfItem_FieldNumber_DecorateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, decorateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_BgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, bgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_SmallBgURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, smallBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_PcURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, pcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallPcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_SmallPcURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, smallPcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "describe",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_Describe,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, describe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_ShelterURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, shelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcShelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_PcShelterURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, pcShelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stretchableURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_StretchableURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, stretchableURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgVideoURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_BgVideoURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, bgVideoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgVideoPcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfItem_FieldNumber_BgVideoPcURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfItem__storage_, bgVideoPcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BaseDecorateConfItem class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BaseDecorateConfItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\004\002\241!!\000\005\005\242\241!!\000\006\002\241!!\000\007\005\242\241!!\000\t\007\241!!\000\n\002\247\241!!\000"
        "\013\013\241!!\000\014\002\245\241!!\000\r\002\245\242\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BaseDecorateConfItem_DecorateType_RawValue(PB3BaseDecorateConfItem *message) {
  GPBDescriptor *descriptor = [PB3BaseDecorateConfItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BaseDecorateConfItem_FieldNumber_DecorateType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BaseDecorateConfItem_DecorateType_RawValue(PB3BaseDecorateConfItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BaseDecorateConfItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BaseDecorateConfItem_FieldNumber_DecorateType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BaseDecorateConfReq

@implementation PB3BaseDecorateConfReq

@dynamic md5;

typedef struct PB3BaseDecorateConfReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *md5;
} PB3BaseDecorateConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfReq_FieldNumber_Md5,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfReq__storage_, md5),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BaseDecorateConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BaseDecorateConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BaseDecorateConfRes

@implementation PB3BaseDecorateConfRes

@dynamic status;
@dynamic md5;
@dynamic itemArray, itemArray_Count;

typedef struct PB3BaseDecorateConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *md5;
  NSMutableArray *itemArray;
} PB3BaseDecorateConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfRes__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfRes_FieldNumber_Md5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfRes__storage_, md5),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BaseDecorateConfItem),
        .number = PB3BaseDecorateConfRes_FieldNumber_ItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfRes__storage_, itemArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BaseDecorateConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BaseDecorateConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BaseDecorateConfUrlReq

@implementation PB3BaseDecorateConfUrlReq


typedef struct PB3BaseDecorateConfUrlReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BaseDecorateConfUrlReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BaseDecorateConfUrlReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BaseDecorateConfUrlReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BaseDecorateConfUrlRes

@implementation PB3BaseDecorateConfUrlRes

@dynamic URL;

typedef struct PB3BaseDecorateConfUrlRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} PB3BaseDecorateConfUrlRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BaseDecorateConfUrlRes_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BaseDecorateConfUrlRes__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BaseDecorateConfUrlRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BaseDecorateConfUrlRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayersRoomsReq

@implementation PB3PlayersRoomsReq

@dynamic flagRoomName;
@dynamic playerIdsArray, playerIdsArray_Count;

typedef struct PB3PlayersRoomsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t flagRoomName;
  GPBInt64Array *playerIdsArray;
} PB3PlayersRoomsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flagRoomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayersRoomsReq_FieldNumber_FlagRoomName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayersRoomsReq__storage_, flagRoomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayersRoomsReq_FieldNumber_PlayerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayersRoomsReq__storage_, playerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayersRoomsReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayersRoomsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayersRoomsRes

@implementation PB3PlayersRoomsRes

@dynamic roomMap, roomMap_Count;

typedef struct PB3PlayersRoomsRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64ObjectDictionary *roomMap;
} PB3PlayersRoomsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomMap",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomIdName),
        .number = PB3PlayersRoomsRes_FieldNumber_RoomMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayersRoomsRes__storage_, roomMap),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayersRoomsRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayersRoomsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomIdName

@implementation PB3RoomIdName

@dynamic roomId;
@dynamic roomName;

typedef struct PB3RoomIdName__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomName;
  int64_t roomId;
} PB3RoomIdName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomIdName_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomIdName__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomIdName_FieldNumber_RoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomIdName__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomIdName class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomIdName__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelBroadcastFriendRecordReq

@implementation PB3DelBroadcastFriendRecordReq

@dynamic id_p;
@dynamic content;
@dynamic playerId;
@dynamic infoType;

typedef struct PB3DelBroadcastFriendRecordReq__storage_ {
  uint32_t _has_storage_[1];
  PB3BF_RECORD_KIND infoType;
  NSString *id_p;
  NSString *content;
  int64_t playerId;
} PB3DelBroadcastFriendRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelBroadcastFriendRecordReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DelBroadcastFriendRecordReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelBroadcastFriendRecordReq_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DelBroadcastFriendRecordReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelBroadcastFriendRecordReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DelBroadcastFriendRecordReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "infoType",
        .dataTypeSpecific.enumDescFunc = PB3BF_RECORD_KIND_EnumDescriptor,
        .number = PB3DelBroadcastFriendRecordReq_FieldNumber_InfoType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DelBroadcastFriendRecordReq__storage_, infoType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelBroadcastFriendRecordReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelBroadcastFriendRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DelBroadcastFriendRecordReq_InfoType_RawValue(PB3DelBroadcastFriendRecordReq *message) {
  GPBDescriptor *descriptor = [PB3DelBroadcastFriendRecordReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DelBroadcastFriendRecordReq_FieldNumber_InfoType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DelBroadcastFriendRecordReq_InfoType_RawValue(PB3DelBroadcastFriendRecordReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DelBroadcastFriendRecordReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DelBroadcastFriendRecordReq_FieldNumber_InfoType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DelBroadcastFriendRecordRes

@implementation PB3DelBroadcastFriendRecordRes


typedef struct PB3DelBroadcastFriendRecordRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DelBroadcastFriendRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelBroadcastFriendRecordRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DelBroadcastFriendRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NextRewardRoomReq

@implementation PB3NextRewardRoomReq


typedef struct PB3NextRewardRoomReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NextRewardRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NextRewardRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NextRewardRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NextRewardRoomRes

@implementation PB3NextRewardRoomRes

@dynamic roomId;

typedef struct PB3NextRewardRoomRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3NextRewardRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NextRewardRoomRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NextRewardRoomRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NextRewardRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NextRewardRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSkillReq

@implementation PB3RoomSkillReq


typedef struct PB3RoomSkillReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomSkillReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSkillReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomSkillReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSkillRes

@implementation PB3RoomSkillRes

@dynamic skillArray, skillArray_Count;

typedef struct PB3RoomSkillRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *skillArray;
} PB3RoomSkillRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerRoomSkill),
        .number = PB3RoomSkillRes_FieldNumber_SkillArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomSkillRes__storage_, skillArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSkillRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomSkillRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerRoomSkill

@implementation PB3PlayerRoomSkill

@dynamic skillId;
@dynamic skillType;
@dynamic skillIcon;
@dynamic hasTimes;
@dynamic skillName;
@dynamic skillDes;
@dynamic totalTimes;

typedef struct PB3PlayerRoomSkill__storage_ {
  uint32_t _has_storage_[1];
  PB3ROOM_SKILL_TYPE skillType;
  int32_t hasTimes;
  int32_t totalTimes;
  NSString *skillIcon;
  NSString *skillName;
  NSString *skillDes;
  int64_t skillId;
} PB3PlayerRoomSkill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRoomSkill_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerRoomSkill__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillType",
        .dataTypeSpecific.enumDescFunc = PB3ROOM_SKILL_TYPE_EnumDescriptor,
        .number = PB3PlayerRoomSkill_FieldNumber_SkillType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerRoomSkill__storage_, skillType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "skillIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRoomSkill_FieldNumber_SkillIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerRoomSkill__storage_, skillIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRoomSkill_FieldNumber_HasTimes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerRoomSkill__storage_, hasTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRoomSkill_FieldNumber_SkillName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerRoomSkill__storage_, skillName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skillDes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRoomSkill_FieldNumber_SkillDes,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerRoomSkill__storage_, skillDes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRoomSkill_FieldNumber_TotalTimes,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerRoomSkill__storage_, totalTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerRoomSkill class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerRoomSkill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerRoomSkill_SkillType_RawValue(PB3PlayerRoomSkill *message) {
  GPBDescriptor *descriptor = [PB3PlayerRoomSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerRoomSkill_FieldNumber_SkillType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerRoomSkill_SkillType_RawValue(PB3PlayerRoomSkill *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerRoomSkill descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerRoomSkill_FieldNumber_SkillType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UseSkillReq

@implementation PB3UseSkillReq

@dynamic skillId;

typedef struct PB3UseSkillReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t skillId;
} PB3UseSkillReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UseSkillReq_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UseSkillReq__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UseSkillReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UseSkillReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UseSkillRes

@implementation PB3UseSkillRes

@dynamic skillId;
@dynamic skillType;
@dynamic dataType;
@dynamic dataByte;
@dynamic hasPrivilege;
@dynamic minNobilityId;

typedef struct PB3UseSkillRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ROOM_SKILL_TYPE skillType;
  PB3ROOM_SKILL_DATA dataType;
  NSData *dataByte;
  int64_t skillId;
  int64_t minNobilityId;
} PB3UseSkillRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UseSkillRes_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UseSkillRes__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillType",
        .dataTypeSpecific.enumDescFunc = PB3ROOM_SKILL_TYPE_EnumDescriptor,
        .number = PB3UseSkillRes_FieldNumber_SkillType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UseSkillRes__storage_, skillType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = PB3ROOM_SKILL_DATA_EnumDescriptor,
        .number = PB3UseSkillRes_FieldNumber_DataType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UseSkillRes__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dataByte",
        .dataTypeSpecific.className = NULL,
        .number = PB3UseSkillRes_FieldNumber_DataByte,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UseSkillRes__storage_, dataByte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "hasPrivilege",
        .dataTypeSpecific.className = NULL,
        .number = PB3UseSkillRes_FieldNumber_HasPrivilege,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "minNobilityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UseSkillRes_FieldNumber_MinNobilityId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3UseSkillRes__storage_, minNobilityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UseSkillRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UseSkillRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UseSkillRes_SkillType_RawValue(PB3UseSkillRes *message) {
  GPBDescriptor *descriptor = [PB3UseSkillRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UseSkillRes_FieldNumber_SkillType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UseSkillRes_SkillType_RawValue(PB3UseSkillRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UseSkillRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UseSkillRes_FieldNumber_SkillType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UseSkillRes_DataType_RawValue(PB3UseSkillRes *message) {
  GPBDescriptor *descriptor = [PB3UseSkillRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UseSkillRes_FieldNumber_DataType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UseSkillRes_DataType_RawValue(PB3UseSkillRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UseSkillRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UseSkillRes_FieldNumber_DataType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SkillInfo

@implementation PB3SkillInfo

@dynamic userId;
@dynamic skillId;
@dynamic skillPlayTime;
@dynamic skillType;

typedef struct PB3SkillInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillPlayTime;
  PB3ROOM_SKILL_TYPE skillType;
  int64_t userId;
  int64_t skillId;
} PB3SkillInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillInfo_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillInfo__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillInfo_FieldNumber_SkillId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SkillInfo__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skillPlayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillInfo_FieldNumber_SkillPlayTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SkillInfo__storage_, skillPlayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skillType",
        .dataTypeSpecific.enumDescFunc = PB3ROOM_SKILL_TYPE_EnumDescriptor,
        .number = PB3SkillInfo_FieldNumber_SkillType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SkillInfo__storage_, skillType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SkillInfo_SkillType_RawValue(PB3SkillInfo *message) {
  GPBDescriptor *descriptor = [PB3SkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SkillInfo_FieldNumber_SkillType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SkillInfo_SkillType_RawValue(PB3SkillInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SkillInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SkillInfo_FieldNumber_SkillType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadCastUseSkill

@implementation PB3BroadCastUseSkill

@dynamic hasSkillInfo, skillInfo;

typedef struct PB3BroadCastUseSkill__storage_ {
  uint32_t _has_storage_[1];
  PB3SkillInfo *skillInfo;
} PB3BroadCastUseSkill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SkillInfo),
        .number = PB3BroadCastUseSkill_FieldNumber_SkillInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadCastUseSkill__storage_, skillInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadCastUseSkill class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadCastUseSkill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadCastSkillResult

@implementation PB3BroadCastSkillResult

@dynamic hasSkillInfo, skillInfo;
@dynamic dataType;
@dynamic dataByte;

typedef struct PB3BroadCastSkillResult__storage_ {
  uint32_t _has_storage_[1];
  PB3ROOM_SKILL_DATA dataType;
  PB3SkillInfo *skillInfo;
  NSData *dataByte;
} PB3BroadCastSkillResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SkillInfo),
        .number = PB3BroadCastSkillResult_FieldNumber_SkillInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadCastSkillResult__storage_, skillInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = PB3ROOM_SKILL_DATA_EnumDescriptor,
        .number = PB3BroadCastSkillResult_FieldNumber_DataType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadCastSkillResult__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dataByte",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadCastSkillResult_FieldNumber_DataByte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadCastSkillResult__storage_, dataByte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadCastSkillResult class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadCastSkillResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadCastSkillResult_DataType_RawValue(PB3BroadCastSkillResult *message) {
  GPBDescriptor *descriptor = [PB3BroadCastSkillResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadCastSkillResult_FieldNumber_DataType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadCastSkillResult_DataType_RawValue(PB3BroadCastSkillResult *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadCastSkillResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadCastSkillResult_FieldNumber_DataType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SkillPlayer

@implementation PB3SkillPlayer

@dynamic playerId;
@dynamic chair;
@dynamic icon;
@dynamic name;

typedef struct PB3SkillPlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t chair;
  NSString *icon;
  NSString *name;
  int64_t playerId;
} PB3SkillPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillPlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillPlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chair",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillPlayer_FieldNumber_Chair,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SkillPlayer__storage_, chair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillPlayer_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SkillPlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillPlayer_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SkillPlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillPlayer class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SkillChair

@implementation PB3SkillChair

@dynamic chair;

typedef struct PB3SkillChair__storage_ {
  uint32_t _has_storage_[1];
  int32_t chair;
} PB3SkillChair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chair",
        .dataTypeSpecific.className = NULL,
        .number = PB3SkillChair_FieldNumber_Chair,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SkillChair__storage_, chair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SkillChair class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SkillChair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateAnonymousSitReq

@implementation PB3UpdateAnonymousSitReq

@dynamic flag;

typedef struct PB3UpdateAnonymousSitReq__storage_ {
  uint32_t _has_storage_[1];
} PB3UpdateAnonymousSitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateAnonymousSitReq_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateAnonymousSitReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdateAnonymousSitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateAnonymousSitRes

@implementation PB3UpdateAnonymousSitRes


typedef struct PB3UpdateAnonymousSitRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UpdateAnonymousSitRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateAnonymousSitRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UpdateAnonymousSitRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClanMember

@implementation PB3ClanMember

@dynamic id_p;
@dynamic id2;
@dynamic icon;
@dynamic name;
@dynamic sex;
@dynamic clanId;

typedef struct PB3ClanMember__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *icon;
  NSString *name;
  int64_t id_p;
  int64_t id2;
  int64_t clanId;
} PB3ClanMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMember_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClanMember__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMember_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClanMember__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMember_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ClanMember__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMember_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ClanMember__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3ClanMember_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ClanMember__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "clanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanMember_FieldNumber_ClanId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ClanMember__storage_, clanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClanMember class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClanMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ClanMember_Sex_RawValue(PB3ClanMember *message) {
  GPBDescriptor *descriptor = [PB3ClanMember descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClanMember_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ClanMember_Sex_RawValue(PB3ClanMember *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ClanMember descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClanMember_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomClanMembersOnChairReq

@implementation PB3RoomClanMembersOnChairReq


typedef struct PB3RoomClanMembersOnChairReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomClanMembersOnChairReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomClanMembersOnChairReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomClanMembersOnChairReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomClanMembersOnChairRes

@implementation PB3RoomClanMembersOnChairRes

@dynamic listArray, listArray_Count;
@dynamic clanId;

typedef struct PB3RoomClanMembersOnChairRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  int64_t clanId;
} PB3RoomClanMembersOnChairRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClanMember),
        .number = PB3RoomClanMembersOnChairRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomClanMembersOnChairRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomClanMembersOnChairRes_FieldNumber_ClanId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomClanMembersOnChairRes__storage_, clanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomClanMembersOnChairRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomClanMembersOnChairRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomClanInfoReq

@implementation PB3RoomClanInfoReq


typedef struct PB3RoomClanInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomClanInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomClanInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomClanInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomClanInfoRes

@implementation PB3RoomClanInfoRes

@dynamic roomId;
@dynamic name;

typedef struct PB3RoomClanInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  int64_t roomId;
} PB3RoomClanInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomClanInfoRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomClanInfoRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomClanInfoRes_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomClanInfoRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomClanInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomClanInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PreCheckRoomPatternSetReq

@implementation PB3PreCheckRoomPatternSetReq

@dynamic pattern;

typedef struct PB3PreCheckRoomPatternSetReq__storage_ {
  uint32_t _has_storage_[1];
  PB3NewRoomPattern pattern;
} PB3PreCheckRoomPatternSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3PreCheckRoomPatternSetReq_FieldNumber_Pattern,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PreCheckRoomPatternSetReq__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PreCheckRoomPatternSetReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PreCheckRoomPatternSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PreCheckRoomPatternSetReq_Pattern_RawValue(PB3PreCheckRoomPatternSetReq *message) {
  GPBDescriptor *descriptor = [PB3PreCheckRoomPatternSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PreCheckRoomPatternSetReq_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PreCheckRoomPatternSetReq_Pattern_RawValue(PB3PreCheckRoomPatternSetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PreCheckRoomPatternSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PreCheckRoomPatternSetReq_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PreCheckRoomPatternSetRes

@implementation PB3PreCheckRoomPatternSetRes


typedef struct PB3PreCheckRoomPatternSetRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PreCheckRoomPatternSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PreCheckRoomPatternSetRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PreCheckRoomPatternSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveWindowRoomIdReq

@implementation PB3ReceiveWindowRoomIdReq


typedef struct PB3ReceiveWindowRoomIdReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ReceiveWindowRoomIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveWindowRoomIdReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReceiveWindowRoomIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveWindowRoomIdRes

@implementation PB3ReceiveWindowRoomIdRes

@dynamic roomId;

typedef struct PB3ReceiveWindowRoomIdRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3ReceiveWindowRoomIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveWindowRoomIdRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveWindowRoomIdRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveWindowRoomIdRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveWindowRoomIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ProgramInfoReq

@implementation PB3ProgramInfoReq

@dynamic programType;

typedef struct PB3ProgramInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t programType;
} PB3ProgramInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "programType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoReq_FieldNumber_ProgramType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ProgramInfoReq__storage_, programType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ProgramInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ProgramInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ProgramInfoRes

@implementation PB3ProgramInfoRes

@dynamic roomId;
@dynamic programType;
@dynamic boomItemId;
@dynamic orderItemId;
@dynamic orderDoubleItemId;
@dynamic bombItemId;
@dynamic bombDoubleItemId;
@dynamic bombTaskType;
@dynamic bombTaskNum;
@dynamic targetFee;

typedef struct PB3ProgramInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t programType;
  int32_t boomItemId;
  int32_t orderItemId;
  int32_t orderDoubleItemId;
  int32_t bombItemId;
  int32_t bombDoubleItemId;
  int32_t bombTaskType;
  int32_t bombTaskNum;
  int32_t targetFee;
  int64_t roomId;
} PB3ProgramInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "programType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_ProgramType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, programType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boomItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_BoomItemId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, boomItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_OrderItemId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, orderItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderDoubleItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_OrderDoubleItemId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, orderDoubleItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_BombItemId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, bombItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombDoubleItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_BombDoubleItemId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, bombDoubleItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombTaskType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_BombTaskType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, bombTaskType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_BombTaskNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, bombTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetFee",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramInfoRes_FieldNumber_TargetFee,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ProgramInfoRes__storage_, targetFee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ProgramInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ProgramInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveProgramReq

@implementation PB3SaveProgramReq

@dynamic roomId;
@dynamic programType;
@dynamic boomItemId;
@dynamic orderItemId;
@dynamic orderDoubleItemId;
@dynamic bombItemId;
@dynamic bombDoubleItemId;
@dynamic bombTaskType;
@dynamic bombTaskNum;

typedef struct PB3SaveProgramReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t programType;
  int32_t boomItemId;
  int32_t orderItemId;
  int32_t orderDoubleItemId;
  int32_t bombItemId;
  int32_t bombDoubleItemId;
  int32_t bombTaskType;
  int32_t bombTaskNum;
  int64_t roomId;
} PB3SaveProgramReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "programType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_ProgramType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, programType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boomItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_BoomItemId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, boomItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_OrderItemId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, orderItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderDoubleItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_OrderDoubleItemId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, orderDoubleItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_BombItemId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, bombItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombDoubleItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_BombDoubleItemId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, bombDoubleItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombTaskType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_BombTaskType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, bombTaskType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveProgramReq_FieldNumber_BombTaskNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SaveProgramReq__storage_, bombTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveProgramReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaveProgramReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveProgramRes

@implementation PB3SaveProgramRes


typedef struct PB3SaveProgramRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SaveProgramRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveProgramRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SaveProgramRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ProgramFeeItem

@implementation PB3ProgramFeeItem

@dynamic itemId;
@dynamic name;

typedef struct PB3ProgramFeeItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t itemId;
  NSString *name;
} PB3ProgramFeeItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramFeeItem_FieldNumber_ItemId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ProgramFeeItem__storage_, itemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramFeeItem_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ProgramFeeItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ProgramFeeItem class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ProgramFeeItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ProgramFeeCfg

@implementation PB3ProgramFeeCfg

@dynamic mod;
@dynamic type;
@dynamic itemsArray, itemsArray_Count;

typedef struct PB3ProgramFeeCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t mod;
  int32_t type;
  NSMutableArray *itemsArray;
} PB3ProgramFeeCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mod",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramFeeCfg_FieldNumber_Mod,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ProgramFeeCfg__storage_, mod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ProgramFeeCfg_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ProgramFeeCfg__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ProgramFeeItem),
        .number = PB3ProgramFeeCfg_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ProgramFeeCfg__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ProgramFeeCfg class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ProgramFeeCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ProgramFeeCfgList

@implementation PB3ProgramFeeCfgList

@dynamic cfgListArray, cfgListArray_Count;

typedef struct PB3ProgramFeeCfgList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cfgListArray;
} PB3ProgramFeeCfgList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ProgramFeeCfg),
        .number = PB3ProgramFeeCfgList_FieldNumber_CfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ProgramFeeCfgList__storage_, cfgListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ProgramFeeCfgList class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ProgramFeeCfgList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetShowReq

@implementation PB3SetShowReq

@dynamic targetId;
@dynamic isShow;

typedef struct PB3SetShowReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t targetId;
} PB3SetShowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetShowReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetShowReq__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetShowReq_FieldNumber_IsShow,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetShowReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetShowReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetShowRes

@implementation PB3SetShowRes


typedef struct PB3SetShowRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetShowRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetShowRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetShowRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HallHourBossReq

@implementation PB3HallHourBossReq

@dynamic index;

typedef struct PB3HallHourBossReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3HallHourBossReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3HallHourBossReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3HallHourBossReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HallHourBossReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HallHourBossReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HallHourBossRes

@implementation PB3HallHourBossRes

@dynamic nextIndex;
@dynamic listArray, listArray_Count;

typedef struct PB3HallHourBossRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3HallHourBossRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3HallHourBossRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3HallHourBossRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3HallHourBoss),
        .number = PB3HallHourBossRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3HallHourBossRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HallHourBossRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HallHourBossRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HallHourBoss

@implementation PB3HallHourBoss

@dynamic playerId;
@dynamic name;
@dynamic icon;
@dynamic sex;

typedef struct PB3HallHourBoss__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *name;
  NSString *icon;
  int64_t playerId;
} PB3HallHourBoss__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3HallHourBoss_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3HallHourBoss__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3HallHourBoss_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3HallHourBoss__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3HallHourBoss_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3HallHourBoss__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3HallHourBoss_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3HallHourBoss__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HallHourBoss class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HallHourBoss__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3HallHourBoss_Sex_RawValue(PB3HallHourBoss *message) {
  GPBDescriptor *descriptor = [PB3HallHourBoss descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3HallHourBoss_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3HallHourBoss_Sex_RawValue(PB3HallHourBoss *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3HallHourBoss descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3HallHourBoss_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastDeviceOpenMic

@implementation PB3BroadcastDeviceOpenMic

@dynamic deviceId;
@dynamic deviceType;

typedef struct PB3BroadcastDeviceOpenMic__storage_ {
  uint32_t _has_storage_[1];
  PB3DeviceType deviceType;
  NSString *deviceId;
} PB3BroadcastDeviceOpenMic__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastDeviceOpenMic_FieldNumber_DeviceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastDeviceOpenMic__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3BroadcastDeviceOpenMic_FieldNumber_DeviceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastDeviceOpenMic__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastDeviceOpenMic class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastDeviceOpenMic__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastDeviceOpenMic_DeviceType_RawValue(PB3BroadcastDeviceOpenMic *message) {
  GPBDescriptor *descriptor = [PB3BroadcastDeviceOpenMic descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastDeviceOpenMic_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastDeviceOpenMic_DeviceType_RawValue(PB3BroadcastDeviceOpenMic *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastDeviceOpenMic descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastDeviceOpenMic_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastSetShow

@implementation PB3BroadcastSetShow

@dynamic oldId;
@dynamic newId;

typedef struct PB3BroadcastSetShow__storage_ {
  uint32_t _has_storage_[1];
  int64_t oldId;
  int64_t newId;
} PB3BroadcastSetShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oldId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastSetShow_FieldNumber_OldId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastSetShow__storage_, oldId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "newId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastSetShow_FieldNumber_NewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastSetShow__storage_, newId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastSetShow class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastSetShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeRoomSetReq

@implementation PB3ChangeRoomSetReq

@dynamic changeType;
@dynamic name;
@dynamic password;
@dynamic greeting;
@dynamic newPattern;
@dynamic voice;
@dynamic chairCharmStatus;
@dynamic clanChairLimitStatus;
@dynamic pwdEnable;
@dynamic autoGameBf;
@dynamic singleLiveNotify;
@dynamic hasGameInfo, gameInfo;
@dynamic singleLiveTpl;
@dynamic isCloudDiscoRoomShake;
@dynamic isCloudDiscoChairShake;
@dynamic cubismEnable;

typedef struct PB3ChangeRoomSetReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChangeRoomSetType changeType;
  PB3NewRoomPattern newPattern;
  PB3RoomVoice voice;
  int32_t chairCharmStatus;
  PB3SingleLiveTplType singleLiveTpl;
  NSString *name;
  NSString *password;
  NSString *greeting;
  PB3MobaTeamGameInfo *gameInfo;
} PB3ChangeRoomSetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "changeType",
        .dataTypeSpecific.enumDescFunc = PB3ChangeRoomSetType_EnumDescriptor,
        .number = PB3ChangeRoomSetReq_FieldNumber_ChangeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, changeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_Password,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "greeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_Greeting,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, greeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3ChangeRoomSetReq_FieldNumber_NewPattern,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, newPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voice",
        .dataTypeSpecific.enumDescFunc = PB3RoomVoice_EnumDescriptor,
        .number = PB3ChangeRoomSetReq_FieldNumber_Voice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, voice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chairCharmStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_ChairCharmStatus,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, chairCharmStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "clanChairLimitStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_ClanChairLimitStatus,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "pwdEnable",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_PwdEnable,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "autoGameBf",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_AutoGameBf,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "singleLiveNotify",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_SingleLiveNotify,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "gameInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MobaTeamGameInfo),
        .number = PB3ChangeRoomSetReq_FieldNumber_GameInfo,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, gameInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "singleLiveTpl",
        .dataTypeSpecific.enumDescFunc = PB3SingleLiveTplType_EnumDescriptor,
        .number = PB3ChangeRoomSetReq_FieldNumber_SingleLiveTpl,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetReq__storage_, singleLiveTpl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isCloudDiscoRoomShake",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_IsCloudDiscoRoomShake,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isCloudDiscoChairShake",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_IsCloudDiscoChairShake,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cubismEnable",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetReq_FieldNumber_CubismEnable,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeRoomSetReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeRoomSetReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChangeRoomSetReq_ChangeType_RawValue(PB3ChangeRoomSetReq *message) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_ChangeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChangeRoomSetReq_ChangeType_RawValue(PB3ChangeRoomSetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_ChangeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChangeRoomSetReq_NewPattern_RawValue(PB3ChangeRoomSetReq *message) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_NewPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChangeRoomSetReq_NewPattern_RawValue(PB3ChangeRoomSetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_NewPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChangeRoomSetReq_Voice_RawValue(PB3ChangeRoomSetReq *message) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_Voice];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChangeRoomSetReq_Voice_RawValue(PB3ChangeRoomSetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_Voice];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChangeRoomSetReq_SingleLiveTpl_RawValue(PB3ChangeRoomSetReq *message) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_SingleLiveTpl];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChangeRoomSetReq_SingleLiveTpl_RawValue(PB3ChangeRoomSetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetReq_FieldNumber_SingleLiveTpl];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChangeRoomSetRes

@implementation PB3ChangeRoomSetRes

@dynamic changeType;
@dynamic nameGreetStatus;
@dynamic oldName;
@dynamic newName;
@dynamic oldGreeting;
@dynamic newGreeting;
@dynamic isModify;

typedef struct PB3ChangeRoomSetRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ChangeRoomSetType changeType;
  PB3AuditStatus nameGreetStatus;
  NSString *oldName;
  NSString *newName;
  NSString *oldGreeting;
  NSString *newGreeting;
} PB3ChangeRoomSetRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "changeType",
        .dataTypeSpecific.enumDescFunc = PB3ChangeRoomSetType_EnumDescriptor,
        .number = PB3ChangeRoomSetRes_FieldNumber_ChangeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetRes__storage_, changeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "nameGreetStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3ChangeRoomSetRes_FieldNumber_NameGreetStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetRes__storage_, nameGreetStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "oldName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetRes_FieldNumber_OldName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetRes__storage_, oldName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetRes_FieldNumber_NewName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetRes__storage_, newName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oldGreeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetRes_FieldNumber_OldGreeting,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetRes__storage_, oldGreeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newGreeting",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetRes_FieldNumber_NewGreeting,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChangeRoomSetRes__storage_, newGreeting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isModify",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeRoomSetRes_FieldNumber_IsModify,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeRoomSetRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeRoomSetRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChangeRoomSetRes_ChangeType_RawValue(PB3ChangeRoomSetRes *message) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetRes_FieldNumber_ChangeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChangeRoomSetRes_ChangeType_RawValue(PB3ChangeRoomSetRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetRes_FieldNumber_ChangeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChangeRoomSetRes_NameGreetStatus_RawValue(PB3ChangeRoomSetRes *message) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetRes_FieldNumber_NameGreetStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChangeRoomSetRes_NameGreetStatus_RawValue(PB3ChangeRoomSetRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChangeRoomSetRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeRoomSetRes_FieldNumber_NameGreetStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PrivilegeInfo

@implementation PB3PrivilegeInfo

@dynamic name;
@dynamic styleURL;
@dynamic pcURL;
@dynamic pcDrawURL;
@dynamic pcTailURL;
@dynamic content;
@dynamic nameColor;
@dynamic contentColor;
@dynamic iosURL;

typedef struct PB3PrivilegeInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *styleURL;
  NSString *pcURL;
  NSString *pcDrawURL;
  NSString *pcTailURL;
  NSString *content;
  NSString *nameColor;
  NSString *contentColor;
  NSString *iosURL;
} PB3PrivilegeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "styleURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_StyleURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, styleURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_PcURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, pcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcDrawURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_PcDrawURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, pcDrawURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcTailURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_PcTailURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, pcTailURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_NameColor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, nameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_ContentColor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, contentColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivilegeInfo_FieldNumber_IosURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PrivilegeInfo__storage_, iosURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivilegeInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivilegeInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\005\241!!\000\003\002\241!!\000\004\002\244\241!!\000\005\002\244\241!!\000\t\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastOnlineNotice

@implementation PB3BroadcastOnlineNotice

@dynamic hasSimplePlayer, simplePlayer;
@dynamic hasPrivilegeInfo, privilegeInfo;

typedef struct PB3BroadcastOnlineNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3SimplePlayer *simplePlayer;
  PB3PrivilegeInfo *privilegeInfo;
} PB3BroadcastOnlineNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "simplePlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3BroadcastOnlineNotice_FieldNumber_SimplePlayer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastOnlineNotice__storage_, simplePlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "privilegeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PrivilegeInfo),
        .number = PB3BroadcastOnlineNotice_FieldNumber_PrivilegeInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastOnlineNotice__storage_, privilegeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastOnlineNotice class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastOnlineNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3StopVoteReq

@implementation PB3StopVoteReq


typedef struct PB3StopVoteReq__storage_ {
  uint32_t _has_storage_[1];
} PB3StopVoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StopVoteReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3StopVoteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3StopVoteRes

@implementation PB3StopVoteRes


typedef struct PB3StopVoteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3StopVoteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3StopVoteRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3StopVoteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomPlayerInfoReq

@implementation PB3RoomPlayerInfoReq


typedef struct PB3RoomPlayerInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomPlayerInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPlayerInfoReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomPlayerInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomPlayerInfoRes

@implementation PB3RoomPlayerInfoRes

@dynamic isSignMember;
@dynamic isSingleLiveHost;
@dynamic isSignMemberMaster;

typedef struct PB3RoomPlayerInfoRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomPlayerInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSignMember",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerInfoRes_FieldNumber_IsSignMember,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isSingleLiveHost",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerInfoRes_FieldNumber_IsSingleLiveHost,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isSignMemberMaster",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomPlayerInfoRes_FieldNumber_IsSignMemberMaster,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomPlayerInfoRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomPlayerInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EnterRoomSuccessReq

@implementation PB3EnterRoomSuccessReq

@dynamic roomId;
@dynamic enterRoomOpt;
@dynamic gameId;
@dynamic content;
@dynamic enterRoomWay;

typedef struct PB3EnterRoomSuccessReq__storage_ {
  uint32_t _has_storage_[1];
  PB3EnterRoomOpt enterRoomOpt;
  int32_t gameId;
  PB3EnterRoomWay enterRoomWay;
  NSString *content;
  int64_t roomId;
} PB3EnterRoomSuccessReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomSuccessReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EnterRoomSuccessReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "enterRoomOpt",
        .dataTypeSpecific.enumDescFunc = PB3EnterRoomOpt_EnumDescriptor,
        .number = PB3EnterRoomSuccessReq_FieldNumber_EnterRoomOpt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EnterRoomSuccessReq__storage_, enterRoomOpt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomSuccessReq_FieldNumber_GameId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EnterRoomSuccessReq__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterRoomSuccessReq_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EnterRoomSuccessReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enterRoomWay",
        .dataTypeSpecific.enumDescFunc = PB3EnterRoomWay_EnumDescriptor,
        .number = PB3EnterRoomSuccessReq_FieldNumber_EnterRoomWay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EnterRoomSuccessReq__storage_, enterRoomWay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EnterRoomSuccessReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EnterRoomSuccessReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3EnterRoomSuccessReq_EnterRoomOpt_RawValue(PB3EnterRoomSuccessReq *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomSuccessReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomSuccessReq_FieldNumber_EnterRoomOpt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomSuccessReq_EnterRoomOpt_RawValue(PB3EnterRoomSuccessReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomSuccessReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomSuccessReq_FieldNumber_EnterRoomOpt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3EnterRoomSuccessReq_EnterRoomWay_RawValue(PB3EnterRoomSuccessReq *message) {
  GPBDescriptor *descriptor = [PB3EnterRoomSuccessReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomSuccessReq_FieldNumber_EnterRoomWay];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3EnterRoomSuccessReq_EnterRoomWay_RawValue(PB3EnterRoomSuccessReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3EnterRoomSuccessReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3EnterRoomSuccessReq_FieldNumber_EnterRoomWay];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3EnterRoomSuccessRes

@implementation PB3EnterRoomSuccessRes


typedef struct PB3EnterRoomSuccessRes__storage_ {
  uint32_t _has_storage_[1];
} PB3EnterRoomSuccessRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EnterRoomSuccessRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3EnterRoomSuccessRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BarrageGameEntryPush

@implementation PB3BarrageGameEntryPush

@dynamic itemsArray, itemsArray_Count;

typedef struct PB3BarrageGameEntryPush__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} PB3BarrageGameEntryPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BarrageGameEntryItem),
        .number = PB3BarrageGameEntryPush_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryPush__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BarrageGameEntryPush class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BarrageGameEntryPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BarrageGameEntryItem

@implementation PB3BarrageGameEntryItem

@dynamic gameId;
@dynamic gameName;
@dynamic gameEntIcon;
@dynamic gameAddr;
@dynamic singleGameMinute;
@dynamic classifyName;
@dynamic weight;
@dynamic startHour;
@dynamic endHour;
@dynamic clanCatesArray, clanCatesArray_Count;
@dynamic roomPatternListArray, roomPatternListArray_Count;
@dynamic giftIdsArray, giftIdsArray_Count;
@dynamic roomTagsArray, roomTagsArray_Count;
@dynamic statusBarColor;

typedef struct PB3BarrageGameEntryItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t startHour;
  int32_t endHour;
  NSString *gameName;
  NSString *gameEntIcon;
  NSString *gameAddr;
  NSString *classifyName;
  GPBInt64Array *clanCatesArray;
  GPBInt64Array *roomPatternListArray;
  GPBInt64Array *giftIdsArray;
  NSMutableArray *roomTagsArray;
  NSString *statusBarColor;
  int64_t gameId;
  int64_t singleGameMinute;
  int64_t weight;
} PB3BarrageGameEntryItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_GameId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gameName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_GameName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, gameName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameEntIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_GameEntIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, gameEntIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameAddr",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_GameAddr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, gameAddr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singleGameMinute",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_SingleGameMinute,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, singleGameMinute),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "classifyName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_ClassifyName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, classifyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_Weight,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startHour",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_StartHour,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, startHour),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endHour",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_EndHour,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, endHour),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "clanCatesArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_ClanCatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, clanCatesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomPatternListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_RoomPatternListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, roomPatternListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_GiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, giftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomTagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BarrageGameEntryItem_RoomTag),
        .number = PB3BarrageGameEntryItem_FieldNumber_RoomTagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, roomTagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "statusBarColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_FieldNumber_StatusBarColor,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem__storage_, statusBarColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BarrageGameEntryItem class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BarrageGameEntryItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BarrageGameEntryItem_RoomTag

@implementation PB3BarrageGameEntryItem_RoomTag

@dynamic tagIcon;
@dynamic tagType;

typedef struct PB3BarrageGameEntryItem_RoomTag__storage_ {
  uint32_t _has_storage_[1];
  int32_t tagType;
  NSString *tagIcon;
} PB3BarrageGameEntryItem_RoomTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tagIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_RoomTag_FieldNumber_TagIcon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem_RoomTag__storage_, tagIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BarrageGameEntryItem_RoomTag_FieldNumber_TagType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BarrageGameEntryItem_RoomTag__storage_, tagType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BarrageGameEntryItem_RoomTag class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BarrageGameEntryItem_RoomTag__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PB3BarrageGameEntryItem)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PkEntryItem

@implementation PB3PkEntryItem

@dynamic pkMode;
@dynamic startSecond;
@dynamic endSecond;
@dynamic rewardRate;
@dynamic newStartSecond;
@dynamic newEndSecond;

typedef struct PB3PkEntryItem__storage_ {
  uint32_t _has_storage_[1];
  PB3PkMode pkMode;
  int32_t rewardRate;
  int64_t startSecond;
  int64_t endSecond;
  int64_t newStartSecond;
  int64_t newEndSecond;
} PB3PkEntryItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pkMode",
        .dataTypeSpecific.enumDescFunc = PB3PkMode_EnumDescriptor,
        .number = PB3PkEntryItem_FieldNumber_PkMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PkEntryItem__storage_, pkMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startSecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkEntryItem_FieldNumber_StartSecond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PkEntryItem__storage_, startSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endSecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkEntryItem_FieldNumber_EndSecond,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PkEntryItem__storage_, endSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rewardRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkEntryItem_FieldNumber_RewardRate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PkEntryItem__storage_, rewardRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newStartSecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkEntryItem_FieldNumber_NewStartSecond,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PkEntryItem__storage_, newStartSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "newEndSecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3PkEntryItem_FieldNumber_NewEndSecond,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PkEntryItem__storage_, newEndSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PkEntryItem class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PkEntryItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PkEntryItem_PkMode_RawValue(PB3PkEntryItem *message) {
  GPBDescriptor *descriptor = [PB3PkEntryItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PkEntryItem_FieldNumber_PkMode];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PkEntryItem_PkMode_RawValue(PB3PkEntryItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PkEntryItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PkEntryItem_FieldNumber_PkMode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PkEntryPush

@implementation PB3PkEntryPush

@dynamic pkEntryItemsArray, pkEntryItemsArray_Count;

typedef struct PB3PkEntryPush__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *pkEntryItemsArray;
} PB3PkEntryPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pkEntryItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PkEntryItem),
        .number = PB3PkEntryPush_FieldNumber_PkEntryItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PkEntryPush__storage_, pkEntryItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PkEntryPush class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PkEntryPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SingleLivePkEntryItem

@implementation PB3SingleLivePkEntryItem

@dynamic pkMode;
@dynamic startSecond;
@dynamic endSecond;

typedef struct PB3SingleLivePkEntryItem__storage_ {
  uint32_t _has_storage_[1];
  PB3SingleLivePkMode pkMode;
  int64_t startSecond;
  int64_t endSecond;
} PB3SingleLivePkEntryItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pkMode",
        .dataTypeSpecific.enumDescFunc = PB3SingleLivePkMode_EnumDescriptor,
        .number = PB3SingleLivePkEntryItem_FieldNumber_PkMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLivePkEntryItem__storage_, pkMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startSecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLivePkEntryItem_FieldNumber_StartSecond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SingleLivePkEntryItem__storage_, startSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endSecond",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLivePkEntryItem_FieldNumber_EndSecond,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SingleLivePkEntryItem__storage_, endSecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLivePkEntryItem class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLivePkEntryItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SingleLivePkEntryItem_PkMode_RawValue(PB3SingleLivePkEntryItem *message) {
  GPBDescriptor *descriptor = [PB3SingleLivePkEntryItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLivePkEntryItem_FieldNumber_PkMode];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SingleLivePkEntryItem_PkMode_RawValue(PB3SingleLivePkEntryItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SingleLivePkEntryItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SingleLivePkEntryItem_FieldNumber_PkMode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SingleLivePkEntryPush

@implementation PB3SingleLivePkEntryPush

@dynamic pkEntryItemsArray, pkEntryItemsArray_Count;
@dynamic routerURL;

typedef struct PB3SingleLivePkEntryPush__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *pkEntryItemsArray;
  NSString *routerURL;
} PB3SingleLivePkEntryPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pkEntryItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SingleLivePkEntryItem),
        .number = PB3SingleLivePkEntryPush_FieldNumber_PkEntryItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SingleLivePkEntryPush__storage_, pkEntryItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3SingleLivePkEntryPush_FieldNumber_RouterURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SingleLivePkEntryPush__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SingleLivePkEntryPush class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SingleLivePkEntryPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastEffectMood

@implementation PB3BroadcastEffectMood

@dynamic hasPlayer, player;
@dynamic effectId;
@dynamic isShow;
@dynamic timeStamp;

typedef struct PB3BroadcastEffectMood__storage_ {
  uint32_t _has_storage_[1];
  int32_t effectId;
  PB3ScenePlayer *player;
  int64_t timeStamp;
} PB3BroadcastEffectMood__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ScenePlayer),
        .number = PB3BroadcastEffectMood_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastEffectMood__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEffectMood_FieldNumber_EffectId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastEffectMood__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEffectMood_FieldNumber_IsShow,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastEffectMood_FieldNumber_TimeStamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastEffectMood__storage_, timeStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastEffectMood class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastEffectMood__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CleanPublicScreen

@implementation PB3CleanPublicScreen


typedef struct PB3CleanPublicScreen__storage_ {
  uint32_t _has_storage_[1];
} PB3CleanPublicScreen__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CleanPublicScreen class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CleanPublicScreen__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomPattern

@implementation PB3BroadcastRoomPattern

@dynamic newPattern;
@dynamic voice;

typedef struct PB3BroadcastRoomPattern__storage_ {
  uint32_t _has_storage_[1];
  PB3NewRoomPattern newPattern;
  PB3RoomVoice voice;
} PB3BroadcastRoomPattern__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "newPattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3BroadcastRoomPattern_FieldNumber_NewPattern,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomPattern__storage_, newPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voice",
        .dataTypeSpecific.enumDescFunc = PB3RoomVoice_EnumDescriptor,
        .number = PB3BroadcastRoomPattern_FieldNumber_Voice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomPattern__storage_, voice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomPattern class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomPattern__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastRoomPattern_NewPattern_RawValue(PB3BroadcastRoomPattern *message) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomPattern descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomPattern_FieldNumber_NewPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastRoomPattern_NewPattern_RawValue(PB3BroadcastRoomPattern *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomPattern descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomPattern_FieldNumber_NewPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BroadcastRoomPattern_Voice_RawValue(PB3BroadcastRoomPattern *message) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomPattern descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomPattern_FieldNumber_Voice];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastRoomPattern_Voice_RawValue(PB3BroadcastRoomPattern *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastRoomPattern descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastRoomPattern_FieldNumber_Voice];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChorusNotice

@implementation PB3ChorusNotice

@dynamic opt;
@dynamic chorusId;
@dynamic hasInvitor, invitor;
@dynamic hasAcceptor, acceptor;
@dynamic deviceType;

typedef struct PB3ChorusNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3ChorusOptType opt;
  PB3DeviceType deviceType;
  NSString *chorusId;
  PB3Chorus *invitor;
  PB3Chorus *acceptor;
} PB3ChorusNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3ChorusOptType_EnumDescriptor,
        .number = PB3ChorusNotice_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChorusNotice__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chorusId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChorusNotice_FieldNumber_ChorusId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChorusNotice__storage_, chorusId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invitor",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Chorus),
        .number = PB3ChorusNotice_FieldNumber_Invitor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChorusNotice__storage_, invitor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "acceptor",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Chorus),
        .number = PB3ChorusNotice_FieldNumber_Acceptor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChorusNotice__storage_, acceptor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3ChorusNotice_FieldNumber_DeviceType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChorusNotice__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChorusNotice class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChorusNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChorusNotice_Opt_RawValue(PB3ChorusNotice *message) {
  GPBDescriptor *descriptor = [PB3ChorusNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChorusNotice_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChorusNotice_Opt_RawValue(PB3ChorusNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChorusNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChorusNotice_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChorusNotice_DeviceType_RawValue(PB3ChorusNotice *message) {
  GPBDescriptor *descriptor = [PB3ChorusNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChorusNotice_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChorusNotice_DeviceType_RawValue(PB3ChorusNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChorusNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChorusNotice_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Chorus

@implementation PB3Chorus

@dynamic chairId;
@dynamic playerId;
@dynamic id2;
@dynamic name;
@dynamic openId;

typedef struct PB3Chorus__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  NSString *name;
  int64_t playerId;
  int64_t id2;
  int64_t openId;
} PB3Chorus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chorus_FieldNumber_ChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Chorus__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chorus_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Chorus__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chorus_FieldNumber_Id2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Chorus__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chorus_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Chorus__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Chorus_FieldNumber_OpenId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Chorus__storage_, openId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Chorus class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Chorus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChorusOptReq

@implementation PB3ChorusOptReq

@dynamic opt;
@dynamic chorusId;
@dynamic invitedId;

typedef struct PB3ChorusOptReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChorusOptType opt;
  NSString *chorusId;
  int64_t invitedId;
} PB3ChorusOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3ChorusOptType_EnumDescriptor,
        .number = PB3ChorusOptReq_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChorusOptReq__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chorusId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChorusOptReq_FieldNumber_ChorusId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChorusOptReq__storage_, chorusId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invitedId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChorusOptReq_FieldNumber_InvitedId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChorusOptReq__storage_, invitedId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChorusOptReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChorusOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChorusOptReq_Opt_RawValue(PB3ChorusOptReq *message) {
  GPBDescriptor *descriptor = [PB3ChorusOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChorusOptReq_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChorusOptReq_Opt_RawValue(PB3ChorusOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChorusOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChorusOptReq_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChorusOptRes

@implementation PB3ChorusOptRes


typedef struct PB3ChorusOptRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChorusOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChorusOptRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChorusOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NeteaseIMTokenReq

@implementation PB3NeteaseIMTokenReq


typedef struct PB3NeteaseIMTokenReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NeteaseIMTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NeteaseIMTokenReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NeteaseIMTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NeteaseIMTokenRes

@implementation PB3NeteaseIMTokenRes

@dynamic neteaseImToken;
@dynamic id_p;

typedef struct PB3NeteaseIMTokenRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *neteaseImToken;
  int64_t id_p;
} PB3NeteaseIMTokenRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "neteaseImToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3NeteaseIMTokenRes_FieldNumber_NeteaseImToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NeteaseIMTokenRes__storage_, neteaseImToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3NeteaseIMTokenRes_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NeteaseIMTokenRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NeteaseIMTokenRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NeteaseIMTokenRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomBanSpeakNotice

@implementation PB3RoomBanSpeakNotice

@dynamic opt;

typedef struct PB3RoomBanSpeakNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomBanSpeakType opt;
} PB3RoomBanSpeakNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3RoomBanSpeakType_EnumDescriptor,
        .number = PB3RoomBanSpeakNotice_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomBanSpeakNotice__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomBanSpeakNotice class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomBanSpeakNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomBanSpeakNotice_Opt_RawValue(PB3RoomBanSpeakNotice *message) {
  GPBDescriptor *descriptor = [PB3RoomBanSpeakNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomBanSpeakNotice_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomBanSpeakNotice_Opt_RawValue(PB3RoomBanSpeakNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomBanSpeakNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomBanSpeakNotice_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomBanSpeakReq

@implementation PB3RoomBanSpeakReq

@dynamic opt;

typedef struct PB3RoomBanSpeakReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomBanSpeakType opt;
} PB3RoomBanSpeakReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3RoomBanSpeakType_EnumDescriptor,
        .number = PB3RoomBanSpeakReq_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomBanSpeakReq__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomBanSpeakReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomBanSpeakReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomBanSpeakReq_Opt_RawValue(PB3RoomBanSpeakReq *message) {
  GPBDescriptor *descriptor = [PB3RoomBanSpeakReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomBanSpeakReq_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomBanSpeakReq_Opt_RawValue(PB3RoomBanSpeakReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomBanSpeakReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomBanSpeakReq_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomBanSpeakRes

@implementation PB3RoomBanSpeakRes


typedef struct PB3RoomBanSpeakRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomBanSpeakRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomBanSpeakRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomBanSpeakRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastCountDownStart

@implementation PB3BroadcastCountDownStart


typedef struct PB3BroadcastCountDownStart__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastCountDownStart__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastCountDownStart class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BroadcastCountDownStart__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InteractionConf

@implementation PB3InteractionConf

@dynamic id_p;
@dynamic iaType;
@dynamic name;
@dynamic describe;
@dynamic singleId;
@dynamic doubleId;
@dynamic allChairId;
@dynamic doubleTarget;
@dynamic status;
@dynamic icon;
@dynamic isAllChair;
@dynamic interNum;
@dynamic maxNum;

typedef struct PB3InteractionConf__storage_ {
  uint32_t _has_storage_[1];
  PB3InteractionType iaType;
  int32_t singleId;
  int32_t doubleId;
  int32_t allChairId;
  int32_t doubleTarget;
  int32_t interNum;
  int32_t maxNum;
  NSString *name;
  NSString *describe;
  NSString *icon;
  int64_t id_p;
} PB3InteractionConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iaType",
        .dataTypeSpecific.enumDescFunc = PB3InteractionType_EnumDescriptor,
        .number = PB3InteractionConf_FieldNumber_IaType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, iaType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "describe",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_Describe,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, describe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_SingleId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, singleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_DoubleId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, doubleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allChairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_AllChairId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, allChairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleTarget",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_DoubleTarget,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, doubleTarget),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_Status,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_Icon,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAllChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_IsAllChair,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "interNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_InterNum,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, interNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConf_FieldNumber_MaxNum,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3InteractionConf__storage_, maxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionConf class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3InteractionConf_IaType_RawValue(PB3InteractionConf *message) {
  GPBDescriptor *descriptor = [PB3InteractionConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3InteractionConf_FieldNumber_IaType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3InteractionConf_IaType_RawValue(PB3InteractionConf *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3InteractionConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3InteractionConf_FieldNumber_IaType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3InteractionConfReq

@implementation PB3InteractionConfReq

@dynamic roomId;

typedef struct PB3InteractionConfReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3InteractionConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConfReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InteractionConfReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InteractionConfRes

@implementation PB3InteractionConfRes

@dynamic confListArray, confListArray_Count;
@dynamic giftConfListArray, giftConfListArray_Count;

typedef struct PB3InteractionConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *confListArray;
  NSMutableArray *giftConfListArray;
} PB3InteractionConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InteractionConf),
        .number = PB3InteractionConfRes_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionConfRes__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftConfListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InteractionConf),
        .number = PB3InteractionConfRes_FieldNumber_GiftConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionConfRes__storage_, giftConfListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetInteractionConfReq

@implementation PB3SetInteractionConfReq

@dynamic roomId;
@dynamic hasConf, conf;

typedef struct PB3SetInteractionConfReq__storage_ {
  uint32_t _has_storage_[1];
  PB3InteractionConf *conf;
  int64_t roomId;
} PB3SetInteractionConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetInteractionConfReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetInteractionConfReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "conf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InteractionConf),
        .number = PB3SetInteractionConfReq_FieldNumber_Conf,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetInteractionConfReq__storage_, conf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetInteractionConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetInteractionConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetInteractionConfRes

@implementation PB3SetInteractionConfRes


typedef struct PB3SetInteractionConfRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetInteractionConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetInteractionConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetInteractionConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InteractionConfGiftListReq

@implementation PB3InteractionConfGiftListReq

@dynamic iaId;

typedef struct PB3InteractionConfGiftListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t iaId;
} PB3InteractionConfGiftListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iaId",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConfGiftListReq_FieldNumber_IaId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InteractionConfGiftListReq__storage_, iaId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionConfGiftListReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionConfGiftListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InteractionConfGiftListRes

@implementation PB3InteractionConfGiftListRes

@dynamic singleIdsArray, singleIdsArray_Count;
@dynamic doubleIdsArray, doubleIdsArray_Count;
@dynamic allChairIdsArray, allChairIdsArray_Count;

typedef struct PB3InteractionConfGiftListRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *singleIdsArray;
  GPBInt32Array *doubleIdsArray;
  GPBInt32Array *allChairIdsArray;
} PB3InteractionConfGiftListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "singleIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConfGiftListRes_FieldNumber_SingleIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionConfGiftListRes__storage_, singleIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConfGiftListRes_FieldNumber_DoubleIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionConfGiftListRes__storage_, doubleIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allChairIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionConfGiftListRes_FieldNumber_AllChairIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionConfGiftListRes__storage_, allChairIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionConfGiftListRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionConfGiftListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PublicScreenFastSpeakReq

@implementation PB3PublicScreenFastSpeakReq

@dynamic roomId;
@dynamic pattern;

typedef struct PB3PublicScreenFastSpeakReq__storage_ {
  uint32_t _has_storage_[1];
  PB3NewRoomPattern pattern;
  int64_t roomId;
} PB3PublicScreenFastSpeakReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PublicScreenFastSpeakReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PublicScreenFastSpeakReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3PublicScreenFastSpeakReq_FieldNumber_Pattern,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PublicScreenFastSpeakReq__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PublicScreenFastSpeakReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PublicScreenFastSpeakReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PublicScreenFastSpeakReq_Pattern_RawValue(PB3PublicScreenFastSpeakReq *message) {
  GPBDescriptor *descriptor = [PB3PublicScreenFastSpeakReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PublicScreenFastSpeakReq_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PublicScreenFastSpeakReq_Pattern_RawValue(PB3PublicScreenFastSpeakReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PublicScreenFastSpeakReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PublicScreenFastSpeakReq_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PublicScreenFastSpeakRes

@implementation PB3PublicScreenFastSpeakRes

@dynamic expireTime;
@dynamic listArray, listArray_Count;

typedef struct PB3PublicScreenFastSpeakRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  int64_t expireTime;
} PB3PublicScreenFastSpeakRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PublicScreenFastSpeakRes_FieldNumber_ExpireTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PublicScreenFastSpeakRes__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FastSpeak),
        .number = PB3PublicScreenFastSpeakRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PublicScreenFastSpeakRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PublicScreenFastSpeakRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PublicScreenFastSpeakRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FastSpeak

@implementation PB3FastSpeak

@dynamic fastSpeakId;
@dynamic fastSpeakContent;

typedef struct PB3FastSpeak__storage_ {
  uint32_t _has_storage_[1];
  NSString *fastSpeakContent;
  int64_t fastSpeakId;
} PB3FastSpeak__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fastSpeakId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FastSpeak_FieldNumber_FastSpeakId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FastSpeak__storage_, fastSpeakId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fastSpeakContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3FastSpeak_FieldNumber_FastSpeakContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FastSpeak__storage_, fastSpeakContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FastSpeak class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FastSpeak__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastLeaveRoomRecommend

@implementation PB3BroadcastLeaveRoomRecommend

@dynamic isRecommend;

typedef struct PB3BroadcastLeaveRoomRecommend__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastLeaveRoomRecommend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isRecommend",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastLeaveRoomRecommend_FieldNumber_IsRecommend,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastLeaveRoomRecommend class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastLeaveRoomRecommend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallConfReq

@implementation PB3FansRecallConfReq


typedef struct PB3FansRecallConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FansRecallConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FansRecallConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallConfRes

@implementation PB3FansRecallConfRes

@dynamic isShow;
@dynamic remark;

typedef struct PB3FansRecallConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *remark;
} PB3FansRecallConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallConfRes_FieldNumber_IsShow,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallConfRes_FieldNumber_Remark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FansRecallConfRes__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansRecallConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallPopupReq

@implementation PB3FansRecallPopupReq


typedef struct PB3FansRecallPopupReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FansRecallPopupReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallPopupReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FansRecallPopupReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallPopupRes

@implementation PB3FansRecallPopupRes

@dynamic ruleListArray, ruleListArray_Count;
@dynamic recallHistoryId;
@dynamic recallHistoryContent;
@dynamic recallPerson;
@dynamic recallTime;
@dynamic beginRecallTime;
@dynamic endRecallTime;

typedef struct PB3FansRecallPopupRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t recallPerson;
  NSMutableArray *ruleListArray;
  NSString *recallHistoryContent;
  int64_t recallHistoryId;
  int64_t recallTime;
  int64_t beginRecallTime;
  int64_t endRecallTime;
} PB3FansRecallPopupRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ruleListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallPopupRes_FieldNumber_RuleListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FansRecallPopupRes__storage_, ruleListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recallHistoryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallPopupRes_FieldNumber_RecallHistoryId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansRecallPopupRes__storage_, recallHistoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "recallHistoryContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallPopupRes_FieldNumber_RecallHistoryContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FansRecallPopupRes__storage_, recallHistoryContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recallPerson",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallPopupRes_FieldNumber_RecallPerson,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FansRecallPopupRes__storage_, recallPerson),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "recallTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallPopupRes_FieldNumber_RecallTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FansRecallPopupRes__storage_, recallTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "beginRecallTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallPopupRes_FieldNumber_BeginRecallTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FansRecallPopupRes__storage_, beginRecallTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endRecallTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallPopupRes_FieldNumber_EndRecallTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3FansRecallPopupRes__storage_, endRecallTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallPopupRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansRecallPopupRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallSendReq

@implementation PB3FansRecallSendReq

@dynamic id_p;
@dynamic content;
@dynamic roomId;

typedef struct PB3FansRecallSendReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  int64_t id_p;
  int64_t roomId;
} PB3FansRecallSendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallSendReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansRecallSendReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallSendReq_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FansRecallSendReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallSendReq_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FansRecallSendReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallSendReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansRecallSendReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallSendRes

@implementation PB3FansRecallSendRes

@dynamic id_p;
@dynamic content;
@dynamic status;

typedef struct PB3FansRecallSendRes__storage_ {
  uint32_t _has_storage_[1];
  PB3RecallContentStatus status;
  NSString *content;
  int64_t id_p;
} PB3FansRecallSendRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallSendRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansRecallSendRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallSendRes_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FansRecallSendRes__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3RecallContentStatus_EnumDescriptor,
        .number = PB3FansRecallSendRes_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FansRecallSendRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallSendRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansRecallSendRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FansRecallSendRes_Status_RawValue(PB3FansRecallSendRes *message) {
  GPBDescriptor *descriptor = [PB3FansRecallSendRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FansRecallSendRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FansRecallSendRes_Status_RawValue(PB3FansRecallSendRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FansRecallSendRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FansRecallSendRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetFansRecallListReq

@implementation PB3GetFansRecallListReq

@dynamic id_p;

typedef struct PB3GetFansRecallListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3GetFansRecallListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetFansRecallListReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetFansRecallListReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetFansRecallListReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetFansRecallListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetFansRecallListRes

@implementation PB3GetFansRecallListRes

@dynamic listArray, listArray_Count;
@dynamic count;

typedef struct PB3GetFansRecallListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSMutableArray *listArray;
} PB3GetFansRecallListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FansRecallList),
        .number = PB3GetFansRecallListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetFansRecallListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetFansRecallListRes_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetFansRecallListRes__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetFansRecallListRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetFansRecallListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallList

@implementation PB3FansRecallList

@dynamic id_p;
@dynamic nickName;
@dynamic icon;
@dynamic id2;

typedef struct PB3FansRecallList__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3FansRecallList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallList_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansRecallList__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallList_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FansRecallList__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallList_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FansRecallList__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallList_FieldNumber_Id2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FansRecallList__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallList class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansRecallList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastFansRecall

@implementation PB3BroadcastFansRecall

@dynamic icon;
@dynamic nickName;
@dynamic title;
@dynamic content;
@dynamic URL;
@dynamic expireTime;
@dynamic roomId;

typedef struct PB3BroadcastFansRecall__storage_ {
  uint32_t _has_storage_[1];
  NSString *icon;
  NSString *nickName;
  NSString *title;
  NSString *content;
  NSString *URL;
  int64_t expireTime;
  int64_t roomId;
} PB3BroadcastFansRecall__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecall_FieldNumber_Icon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecall__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecall_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecall__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecall_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecall__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecall_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecall__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecall_FieldNumber_URL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecall__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecall_FieldNumber_ExpireTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecall__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecall_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecall__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastFansRecall class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastFansRecall__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastFansRecallSend

@implementation PB3BroadcastFansRecallSend

@dynamic id_p;
@dynamic nickName;
@dynamic content;

typedef struct PB3BroadcastFansRecallSend__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *content;
  int64_t id_p;
} PB3BroadcastFansRecallSend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallSend_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallSend__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallSend_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallSend__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallSend_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallSend__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastFansRecallSend class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastFansRecallSend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastFansRecallEnterRoom

@implementation PB3BroadcastFansRecallEnterRoom

@dynamic id_p;
@dynamic nickName;
@dynamic fansId;
@dynamic fansNickName;
@dynamic content;
@dynamic fansIcon;
@dynamic fansId2;
@dynamic fansRecallId;

typedef struct PB3BroadcastFansRecallEnterRoom__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *fansNickName;
  NSString *content;
  NSString *fansIcon;
  int64_t id_p;
  int64_t fansId;
  int64_t fansId2;
  int64_t fansRecallId;
} PB3BroadcastFansRecallEnterRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_FansId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, fansId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fansNickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_FansNickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, fansNickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_FansIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, fansIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_FansId2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, fansId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fansRecallId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallEnterRoom_FieldNumber_FansRecallId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallEnterRoom__storage_, fansRecallId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastFansRecallEnterRoom class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastFansRecallEnterRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallCancelReq

@implementation PB3FansRecallCancelReq

@dynamic id_p;

typedef struct PB3FansRecallCancelReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3FansRecallCancelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FansRecallCancelReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FansRecallCancelReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallCancelReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FansRecallCancelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FansRecallCancelRes

@implementation PB3FansRecallCancelRes


typedef struct PB3FansRecallCancelRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FansRecallCancelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FansRecallCancelRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FansRecallCancelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastFansRecallCancel

@implementation PB3BroadcastFansRecallCancel

@dynamic roomId;
@dynamic content;

typedef struct PB3BroadcastFansRecallCancel__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  int64_t roomId;
} PB3BroadcastFansRecallCancel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallCancel_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallCancel__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFansRecallCancel_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastFansRecallCancel__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastFansRecallCancel class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastFansRecallCancel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastAgoda

@implementation PB3BroadcastAgoda

@dynamic agodaKeyListArray, agodaKeyListArray_Count;

typedef struct PB3BroadcastAgoda__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *agodaKeyListArray;
} PB3BroadcastAgoda__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agodaKeyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AgodaKey),
        .number = PB3BroadcastAgoda_FieldNumber_AgodaKeyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastAgoda__storage_, agodaKeyListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastAgoda class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastAgoda__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReportVoiceStatusReq

@implementation PB3ReportVoiceStatusReq


typedef struct PB3ReportVoiceStatusReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ReportVoiceStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReportVoiceStatusReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReportVoiceStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReportVoiceStatusRes

@implementation PB3ReportVoiceStatusRes


typedef struct PB3ReportVoiceStatusRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ReportVoiceStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReportVoiceStatusRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReportVoiceStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PersonalKickout

@implementation PB3PersonalKickout

@dynamic roomId;

typedef struct PB3PersonalKickout__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3PersonalKickout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonalKickout_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PersonalKickout__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonalKickout class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PersonalKickout__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChatEffect

@implementation PB3ChatEffect

@dynamic version;
@dynamic appAnimationURL;
@dynamic pcAnimationURL;
@dynamic duration;
@dynamic weight;
@dynamic pcSvgaURL;

typedef struct PB3ChatEffect__storage_ {
  uint32_t _has_storage_[1];
  int32_t duration;
  int32_t weight;
  NSString *version;
  NSString *appAnimationURL;
  NSString *pcAnimationURL;
  NSString *pcSvgaURL;
} PB3ChatEffect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEffect_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatEffect__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appAnimationURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEffect_FieldNumber_AppAnimationURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatEffect__storage_, appAnimationURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcAnimationURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEffect_FieldNumber_PcAnimationURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatEffect__storage_, pcAnimationURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEffect_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChatEffect__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEffect_FieldNumber_Weight,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChatEffect__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pcSvgaURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEffect_FieldNumber_PcSvgaURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChatEffect__storage_, pcSvgaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatEffect class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatEffect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\003\251\241!!\000\003\002\251\241!!\000\006\002\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastTeacherStudent

@implementation PB3BroadcastTeacherStudent

@dynamic effectId;
@dynamic teacherId;
@dynamic teacherId2;
@dynamic teacherName;
@dynamic teacherIcon;
@dynamic studentPlayerId;
@dynamic studentPlayerId2;
@dynamic studentName;
@dynamic studentIcon;
@dynamic publicText;

typedef struct PB3BroadcastTeacherStudent__storage_ {
  uint32_t _has_storage_[1];
  int32_t effectId;
  NSString *teacherName;
  NSString *teacherIcon;
  NSString *studentName;
  NSString *studentIcon;
  NSString *publicText;
  int64_t teacherId;
  int64_t teacherId2;
  int64_t studentPlayerId;
  int64_t studentPlayerId2;
} PB3BroadcastTeacherStudent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_EffectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "teacherId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_TeacherId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, teacherId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "teacherId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_TeacherId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, teacherId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "teacherName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_TeacherName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, teacherName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "teacherIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_TeacherIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, teacherIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "studentPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_StudentPlayerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, studentPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "studentPlayerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_StudentPlayerId2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, studentPlayerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "studentName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_StudentName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, studentName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "studentIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_StudentIcon,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, studentIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudent_FieldNumber_PublicText,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudent__storage_, publicText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastTeacherStudent class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastTeacherStudent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TeacherStudentChair

@implementation PB3TeacherStudentChair

@dynamic playerId;
@dynamic levelId;

typedef struct PB3TeacherStudentChair__storage_ {
  uint32_t _has_storage_[1];
  int32_t levelId;
  int64_t playerId;
} PB3TeacherStudentChair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentChair_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TeacherStudentChair__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "levelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TeacherStudentChair_FieldNumber_LevelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TeacherStudentChair__storage_, levelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TeacherStudentChair class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TeacherStudentChair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastTeacherStudentChairList

@implementation PB3BroadcastTeacherStudentChairList

@dynamic teacherStudentArray, teacherStudentArray_Count;

typedef struct PB3BroadcastTeacherStudentChairList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *teacherStudentArray;
} PB3BroadcastTeacherStudentChairList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "teacherStudentArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TeacherStudentChair),
        .number = PB3BroadcastTeacherStudentChairList_FieldNumber_TeacherStudentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentChairList__storage_, teacherStudentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastTeacherStudentChairList class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastTeacherStudentChairList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastTeacherStudentEnterRoom

@implementation PB3BroadcastTeacherStudentEnterRoom

@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic publicText;

typedef struct PB3BroadcastTeacherStudentEnterRoom__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  NSString *publicText;
  int64_t playerId;
  int64_t playerId2;
} PB3BroadcastTeacherStudentEnterRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentEnterRoom_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentEnterRoom__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentEnterRoom_FieldNumber_PlayerId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentEnterRoom__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentEnterRoom_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentEnterRoom__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentEnterRoom_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentEnterRoom__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastTeacherStudentEnterRoom_FieldNumber_PublicText,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastTeacherStudentEnterRoom__storage_, publicText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastTeacherStudentEnterRoom class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastTeacherStudentEnterRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MobaTeamSitChairBroadcast

@implementation PB3MobaTeamSitChairBroadcast

@dynamic roomId;
@dynamic chairsArray, chairsArray_Count;
@dynamic underChairNum;

typedef struct PB3MobaTeamSitChairBroadcast__storage_ {
  uint32_t _has_storage_[1];
  int32_t underChairNum;
  NSMutableArray *chairsArray;
  int64_t roomId;
} PB3MobaTeamSitChairBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamSitChairBroadcast_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MobaTeamSitChairBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chairsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Chair),
        .number = PB3MobaTeamSitChairBroadcast_FieldNumber_ChairsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MobaTeamSitChairBroadcast__storage_, chairsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "underChairNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamSitChairBroadcast_FieldNumber_UnderChairNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MobaTeamSitChairBroadcast__storage_, underChairNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MobaTeamSitChairBroadcast class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MobaTeamSitChairBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LiveBroadcast

@implementation PB3LiveBroadcast

@dynamic roomId;
@dynamic URL;
@dynamic lowBitRateURL;

typedef struct PB3LiveBroadcast__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
  NSString *lowBitRateURL;
  int64_t roomId;
} PB3LiveBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveBroadcast_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LiveBroadcast__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveBroadcast_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LiveBroadcast__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lowBitRateURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3LiveBroadcast_FieldNumber_LowBitRateURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LiveBroadcast__storage_, lowBitRateURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LiveBroadcast class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LiveBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002!!!\000\003\003\243\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetLiveUrlReq

@implementation PB3GetLiveUrlReq


typedef struct PB3GetLiveUrlReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetLiveUrlReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLiveUrlReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetLiveUrlReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetLiveUrlRes

@implementation PB3GetLiveUrlRes

@dynamic roomId;
@dynamic URL;
@dynamic lowBitRateURL;

typedef struct PB3GetLiveUrlRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
  NSString *lowBitRateURL;
  int64_t roomId;
} PB3GetLiveUrlRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLiveUrlRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetLiveUrlRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLiveUrlRes_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetLiveUrlRes__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lowBitRateURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLiveUrlRes_FieldNumber_LowBitRateURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetLiveUrlRes__storage_, lowBitRateURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLiveUrlRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetLiveUrlRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002!!!\000\003\003\243\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuickChat

@implementation PB3QuickChat

@dynamic quickChatId;
@dynamic index;
@dynamic content;
@dynamic contentId;

typedef struct PB3QuickChat__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  NSString *content;
  int64_t quickChatId;
  int64_t contentId;
} PB3QuickChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quickChatId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuickChat_FieldNumber_QuickChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuickChat__storage_, quickChatId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuickChat_FieldNumber_Index,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QuickChat__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuickChat_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QuickChat__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuickChat_FieldNumber_ContentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3QuickChat__storage_, contentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuickChat class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuickChat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AddQuickChatReq

@implementation PB3AddQuickChatReq

@dynamic quickChatsArray, quickChatsArray_Count;
@dynamic classify;

typedef struct PB3AddQuickChatReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatClassify classify;
  NSMutableArray *quickChatsArray;
} PB3AddQuickChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quickChatsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuickChat),
        .number = PB3AddQuickChatReq_FieldNumber_QuickChatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AddQuickChatReq__storage_, quickChatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "classify",
        .dataTypeSpecific.enumDescFunc = PB3ChatClassify_EnumDescriptor,
        .number = PB3AddQuickChatReq_FieldNumber_Classify,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AddQuickChatReq__storage_, classify),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddQuickChatReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AddQuickChatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AddQuickChatReq_Classify_RawValue(PB3AddQuickChatReq *message) {
  GPBDescriptor *descriptor = [PB3AddQuickChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AddQuickChatReq_FieldNumber_Classify];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AddQuickChatReq_Classify_RawValue(PB3AddQuickChatReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AddQuickChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AddQuickChatReq_FieldNumber_Classify];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AddQuickChatRes

@implementation PB3AddQuickChatRes


typedef struct PB3AddQuickChatRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AddQuickChatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AddQuickChatRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AddQuickChatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomQuickChatConfReq

@implementation PB3RoomQuickChatConfReq


typedef struct PB3RoomQuickChatConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomQuickChatConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomQuickChatConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomQuickChatConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomQuickChatConfRes

@implementation PB3RoomQuickChatConfRes

@dynamic currentLimit;
@dynamic show;
@dynamic quickChatsArray, quickChatsArray_Count;
@dynamic patternArray, patternArray_Count;
@dynamic userType;

typedef struct PB3RoomQuickChatConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t currentLimit;
  PB3RoomChatShowType show;
  PB3QuickChatUserType userType;
  NSMutableArray *quickChatsArray;
  GPBEnumArray *patternArray;
} PB3RoomQuickChatConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currentLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomQuickChatConfRes_FieldNumber_CurrentLimit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomQuickChatConfRes__storage_, currentLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "show",
        .dataTypeSpecific.enumDescFunc = PB3RoomChatShowType_EnumDescriptor,
        .number = PB3RoomQuickChatConfRes_FieldNumber_Show,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomQuickChatConfRes__storage_, show),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "quickChatsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuickChat),
        .number = PB3RoomQuickChatConfRes_FieldNumber_QuickChatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomQuickChatConfRes__storage_, quickChatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "patternArray",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3RoomQuickChatConfRes_FieldNumber_PatternArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomQuickChatConfRes__storage_, patternArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3QuickChatUserType_EnumDescriptor,
        .number = PB3RoomQuickChatConfRes_FieldNumber_UserType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomQuickChatConfRes__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomQuickChatConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomQuickChatConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomQuickChatConfRes_Show_RawValue(PB3RoomQuickChatConfRes *message) {
  GPBDescriptor *descriptor = [PB3RoomQuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomQuickChatConfRes_FieldNumber_Show];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomQuickChatConfRes_Show_RawValue(PB3RoomQuickChatConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomQuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomQuickChatConfRes_FieldNumber_Show];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3RoomQuickChatConfRes_UserType_RawValue(PB3RoomQuickChatConfRes *message) {
  GPBDescriptor *descriptor = [PB3RoomQuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomQuickChatConfRes_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomQuickChatConfRes_UserType_RawValue(PB3RoomQuickChatConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomQuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomQuickChatConfRes_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CheckQuickChatContentReq

@implementation PB3CheckQuickChatContentReq

@dynamic content;

typedef struct PB3CheckQuickChatContentReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
} PB3CheckQuickChatContentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckQuickChatContentReq_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CheckQuickChatContentReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckQuickChatContentReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckQuickChatContentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckQuickChatContentRes

@implementation PB3CheckQuickChatContentRes


typedef struct PB3CheckQuickChatContentRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CheckQuickChatContentRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckQuickChatContentRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CheckQuickChatContentRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetAllChatCfgReq

@implementation PB3GetAllChatCfgReq


typedef struct PB3GetAllChatCfgReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetAllChatCfgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetAllChatCfgReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetAllChatCfgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetAllChatCfgRes

@implementation PB3GetAllChatCfgRes

@dynamic confArray, confArray_Count;

typedef struct PB3GetAllChatCfgRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *confArray;
} PB3GetAllChatCfgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AllChatCfg),
        .number = PB3GetAllChatCfgRes_FieldNumber_ConfArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetAllChatCfgRes__storage_, confArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetAllChatCfgRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetAllChatCfgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomChairStatus

@implementation PB3RoomChairStatus

@dynamic chairId;
@dynamic status;

typedef struct PB3RoomChairStatus__storage_ {
  uint32_t _has_storage_[1];
  int32_t chairId;
  PB3ChairStatus status;
} PB3RoomChairStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chairId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomChairStatus_FieldNumber_ChairId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomChairStatus__storage_, chairId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ChairStatus_EnumDescriptor,
        .number = PB3RoomChairStatus_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomChairStatus__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomChairStatus class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomChairStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomChairStatus_Status_RawValue(PB3RoomChairStatus *message) {
  GPBDescriptor *descriptor = [PB3RoomChairStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomChairStatus_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomChairStatus_Status_RawValue(PB3RoomChairStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomChairStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomChairStatus_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AsyncReconnectedInRoomReq

@implementation PB3AsyncReconnectedInRoomReq

@dynamic typ;
@dynamic extraData;

typedef struct PB3AsyncReconnectedInRoomReq__storage_ {
  uint32_t _has_storage_[1];
  PB3AsyncReconnectedInRoomType typ;
  NSData *extraData;
} PB3AsyncReconnectedInRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typ",
        .dataTypeSpecific.enumDescFunc = PB3AsyncReconnectedInRoomType_EnumDescriptor,
        .number = PB3AsyncReconnectedInRoomReq_FieldNumber_Typ,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AsyncReconnectedInRoomReq__storage_, typ),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "extraData",
        .dataTypeSpecific.className = NULL,
        .number = PB3AsyncReconnectedInRoomReq_FieldNumber_ExtraData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AsyncReconnectedInRoomReq__storage_, extraData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AsyncReconnectedInRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AsyncReconnectedInRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AsyncReconnectedInRoomReq_Typ_RawValue(PB3AsyncReconnectedInRoomReq *message) {
  GPBDescriptor *descriptor = [PB3AsyncReconnectedInRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AsyncReconnectedInRoomReq_FieldNumber_Typ];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AsyncReconnectedInRoomReq_Typ_RawValue(PB3AsyncReconnectedInRoomReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AsyncReconnectedInRoomReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AsyncReconnectedInRoomReq_FieldNumber_Typ];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AsyncReconnectedInRoomRes

@implementation PB3AsyncReconnectedInRoomRes


typedef struct PB3AsyncReconnectedInRoomRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AsyncReconnectedInRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AsyncReconnectedInRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AsyncReconnectedInRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AsyncRoomPatternCfgReq

@implementation PB3AsyncRoomPatternCfgReq


typedef struct PB3AsyncRoomPatternCfgReq__storage_ {
  uint32_t _has_storage_[1];
} PB3AsyncRoomPatternCfgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AsyncRoomPatternCfgReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AsyncRoomPatternCfgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AsyncRoomPatternCfgRes

@implementation PB3AsyncRoomPatternCfgRes


typedef struct PB3AsyncRoomPatternCfgRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AsyncRoomPatternCfgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AsyncRoomPatternCfgRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AsyncRoomPatternCfgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClanTaskReq

@implementation PB3ClanTaskReq

@dynamic beginTime;
@dynamic endTime;
@dynamic playersArray, playersArray_Count;
@dynamic type;
@dynamic donePlayerId;

typedef struct PB3ClanTaskReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ClanTaskType type;
  NSMutableArray *playersArray;
  int64_t beginTime;
  int64_t endTime;
  int64_t donePlayerId;
} PB3ClanTaskReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanTaskReq_FieldNumber_BeginTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClanTaskReq__storage_, beginTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanTaskReq_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClanTaskReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTask),
        .number = PB3ClanTaskReq_FieldNumber_PlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ClanTaskReq__storage_, playersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ClanTaskType_EnumDescriptor,
        .number = PB3ClanTaskReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ClanTaskReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "donePlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanTaskReq_FieldNumber_DonePlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ClanTaskReq__storage_, donePlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClanTaskReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClanTaskReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ClanTaskReq_Type_RawValue(PB3ClanTaskReq *message) {
  GPBDescriptor *descriptor = [PB3ClanTaskReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClanTaskReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ClanTaskReq_Type_RawValue(PB3ClanTaskReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ClanTaskReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClanTaskReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ClanTaskRes

@implementation PB3ClanTaskRes

@dynamic beginTime;
@dynamic endTime;
@dynamic playersArray, playersArray_Count;
@dynamic hasCurrentPlayer, currentPlayer;

typedef struct PB3ClanTaskRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *playersArray;
  PB3PlayerTask *currentPlayer;
  int64_t beginTime;
  int64_t endTime;
} PB3ClanTaskRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanTaskRes_FieldNumber_BeginTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClanTaskRes__storage_, beginTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClanTaskRes_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClanTaskRes__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTask),
        .number = PB3ClanTaskRes_FieldNumber_PlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ClanTaskRes__storage_, playersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currentPlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerTask),
        .number = PB3ClanTaskRes_FieldNumber_CurrentPlayer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ClanTaskRes__storage_, currentPlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClanTaskRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClanTaskRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerTask

@implementation PB3PlayerTask

@dynamic image;
@dynamic nick;
@dynamic playerId;
@dynamic taskDoneNum;
@dynamic taskTotalNum;
@dynamic chairsNum;

typedef struct PB3PlayerTask__storage_ {
  uint32_t _has_storage_[1];
  int32_t taskDoneNum;
  int32_t taskTotalNum;
  int32_t chairsNum;
  NSString *image;
  NSString *nick;
  int64_t playerId;
} PB3PlayerTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTask_FieldNumber_Image,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerTask__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nick",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTask_FieldNumber_Nick,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerTask__storage_, nick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTask_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerTask__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "taskDoneNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTask_FieldNumber_TaskDoneNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerTask__storage_, taskDoneNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "taskTotalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTask_FieldNumber_TaskTotalNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerTask__storage_, taskTotalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chairsNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTask_FieldNumber_ChairsNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerTask__storage_, chairsNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerTask class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PunishmentRankReq

@implementation PB3PunishmentRankReq


typedef struct PB3PunishmentRankReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PunishmentRankReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PunishmentRankReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PunishmentRankReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PunishmentRankRes

@implementation PB3PunishmentRankRes

@dynamic rankArray, rankArray_Count;
@dynamic hasCurrentRank, currentRank;

typedef struct PB3PunishmentRankRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankArray;
  PB3PunishmentRank *currentRank;
} PB3PunishmentRankRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PunishmentRank),
        .number = PB3PunishmentRankRes_FieldNumber_RankArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PunishmentRankRes__storage_, rankArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currentRank",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PunishmentRank),
        .number = PB3PunishmentRankRes_FieldNumber_CurrentRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PunishmentRankRes__storage_, currentRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PunishmentRankRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PunishmentRankRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PunishmentRank

@implementation PB3PunishmentRank

@dynamic rankNum;
@dynamic image;
@dynamic nick;
@dynamic wealthLevel;
@dynamic charmLevel;
@dynamic playerId;
@dynamic giftNum;
@dynamic giftId;

typedef struct PB3PunishmentRank__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealthLevel;
  int32_t charmLevel;
  int32_t giftId;
  NSString *image;
  NSString *nick;
  int64_t rankNum;
  int64_t playerId;
  int64_t giftNum;
} PB3PunishmentRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_RankNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, rankNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_Image,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nick",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_Nick,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, nick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_WealthLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_CharmLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_PlayerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_GiftNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentRank_FieldNumber_GiftId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PunishmentRank__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PunishmentRank class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PunishmentRank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PunishmentGiftConfReq

@implementation PB3PunishmentGiftConfReq


typedef struct PB3PunishmentGiftConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PunishmentGiftConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PunishmentGiftConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PunishmentGiftConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PunishmentGiftConfRes

@implementation PB3PunishmentGiftConfRes

@dynamic giftId;

typedef struct PB3PunishmentGiftConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
} PB3PunishmentGiftConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PunishmentGiftConfRes_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PunishmentGiftConfRes__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PunishmentGiftConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PunishmentGiftConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WishGiftReq

@implementation PB3WishGiftReq

@dynamic giftsArray, giftsArray_Count;
@dynamic type;

typedef struct PB3WishGiftReq__storage_ {
  uint32_t _has_storage_[1];
  PB3WishGiftType type;
  NSMutableArray *giftsArray;
} PB3WishGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftTask),
        .number = PB3WishGiftReq_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WishGiftReq__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3WishGiftType_EnumDescriptor,
        .number = PB3WishGiftReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WishGiftReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WishGiftReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WishGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WishGiftReq_Type_RawValue(PB3WishGiftReq *message) {
  GPBDescriptor *descriptor = [PB3WishGiftReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WishGiftReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WishGiftReq_Type_RawValue(PB3WishGiftReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WishGiftReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WishGiftReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3WishGiftRes

@implementation PB3WishGiftRes

@dynamic endTime;
@dynamic giftsArray, giftsArray_Count;

typedef struct PB3WishGiftRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftsArray;
  int64_t endTime;
} PB3WishGiftRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3WishGiftRes_FieldNumber_EndTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WishGiftRes__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GiftTask),
        .number = PB3WishGiftRes_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WishGiftRes__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WishGiftRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WishGiftRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GiftTask

@implementation PB3GiftTask

@dynamic giftId;
@dynamic taskDoneNum;
@dynamic taskTotalNum;
@dynamic updateTime;

typedef struct PB3GiftTask__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t taskDoneNum;
  int32_t taskTotalNum;
  int64_t updateTime;
} PB3GiftTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTask_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GiftTask__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "taskDoneNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTask_FieldNumber_TaskDoneNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GiftTask__storage_, taskDoneNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "taskTotalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTask_FieldNumber_TaskTotalNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GiftTask__storage_, taskTotalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3GiftTask_FieldNumber_UpdateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GiftTask__storage_, updateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GiftTask class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GiftTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WishGiftConfReq

@implementation PB3WishGiftConfReq


typedef struct PB3WishGiftConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3WishGiftConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WishGiftConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3WishGiftConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WishGiftConfRes

@implementation PB3WishGiftConfRes

@dynamic giftIdsArray, giftIdsArray_Count;

typedef struct PB3WishGiftConfRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *giftIdsArray;
} PB3WishGiftConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3WishGiftConfRes_FieldNumber_GiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WishGiftConfRes__storage_, giftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WishGiftConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WishGiftConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EnterFossaRoom

@implementation PB3EnterFossaRoom

@dynamic roomId;

typedef struct PB3EnterFossaRoom__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3EnterFossaRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EnterFossaRoom_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EnterFossaRoom__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EnterFossaRoom class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EnterFossaRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LeaveFossaRoom

@implementation PB3LeaveFossaRoom


typedef struct PB3LeaveFossaRoom__storage_ {
  uint32_t _has_storage_[1];
} PB3LeaveFossaRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveFossaRoom class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LeaveFossaRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OtherRejectFossa

@implementation PB3OtherRejectFossa

@dynamic toast;

typedef struct PB3OtherRejectFossa__storage_ {
  uint32_t _has_storage_[1];
  NSString *toast;
} PB3OtherRejectFossa__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toast",
        .dataTypeSpecific.className = NULL,
        .number = PB3OtherRejectFossa_FieldNumber_Toast,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OtherRejectFossa__storage_, toast),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OtherRejectFossa class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OtherRejectFossa__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OtherLeaveFossaEarly

@implementation PB3OtherLeaveFossaEarly

@dynamic toast;

typedef struct PB3OtherLeaveFossaEarly__storage_ {
  uint32_t _has_storage_[1];
  NSString *toast;
} PB3OtherLeaveFossaEarly__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toast",
        .dataTypeSpecific.className = NULL,
        .number = PB3OtherLeaveFossaEarly_FieldNumber_Toast,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OtherLeaveFossaEarly__storage_, toast),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OtherLeaveFossaEarly class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OtherLeaveFossaEarly__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LeaveFossaRoomTimeReq

@implementation PB3LeaveFossaRoomTimeReq


typedef struct PB3LeaveFossaRoomTimeReq__storage_ {
  uint32_t _has_storage_[1];
} PB3LeaveFossaRoomTimeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveFossaRoomTimeReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LeaveFossaRoomTimeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LeaveFossaRoomTimeRes

@implementation PB3LeaveFossaRoomTimeRes

@dynamic leaveAt;

typedef struct PB3LeaveFossaRoomTimeRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t leaveAt;
} PB3LeaveFossaRoomTimeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "leaveAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveFossaRoomTimeRes_FieldNumber_LeaveAt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LeaveFossaRoomTimeRes__storage_, leaveAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveFossaRoomTimeRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LeaveFossaRoomTimeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OpenFossaRoomReq

@implementation PB3OpenFossaRoomReq

@dynamic open;

typedef struct PB3OpenFossaRoomReq__storage_ {
  uint32_t _has_storage_[1];
} PB3OpenFossaRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "open",
        .dataTypeSpecific.className = NULL,
        .number = PB3OpenFossaRoomReq_FieldNumber_Open,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenFossaRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OpenFossaRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OpenFossaRoomRes

@implementation PB3OpenFossaRoomRes


typedef struct PB3OpenFossaRoomRes__storage_ {
  uint32_t _has_storage_[1];
} PB3OpenFossaRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OpenFossaRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OpenFossaRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateChoiceHatOwner

@implementation PB3BroadcastMateChoiceHatOwner

@dynamic hatOwnerId;
@dynamic hatLevel;
@dynamic hatIcon;

typedef struct PB3BroadcastMateChoiceHatOwner__storage_ {
  uint32_t _has_storage_[1];
  int32_t hatLevel;
  NSString *hatIcon;
  int64_t hatOwnerId;
} PB3BroadcastMateChoiceHatOwner__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hatOwnerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceHatOwner_FieldNumber_HatOwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceHatOwner__storage_, hatOwnerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hatLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceHatOwner_FieldNumber_HatLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceHatOwner__storage_, hatLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hatIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceHatOwner_FieldNumber_HatIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceHatOwner__storage_, hatIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateChoiceHatOwner class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateChoiceHatOwner__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateChoiceChangeStatusSuccess

@implementation PB3BroadcastMateChoiceChangeStatusSuccess

@dynamic status;
@dynamic choiceEndUnix;

typedef struct PB3BroadcastMateChoiceChangeStatusSuccess__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int64_t choiceEndUnix;
} PB3BroadcastMateChoiceChangeStatusSuccess__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceChangeStatusSuccess_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceChangeStatusSuccess__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "choiceEndUnix",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceChangeStatusSuccess_FieldNumber_ChoiceEndUnix,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceChangeStatusSuccess__storage_, choiceEndUnix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateChoiceChangeStatusSuccess class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateChoiceChangeStatusSuccess__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateChoiceSelectChairNumber

@implementation PB3BroadcastMateChoiceSelectChairNumber

@dynamic playerId;
@dynamic selectPlayerId;

typedef struct PB3BroadcastMateChoiceSelectChairNumber__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t selectPlayerId;
} PB3BroadcastMateChoiceSelectChairNumber__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceSelectChairNumber_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceSelectChairNumber__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selectPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoiceSelectChairNumber_FieldNumber_SelectPlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoiceSelectChairNumber__storage_, selectPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateChoiceSelectChairNumber class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateChoiceSelectChairNumber__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoiceSelectChairNumberReq

@implementation PB3MateChoiceSelectChairNumberReq

@dynamic selectPlayerId;

typedef struct PB3MateChoiceSelectChairNumberReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t selectPlayerId;
} PB3MateChoiceSelectChairNumberReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selectPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateChoiceSelectChairNumberReq_FieldNumber_SelectPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MateChoiceSelectChairNumberReq__storage_, selectPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoiceSelectChairNumberReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MateChoiceSelectChairNumberReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateChoiceSelectChairNumberRes

@implementation PB3MateChoiceSelectChairNumberRes


typedef struct PB3MateChoiceSelectChairNumberRes__storage_ {
  uint32_t _has_storage_[1];
} PB3MateChoiceSelectChairNumberRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateChoiceSelectChairNumberRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MateChoiceSelectChairNumberRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateChoice2Pairs

@implementation PB3BroadcastMateChoice2Pairs

@dynamic pairs, pairs_Count;

typedef struct PB3BroadcastMateChoice2Pairs__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Int64Dictionary *pairs;
} PB3BroadcastMateChoice2Pairs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pairs",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastMateChoice2Pairs_FieldNumber_Pairs,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastMateChoice2Pairs__storage_, pairs),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateChoice2Pairs class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMateChoice2Pairs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMateChoice2ChangeStatusToReady

@implementation PB3BroadcastMateChoice2ChangeStatusToReady


typedef struct PB3BroadcastMateChoice2ChangeStatusToReady__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastMateChoice2ChangeStatusToReady__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMateChoice2ChangeStatusToReady class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BroadcastMateChoice2ChangeStatusToReady__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InitMateRoomGoldStatReq

@implementation PB3InitMateRoomGoldStatReq


typedef struct PB3InitMateRoomGoldStatReq__storage_ {
  uint32_t _has_storage_[1];
} PB3InitMateRoomGoldStatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InitMateRoomGoldStatReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3InitMateRoomGoldStatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InitMateRoomGoldStatRes

@implementation PB3InitMateRoomGoldStatRes


typedef struct PB3InitMateRoomGoldStatRes__storage_ {
  uint32_t _has_storage_[1];
} PB3InitMateRoomGoldStatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InitMateRoomGoldStatRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3InitMateRoomGoldStatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateRoomGoldStatReq

@implementation PB3MateRoomGoldStatReq


typedef struct PB3MateRoomGoldStatReq__storage_ {
  uint32_t _has_storage_[1];
} PB3MateRoomGoldStatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateRoomGoldStatReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3MateRoomGoldStatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MateRoomGoldStatRes

@implementation PB3MateRoomGoldStatRes

@dynamic roomId;
@dynamic totalGold;

typedef struct PB3MateRoomGoldStatRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
  int64_t totalGold;
} PB3MateRoomGoldStatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomGoldStatRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MateRoomGoldStatRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3MateRoomGoldStatRes_FieldNumber_TotalGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MateRoomGoldStatRes__storage_, totalGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MateRoomGoldStatRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MateRoomGoldStatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BgmPlayerSwitch

@implementation PB3BgmPlayerSwitch

@dynamic isSwitch;

typedef struct PB3BgmPlayerSwitch__storage_ {
  uint32_t _has_storage_[1];
} PB3BgmPlayerSwitch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSwitch",
        .dataTypeSpecific.className = NULL,
        .number = PB3BgmPlayerSwitch_FieldNumber_IsSwitch,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BgmPlayerSwitch class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BgmPlayerSwitch__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FullChairRoomReq

@implementation PB3FullChairRoomReq


typedef struct PB3FullChairRoomReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FullChairRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FullChairRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FullChairRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FullChairRoomRes

@implementation PB3FullChairRoomRes

@dynamic roomId;

typedef struct PB3FullChairRoomRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3FullChairRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FullChairRoomRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FullChairRoomRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FullChairRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FullChairRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomCubism

@implementation PB3BroadcastRoomCubism

@dynamic enable;

typedef struct PB3BroadcastRoomCubism__storage_ {
  uint32_t _has_storage_[1];
} PB3BroadcastRoomCubism__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enable",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomCubism_FieldNumber_Enable,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomCubism class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomCubism__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewUserRandomRoomReq

@implementation PB3NewUserRandomRoomReq


typedef struct PB3NewUserRandomRoomReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NewUserRandomRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewUserRandomRoomReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NewUserRandomRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewUserRandomRoomRes

@implementation PB3NewUserRandomRoomRes

@dynamic isOpen;
@dynamic maleRoomId;
@dynamic femaleRoomId;

typedef struct PB3NewUserRandomRoomRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t maleRoomId;
  int64_t femaleRoomId;
} PB3NewUserRandomRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isOpen",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserRandomRoomRes_FieldNumber_IsOpen,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "maleRoomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserRandomRoomRes_FieldNumber_MaleRoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewUserRandomRoomRes__storage_, maleRoomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "femaleRoomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserRandomRoomRes_FieldNumber_FemaleRoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewUserRandomRoomRes__storage_, femaleRoomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewUserRandomRoomRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewUserRandomRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryRoomTopRightCornerLabelReq

@implementation PB3QueryRoomTopRightCornerLabelReq


typedef struct PB3QueryRoomTopRightCornerLabelReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryRoomTopRightCornerLabelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryRoomTopRightCornerLabelReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryRoomTopRightCornerLabelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryRoomTopRightCornerLabelRes

@implementation PB3QueryRoomTopRightCornerLabelRes

@dynamic infoListArray, infoListArray_Count;

typedef struct PB3QueryRoomTopRightCornerLabelRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *infoListArray;
} PB3QueryRoomTopRightCornerLabelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomTopRightCornerLabelInfo),
        .number = PB3QueryRoomTopRightCornerLabelRes_FieldNumber_InfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QueryRoomTopRightCornerLabelRes__storage_, infoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryRoomTopRightCornerLabelRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryRoomTopRightCornerLabelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000infoList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomTopRightCornerLabel

@implementation PB3BroadcastRoomTopRightCornerLabel

@dynamic infoListArray, infoListArray_Count;

typedef struct PB3BroadcastRoomTopRightCornerLabel__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *infoListArray;
} PB3BroadcastRoomTopRightCornerLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomTopRightCornerLabelInfo),
        .number = PB3BroadcastRoomTopRightCornerLabel_FieldNumber_InfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomTopRightCornerLabel__storage_, infoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomTopRightCornerLabel class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomTopRightCornerLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000infoList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryRoomEffectConfReq

@implementation PB3QueryRoomEffectConfReq

@dynamic roomId;

typedef struct PB3QueryRoomEffectConfReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3QueryRoomEffectConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryRoomEffectConfReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryRoomEffectConfReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryRoomEffectConfReq class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryRoomEffectConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomTopRightCornerLabelChange

@implementation PB3BroadcastRoomTopRightCornerLabelChange

@dynamic listArray, listArray_Count;

typedef struct PB3BroadcastRoomTopRightCornerLabelChange__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3BroadcastRoomTopRightCornerLabelChange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BroadcastRoomTopRightCornerLabelChange_Act),
        .number = PB3BroadcastRoomTopRightCornerLabelChange_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomTopRightCornerLabelChange__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomTopRightCornerLabelChange class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomTopRightCornerLabelChange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastRoomTopRightCornerLabelChange_Act

@implementation PB3BroadcastRoomTopRightCornerLabelChange_Act

@dynamic actId;
@dynamic relId;
@dynamic listArray, listArray_Count;

typedef struct PB3BroadcastRoomTopRightCornerLabelChange_Act__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  NSMutableArray *listArray;
} PB3BroadcastRoomTopRightCornerLabelChange_Act__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomTopRightCornerLabelChange_Act_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomTopRightCornerLabelChange_Act__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastRoomTopRightCornerLabelChange_Act_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomTopRightCornerLabelChange_Act__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomTopRightCornerLabelChangeField),
        .number = PB3BroadcastRoomTopRightCornerLabelChange_Act_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BroadcastRoomTopRightCornerLabelChange_Act__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastRoomTopRightCornerLabelChange_Act class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastRoomTopRightCornerLabelChange_Act__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PB3BroadcastRoomTopRightCornerLabelChange)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryRoomEffectConfRes

@implementation PB3QueryRoomEffectConfRes

@dynamic roomEffectURL;
@dynamic roomPcEffectURL;
@dynamic effectEndTime;

typedef struct PB3QueryRoomEffectConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomEffectURL;
  NSString *roomPcEffectURL;
  int64_t effectEndTime;
} PB3QueryRoomEffectConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomEffectURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryRoomEffectConfRes_FieldNumber_RoomEffectURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryRoomEffectConfRes__storage_, roomEffectURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomPcEffectURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryRoomEffectConfRes_FieldNumber_RoomPcEffectURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryRoomEffectConfRes__storage_, roomPcEffectURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryRoomEffectConfRes_FieldNumber_EffectEndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QueryRoomEffectConfRes__storage_, effectEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryRoomEffectConfRes class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryRoomEffectConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\004\246\241!!\000\002\004\242\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomTopRightCornerLabelInfo

@implementation PB3RoomTopRightCornerLabelInfo

@dynamic labelType;
@dynamic actId;
@dynamic relActId;
@dynamic router;
@dynamic playerIcon1;
@dynamic playerIcon2;
@dynamic remainingTime;
@dynamic appLabelIcon;
@dynamic appLabelEffect;
@dynamic pcLabelIcon;
@dynamic pcLabelEffect;
@dynamic countdownColor;
@dynamic numberContent;
@dynamic numberBackgroundImage;
@dynamic numberColor;
@dynamic countdownBackgroundImage;
@dynamic pcNumberBackgroundImage;
@dynamic pcCountdownBackgroundImage;
@dynamic wealthMin;
@dynamic wealthMax;
@dynamic charmMin;
@dynamic charmMax;
@dynamic logicType;
@dynamic hasEvent, event;
@dynamic roomId;
@dynamic progressBarColor;
@dynamic progressBarBackgroundColor;
@dynamic progressBarNumberColor;
@dynamic currentNum;
@dynamic goalNum;
@dynamic showCountdown;
@dynamic showNumber;

typedef struct PB3RoomTopRightCornerLabelInfo__storage_ {
  uint32_t _has_storage_[2];
  PB3RoomTopRightCornerLabelType labelType;
  int32_t actId;
  int32_t relActId;
  int32_t currentNum;
  int32_t goalNum;
  NSString *router;
  NSString *playerIcon1;
  NSString *playerIcon2;
  NSString *appLabelIcon;
  NSString *appLabelEffect;
  NSString *pcLabelIcon;
  NSString *pcLabelEffect;
  NSString *countdownColor;
  NSString *numberContent;
  NSString *numberBackgroundImage;
  NSString *numberColor;
  NSString *countdownBackgroundImage;
  NSString *pcNumberBackgroundImage;
  NSString *pcCountdownBackgroundImage;
  PB3SystemNoticeEvent *event;
  NSString *progressBarColor;
  NSString *progressBarBackgroundColor;
  NSString *progressBarNumberColor;
  int64_t remainingTime;
  int64_t wealthMin;
  int64_t wealthMax;
  int64_t charmMin;
  int64_t charmMax;
  int64_t roomId;
} PB3RoomTopRightCornerLabelInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "labelType",
        .dataTypeSpecific.enumDescFunc = PB3RoomTopRightCornerLabelType_EnumDescriptor,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_LabelType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, labelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_RelActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "router",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_Router,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, router),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon1",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_PlayerIcon1,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, playerIcon1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_PlayerIcon2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, playerIcon2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remainingTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_RemainingTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, remainingTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "appLabelIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_AppLabelIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, appLabelIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appLabelEffect",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_AppLabelEffect,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, appLabelEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcLabelIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_PcLabelIcon,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, pcLabelIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcLabelEffect",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_PcLabelEffect,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, pcLabelEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countdownColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_CountdownColor,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, countdownColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numberContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_NumberContent,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, numberContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numberBackgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_NumberBackgroundImage,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, numberBackgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numberColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_NumberColor,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, numberColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countdownBackgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_CountdownBackgroundImage,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, countdownBackgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcNumberBackgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_PcNumberBackgroundImage,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, pcNumberBackgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcCountdownBackgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_PcCountdownBackgroundImage,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, pcCountdownBackgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealthMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_WealthMin,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, wealthMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wealthMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_WealthMax,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, wealthMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "charmMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_CharmMin,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, charmMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "charmMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_CharmMax,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, charmMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "logicType",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_LogicType,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "event",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SystemNoticeEvent),
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_Event,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_RoomId,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "progressBarColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_ProgressBarColor,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, progressBarColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "progressBarBackgroundColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_ProgressBarBackgroundColor,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, progressBarBackgroundColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "progressBarNumberColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_ProgressBarNumberColor,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, progressBarNumberColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currentNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_CurrentNum,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, currentNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_GoalNum,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3RoomTopRightCornerLabelInfo__storage_, goalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "showCountdown",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_ShowCountdown,
        .hasIndex = 31,
        .offset = 32,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showNumber",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomTopRightCornerLabelInfo_FieldNumber_ShowNumber,
        .hasIndex = 33,
        .offset = 34,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomTopRightCornerLabelInfo class]
                                     rootClass:[PB3RoomExtRoot class]
                                          file:PB3RoomExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomTopRightCornerLabelInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomTopRightCornerLabelInfo_LabelType_RawValue(PB3RoomTopRightCornerLabelInfo *message) {
  GPBDescriptor *descriptor = [PB3RoomTopRightCornerLabelInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomTopRightCornerLabelInfo_FieldNumber_LabelType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomTopRightCornerLabelInfo_LabelType_RawValue(PB3RoomTopRightCornerLabelInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomTopRightCornerLabelInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomTopRightCornerLabelInfo_FieldNumber_LabelType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
