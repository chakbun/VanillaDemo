// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/acm_conf.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/AcmConfExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
#import "pb/ActivityCliExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3AcmConfExtRoot

@implementation PB3AcmConfExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3AcmConfExtRoot_FileDescriptor

static GPBFileDescriptor *PB3AcmConfExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3IMInteractionType

GPBEnumDescriptor *PB3IMInteractionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImitZero\000ImitTeaseTa\000ImitSincereWord\000Imi"
        "tChatCp\000";
    static const int32_t values[] = {
        PB3IMInteractionType_ImitZero,
        PB3IMInteractionType_ImitTeaseTa,
        PB3IMInteractionType_ImitSincereWord,
        PB3IMInteractionType_ImitChatCp,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IMInteractionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IMInteractionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IMInteractionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IMInteractionType_ImitZero:
    case PB3IMInteractionType_ImitTeaseTa:
    case PB3IMInteractionType_ImitSincereWord:
    case PB3IMInteractionType_ImitChatCp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3MobaTeamGameSettingType

GPBEnumDescriptor *PB3MobaTeamGameSettingType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MtgstNone\000";
    static const int32_t values[] = {
        PB3MobaTeamGameSettingType_MtgstNone,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3MobaTeamGameSettingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3MobaTeamGameSettingType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3MobaTeamGameSettingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3MobaTeamGameSettingType_MtgstNone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3MobaTeamGameSettingDataType

GPBEnumDescriptor *PB3MobaTeamGameSettingDataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MtgsdtNone\000MtgsdtOptions\000MtgsdtInputNum\000"
        "MtgsdtInputNumRange\000";
    static const int32_t values[] = {
        PB3MobaTeamGameSettingDataType_MtgsdtNone,
        PB3MobaTeamGameSettingDataType_MtgsdtOptions,
        PB3MobaTeamGameSettingDataType_MtgsdtInputNum,
        PB3MobaTeamGameSettingDataType_MtgsdtInputNumRange,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3MobaTeamGameSettingDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3MobaTeamGameSettingDataType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3MobaTeamGameSettingDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3MobaTeamGameSettingDataType_MtgsdtNone:
    case PB3MobaTeamGameSettingDataType_MtgsdtOptions:
    case PB3MobaTeamGameSettingDataType_MtgsdtInputNum:
    case PB3MobaTeamGameSettingDataType_MtgsdtInputNumRange:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3MobaTeamGameType

GPBEnumDescriptor *PB3MobaTeamGameType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MtgtNone\000MtgtKingHonor\000MtgtLolm\000MtgtGame"
        "ForPeace\000MtgtJcc\000";
    static const int32_t values[] = {
        PB3MobaTeamGameType_MtgtNone,
        PB3MobaTeamGameType_MtgtKingHonor,
        PB3MobaTeamGameType_MtgtLolm,
        PB3MobaTeamGameType_MtgtGameForPeace,
        PB3MobaTeamGameType_MtgtJcc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3MobaTeamGameType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3MobaTeamGameType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3MobaTeamGameType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3MobaTeamGameType_MtgtNone:
    case PB3MobaTeamGameType_MtgtKingHonor:
    case PB3MobaTeamGameType_MtgtLolm:
    case PB3MobaTeamGameType_MtgtGameForPeace:
    case PB3MobaTeamGameType_MtgtJcc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FirstPayGiftRewardType

GPBEnumDescriptor *PB3FirstPayGiftRewardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FpgrtNone\000FpgrtGift\000FpgrtEffect\000FpgrtNob"
        "ility\000";
    static const int32_t values[] = {
        PB3FirstPayGiftRewardType_FpgrtNone,
        PB3FirstPayGiftRewardType_FpgrtGift,
        PB3FirstPayGiftRewardType_FpgrtEffect,
        PB3FirstPayGiftRewardType_FpgrtNobility,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FirstPayGiftRewardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FirstPayGiftRewardType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FirstPayGiftRewardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FirstPayGiftRewardType_FpgrtNone:
    case PB3FirstPayGiftRewardType_FpgrtGift:
    case PB3FirstPayGiftRewardType_FpgrtEffect:
    case PB3FirstPayGiftRewardType_FpgrtNobility:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FirstPayGiftBoxType

GPBEnumDescriptor *PB3FirstPayGiftBoxType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FpgbtNone\000FpgbtBase\000FpgbtMiddle\000FpgbtBes"
        "t\000";
    static const int32_t values[] = {
        PB3FirstPayGiftBoxType_FpgbtNone,
        PB3FirstPayGiftBoxType_FpgbtBase,
        PB3FirstPayGiftBoxType_FpgbtMiddle,
        PB3FirstPayGiftBoxType_FpgbtBest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FirstPayGiftBoxType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FirstPayGiftBoxType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FirstPayGiftBoxType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FirstPayGiftBoxType_FpgbtNone:
    case PB3FirstPayGiftBoxType_FpgbtBase:
    case PB3FirstPayGiftBoxType_FpgbtMiddle:
    case PB3FirstPayGiftBoxType_FpgbtBest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FirstPayGiftRewardLimitType

GPBEnumDescriptor *PB3FirstPayGiftRewardLimitType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FpgrltNone\000FpgrltDaily\000";
    static const int32_t values[] = {
        PB3FirstPayGiftRewardLimitType_FpgrltNone,
        PB3FirstPayGiftRewardLimitType_FpgrltDaily,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FirstPayGiftRewardLimitType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FirstPayGiftRewardLimitType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FirstPayGiftRewardLimitType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FirstPayGiftRewardLimitType_FpgrltNone:
    case PB3FirstPayGiftRewardLimitType_FpgrltDaily:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LogicRelationshipType

GPBEnumDescriptor *PB3LogicRelationshipType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LrtNone\000LrtOr\000LrtAnd\000";
    static const int32_t values[] = {
        PB3LogicRelationshipType_LrtNone,
        PB3LogicRelationshipType_LrtOr,
        PB3LogicRelationshipType_LrtAnd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LogicRelationshipType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LogicRelationshipType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LogicRelationshipType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LogicRelationshipType_LrtNone:
    case PB3LogicRelationshipType_LrtOr:
    case PB3LogicRelationshipType_LrtAnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CouponLimitType

GPBEnumDescriptor *PB3CouponLimitType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CltNone\000CltAccount\000CltDevice\000";
    static const int32_t values[] = {
        PB3CouponLimitType_CltNone,
        PB3CouponLimitType_CltAccount,
        PB3CouponLimitType_CltDevice,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CouponLimitType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CouponLimitType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CouponLimitType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CouponLimitType_CltNone:
    case PB3CouponLimitType_CltAccount:
    case PB3CouponLimitType_CltDevice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CouponEffectType

GPBEnumDescriptor *PB3CouponEffectType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CetNone\000CetFixDate\000CetGet\000";
    static const int32_t values[] = {
        PB3CouponEffectType_CetNone,
        PB3CouponEffectType_CetFixDate,
        PB3CouponEffectType_CetGet,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CouponEffectType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CouponEffectType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CouponEffectType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CouponEffectType_CetNone:
    case PB3CouponEffectType_CetFixDate:
    case PB3CouponEffectType_CetGet:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SolitaireTarget

GPBEnumDescriptor *PB3SolitaireTarget_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SottZero\000SottUser\000SottPrizePoolInit\000";
    static const int32_t values[] = {
        PB3SolitaireTarget_SottZero,
        PB3SolitaireTarget_SottUser,
        PB3SolitaireTarget_SottPrizePoolInit,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SolitaireTarget)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SolitaireTarget_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SolitaireTarget_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SolitaireTarget_SottZero:
    case PB3SolitaireTarget_SottUser:
    case PB3SolitaireTarget_SottPrizePoolInit:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SolitaireEatPutType

GPBEnumDescriptor *PB3SolitaireEatPutType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SoteapZero\000SoteapEat\000SoteapPut\000";
    static const int32_t values[] = {
        PB3SolitaireEatPutType_SoteapZero,
        PB3SolitaireEatPutType_SoteapEat,
        PB3SolitaireEatPutType_SoteapPut,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SolitaireEatPutType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SolitaireEatPutType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SolitaireEatPutType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SolitaireEatPutType_SoteapZero:
    case PB3SolitaireEatPutType_SoteapEat:
    case PB3SolitaireEatPutType_SoteapPut:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SolitaireSchemeType

GPBEnumDescriptor *PB3SolitaireSchemeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SotstZero\000SotstNormal\000SotstEat\000SotstPut\000";
    static const int32_t values[] = {
        PB3SolitaireSchemeType_SotstZero,
        PB3SolitaireSchemeType_SotstNormal,
        PB3SolitaireSchemeType_SotstEat,
        PB3SolitaireSchemeType_SotstPut,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SolitaireSchemeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SolitaireSchemeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SolitaireSchemeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SolitaireSchemeType_SotstZero:
    case PB3SolitaireSchemeType_SotstNormal:
    case PB3SolitaireSchemeType_SotstEat:
    case PB3SolitaireSchemeType_SotstPut:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SolitaireTimeType

GPBEnumDescriptor *PB3SolitaireTimeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SotttZero\000SotttTimeSlot\000SotttEveryday\000";
    static const int32_t values[] = {
        PB3SolitaireTimeType_SotttZero,
        PB3SolitaireTimeType_SotttTimeSlot,
        PB3SolitaireTimeType_SotttEveryday,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SolitaireTimeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SolitaireTimeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SolitaireTimeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SolitaireTimeType_SotttZero:
    case PB3SolitaireTimeType_SotttTimeSlot:
    case PB3SolitaireTimeType_SotttEveryday:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3XcmKickOutRoomType

GPBEnumDescriptor *PB3XcmKickOutRoomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "XkortNone\000XkortSecond\000XkortMinute\000XkortH"
        "our\000XkortDay\000";
    static const int32_t values[] = {
        PB3XcmKickOutRoomType_XkortNone,
        PB3XcmKickOutRoomType_XkortSecond,
        PB3XcmKickOutRoomType_XkortMinute,
        PB3XcmKickOutRoomType_XkortHour,
        PB3XcmKickOutRoomType_XkortDay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3XcmKickOutRoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3XcmKickOutRoomType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3XcmKickOutRoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3XcmKickOutRoomType_XkortNone:
    case PB3XcmKickOutRoomType_XkortSecond:
    case PB3XcmKickOutRoomType_XkortMinute:
    case PB3XcmKickOutRoomType_XkortHour:
    case PB3XcmKickOutRoomType_XkortDay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftSkinStoreShowType

GPBEnumDescriptor *PB3GiftSkinStoreShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GsstNone\000GsstForever\000GsstTime\000";
    static const int32_t values[] = {
        PB3GiftSkinStoreShowType_GsstNone,
        PB3GiftSkinStoreShowType_GsstForever,
        PB3GiftSkinStoreShowType_GsstTime,
    };
    static const char *extraTextFormatInfo = "\003\000d\204\000\001d\207\000\002d\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftSkinStoreShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftSkinStoreShowType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftSkinStoreShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftSkinStoreShowType_GsstNone:
    case PB3GiftSkinStoreShowType_GsstForever:
    case PB3GiftSkinStoreShowType_GsstTime:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftSkinStoreDisplayType

GPBEnumDescriptor *PB3GiftSkinStoreDisplayType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GssdtNone\000GssdtWhiteList\000GssdtFixDisplay"
        "\000GssdtFixHidden\000";
    static const int32_t values[] = {
        PB3GiftSkinStoreDisplayType_GssdtNone,
        PB3GiftSkinStoreDisplayType_GssdtWhiteList,
        PB3GiftSkinStoreDisplayType_GssdtFixDisplay,
        PB3GiftSkinStoreDisplayType_GssdtFixHidden,
    };
    static const char *extraTextFormatInfo = "\004\000e\204\000\001e\211\000\002e\212\000\003e\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftSkinStoreDisplayType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftSkinStoreDisplayType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftSkinStoreDisplayType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftSkinStoreDisplayType_GssdtNone:
    case PB3GiftSkinStoreDisplayType_GssdtWhiteList:
    case PB3GiftSkinStoreDisplayType_GssdtFixDisplay:
    case PB3GiftSkinStoreDisplayType_GssdtFixHidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftSkinStoreTimeType

GPBEnumDescriptor *PB3GiftSkinStoreTimeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GsttNone\000GsttDay\000GsttHour\000GsttMin\000";
    static const int32_t values[] = {
        PB3GiftSkinStoreTimeType_GsttNone,
        PB3GiftSkinStoreTimeType_GsttDay,
        PB3GiftSkinStoreTimeType_GsttHour,
        PB3GiftSkinStoreTimeType_GsttMin,
    };
    static const char *extraTextFormatInfo = "\004\000d\204\000\001d\203\000\002d\204\000\003d\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftSkinStoreTimeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftSkinStoreTimeType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftSkinStoreTimeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftSkinStoreTimeType_GsttNone:
    case PB3GiftSkinStoreTimeType_GsttDay:
    case PB3GiftSkinStoreTimeType_GsttHour:
    case PB3GiftSkinStoreTimeType_GsttMin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GiftSkinStoreSoldType

GPBEnumDescriptor *PB3GiftSkinStoreSoldType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GssttNone\000GssttForever\000GssttAddTime\000";
    static const int32_t values[] = {
        PB3GiftSkinStoreSoldType_GssttNone,
        PB3GiftSkinStoreSoldType_GssttForever,
        PB3GiftSkinStoreSoldType_GssttAddTime,
    };
    static const char *extraTextFormatInfo = "\003\000e\204\000\001e\207\000\002e\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GiftSkinStoreSoldType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GiftSkinStoreSoldType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GiftSkinStoreSoldType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GiftSkinStoreSoldType_GssttNone:
    case PB3GiftSkinStoreSoldType_GssttForever:
    case PB3GiftSkinStoreSoldType_GssttAddTime:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OxygenCarGiftType

GPBEnumDescriptor *PB3OxygenCarGiftType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OcgtNone\000OcgtVoiceTest\000OcgtSingSong\000";
    static const int32_t values[] = {
        PB3OxygenCarGiftType_OcgtNone,
        PB3OxygenCarGiftType_OcgtVoiceTest,
        PB3OxygenCarGiftType_OcgtSingSong,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OxygenCarGiftType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OxygenCarGiftType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OxygenCarGiftType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OxygenCarGiftType_OcgtNone:
    case PB3OxygenCarGiftType_OcgtVoiceTest:
    case PB3OxygenCarGiftType_OcgtSingSong:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3IMInteractionConfList

@implementation PB3IMInteractionConfList

@dynamic type;
@dynamic gold;
@dynamic btnText;
@dynamic btnIcon;
@dynamic content;
@dynamic giftId;
@dynamic icon;
@dynamic typeName;
@dynamic tagIcon;

typedef struct PB3IMInteractionConfList__storage_ {
  uint32_t _has_storage_[1];
  PB3IMInteractionType type;
  int32_t gold;
  int32_t giftId;
  NSString *btnText;
  NSString *btnIcon;
  NSString *content;
  NSString *icon;
  NSString *typeName;
  NSString *tagIcon;
} PB3IMInteractionConfList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IMInteractionType_EnumDescriptor,
        .number = PB3IMInteractionConfList_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "btnText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_BtnText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, btnText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_BtnIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, btnIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_GiftId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_Icon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typeName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_TypeName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, typeName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMInteractionConfList_FieldNumber_TagIcon,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IMInteractionConfList__storage_, tagIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMInteractionConfList class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMInteractionConfList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IMInteractionConfList_Type_RawValue(PB3IMInteractionConfList *message) {
  GPBDescriptor *descriptor = [PB3IMInteractionConfList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMInteractionConfList_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IMInteractionConfList_Type_RawValue(PB3IMInteractionConfList *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IMInteractionConfList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IMInteractionConfList_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IMVideoBtnConfList

@implementation PB3IMVideoBtnConfList

@dynamic btnType;
@dynamic btnOnOff;
@dynamic btnTitle;
@dynamic btnText;
@dynamic btnDesc;
@dynamic imIcon;

typedef struct PB3IMVideoBtnConfList__storage_ {
  uint32_t _has_storage_[1];
  int32_t btnType;
  NSString *btnTitle;
  NSString *btnText;
  NSString *btnDesc;
  NSString *imIcon;
} PB3IMVideoBtnConfList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "btnType",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMVideoBtnConfList_FieldNumber_BtnType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IMVideoBtnConfList__storage_, btnType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "btnOnOff",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMVideoBtnConfList_FieldNumber_BtnOnOff,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "btnTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMVideoBtnConfList_FieldNumber_BtnTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IMVideoBtnConfList__storage_, btnTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnText",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMVideoBtnConfList_FieldNumber_BtnText,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IMVideoBtnConfList__storage_, btnText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMVideoBtnConfList_FieldNumber_BtnDesc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IMVideoBtnConfList__storage_, btnDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMVideoBtnConfList_FieldNumber_ImIcon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IMVideoBtnConfList__storage_, imIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMVideoBtnConfList class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMVideoBtnConfList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomAllDecorateItem

@implementation PB3RoomAllDecorateItem

@dynamic decorateId;
@dynamic decorateType;
@dynamic canBuy;
@dynamic name;
@dynamic bgURL;
@dynamic smallBgURL;
@dynamic pcURL;
@dynamic smallPcURL;
@dynamic rightSignString;
@dynamic describe;
@dynamic remainTime;
@dynamic isUse;
@dynamic shopItemArray, shopItemArray_Count;
@dynamic weight;
@dynamic isBelong;
@dynamic roomTypeArray, roomTypeArray_Count;
@dynamic shelterURL;
@dynamic pcShelterURL;
@dynamic stretchableURL;
@dynamic isOffShelf;
@dynamic roomPatternArray, roomPatternArray_Count;
@dynamic bgVideoURL;
@dynamic bgVideoPcURL;

typedef struct PB3RoomAllDecorateItem__storage_ {
  uint32_t _has_storage_[1];
  PB3DecorateType decorateType;
  int32_t weight;
  NSString *name;
  NSString *bgURL;
  NSString *smallBgURL;
  NSString *pcURL;
  NSString *smallPcURL;
  NSString *rightSignString;
  NSString *describe;
  NSMutableArray *shopItemArray;
  GPBEnumArray *roomTypeArray;
  NSString *shelterURL;
  NSString *pcShelterURL;
  NSString *stretchableURL;
  GPBEnumArray *roomPatternArray;
  NSString *bgVideoURL;
  NSString *bgVideoPcURL;
  int64_t decorateId;
  int64_t remainTime;
} PB3RoomAllDecorateItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_DecorateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, decorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "decorateType",
        .dataTypeSpecific.enumDescFunc = PB3DecorateType_EnumDescriptor,
        .number = PB3RoomAllDecorateItem_FieldNumber_DecorateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, decorateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "canBuy",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_CanBuy,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_BgURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, bgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_SmallBgURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, smallBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_PcURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, pcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallPcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_SmallPcURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, smallPcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rightSignString",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_RightSignString,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, rightSignString),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "describe",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_Describe,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, describe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remainTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_RemainTime,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, remainTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isUse",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_IsUse,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "shopItemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomShopDecorateItem),
        .number = PB3RoomAllDecorateItem_FieldNumber_ShopItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, shopItemArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_Weight,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isBelong",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_IsBelong,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomTypeArray",
        .dataTypeSpecific.enumDescFunc = PB3RoomFlagType_EnumDescriptor,
        .number = PB3RoomAllDecorateItem_FieldNumber_RoomTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, roomTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_ShelterURL,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, shelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcShelterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_PcShelterURL,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, pcShelterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stretchableURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_StretchableURL,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, stretchableURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isOffShelf",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_IsOffShelf,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomPatternArray",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3RoomAllDecorateItem_FieldNumber_RoomPatternArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, roomPatternArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bgVideoURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_BgVideoURL,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, bgVideoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgVideoPcURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAllDecorateItem_FieldNumber_BgVideoPcURL,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3RoomAllDecorateItem__storage_, bgVideoPcURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomAllDecorateItem class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomAllDecorateItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\005\002\241!!\000\006\005\242\241!!\000\007\002\241!!\000\010\005\242\241!!\000\021\007\241!!\000\022\002\247\241!!\000"
        "\023\013\241!!\000\026\002\245\241!!\000\027\002\245\242\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomAllDecorateItem_DecorateType_RawValue(PB3RoomAllDecorateItem *message) {
  GPBDescriptor *descriptor = [PB3RoomAllDecorateItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomAllDecorateItem_FieldNumber_DecorateType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomAllDecorateItem_DecorateType_RawValue(PB3RoomAllDecorateItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomAllDecorateItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomAllDecorateItem_FieldNumber_DecorateType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomShopDecorateItem

@implementation PB3RoomShopDecorateItem

@dynamic shopId;
@dynamic num;
@dynamic price;
@dynamic unit;
@dynamic pic;
@dynamic pcPic;
@dynamic weight;
@dynamic isOffShelf;

typedef struct PB3RoomShopDecorateItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  int32_t price;
  int32_t weight;
  NSString *unit;
  NSString *pic;
  NSString *pcPic;
  int64_t shopId;
} PB3RoomShopDecorateItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shopId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_ShopId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomShopDecorateItem__storage_, shopId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomShopDecorateItem__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_Price,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomShopDecorateItem__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_Unit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomShopDecorateItem__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pic",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_Pic,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomShopDecorateItem__storage_, pic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcPic",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_PcPic,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomShopDecorateItem__storage_, pcPic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_Weight,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomShopDecorateItem__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isOffShelf",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShopDecorateItem_FieldNumber_IsOffShelf,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomShopDecorateItem class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomShopDecorateItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MobaTeamGameSettingData

@implementation PB3MobaTeamGameSettingData

@dynamic dataId;
@dynamic dataName;

typedef struct PB3MobaTeamGameSettingData__storage_ {
  uint32_t _has_storage_[1];
  NSString *dataName;
  int64_t dataId;
} PB3MobaTeamGameSettingData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dataId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSettingData_FieldNumber_DataId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingData__storage_, dataId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dataName",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSettingData_FieldNumber_DataName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingData__storage_, dataName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MobaTeamGameSettingData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MobaTeamGameSettingData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MobaTeamGameSettingCfg

@implementation PB3MobaTeamGameSettingCfg

@dynamic settingId;
@dynamic settingType;
@dynamic settingName;
@dynamic settingDataType;
@dynamic settingDataArray, settingDataArray_Count;
@dynamic settingSort;
@dynamic dataDefault;

typedef struct PB3MobaTeamGameSettingCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3MobaTeamGameSettingType settingType;
  PB3MobaTeamGameSettingDataType settingDataType;
  NSString *settingName;
  NSMutableArray *settingDataArray;
  int64_t settingId;
  int64_t settingSort;
  int64_t dataDefault;
} PB3MobaTeamGameSettingCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "settingId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSettingCfg_FieldNumber_SettingId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingCfg__storage_, settingId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "settingType",
        .dataTypeSpecific.enumDescFunc = PB3MobaTeamGameSettingType_EnumDescriptor,
        .number = PB3MobaTeamGameSettingCfg_FieldNumber_SettingType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingCfg__storage_, settingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "settingName",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSettingCfg_FieldNumber_SettingName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingCfg__storage_, settingName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "settingDataType",
        .dataTypeSpecific.enumDescFunc = PB3MobaTeamGameSettingDataType_EnumDescriptor,
        .number = PB3MobaTeamGameSettingCfg_FieldNumber_SettingDataType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingCfg__storage_, settingDataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "settingDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MobaTeamGameSettingData),
        .number = PB3MobaTeamGameSettingCfg_FieldNumber_SettingDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingCfg__storage_, settingDataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "settingSort",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSettingCfg_FieldNumber_SettingSort,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingCfg__storage_, settingSort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dataDefault",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameSettingCfg_FieldNumber_DataDefault,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameSettingCfg__storage_, dataDefault),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MobaTeamGameSettingCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MobaTeamGameSettingCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3MobaTeamGameSettingCfg_SettingType_RawValue(PB3MobaTeamGameSettingCfg *message) {
  GPBDescriptor *descriptor = [PB3MobaTeamGameSettingCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MobaTeamGameSettingCfg_FieldNumber_SettingType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3MobaTeamGameSettingCfg_SettingType_RawValue(PB3MobaTeamGameSettingCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3MobaTeamGameSettingCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MobaTeamGameSettingCfg_FieldNumber_SettingType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3MobaTeamGameSettingCfg_SettingDataType_RawValue(PB3MobaTeamGameSettingCfg *message) {
  GPBDescriptor *descriptor = [PB3MobaTeamGameSettingCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MobaTeamGameSettingCfg_FieldNumber_SettingDataType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3MobaTeamGameSettingCfg_SettingDataType_RawValue(PB3MobaTeamGameSettingCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3MobaTeamGameSettingCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MobaTeamGameSettingCfg_FieldNumber_SettingDataType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3MobaTeamGameMemberCfg

@implementation PB3MobaTeamGameMemberCfg

@dynamic defaultMemberNum;
@dynamic minMemberNum;
@dynamic maxMemberNum;

typedef struct PB3MobaTeamGameMemberCfg__storage_ {
  uint32_t _has_storage_[1];
  int64_t defaultMemberNum;
  int64_t minMemberNum;
  int64_t maxMemberNum;
} PB3MobaTeamGameMemberCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "defaultMemberNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameMemberCfg_FieldNumber_DefaultMemberNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameMemberCfg__storage_, defaultMemberNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "minMemberNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameMemberCfg_FieldNumber_MinMemberNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameMemberCfg__storage_, minMemberNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxMemberNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameMemberCfg_FieldNumber_MaxMemberNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameMemberCfg__storage_, maxMemberNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MobaTeamGameMemberCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MobaTeamGameMemberCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MobaTeamGameCfg

@implementation PB3MobaTeamGameCfg

@dynamic gameId;
@dynamic name;
@dynamic settingsArray, settingsArray_Count;
@dynamic gameSort;
@dynamic gameIcon;
@dynamic gameIconRoom;
@dynamic gameBgRoom;
@dynamic gameFrameBro;
@dynamic gameBgBro;
@dynamic gameFrameColor;
@dynamic hasMemberCfg, memberCfg;
@dynamic defaultDemandDesc;
@dynamic gameBgBroPc;
@dynamic demandDescListArray, demandDescListArray_Count;
@dynamic gameType;
@dynamic adOpenGameLink;
@dynamic gameNameBgColorStart;
@dynamic gameNameBgColorEnd;

typedef struct PB3MobaTeamGameCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3MobaTeamGameType gameType;
  NSString *name;
  NSMutableArray *settingsArray;
  NSString *gameIcon;
  NSString *gameIconRoom;
  NSString *gameBgRoom;
  NSString *gameFrameBro;
  NSString *gameBgBro;
  NSString *gameFrameColor;
  PB3MobaTeamGameMemberCfg *memberCfg;
  NSString *defaultDemandDesc;
  NSString *gameBgBroPc;
  NSMutableArray *demandDescListArray;
  NSString *adOpenGameLink;
  NSString *gameNameBgColorStart;
  NSString *gameNameBgColorEnd;
  int64_t gameId;
  int64_t gameSort;
} PB3MobaTeamGameCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "settingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MobaTeamGameSettingCfg),
        .number = PB3MobaTeamGameCfg_FieldNumber_SettingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, settingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameSort",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameSort,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameSort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gameIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameIconRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameIconRoom,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameIconRoom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameBgRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameBgRoom,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameBgRoom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameFrameBro",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameFrameBro,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameFrameBro),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameBgBro",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameBgBro,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameBgBro),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameFrameColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameFrameColor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameFrameColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberCfg",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MobaTeamGameMemberCfg),
        .number = PB3MobaTeamGameCfg_FieldNumber_MemberCfg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, memberCfg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultDemandDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_DefaultDemandDesc,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, defaultDemandDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameBgBroPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameBgBroPc,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameBgBroPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "demandDescListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_DemandDescListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, demandDescListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameType",
        .dataTypeSpecific.enumDescFunc = PB3MobaTeamGameType_EnumDescriptor,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "adOpenGameLink",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_AdOpenGameLink,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, adOpenGameLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameNameBgColorStart",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameNameBgColorStart,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameNameBgColorStart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameNameBgColorEnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3MobaTeamGameCfg_FieldNumber_GameNameBgColorEnd,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3MobaTeamGameCfg__storage_, gameNameBgColorEnd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MobaTeamGameCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MobaTeamGameCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3MobaTeamGameCfg_GameType_RawValue(PB3MobaTeamGameCfg *message) {
  GPBDescriptor *descriptor = [PB3MobaTeamGameCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MobaTeamGameCfg_FieldNumber_GameType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3MobaTeamGameCfg_GameType_RawValue(PB3MobaTeamGameCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3MobaTeamGameCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MobaTeamGameCfg_FieldNumber_GameType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3XcmFirstPayGiftBaseCfg

@implementation PB3XcmFirstPayGiftBaseCfg

@dynamic mostValueDesc;
@dynamic mostValueURL;
@dynamic mostValueH5URL;
@dynamic windowStay;
@dynamic windowPopupTimes;
@dynamic wealthLev;
@dynamic charmLev;
@dynamic levRelationship;
@dynamic windowJumpURL;

typedef struct PB3XcmFirstPayGiftBaseCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t windowStay;
  int32_t windowPopupTimes;
  int32_t wealthLev;
  int32_t charmLev;
  PB3LogicRelationshipType levRelationship;
  NSString *mostValueDesc;
  NSString *mostValueURL;
  NSString *mostValueH5URL;
  NSString *windowJumpURL;
} PB3XcmFirstPayGiftBaseCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mostValueDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_MostValueDesc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, mostValueDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mostValueURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_MostValueURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, mostValueURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mostValueH5URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_MostValueH5URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, mostValueH5URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "windowStay",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_WindowStay,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, windowStay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "windowPopupTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_WindowPopupTimes,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, windowPopupTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_WealthLev,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, wealthLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_CharmLev,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, charmLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levRelationship",
        .dataTypeSpecific.enumDescFunc = PB3LogicRelationshipType_EnumDescriptor,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_LevRelationship,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, levRelationship),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "windowJumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftBaseCfg_FieldNumber_WindowJumpURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftBaseCfg__storage_, windowJumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmFirstPayGiftBaseCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmFirstPayGiftBaseCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\004\245\241!!\000\003\004\245\242\241!!\000\t\006\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3XcmFirstPayGiftBaseCfg_LevRelationship_RawValue(PB3XcmFirstPayGiftBaseCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftBaseCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftBaseCfg_FieldNumber_LevRelationship];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmFirstPayGiftBaseCfg_LevRelationship_RawValue(PB3XcmFirstPayGiftBaseCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftBaseCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftBaseCfg_FieldNumber_LevRelationship];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3XcmFirstPayGiftRewardCfg

@implementation PB3XcmFirstPayGiftRewardCfg

@dynamic id_p;
@dynamic rewardId;
@dynamic rewardType;
@dynamic expiredTime;
@dynamic limitType;
@dynamic limitNum;
@dynamic boxType;
@dynamic boxSort;
@dynamic rewardNum;
@dynamic rewardUnit;
@dynamic isWorth;
@dynamic weight;

typedef struct PB3XcmFirstPayGiftRewardCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3FirstPayGiftRewardType rewardType;
  PB3FirstPayGiftRewardLimitType limitType;
  PB3FirstPayGiftBoxType boxType;
  int32_t boxSort;
  int32_t rewardNum;
  NSString *rewardUnit;
  int64_t id_p;
  int64_t rewardId;
  int64_t expiredTime;
  int64_t limitNum;
  int64_t weight;
} PB3XcmFirstPayGiftRewardCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rewardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_RewardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, rewardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rewardType",
        .dataTypeSpecific.enumDescFunc = PB3FirstPayGiftRewardType_EnumDescriptor,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_RewardType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, rewardType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "expiredTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_ExpiredTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, expiredTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "limitType",
        .dataTypeSpecific.enumDescFunc = PB3FirstPayGiftRewardLimitType_EnumDescriptor,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_LimitType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, limitType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "limitNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_LimitNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, limitNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxType",
        .dataTypeSpecific.enumDescFunc = PB3FirstPayGiftBoxType_EnumDescriptor,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_BoxType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, boxType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "boxSort",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_BoxSort,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, boxSort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rewardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_RewardNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, rewardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rewardUnit",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_RewardUnit,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, rewardUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isWorth",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_IsWorth,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmFirstPayGiftRewardCfg_FieldNumber_Weight,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3XcmFirstPayGiftRewardCfg__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmFirstPayGiftRewardCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmFirstPayGiftRewardCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3XcmFirstPayGiftRewardCfg_RewardType_RawValue(PB3XcmFirstPayGiftRewardCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftRewardCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftRewardCfg_FieldNumber_RewardType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmFirstPayGiftRewardCfg_RewardType_RawValue(PB3XcmFirstPayGiftRewardCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftRewardCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftRewardCfg_FieldNumber_RewardType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3XcmFirstPayGiftRewardCfg_LimitType_RawValue(PB3XcmFirstPayGiftRewardCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftRewardCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftRewardCfg_FieldNumber_LimitType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmFirstPayGiftRewardCfg_LimitType_RawValue(PB3XcmFirstPayGiftRewardCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftRewardCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftRewardCfg_FieldNumber_LimitType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3XcmFirstPayGiftRewardCfg_BoxType_RawValue(PB3XcmFirstPayGiftRewardCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftRewardCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftRewardCfg_FieldNumber_BoxType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmFirstPayGiftRewardCfg_BoxType_RawValue(PB3XcmFirstPayGiftRewardCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmFirstPayGiftRewardCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmFirstPayGiftRewardCfg_FieldNumber_BoxType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPTips

@implementation PB3CPTips

@dynamic tipsBossArray, tipsBossArray_Count;
@dynamic tipsPwArray, tipsPwArray_Count;

typedef struct PB3CPTips__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tipsBossArray;
  NSMutableArray *tipsPwArray;
} PB3CPTips__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tipsBossArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPTips_FieldNumber_TipsBossArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CPTips__storage_, tipsBossArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tipsPwArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPTips_FieldNumber_TipsPwArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CPTips__storage_, tipsPwArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPTips class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPTips__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IM1V1Tips

@implementation PB3IM1V1Tips

@dynamic tipsBossArray, tipsBossArray_Count;
@dynamic tipsPwArray, tipsPwArray_Count;

typedef struct PB3IM1V1Tips__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tipsBossArray;
  NSMutableArray *tipsPwArray;
} PB3IM1V1Tips__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tipsBossArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3IM1V1Tips_FieldNumber_TipsBossArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IM1V1Tips__storage_, tipsBossArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tipsPwArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3IM1V1Tips_FieldNumber_TipsPwArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IM1V1Tips__storage_, tipsPwArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IM1V1Tips class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IM1V1Tips__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IMPresentPushCfg

@implementation PB3IMPresentPushCfg

@dynamic showTimeOutApp;
@dynamic showTimeOutPc;

typedef struct PB3IMPresentPushCfg__storage_ {
  uint32_t _has_storage_[1];
  int64_t showTimeOutApp;
  int64_t showTimeOutPc;
} PB3IMPresentPushCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showTimeOutApp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPushCfg_FieldNumber_ShowTimeOutApp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IMPresentPushCfg__storage_, showTimeOutApp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showTimeOutPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMPresentPushCfg_FieldNumber_ShowTimeOutPc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IMPresentPushCfg__storage_, showTimeOutPc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMPresentPushCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMPresentPushCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CouponCfg

@implementation PB3CouponCfg

@dynamic id_p;
@dynamic name;
@dynamic discountType;
@dynamic fullMoney;
@dynamic subMoney;
@dynamic discount;
@dynamic jumpType;
@dynamic jumpURL;
@dynamic usageRemark;
@dynamic status;
@dynamic discountUnit;
@dynamic officialSubsidyNum;
@dynamic couponUnit;
@dynamic isCheck;

typedef struct PB3CouponCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3CouponDiscountType discountType;
  int32_t fullMoney;
  int32_t subMoney;
  int32_t discount;
  PB3CouponJumpType jumpType;
  PB3CouponStatus status;
  PB3CouponDiscountUnit couponUnit;
  NSString *name;
  NSString *jumpURL;
  NSString *usageRemark;
  NSString *discountUnit;
  int64_t id_p;
  int64_t officialSubsidyNum;
} PB3CouponCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "discountType",
        .dataTypeSpecific.enumDescFunc = PB3CouponDiscountType_EnumDescriptor,
        .number = PB3CouponCfg_FieldNumber_DiscountType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, discountType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fullMoney",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_FullMoney,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, fullMoney),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "subMoney",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_SubMoney,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, subMoney),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "discount",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_Discount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, discount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "jumpType",
        .dataTypeSpecific.enumDescFunc = PB3CouponJumpType_EnumDescriptor,
        .number = PB3CouponCfg_FieldNumber_JumpType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, jumpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_JumpURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usageRemark",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_UsageRemark,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, usageRemark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3CouponStatus_EnumDescriptor,
        .number = PB3CouponCfg_FieldNumber_Status,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "discountUnit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_DiscountUnit,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, discountUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "officialSubsidyNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_OfficialSubsidyNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, officialSubsidyNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "couponUnit",
        .dataTypeSpecific.enumDescFunc = PB3CouponDiscountUnit_EnumDescriptor,
        .number = PB3CouponCfg_FieldNumber_CouponUnit,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3CouponCfg__storage_, couponUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isCheck",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponCfg_FieldNumber_IsCheck,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CouponCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CouponCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\010\004\241!!\000\016G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CouponCfg_DiscountType_RawValue(PB3CouponCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_DiscountType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCfg_DiscountType_RawValue(PB3CouponCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_DiscountType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CouponCfg_JumpType_RawValue(PB3CouponCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_JumpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCfg_JumpType_RawValue(PB3CouponCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_JumpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CouponCfg_Status_RawValue(PB3CouponCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCfg_Status_RawValue(PB3CouponCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CouponCfg_CouponUnit_RawValue(PB3CouponCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_CouponUnit];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponCfg_CouponUnit_RawValue(PB3CouponCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponCfg_FieldNumber_CouponUnit];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CouponIssueRule

@implementation PB3CouponIssueRule

@dynamic cfgId;
@dynamic effectType;
@dynamic fixBeginAt;
@dynamic fixEndAt;
@dynamic getBeginDay;
@dynamic getDayNum;
@dynamic couponNum;
@dynamic sort;

typedef struct PB3CouponIssueRule__storage_ {
  uint32_t _has_storage_[1];
  PB3CouponEffectType effectType;
  int32_t getBeginDay;
  int32_t getDayNum;
  int32_t couponNum;
  int32_t sort;
  int64_t cfgId;
  int64_t fixBeginAt;
  int64_t fixEndAt;
} PB3CouponIssueRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponIssueRule_FieldNumber_CfgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, cfgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "effectType",
        .dataTypeSpecific.enumDescFunc = PB3CouponEffectType_EnumDescriptor,
        .number = PB3CouponIssueRule_FieldNumber_EffectType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, effectType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fixBeginAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponIssueRule_FieldNumber_FixBeginAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, fixBeginAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fixEndAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponIssueRule_FieldNumber_FixEndAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, fixEndAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "getBeginDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponIssueRule_FieldNumber_GetBeginDay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, getBeginDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "getDayNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponIssueRule_FieldNumber_GetDayNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, getDayNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "couponNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponIssueRule_FieldNumber_CouponNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, couponNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponIssueRule_FieldNumber_Sort,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CouponIssueRule__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CouponIssueRule class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CouponIssueRule__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CouponIssueRule_EffectType_RawValue(PB3CouponIssueRule *message) {
  GPBDescriptor *descriptor = [PB3CouponIssueRule descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponIssueRule_FieldNumber_EffectType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponIssueRule_EffectType_RawValue(PB3CouponIssueRule *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponIssueRule descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponIssueRule_FieldNumber_EffectType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CouponGainRule

@implementation PB3CouponGainRule

@dynamic isLimitNew;
@dynamic limitNewHour;
@dynamic limitType;
@dynamic wealthLevMin;
@dynamic wealthLevMax;
@dynamic charmLevMin;
@dynamic charmLevMax;
@dynamic isAnd;
@dynamic isRepeat;
@dynamic repeatDay;
@dynamic repeatNum;
@dynamic judgeDevice;
@dynamic whiteChannel, whiteChannel_Count;
@dynamic channelType, channelType_Count;
@dynamic advendorId, advendorId_Count;
@dynamic deviceType, deviceType_Count;
@dynamic andOr;
@dynamic application, application_Count;
@dynamic judgePhone;

typedef struct PB3CouponGainRule__storage_ {
  uint32_t _has_storage_[1];
  int32_t limitNewHour;
  PB3CouponLimitType limitType;
  int32_t wealthLevMin;
  int32_t wealthLevMax;
  int32_t charmLevMin;
  int32_t charmLevMax;
  int32_t repeatDay;
  int32_t repeatNum;
  GPBInt32BoolDictionary *whiteChannel;
  GPBInt64BoolDictionary *channelType;
  GPBInt64BoolDictionary *advendorId;
  GPBInt32BoolDictionary *deviceType;
  GPBStringBoolDictionary *application;
} PB3CouponGainRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isLimitNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_IsLimitNew,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "limitNewHour",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_LimitNewHour,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, limitNewHour),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limitType",
        .dataTypeSpecific.enumDescFunc = PB3CouponLimitType_EnumDescriptor,
        .number = PB3CouponGainRule_FieldNumber_LimitType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, limitType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLevMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_WealthLevMin,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, wealthLevMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLevMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_WealthLevMax,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, wealthLevMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_CharmLevMin,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, charmLevMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_CharmLevMax,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, charmLevMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_IsAnd,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isRepeat",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_IsRepeat,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "repeatDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_RepeatDay,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, repeatDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "repeatNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_RepeatNum,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, repeatNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "judgeDevice",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_JudgeDevice,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "whiteChannel",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_WhiteChannel,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, whiteChannel),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_ChannelType,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, channelType),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "advendorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_AdvendorId,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, advendorId),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_DeviceType,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, deviceType),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "andOr",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_AndOr,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "application",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_Application,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CouponGainRule__storage_, application),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "judgePhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponGainRule_FieldNumber_JudgePhone,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CouponGainRule class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CouponGainRule__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CouponGainRule_LimitType_RawValue(PB3CouponGainRule *message) {
  GPBDescriptor *descriptor = [PB3CouponGainRule descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponGainRule_FieldNumber_LimitType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponGainRule_LimitType_RawValue(PB3CouponGainRule *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponGainRule descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponGainRule_FieldNumber_LimitType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CouponPackageCfg

@implementation PB3CouponPackageCfg

@dynamic id_p;
@dynamic name;
@dynamic packageType;
@dynamic hasGainRule, gainRule;
@dynamic issueRuleArray, issueRuleArray_Count;

typedef struct PB3CouponPackageCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3CouponPackageType packageType;
  NSString *name;
  PB3CouponGainRule *gainRule;
  NSMutableArray *issueRuleArray;
  int64_t id_p;
} PB3CouponPackageCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponPackageCfg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CouponPackageCfg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CouponPackageCfg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CouponPackageCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packageType",
        .dataTypeSpecific.enumDescFunc = PB3CouponPackageType_EnumDescriptor,
        .number = PB3CouponPackageCfg_FieldNumber_PackageType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CouponPackageCfg__storage_, packageType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gainRule",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CouponGainRule),
        .number = PB3CouponPackageCfg_FieldNumber_GainRule,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CouponPackageCfg__storage_, gainRule),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "issueRuleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CouponIssueRule),
        .number = PB3CouponPackageCfg_FieldNumber_IssueRuleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CouponPackageCfg__storage_, issueRuleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CouponPackageCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CouponPackageCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CouponPackageCfg_PackageType_RawValue(PB3CouponPackageCfg *message) {
  GPBDescriptor *descriptor = [PB3CouponPackageCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponPackageCfg_FieldNumber_PackageType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CouponPackageCfg_PackageType_RawValue(PB3CouponPackageCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CouponPackageCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CouponPackageCfg_FieldNumber_PackageType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateFansMiddionCliCfg

@implementation PB3IntimateFansMiddionCliCfg

@dynamic id_p;
@dynamic type;
@dynamic name;
@dynamic desc;
@dynamic targetVal;
@dynamic intimateVal;
@dynamic router;
@dynamic routerTitle;
@dynamic icon;
@dynamic sort;

typedef struct PB3IntimateFansMiddionCliCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateFansTargetType type;
  NSString *name;
  NSString *desc;
  NSString *router;
  NSString *routerTitle;
  NSString *icon;
  int64_t id_p;
  int64_t targetVal;
  int64_t intimateVal;
  int64_t sort;
} PB3IntimateFansMiddionCliCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateFansTargetType_EnumDescriptor,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_Desc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_TargetVal,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, targetVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_IntimateVal,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, intimateVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "router",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_Router,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, router),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routerTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_RouterTitle,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, routerTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_Icon,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMiddionCliCfg_FieldNumber_Sort,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateFansMiddionCliCfg__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansMiddionCliCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansMiddionCliCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateFansMiddionCliCfg_Type_RawValue(PB3IntimateFansMiddionCliCfg *message) {
  GPBDescriptor *descriptor = [PB3IntimateFansMiddionCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansMiddionCliCfg_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateFansMiddionCliCfg_Type_RawValue(PB3IntimateFansMiddionCliCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateFansMiddionCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansMiddionCliCfg_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BillSkillBaseCfg

@implementation PB3BillSkillBaseCfg

@dynamic avatarIcon;
@dynamic avatarLabel;

typedef struct PB3BillSkillBaseCfg__storage_ {
  uint32_t _has_storage_[1];
  NSString *avatarIcon;
  NSString *avatarLabel;
} PB3BillSkillBaseCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "avatarIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillBaseCfg_FieldNumber_AvatarIcon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BillSkillBaseCfg__storage_, avatarIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatarLabel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BillSkillBaseCfg_FieldNumber_AvatarLabel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BillSkillBaseCfg__storage_, avatarLabel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BillSkillBaseCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BillSkillBaseCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SolitaireEatPut

@implementation PB3SolitaireEatPut

@dynamic eatPut;
@dynamic target;
@dynamic rate;
@dynamic weight;

typedef struct PB3SolitaireEatPut__storage_ {
  uint32_t _has_storage_[1];
  PB3SolitaireEatPutType eatPut;
  PB3SolitaireTarget target;
  int32_t rate;
  int32_t weight;
} PB3SolitaireEatPut__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eatPut",
        .dataTypeSpecific.enumDescFunc = PB3SolitaireEatPutType_EnumDescriptor,
        .number = PB3SolitaireEatPut_FieldNumber_EatPut,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SolitaireEatPut__storage_, eatPut),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "target",
        .dataTypeSpecific.enumDescFunc = PB3SolitaireTarget_EnumDescriptor,
        .number = PB3SolitaireEatPut_FieldNumber_Target,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SolitaireEatPut__storage_, target),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireEatPut_FieldNumber_Rate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SolitaireEatPut__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireEatPut_FieldNumber_Weight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SolitaireEatPut__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SolitaireEatPut class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SolitaireEatPut__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SolitaireEatPut_EatPut_RawValue(PB3SolitaireEatPut *message) {
  GPBDescriptor *descriptor = [PB3SolitaireEatPut descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SolitaireEatPut_FieldNumber_EatPut];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SolitaireEatPut_EatPut_RawValue(PB3SolitaireEatPut *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SolitaireEatPut descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SolitaireEatPut_FieldNumber_EatPut];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SolitaireEatPut_Target_RawValue(PB3SolitaireEatPut *message) {
  GPBDescriptor *descriptor = [PB3SolitaireEatPut descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SolitaireEatPut_FieldNumber_Target];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SolitaireEatPut_Target_RawValue(PB3SolitaireEatPut *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SolitaireEatPut descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SolitaireEatPut_FieldNumber_Target];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SolitaireRate

@implementation PB3SolitaireRate

@dynamic minWeight;
@dynamic maxWeight;
@dynamic userRate;
@dynamic pondRate;

typedef struct PB3SolitaireRate__storage_ {
  uint32_t _has_storage_[1];
  int64_t minWeight;
  int64_t maxWeight;
  int64_t userRate;
  int64_t pondRate;
} PB3SolitaireRate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireRate_FieldNumber_MinWeight,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SolitaireRate__storage_, minWeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireRate_FieldNumber_MaxWeight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SolitaireRate__storage_, maxWeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireRate_FieldNumber_UserRate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SolitaireRate__storage_, userRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pondRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireRate_FieldNumber_PondRate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SolitaireRate__storage_, pondRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SolitaireRate class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SolitaireRate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SolitaireScheme

@implementation PB3SolitaireScheme

@dynamic scheme;
@dynamic score;
@dynamic eatPutListArray, eatPutListArray_Count;
@dynamic rateListArray, rateListArray_Count;
@dynamic totalWeight;
@dynamic confId;

typedef struct PB3SolitaireScheme__storage_ {
  uint32_t _has_storage_[1];
  PB3SolitaireSchemeType scheme;
  int32_t confId;
  NSMutableArray *eatPutListArray;
  NSMutableArray *rateListArray;
  int64_t score;
  int64_t totalWeight;
} PB3SolitaireScheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scheme",
        .dataTypeSpecific.enumDescFunc = PB3SolitaireSchemeType_EnumDescriptor,
        .number = PB3SolitaireScheme_FieldNumber_Scheme,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SolitaireScheme__storage_, scheme),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireScheme_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SolitaireScheme__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "eatPutListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SolitaireEatPut),
        .number = PB3SolitaireScheme_FieldNumber_EatPutListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SolitaireScheme__storage_, eatPutListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rateListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SolitaireRate),
        .number = PB3SolitaireScheme_FieldNumber_RateListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SolitaireScheme__storage_, rateListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireScheme_FieldNumber_TotalWeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SolitaireScheme__storage_, totalWeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireScheme_FieldNumber_ConfId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SolitaireScheme__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SolitaireScheme class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SolitaireScheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SolitaireScheme_Scheme_RawValue(PB3SolitaireScheme *message) {
  GPBDescriptor *descriptor = [PB3SolitaireScheme descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SolitaireScheme_FieldNumber_Scheme];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SolitaireScheme_Scheme_RawValue(PB3SolitaireScheme *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SolitaireScheme descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SolitaireScheme_FieldNumber_Scheme];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SolitaireTips

@implementation PB3SolitaireTips

@dynamic id_p;
@dynamic tips;

typedef struct PB3SolitaireTips__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *tips;
} PB3SolitaireTips__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireTips_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SolitaireTips__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = PB3SolitaireTips_FieldNumber_Tips,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SolitaireTips__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SolitaireTips class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SolitaireTips__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmSolitaireCfg

@implementation PB3XcmSolitaireCfg

@dynamic id_p;
@dynamic name;
@dynamic isOpen;
@dynamic timeType;
@dynamic startTime;
@dynamic endTime;
@dynamic storeId;
@dynamic timeLong;
@dynamic minJoin;
@dynamic maxJoin;
@dynamic blessingValue;
@dynamic tipsArray, tipsArray_Count;
@dynamic ruleDesc;
@dynamic waitTime;
@dynamic listArray, listArray_Count;
@dynamic exchangeId;
@dynamic effectId;
@dynamic effectRewardTimeLong;
@dynamic hasActPage, actPage;
@dynamic actType;
@dynamic incStoreId;

typedef struct PB3XcmSolitaireCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3SolitaireTimeType timeType;
  int32_t minJoin;
  int32_t maxJoin;
  int32_t waitTime;
  int32_t exchangeId;
  int32_t effectId;
  PB3SubInfoActivityType actType;
  int32_t incStoreId;
  NSString *name;
  NSString *startTime;
  NSString *endTime;
  NSMutableArray *tipsArray;
  NSString *ruleDesc;
  NSMutableArray *listArray;
  PB3ConfActPage *actPage;
  int64_t storeId;
  int64_t timeLong;
  int64_t blessingValue;
  int64_t effectRewardTimeLong;
} PB3XcmSolitaireCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isOpen",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_IsOpen,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeType",
        .dataTypeSpecific.enumDescFunc = PB3SolitaireTimeType_EnumDescriptor,
        .number = PB3XcmSolitaireCfg_FieldNumber_TimeType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, timeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_StoreId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, storeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timeLong",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_TimeLong,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, timeLong),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "minJoin",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_MinJoin,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, minJoin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxJoin",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_MaxJoin,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, maxJoin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "blessingValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_BlessingValue,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, blessingValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tipsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SolitaireTips),
        .number = PB3XcmSolitaireCfg_FieldNumber_TipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, tipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ruleDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_RuleDesc,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, ruleDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "waitTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_WaitTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, waitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SolitaireScheme),
        .number = PB3XcmSolitaireCfg_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exchangeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_ExchangeId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, exchangeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_EffectId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectRewardTimeLong",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_EffectRewardTimeLong,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, effectRewardTimeLong),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "actPage",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActPage),
        .number = PB3XcmSolitaireCfg_FieldNumber_ActPage,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, actPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actType",
        .dataTypeSpecific.enumDescFunc = PB3SubInfoActivityType_EnumDescriptor,
        .number = PB3XcmSolitaireCfg_FieldNumber_ActType,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, actType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "incStoreId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmSolitaireCfg_FieldNumber_IncStoreId,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3XcmSolitaireCfg__storage_, incStoreId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmSolitaireCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmSolitaireCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3XcmSolitaireCfg_TimeType_RawValue(PB3XcmSolitaireCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmSolitaireCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmSolitaireCfg_FieldNumber_TimeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmSolitaireCfg_TimeType_RawValue(PB3XcmSolitaireCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmSolitaireCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmSolitaireCfg_FieldNumber_TimeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3XcmSolitaireCfg_ActType_RawValue(PB3XcmSolitaireCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmSolitaireCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmSolitaireCfg_FieldNumber_ActType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmSolitaireCfg_ActType_RawValue(PB3XcmSolitaireCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmSolitaireCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmSolitaireCfg_FieldNumber_ActType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3XcmKickOutRoomCfg

@implementation PB3XcmKickOutRoomCfg

@dynamic cfgId;
@dynamic cfgName;
@dynamic expiredTime;
@dynamic unitTime;

typedef struct PB3XcmKickOutRoomCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t cfgId;
  PB3XcmKickOutRoomType unitTime;
  NSString *cfgName;
  int64_t expiredTime;
} PB3XcmKickOutRoomCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmKickOutRoomCfg_FieldNumber_CfgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmKickOutRoomCfg__storage_, cfgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cfgName",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmKickOutRoomCfg_FieldNumber_CfgName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmKickOutRoomCfg__storage_, cfgName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiredTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmKickOutRoomCfg_FieldNumber_ExpiredTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmKickOutRoomCfg__storage_, expiredTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unitTime",
        .dataTypeSpecific.enumDescFunc = PB3XcmKickOutRoomType_EnumDescriptor,
        .number = PB3XcmKickOutRoomCfg_FieldNumber_UnitTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmKickOutRoomCfg__storage_, unitTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmKickOutRoomCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmKickOutRoomCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3XcmKickOutRoomCfg_UnitTime_RawValue(PB3XcmKickOutRoomCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmKickOutRoomCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmKickOutRoomCfg_FieldNumber_UnitTime];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmKickOutRoomCfg_UnitTime_RawValue(PB3XcmKickOutRoomCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmKickOutRoomCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmKickOutRoomCfg_FieldNumber_UnitTime];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3XcmCfgHarassAccuse

@implementation PB3XcmCfgHarassAccuse

@dynamic tipsText;

typedef struct PB3XcmCfgHarassAccuse__storage_ {
  uint32_t _has_storage_[1];
  NSString *tipsText;
} PB3XcmCfgHarassAccuse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tipsText",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmCfgHarassAccuse_FieldNumber_TipsText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmCfgHarassAccuse__storage_, tipsText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmCfgHarassAccuse class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmCfgHarassAccuse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmGiftSkinCfg

@implementation PB3XcmGiftSkinCfg

@dynamic skinId;
@dynamic skinName;
@dynamic appIcon;
@dynamic pcIcon;
@dynamic appGiftWallTag;
@dynamic pcGiftWallTag;
@dynamic isAnimation;
@dynamic animationTime;
@dynamic animationMask;
@dynamic animationRes;
@dynamic showInRoom;
@dynamic giftId;
@dynamic skinMsg;
@dynamic weight;

typedef struct PB3XcmGiftSkinCfg__storage_ {
  uint32_t _has_storage_[1];
  NSString *skinName;
  NSString *appIcon;
  NSString *pcIcon;
  NSString *appGiftWallTag;
  NSString *pcGiftWallTag;
  NSString *animationRes;
  NSString *skinMsg;
  int64_t skinId;
  int64_t animationTime;
  int64_t giftId;
  int64_t weight;
} PB3XcmGiftSkinCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skinId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_SkinId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, skinId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skinName",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_SkinName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, skinName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_AppIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, appIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_PcIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, pcIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appGiftWallTag",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_AppGiftWallTag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, appGiftWallTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcGiftWallTag",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_PcGiftWallTag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, pcGiftWallTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAnimation",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_IsAnimation,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "animationTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_AnimationTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, animationTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "animationMask",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_AnimationMask,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "animationRes",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_AnimationRes,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, animationRes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showInRoom",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_ShowInRoom,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_GiftId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skinMsg",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_SkinMsg,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, skinMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinCfg_FieldNumber_Weight,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfg__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmGiftSkinCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmGiftSkinCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmGiftSkinStoreCfg

@implementation PB3XcmGiftSkinStoreCfg

@dynamic storeId;
@dynamic price;
@dynamic name;
@dynamic skinId;
@dynamic skinDetailIcon;
@dynamic bottomDesc;
@dynamic isPurchase;
@dynamic showType;
@dynamic showStartTime;
@dynamic timeType;
@dynamic timeVal;
@dynamic soldType;
@dynamic showEndTime;
@dynamic displayType;
@dynamic weight;
@dynamic showMap, showMap_Count;

typedef struct PB3XcmGiftSkinStoreCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3GiftSkinStoreShowType showType;
  PB3GiftSkinStoreTimeType timeType;
  PB3GiftSkinStoreSoldType soldType;
  PB3GiftSkinStoreDisplayType displayType;
  NSString *name;
  NSString *skinDetailIcon;
  NSString *bottomDesc;
  GPBInt64BoolDictionary *showMap;
  int64_t storeId;
  int64_t price;
  int64_t skinId;
  int64_t showStartTime;
  int64_t timeVal;
  int64_t showEndTime;
  int64_t weight;
} PB3XcmGiftSkinStoreCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_StoreId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, storeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_Price,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skinId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_SkinId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, skinId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "skinDetailIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_SkinDetailIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, skinDetailIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_BottomDesc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, bottomDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isPurchase",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_IsPurchase,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showType",
        .dataTypeSpecific.enumDescFunc = PB3GiftSkinStoreShowType_EnumDescriptor,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_ShowType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "showStartTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_ShowStartTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, showStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timeType",
        .dataTypeSpecific.enumDescFunc = PB3GiftSkinStoreTimeType_EnumDescriptor,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_TimeType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, timeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timeVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_TimeVal,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, timeVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "soldType",
        .dataTypeSpecific.enumDescFunc = PB3GiftSkinStoreSoldType_EnumDescriptor,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_SoldType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, soldType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "showEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_ShowEndTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, showEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "displayType",
        .dataTypeSpecific.enumDescFunc = PB3GiftSkinStoreDisplayType_EnumDescriptor,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_DisplayType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, displayType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_Weight,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "showMap",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinStoreCfg_FieldNumber_ShowMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfg__storage_, showMap),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmGiftSkinStoreCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmGiftSkinStoreCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3XcmGiftSkinStoreCfg_ShowType_RawValue(PB3XcmGiftSkinStoreCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_ShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmGiftSkinStoreCfg_ShowType_RawValue(PB3XcmGiftSkinStoreCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_ShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3XcmGiftSkinStoreCfg_TimeType_RawValue(PB3XcmGiftSkinStoreCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_TimeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmGiftSkinStoreCfg_TimeType_RawValue(PB3XcmGiftSkinStoreCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_TimeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3XcmGiftSkinStoreCfg_SoldType_RawValue(PB3XcmGiftSkinStoreCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_SoldType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmGiftSkinStoreCfg_SoldType_RawValue(PB3XcmGiftSkinStoreCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_SoldType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3XcmGiftSkinStoreCfg_DisplayType_RawValue(PB3XcmGiftSkinStoreCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_DisplayType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmGiftSkinStoreCfg_DisplayType_RawValue(PB3XcmGiftSkinStoreCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmGiftSkinStoreCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmGiftSkinStoreCfg_FieldNumber_DisplayType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3XcmGiftSkinRule

@implementation PB3XcmGiftSkinRule

@dynamic rule;

typedef struct PB3XcmGiftSkinRule__storage_ {
  uint32_t _has_storage_[1];
  NSString *rule;
} PB3XcmGiftSkinRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rule",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmGiftSkinRule_FieldNumber_Rule,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinRule__storage_, rule),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmGiftSkinRule class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmGiftSkinRule__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmGiftSkinCfgData

@implementation PB3XcmGiftSkinCfgData

@dynamic skinMap, skinMap_Count;

typedef struct PB3XcmGiftSkinCfgData__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64ObjectDictionary *skinMap;
} PB3XcmGiftSkinCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skinMap",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3XcmGiftSkinCfg),
        .number = PB3XcmGiftSkinCfgData_FieldNumber_SkinMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinCfgData__storage_, skinMap),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmGiftSkinCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmGiftSkinCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmGiftSkinStoreCfgData

@implementation PB3XcmGiftSkinStoreCfgData

@dynamic storeMap, storeMap_Count;

typedef struct PB3XcmGiftSkinStoreCfgData__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64ObjectDictionary *storeMap;
} PB3XcmGiftSkinStoreCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storeMap",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3XcmGiftSkinStoreCfg),
        .number = PB3XcmGiftSkinStoreCfgData_FieldNumber_StoreMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmGiftSkinStoreCfgData__storage_, storeMap),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmGiftSkinStoreCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmGiftSkinStoreCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmTextContentCfg

@implementation PB3XcmTextContentCfg

@dynamic textContentMap, textContentMap_Count;

typedef struct PB3XcmTextContentCfg__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32ObjectDictionary *textContentMap;
} PB3XcmTextContentCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "textContentMap",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmTextContentCfg_FieldNumber_TextContentMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmTextContentCfg__storage_, textContentMap),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmTextContentCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmTextContentCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CfgUserId2RandomScheme

@implementation PB3CfgUserId2RandomScheme

@dynamic id_p;
@dynamic id2Type;
@dynamic id2GiftId;
@dynamic firstConsumeNum;
@dynamic firstChangeConsumeNum;
@dynamic changeTimes;

typedef struct PB3CfgUserId2RandomScheme__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t id2Type;
  int32_t id2GiftId;
  int32_t firstConsumeNum;
  int32_t firstChangeConsumeNum;
  int32_t changeTimes;
} PB3CfgUserId2RandomScheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgUserId2RandomScheme_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CfgUserId2RandomScheme__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id2Type",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgUserId2RandomScheme_FieldNumber_Id2Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CfgUserId2RandomScheme__storage_, id2Type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id2GiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgUserId2RandomScheme_FieldNumber_Id2GiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CfgUserId2RandomScheme__storage_, id2GiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "firstConsumeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgUserId2RandomScheme_FieldNumber_FirstConsumeNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CfgUserId2RandomScheme__storage_, firstConsumeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "firstChangeConsumeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgUserId2RandomScheme_FieldNumber_FirstChangeConsumeNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CfgUserId2RandomScheme__storage_, firstChangeConsumeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "changeTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgUserId2RandomScheme_FieldNumber_ChangeTimes,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CfgUserId2RandomScheme__storage_, changeTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CfgUserId2RandomScheme class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CfgUserId2RandomScheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmCfgUserId2Random

@implementation PB3XcmCfgUserId2Random

@dynamic cfgListArray, cfgListArray_Count;
@dynamic hasActPage, actPage;

typedef struct PB3XcmCfgUserId2Random__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cfgListArray;
  PB3ConfActPage *actPage;
} PB3XcmCfgUserId2Random__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgUserId2RandomScheme),
        .number = PB3XcmCfgUserId2Random_FieldNumber_CfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmCfgUserId2Random__storage_, cfgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actPage",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActPage),
        .number = PB3XcmCfgUserId2Random_FieldNumber_ActPage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmCfgUserId2Random__storage_, actPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmCfgUserId2Random class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmCfgUserId2Random__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000cfgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmRoomPatternCliCfg

@implementation PB3XcmRoomPatternCliCfg

@dynamic pattern;
@dynamic defaultDecorateId;
@dynamic bgmPlayerSwitch;

typedef struct PB3XcmRoomPatternCliCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3NewRoomPattern pattern;
  int64_t defaultDecorateId;
} PB3XcmRoomPatternCliCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pattern",
        .dataTypeSpecific.enumDescFunc = PB3NewRoomPattern_EnumDescriptor,
        .number = PB3XcmRoomPatternCliCfg_FieldNumber_Pattern,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmRoomPatternCliCfg__storage_, pattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "defaultDecorateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmRoomPatternCliCfg_FieldNumber_DefaultDecorateId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmRoomPatternCliCfg__storage_, defaultDecorateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bgmPlayerSwitch",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmRoomPatternCliCfg_FieldNumber_BgmPlayerSwitch,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmRoomPatternCliCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmRoomPatternCliCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3XcmRoomPatternCliCfg_Pattern_RawValue(PB3XcmRoomPatternCliCfg *message) {
  GPBDescriptor *descriptor = [PB3XcmRoomPatternCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmRoomPatternCliCfg_FieldNumber_Pattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3XcmRoomPatternCliCfg_Pattern_RawValue(PB3XcmRoomPatternCliCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3XcmRoomPatternCliCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3XcmRoomPatternCliCfg_FieldNumber_Pattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3XcmRoomPatternCliCfgData

@implementation PB3XcmRoomPatternCliCfgData

@dynamic cliCfgListArray, cliCfgListArray_Count;
@dynamic unixTimestamp;

typedef struct PB3XcmRoomPatternCliCfgData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cliCfgListArray;
  int64_t unixTimestamp;
} PB3XcmRoomPatternCliCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cliCfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3XcmRoomPatternCliCfg),
        .number = PB3XcmRoomPatternCliCfgData_FieldNumber_CliCfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmRoomPatternCliCfgData__storage_, cliCfgListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unixTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmRoomPatternCliCfgData_FieldNumber_UnixTimestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmRoomPatternCliCfgData__storage_, unixTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmRoomPatternCliCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmRoomPatternCliCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmRoomPatternCfgData

@implementation PB3XcmRoomPatternCfgData

@dynamic cliCfgListArray, cliCfgListArray_Count;

typedef struct PB3XcmRoomPatternCfgData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cliCfgListArray;
} PB3XcmRoomPatternCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cliCfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3XcmRoomPatternCliCfg),
        .number = PB3XcmRoomPatternCfgData_FieldNumber_CliCfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmRoomPatternCfgData__storage_, cliCfgListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmRoomPatternCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmRoomPatternCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmOfficialExamPassMemberCfg

@implementation PB3XcmOfficialExamPassMemberCfg

@dynamic playerId;
@dynamic clanId;
@dynamic examinationResult;

typedef struct PB3XcmOfficialExamPassMemberCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t examinationResult;
  int64_t playerId;
  int64_t clanId;
} PB3XcmOfficialExamPassMemberCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmOfficialExamPassMemberCfg_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmOfficialExamPassMemberCfg__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmOfficialExamPassMemberCfg_FieldNumber_ClanId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmOfficialExamPassMemberCfg__storage_, clanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "examinationResult",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmOfficialExamPassMemberCfg_FieldNumber_ExaminationResult,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmOfficialExamPassMemberCfg__storage_, examinationResult),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmOfficialExamPassMemberCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmOfficialExamPassMemberCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmOfficialExamPassMemberCfgData

@implementation PB3XcmOfficialExamPassMemberCfgData

@dynamic cfgMap, cfgMap_Count;

typedef struct PB3XcmOfficialExamPassMemberCfgData__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64ObjectDictionary *cfgMap;
} PB3XcmOfficialExamPassMemberCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgMap",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3XcmOfficialExamPassMemberCfg),
        .number = PB3XcmOfficialExamPassMemberCfgData_FieldNumber_CfgMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmOfficialExamPassMemberCfgData__storage_, cfgMap),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmOfficialExamPassMemberCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmOfficialExamPassMemberCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmIntimateBackgroundCfgData

@implementation PB3XcmIntimateBackgroundCfgData

@dynamic bgId;
@dynamic bgName;
@dynamic bgStaticURLApp;
@dynamic bgStaticURLPc;
@dynamic bgDynamicURLApp;
@dynamic bgDynamicURLPc;
@dynamic intimateLevelMin;
@dynamic intimateLevelMax;

typedef struct PB3XcmIntimateBackgroundCfgData__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateLevelMin;
  int32_t intimateLevelMax;
  NSString *bgName;
  NSString *bgStaticURLApp;
  NSString *bgStaticURLPc;
  NSString *bgDynamicURLApp;
  NSString *bgDynamicURLPc;
  int64_t bgId;
} PB3XcmIntimateBackgroundCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_BgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, bgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bgName",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_BgName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, bgName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgStaticURLApp",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_BgStaticURLApp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, bgStaticURLApp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgStaticURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_BgStaticURLPc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, bgStaticURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgDynamicURLApp",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_BgDynamicURLApp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, bgDynamicURLApp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgDynamicURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_BgDynamicURLPc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, bgDynamicURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intimateLevelMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_IntimateLevelMin,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, intimateLevelMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateLevelMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundCfgData_FieldNumber_IntimateLevelMax,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundCfgData__storage_, intimateLevelMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmIntimateBackgroundCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmIntimateBackgroundCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\002\246\241!!\243\000\004\002\246\241!!\242\000\005\002\247\241!!\243\000\006\002\247\241!!\242\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmIntimateMinTypeCfgData

@implementation PB3XcmIntimateMinTypeCfgData

@dynamic intimateType;
@dynamic intimateTypeWeight, intimateTypeWeight_Count;

typedef struct PB3XcmIntimateMinTypeCfgData__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateType;
  GPBInt32Int32Dictionary *intimateTypeWeight;
} PB3XcmIntimateMinTypeCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intimateType",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateMinTypeCfgData_FieldNumber_IntimateType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmIntimateMinTypeCfgData__storage_, intimateType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "intimateTypeWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateMinTypeCfgData_FieldNumber_IntimateTypeWeight,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmIntimateMinTypeCfgData__storage_, intimateTypeWeight),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmIntimateMinTypeCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmIntimateMinTypeCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmIntimateBackgroundIconCfgData

@implementation PB3XcmIntimateBackgroundIconCfgData

@dynamic iconId;
@dynamic iconName;
@dynamic iconURLApp;
@dynamic iconURLPc;
@dynamic jumpURL;
@dynamic weight;
@dynamic oldIconURLApp;
@dynamic oldIconURLPc;
@dynamic isShowOther;

typedef struct PB3XcmIntimateBackgroundIconCfgData__storage_ {
  uint32_t _has_storage_[1];
  NSString *iconName;
  NSString *iconURLApp;
  NSString *iconURLPc;
  NSString *jumpURL;
  NSString *oldIconURLApp;
  NSString *oldIconURLPc;
  int64_t iconId;
  int64_t weight;
} PB3XcmIntimateBackgroundIconCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iconId",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_IconId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, iconId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iconName",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_IconName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, iconName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURLApp",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_IconURLApp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, iconURLApp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_IconURLPc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, iconURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_JumpURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_Weight,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "oldIconURLApp",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_OldIconURLApp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, oldIconURLApp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oldIconURLPc",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_OldIconURLPc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3XcmIntimateBackgroundIconCfgData__storage_, oldIconURLPc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isShowOther",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmIntimateBackgroundIconCfgData_FieldNumber_IsShowOther,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmIntimateBackgroundIconCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmIntimateBackgroundIconCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\004\241!!\243\000\004\004\241!!\242\000\005\004\241!!\000\007\003\244\241!!\243\000\010\003\244\241!!\242\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmRoomBgmPlayerCfg

@implementation PB3XcmRoomBgmPlayerCfg

@dynamic clanMember;
@dynamic singlePlayer;
@dynamic allPlayer;
@dynamic whiteList, whiteList_Count;

typedef struct PB3XcmRoomBgmPlayerCfg__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64BoolDictionary *whiteList;
} PB3XcmRoomBgmPlayerCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clanMember",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmRoomBgmPlayerCfg_FieldNumber_ClanMember,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "singlePlayer",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmRoomBgmPlayerCfg_FieldNumber_SinglePlayer,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "allPlayer",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmRoomBgmPlayerCfg_FieldNumber_AllPlayer,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "whiteList",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmRoomBgmPlayerCfg_FieldNumber_WhiteList,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmRoomBgmPlayerCfg__storage_, whiteList),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmRoomBgmPlayerCfg class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmRoomBgmPlayerCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmMainTabCfgData

@implementation PB3XcmMainTabCfgData

@dynamic id_p;
@dynamic tabType;
@dynamic tabName;
@dynamic weights;
@dynamic wealthLv;
@dynamic wealthLvMax;
@dynamic charmLv;
@dynamic charmLvMax;
@dynamic regisDay;
@dynamic regisXCanSee;
@dynamic androidVerMin;
@dynamic androidVerMax;
@dynamic iosVerMin;
@dynamic iosVerMax;
@dynamic pcVerMin;
@dynamic pcVerMax;
@dynamic application;
@dynamic tabImg;
@dynamic tabImgActivated;
@dynamic isShow;
@dynamic isDefault;
@dynamic appNameArray, appNameArray_Count;
@dynamic iosVerifyHide;
@dynamic route;
@dynamic androidVerifyHide;
@dynamic newUserDefault;
@dynamic channel;
@dynamic tabImgSwipe;
@dynamic iosVerifyShow;

typedef struct PB3XcmMainTabCfgData__storage_ {
  uint32_t _has_storage_[1];
  int32_t tabType;
  int32_t weights;
  int32_t wealthLv;
  int32_t wealthLvMax;
  int32_t charmLv;
  int32_t charmLvMax;
  int32_t regisDay;
  int32_t regisXCanSee;
  int32_t isShow;
  int32_t isDefault;
  int32_t newUserDefault;
  NSString *tabName;
  NSString *androidVerMin;
  NSString *androidVerMax;
  NSString *iosVerMin;
  NSString *iosVerMax;
  NSString *pcVerMin;
  NSString *pcVerMax;
  NSString *application;
  NSString *tabImg;
  NSString *tabImgActivated;
  GPBInt32Array *appNameArray;
  NSString *route;
  NSString *channel;
  NSString *tabImgSwipe;
  int64_t id_p;
} PB3XcmMainTabCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_TabType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, tabType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tabName",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_TabName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, tabName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weights",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_Weights,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, weights),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLv",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_WealthLv,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, wealthLv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLvMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_WealthLvMax,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, wealthLvMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLv",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_CharmLv,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, charmLv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLvMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_CharmLvMax,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, charmLvMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "regisDay",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_RegisDay,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, regisDay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "regisXCanSee",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_RegisXCanSee,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, regisXCanSee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "androidVerMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_AndroidVerMin,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, androidVerMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidVerMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_AndroidVerMax,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, androidVerMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosVerMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_IosVerMin,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, iosVerMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosVerMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_IosVerMax,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, iosVerMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcVerMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_PcVerMin,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, pcVerMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcVerMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_PcVerMax,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, pcVerMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "application",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_Application,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, application),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_TabImg,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, tabImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabImgActivated",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_TabImgActivated,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, tabImgActivated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_IsShow,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, isShow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isDefault",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_IsDefault,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, isDefault),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "appNameArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_AppNameArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, appNameArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "iosVerifyHide",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_IosVerifyHide,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "route",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_Route,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, route),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidVerifyHide",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_AndroidVerifyHide,
        .hasIndex = 24,
        .offset = 25,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "newUserDefault",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_NewUserDefault,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, newUserDefault),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_Channel,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabImgSwipe",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_TabImgSwipe,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3XcmMainTabCfgData__storage_, tabImgSwipe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosVerifyShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmMainTabCfgData_FieldNumber_IosVerifyShow,
        .hasIndex = 29,
        .offset = 30,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmMainTabCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmMainTabCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CfgCultivateLvUpScheme

@implementation PB3CfgCultivateLvUpScheme

@dynamic level;
@dynamic needExpNum;

typedef struct PB3CfgCultivateLvUpScheme__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  int32_t needExpNum;
} PB3CfgCultivateLvUpScheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateLvUpScheme_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CfgCultivateLvUpScheme__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "needExpNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateLvUpScheme_FieldNumber_NeedExpNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CfgCultivateLvUpScheme__storage_, needExpNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CfgCultivateLvUpScheme class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CfgCultivateLvUpScheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CfgCultivateAwardScheme

@implementation PB3CfgCultivateAwardScheme

@dynamic sendType;
@dynamic levelOrNum;
@dynamic awardType;
@dynamic awardId;
@dynamic awardNum;
@dynamic loopReceive;
@dynamic unit;
@dynamic autoUse;

typedef struct PB3CfgCultivateAwardScheme__storage_ {
  uint32_t _has_storage_[1];
  int32_t sendType;
  int32_t levelOrNum;
  int32_t awardType;
  int32_t awardId;
  int32_t awardNum;
  int32_t loopReceive;
  int32_t unit;
} PB3CfgCultivateAwardScheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_SendType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CfgCultivateAwardScheme__storage_, sendType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelOrNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_LevelOrNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CfgCultivateAwardScheme__storage_, levelOrNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_AwardType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CfgCultivateAwardScheme__storage_, awardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_AwardId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CfgCultivateAwardScheme__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_AwardNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CfgCultivateAwardScheme__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "loopReceive",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_LoopReceive,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CfgCultivateAwardScheme__storage_, loopReceive),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_Unit,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CfgCultivateAwardScheme__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "autoUse",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateAwardScheme_FieldNumber_AutoUse,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CfgCultivateAwardScheme class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CfgCultivateAwardScheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CfgIntimateCultivateScheme

@implementation PB3CfgIntimateCultivateScheme

@dynamic id_p;
@dynamic name;
@dynamic cultivateName;
@dynamic cultivateLoop;
@dynamic cultivateType;
@dynamic levelListArray, levelListArray_Count;
@dynamic downTimeNum;
@dynamic downTimeUnit;
@dynamic perTimeNum;
@dynamic perTimeUnit;
@dynamic downPercent;
@dynamic maxNum;
@dynamic minNum;
@dynamic overMaxPercent;
@dynamic inNum;
@dynamic levelAwardArray, levelAwardArray_Count;
@dynamic cultivateNumAwardArray, cultivateNumAwardArray_Count;
@dynamic sneakCdTime;
@dynamic expActiveTime;

typedef struct PB3CfgIntimateCultivateScheme__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t cultivateType;
  int32_t downTimeNum;
  int32_t downTimeUnit;
  int32_t perTimeNum;
  int32_t perTimeUnit;
  int32_t downPercent;
  int32_t maxNum;
  int32_t minNum;
  int32_t overMaxPercent;
  int32_t inNum;
  int32_t sneakCdTime;
  int32_t expActiveTime;
  NSString *name;
  NSString *cultivateName;
  NSMutableArray *levelListArray;
  NSMutableArray *levelAwardArray;
  NSMutableArray *cultivateNumAwardArray;
} PB3CfgIntimateCultivateScheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cultivateName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_CultivateName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, cultivateName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cultivateLoop",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_CultivateLoop,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cultivateType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_CultivateType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, cultivateType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgCultivateLvUpScheme),
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_LevelListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, levelListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "downTimeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_DownTimeNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, downTimeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "downTimeUnit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_DownTimeUnit,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, downTimeUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "perTimeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_PerTimeNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, perTimeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "perTimeUnit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_PerTimeUnit,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, perTimeUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "downPercent",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_DownPercent,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, downPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_MaxNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, maxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_MinNum,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, minNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "overMaxPercent",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_OverMaxPercent,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, overMaxPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_InNum,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, inNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelAwardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgCultivateAwardScheme),
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_LevelAwardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, levelAwardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cultivateNumAwardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgCultivateAwardScheme),
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_CultivateNumAwardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, cultivateNumAwardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sneakCdTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_SneakCdTime,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, sneakCdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expActiveTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateScheme_FieldNumber_ExpActiveTime,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateScheme__storage_, expActiveTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CfgIntimateCultivateScheme class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CfgIntimateCultivateScheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmCfgIntimateCultivate

@implementation PB3XcmCfgIntimateCultivate

@dynamic cfgListArray, cfgListArray_Count;
@dynamic hasActPage, actPage;

typedef struct PB3XcmCfgIntimateCultivate__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cfgListArray;
  PB3ConfActPage *actPage;
} PB3XcmCfgIntimateCultivate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgIntimateCultivateScheme),
        .number = PB3XcmCfgIntimateCultivate_FieldNumber_CfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmCfgIntimateCultivate__storage_, cfgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actPage",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActPage),
        .number = PB3XcmCfgIntimateCultivate_FieldNumber_ActPage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmCfgIntimateCultivate__storage_, actPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmCfgIntimateCultivate class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmCfgIntimateCultivate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000cfgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CfgIntimateCultivateTaskScheme

@implementation PB3CfgIntimateCultivateTaskScheme

@dynamic indexId;
@dynamic name;
@dynamic description_p;
@dynamic type;
@dynamic countType;
@dynamic condition;
@dynamic awardMax;
@dynamic awardNum;

typedef struct PB3CfgIntimateCultivateTaskScheme__storage_ {
  uint32_t _has_storage_[1];
  int32_t indexId;
  int32_t type;
  int32_t countType;
  int32_t condition;
  int32_t awardMax;
  int32_t awardNum;
  NSString *name;
  NSString *description_p;
} PB3CfgIntimateCultivateTaskScheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "indexId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_IndexId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, indexId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "countType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_CountType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, countType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "condition",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_Condition,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, condition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_AwardMax,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, awardMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgIntimateCultivateTaskScheme_FieldNumber_AwardNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CfgIntimateCultivateTaskScheme__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CfgIntimateCultivateTaskScheme class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CfgIntimateCultivateTaskScheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmCfgIntimateCultivateTask

@implementation PB3XcmCfgIntimateCultivateTask

@dynamic cfgListArray, cfgListArray_Count;
@dynamic intimateSneakMax;

typedef struct PB3XcmCfgIntimateCultivateTask__storage_ {
  uint32_t _has_storage_[1];
  int32_t intimateSneakMax;
  NSMutableArray *cfgListArray;
} PB3XcmCfgIntimateCultivateTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgIntimateCultivateTaskScheme),
        .number = PB3XcmCfgIntimateCultivateTask_FieldNumber_CfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmCfgIntimateCultivateTask__storage_, cfgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intimateSneakMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmCfgIntimateCultivateTask_FieldNumber_IntimateSneakMax,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3XcmCfgIntimateCultivateTask__storage_, intimateSneakMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmCfgIntimateCultivateTask class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmCfgIntimateCultivateTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000cfgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmOxygenCarGiftCfgData

@implementation PB3XcmOxygenCarGiftCfgData

@dynamic cfgMap, cfgMap_Count;

typedef struct PB3XcmOxygenCarGiftCfgData__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32UInt32Dictionary *cfgMap;
} PB3XcmOxygenCarGiftCfgData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgMap",
        .dataTypeSpecific.className = NULL,
        .number = PB3XcmOxygenCarGiftCfgData_FieldNumber_CfgMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmOxygenCarGiftCfgData__storage_, cfgMap),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmOxygenCarGiftCfgData class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmOxygenCarGiftCfgData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CultivateStoreItemLimit

@implementation PB3CultivateStoreItemLimit

@dynamic limitNum;
@dynamic limitRange;
@dynamic limitCycle;

typedef struct PB3CultivateStoreItemLimit__storage_ {
  uint32_t _has_storage_[1];
  int32_t limitNum;
  int32_t limitRange;
  int32_t limitCycle;
} PB3CultivateStoreItemLimit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "limitNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateStoreItemLimit_FieldNumber_LimitNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CultivateStoreItemLimit__storage_, limitNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limitRange",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateStoreItemLimit_FieldNumber_LimitRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CultivateStoreItemLimit__storage_, limitRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limitCycle",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateStoreItemLimit_FieldNumber_LimitCycle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CultivateStoreItemLimit__storage_, limitCycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CultivateStoreItemLimit class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CultivateStoreItemLimit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CultivateStoreItemLvImage

@implementation PB3CultivateStoreItemLvImage

@dynamic level;
@dynamic levelImage;
@dynamic levelSingleImage;

typedef struct PB3CultivateStoreItemLvImage__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  NSString *levelImage;
  NSString *levelSingleImage;
} PB3CultivateStoreItemLvImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateStoreItemLvImage_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CultivateStoreItemLvImage__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levelImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateStoreItemLvImage_FieldNumber_LevelImage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CultivateStoreItemLvImage__storage_, levelImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levelSingleImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateStoreItemLvImage_FieldNumber_LevelSingleImage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CultivateStoreItemLvImage__storage_, levelSingleImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CultivateStoreItemLvImage class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CultivateStoreItemLvImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CfgCultivateStoreItemConf

@implementation PB3CfgCultivateStoreItemConf

@dynamic storeItemId;
@dynamic storeItemName;
@dynamic storeItemPriceType;
@dynamic storeItemPriceItem;
@dynamic storeItemPriceItemNum;
@dynamic storeItemPrice;
@dynamic sortWeight;
@dynamic storeItemImage;
@dynamic showStoreItemImage;
@dynamic jsonLimitsArray, jsonLimitsArray_Count;
@dynamic levelImageListArray, levelImageListArray_Count;
@dynamic activeTime;
@dynamic activeTimeUnit;
@dynamic storeItemType;
@dynamic sellBeginTime;
@dynamic sellEndTime;
@dynamic intimateTypeArray, intimateTypeArray_Count;
@dynamic flagImage;
@dynamic tabType;
@dynamic storeItemDes;

typedef struct PB3CfgCultivateStoreItemConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t storeItemId;
  int32_t storeItemPriceType;
  int32_t storeItemPriceItem;
  int32_t storeItemPriceItemNum;
  int32_t storeItemPrice;
  int32_t sortWeight;
  int32_t activeTimeUnit;
  int32_t storeItemType;
  int32_t tabType;
  NSString *storeItemName;
  NSString *storeItemImage;
  NSString *showStoreItemImage;
  NSMutableArray *jsonLimitsArray;
  NSMutableArray *levelImageListArray;
  GPBInt32Array *intimateTypeArray;
  NSString *flagImage;
  NSString *storeItemDes;
  int64_t activeTime;
  int64_t sellBeginTime;
  int64_t sellEndTime;
} PB3CfgCultivateStoreItemConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storeItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeItemName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeItemPriceType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemPriceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemPriceType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeItemPriceItem",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemPriceItem,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemPriceItem),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeItemPriceItemNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemPriceItemNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemPriceItemNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeItemPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sortWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_SortWeight,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, sortWeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeItemImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemImage,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showStoreItemImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_ShowStoreItemImage,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, showStoreItemImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jsonLimitsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CultivateStoreItemLimit),
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_JsonLimitsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, jsonLimitsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "levelImageListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CultivateStoreItemLvImage),
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_LevelImageListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, levelImageListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "activeTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_ActiveTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, activeTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "activeTimeUnit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_ActiveTimeUnit,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, activeTimeUnit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeItemType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sellBeginTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_SellBeginTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, sellBeginTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sellEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_SellEndTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, sellEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateTypeArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_IntimateTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, intimateTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flagImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_FlagImage,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, flagImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_TabType,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, tabType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "storeItemDes",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreItemConf_FieldNumber_StoreItemDes,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreItemConf__storage_, storeItemDes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CfgCultivateStoreItemConf class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CfgCultivateStoreItemConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CfgCultivateStoreConf

@implementation PB3CfgCultivateStoreConf

@dynamic tabId;
@dynamic tabName;
@dynamic tabType;
@dynamic sellType;
@dynamic sortWeight;
@dynamic androidMin;
@dynamic androidMax;
@dynamic iosMin;
@dynamic iosMax;
@dynamic pcMin;
@dynamic pcMax;
@dynamic appletsMax;
@dynamic appletsMin;
@dynamic storeItemListArray, storeItemListArray_Count;
@dynamic whiteUserListArray, whiteUserListArray_Count;
@dynamic blackUserListArray, blackUserListArray_Count;
@dynamic whiteRoomListArray, whiteRoomListArray_Count;
@dynamic blackRoomListArray, blackRoomListArray_Count;

typedef struct PB3CfgCultivateStoreConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t tabId;
  int32_t tabType;
  int32_t sellType;
  int32_t sortWeight;
  NSString *tabName;
  NSString *androidMin;
  NSString *androidMax;
  NSString *iosMin;
  NSString *iosMax;
  NSString *pcMin;
  NSString *pcMax;
  NSString *appletsMax;
  NSString *appletsMin;
  NSMutableArray *storeItemListArray;
  GPBInt64Array *whiteUserListArray;
  GPBInt64Array *blackUserListArray;
  GPBInt64Array *whiteRoomListArray;
  GPBInt64Array *blackRoomListArray;
} PB3CfgCultivateStoreConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tabId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_TabId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, tabId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tabName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_TabName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, tabName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tabType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_TabType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, tabType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sellType",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_SellType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, sellType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sortWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_SortWeight,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, sortWeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "androidMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_AndroidMin,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, androidMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_AndroidMax,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, androidMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_IosMin,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, iosMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_IosMax,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, iosMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_PcMin,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, pcMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_PcMax,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, pcMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appletsMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_AppletsMax,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, appletsMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appletsMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_AppletsMin,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, appletsMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeItemListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgCultivateStoreItemConf),
        .number = PB3CfgCultivateStoreConf_FieldNumber_StoreItemListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, storeItemListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "whiteUserListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_WhiteUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, whiteUserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "blackUserListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_BlackUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, blackUserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "whiteRoomListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_WhiteRoomListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, whiteRoomListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "blackRoomListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CfgCultivateStoreConf_FieldNumber_BlackRoomListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CfgCultivateStoreConf__storage_, blackRoomListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CfgCultivateStoreConf class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CfgCultivateStoreConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmCfgCultivateStoreConf

@implementation PB3XcmCfgCultivateStoreConf

@dynamic cfgListArray, cfgListArray_Count;

typedef struct PB3XcmCfgCultivateStoreConf__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cfgListArray;
} PB3XcmCfgCultivateStoreConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CfgCultivateStoreConf),
        .number = PB3XcmCfgCultivateStoreConf_FieldNumber_CfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmCfgCultivateStoreConf__storage_, cfgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmCfgCultivateStoreConf class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmCfgCultivateStoreConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000cfgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CultivateHandbook

@implementation PB3CultivateHandbook

@dynamic relateStoreId;
@dynamic handbookImage;
@dynamic handbookDes;
@dynamic sortWeight;

typedef struct PB3CultivateHandbook__storage_ {
  uint32_t _has_storage_[1];
  int32_t relateStoreId;
  int32_t sortWeight;
  NSString *handbookImage;
  NSString *handbookDes;
} PB3CultivateHandbook__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relateStoreId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateHandbook_FieldNumber_RelateStoreId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CultivateHandbook__storage_, relateStoreId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "handbookImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateHandbook_FieldNumber_HandbookImage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CultivateHandbook__storage_, handbookImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "handbookDes",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateHandbook_FieldNumber_HandbookDes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CultivateHandbook__storage_, handbookDes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sortWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3CultivateHandbook_FieldNumber_SortWeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CultivateHandbook__storage_, sortWeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CultivateHandbook class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CultivateHandbook__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3XcmCfgCultivateHandbookConf

@implementation PB3XcmCfgCultivateHandbookConf

@dynamic cfgListArray, cfgListArray_Count;

typedef struct PB3XcmCfgCultivateHandbookConf__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cfgListArray;
} PB3XcmCfgCultivateHandbookConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cfgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CultivateHandbook),
        .number = PB3XcmCfgCultivateHandbookConf_FieldNumber_CfgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3XcmCfgCultivateHandbookConf__storage_, cfgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3XcmCfgCultivateHandbookConf class]
                                     rootClass:[PB3AcmConfExtRoot class]
                                          file:PB3AcmConfExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3XcmCfgCultivateHandbookConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000cfgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
