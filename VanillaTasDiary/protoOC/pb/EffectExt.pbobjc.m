// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/effect.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/EffectExt.pbobjc.h"
#import "pb/AssetsExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3EffectExtRoot

@implementation PB3EffectExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3EffectExtRoot_FileDescriptor

static GPBFileDescriptor *PB3EffectExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3EffectCmdId

GPBEnumDescriptor *PB3EffectCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EffectNone1\000EffectCmdAddProtect\000EffectCm"
        "dDelProtect\000";
    static const int32_t values[] = {
        PB3EffectCmdId_EffectNone1,
        PB3EffectCmdId_EffectCmdAddProtect,
        PB3EffectCmdId_EffectCmdDelProtect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EffectCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EffectCmdId_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EffectCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EffectCmdId_EffectNone1:
    case PB3EffectCmdId_EffectCmdAddProtect:
    case PB3EffectCmdId_EffectCmdDelProtect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3EffectHonourHeavenReq

@implementation PB3EffectHonourHeavenReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3EffectHonourHeavenReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3EffectHonourHeavenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectHonourHeavenReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectHonourHeavenReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectHonourHeavenReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectHonourHeavenReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectHonourHeavenReq class]
                                     rootClass:[PB3EffectExtRoot class]
                                          file:PB3EffectExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectHonourHeavenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectHonourHeavenRes

@implementation PB3EffectHonourHeavenRes

@dynamic effectHonourArray, effectHonourArray_Count;
@dynamic total;

typedef struct PB3EffectHonourHeavenRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *effectHonourArray;
  int64_t total;
} PB3EffectHonourHeavenRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "effectHonourArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EffectHonour),
        .number = PB3EffectHonourHeavenRes_FieldNumber_EffectHonourArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EffectHonourHeavenRes__storage_, effectHonourArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectHonourHeavenRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectHonourHeavenRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectHonourHeavenRes class]
                                     rootClass:[PB3EffectExtRoot class]
                                          file:PB3EffectExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectHonourHeavenRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectHonourDecReq

@implementation PB3EffectHonourDecReq

@dynamic effectId;
@dynamic effectDecOwn;
@dynamic isAllow;

typedef struct PB3EffectHonourDecReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t effectId;
  int32_t isAllow;
  NSString *effectDecOwn;
} PB3EffectHonourDecReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectHonourDecReq_FieldNumber_EffectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EffectHonourDecReq__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectDecOwn",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectHonourDecReq_FieldNumber_EffectDecOwn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EffectHonourDecReq__storage_, effectDecOwn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAllow",
        .dataTypeSpecific.className = NULL,
        .number = PB3EffectHonourDecReq_FieldNumber_IsAllow,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EffectHonourDecReq__storage_, isAllow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectHonourDecReq class]
                                     rootClass:[PB3EffectExtRoot class]
                                          file:PB3EffectExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EffectHonourDecReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EffectHonourDecRes

@implementation PB3EffectHonourDecRes


typedef struct PB3EffectHonourDecRes__storage_ {
  uint32_t _has_storage_[1];
} PB3EffectHonourDecRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EffectHonourDecRes class]
                                     rootClass:[PB3EffectExtRoot class]
                                          file:PB3EffectExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3EffectHonourDecRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
