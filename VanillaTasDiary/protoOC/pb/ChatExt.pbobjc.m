// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/chat.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/ChatExt.pbobjc.h"
#import "pb/RoomExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
#import "pb/AcmConfExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ChatExtRoot

@implementation PB3ChatExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3ChatExtRoot_FileDescriptor

static GPBFileDescriptor *PB3ChatExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3ChatCmdId

GPBEnumDescriptor *PB3ChatCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CcZero\000CcAnonymous\000CcClan\000CcAnonymousCd\000"
        "CcChatCp\000CcChatCpDail\000CcChatCpEnd\000CcChat"
        "CpConf\000CcChatCpTips\000CcChatCpCancel\000CcImG"
        "iftChange\000CcChatCpBossCancel\000CcImInterac"
        "tiveChange\000CcChatSquareChannel\000CcChatDel"
        "SquareChannel\000CcChatCpEmoji\000CcChatCpDail"
        "Disappear\000";
    static const int32_t values[] = {
        PB3ChatCmdId_CcZero,
        PB3ChatCmdId_CcAnonymous,
        PB3ChatCmdId_CcClan,
        PB3ChatCmdId_CcAnonymousCd,
        PB3ChatCmdId_CcChatCp,
        PB3ChatCmdId_CcChatCpDail,
        PB3ChatCmdId_CcChatCpEnd,
        PB3ChatCmdId_CcChatCpConf,
        PB3ChatCmdId_CcChatCpTips,
        PB3ChatCmdId_CcChatCpCancel,
        PB3ChatCmdId_CcImGiftChange,
        PB3ChatCmdId_CcChatCpBossCancel,
        PB3ChatCmdId_CcImInteractiveChange,
        PB3ChatCmdId_CcChatSquareChannel,
        PB3ChatCmdId_CcChatDelSquareChannel,
        PB3ChatCmdId_CcChatCpEmoji,
        PB3ChatCmdId_CcChatCpDailDisappear,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChatCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChatCmdId_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChatCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChatCmdId_CcZero:
    case PB3ChatCmdId_CcAnonymous:
    case PB3ChatCmdId_CcClan:
    case PB3ChatCmdId_CcAnonymousCd:
    case PB3ChatCmdId_CcChatCp:
    case PB3ChatCmdId_CcChatCpDail:
    case PB3ChatCmdId_CcChatCpEnd:
    case PB3ChatCmdId_CcChatCpConf:
    case PB3ChatCmdId_CcChatCpTips:
    case PB3ChatCmdId_CcChatCpCancel:
    case PB3ChatCmdId_CcImGiftChange:
    case PB3ChatCmdId_CcChatCpBossCancel:
    case PB3ChatCmdId_CcImInteractiveChange:
    case PB3ChatCmdId_CcChatSquareChannel:
    case PB3ChatCmdId_CcChatDelSquareChannel:
    case PB3ChatCmdId_CcChatCpEmoji:
    case PB3ChatCmdId_CcChatCpDailDisappear:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChatErr

GPBEnumDescriptor *PB3ChatErr_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ErrZero\000ErrChannelChatFrequently\000ErrChan"
        "nelChatBan\000ErrchatCancelOnchat\000";
    static const int32_t values[] = {
        PB3ChatErr_ErrZero,
        PB3ChatErr_ErrChannelChatFrequently,
        PB3ChatErr_ErrChannelChatBan,
        PB3ChatErr_ErrchatCancelOnchat,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChatErr)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChatErr_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChatErr_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChatErr_ErrZero:
    case PB3ChatErr_ErrChannelChatFrequently:
    case PB3ChatErr_ErrChannelChatBan:
    case PB3ChatErr_ErrchatCancelOnchat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3FirstPayCPEndType

GPBEnumDescriptor *PB3FirstPayCPEndType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FpetZero\000FpetPlayerEnd\000FpetCpEnd\000FpetCha"
        "nge\000FpetSystemEnd\000FpetColse\000FpetRefuse\000";
    static const int32_t values[] = {
        PB3FirstPayCPEndType_FpetZero,
        PB3FirstPayCPEndType_FpetPlayerEnd,
        PB3FirstPayCPEndType_FpetCpEnd,
        PB3FirstPayCPEndType_FpetChange,
        PB3FirstPayCPEndType_FpetSystemEnd,
        PB3FirstPayCPEndType_FpetColse,
        PB3FirstPayCPEndType_FpetRefuse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3FirstPayCPEndType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3FirstPayCPEndType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3FirstPayCPEndType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3FirstPayCPEndType_FpetZero:
    case PB3FirstPayCPEndType_FpetPlayerEnd:
    case PB3FirstPayCPEndType_FpetCpEnd:
    case PB3FirstPayCPEndType_FpetChange:
    case PB3FirstPayCPEndType_FpetSystemEnd:
    case PB3FirstPayCPEndType_FpetColse:
    case PB3FirstPayCPEndType_FpetRefuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CPClickSource

GPBEnumDescriptor *PB3CPClickSource_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CpcsDefault\000CpcsHome\000CpcsHomeDialog\000Cpcs"
        "Im\000CpcsImCard\000CpcsImTopDialog\000CpcsCallAg"
        "ain\000CpcsCouponSystemEnd\000CpcsCouponBossEn"
        "d\000";
    static const int32_t values[] = {
        PB3CPClickSource_CpcsDefault,
        PB3CPClickSource_CpcsHome,
        PB3CPClickSource_CpcsHomeDialog,
        PB3CPClickSource_CpcsIm,
        PB3CPClickSource_CpcsImCard,
        PB3CPClickSource_CpcsImTopDialog,
        PB3CPClickSource_CpcsCallAgain,
        PB3CPClickSource_CpcsCouponSystemEnd,
        PB3CPClickSource_CpcsCouponBossEnd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CPClickSource)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CPClickSource_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CPClickSource_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CPClickSource_CpcsDefault:
    case PB3CPClickSource_CpcsHome:
    case PB3CPClickSource_CpcsHomeDialog:
    case PB3CPClickSource_CpcsIm:
    case PB3CPClickSource_CpcsImCard:
    case PB3CPClickSource_CpcsImTopDialog:
    case PB3CPClickSource_CpcsCallAgain:
    case PB3CPClickSource_CpcsCouponSystemEnd:
    case PB3CPClickSource_CpcsCouponBossEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CPChatOptType

GPBEnumDescriptor *PB3CPChatOptType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CpoZero\000CpoCancel\000CpoContinue\000CpoChange\000"
        "CpoEnd\000CpoClose\000CpoRefuse\000";
    static const int32_t values[] = {
        PB3CPChatOptType_CpoZero,
        PB3CPChatOptType_CpoCancel,
        PB3CPChatOptType_CpoContinue,
        PB3CPChatOptType_CpoChange,
        PB3CPChatOptType_CpoEnd,
        PB3CPChatOptType_CpoClose,
        PB3CPChatOptType_CpoRefuse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CPChatOptType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CPChatOptType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CPChatOptType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CPChatOptType_CpoZero:
    case PB3CPChatOptType_CpoCancel:
    case PB3CPChatOptType_CpoContinue:
    case PB3CPChatOptType_CpoChange:
    case PB3CPChatOptType_CpoEnd:
    case PB3CPChatOptType_CpoClose:
    case PB3CPChatOptType_CpoRefuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CPChatStatus

GPBEnumDescriptor *PB3CPChatStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CpcsZero\000CpcsNotConnected\000CpcsOnChat\000Cpc"
        "sAccomplish\000";
    static const int32_t values[] = {
        PB3CPChatStatus_CpcsZero,
        PB3CPChatStatus_CpcsNotConnected,
        PB3CPChatStatus_CpcsOnChat,
        PB3CPChatStatus_CpcsAccomplish,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CPChatStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CPChatStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CPChatStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CPChatStatus_CpcsZero:
    case PB3CPChatStatus_CpcsNotConnected:
    case PB3CPChatStatus_CpcsOnChat:
    case PB3CPChatStatus_CpcsAccomplish:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChatShowType

GPBEnumDescriptor *PB3ChatShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CstZero\000CstPage\000CstKeyboard\000";
    static const int32_t values[] = {
        PB3ChatShowType_CstZero,
        PB3ChatShowType_CstPage,
        PB3ChatShowType_CstKeyboard,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChatShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChatShowType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChatShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChatShowType_CstZero:
    case PB3ChatShowType_CstPage:
    case PB3ChatShowType_CstKeyboard:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3EmojiChatType

GPBEnumDescriptor *PB3EmojiChatType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EmojiCtZero\000EmojiCtCp\000EmojiCtIm\000EmojiCtH"
        "ome\000EmojiBlackWhale\000EmojiTopModel\000";
    static const int32_t values[] = {
        PB3EmojiChatType_EmojiCtZero,
        PB3EmojiChatType_EmojiCtCp,
        PB3EmojiChatType_EmojiCtIm,
        PB3EmojiChatType_EmojiCtHome,
        PB3EmojiChatType_EmojiBlackWhale,
        PB3EmojiChatType_EmojiTopModel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3EmojiChatType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3EmojiChatType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3EmojiChatType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3EmojiChatType_EmojiCtZero:
    case PB3EmojiChatType_EmojiCtCp:
    case PB3EmojiChatType_EmojiCtIm:
    case PB3EmojiChatType_EmojiCtHome:
    case PB3EmojiChatType_EmojiBlackWhale:
    case PB3EmojiChatType_EmojiTopModel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CPChatEvaluateType

GPBEnumDescriptor *PB3CPChatEvaluateType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CpcetZero\000CpcetJustSoSo\000CpcetSatisfactor"
        "y\000";
    static const int32_t values[] = {
        PB3CPChatEvaluateType_CpcetZero,
        PB3CPChatEvaluateType_CpcetJustSoSo,
        PB3CPChatEvaluateType_CpcetSatisfactory,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CPChatEvaluateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CPChatEvaluateType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CPChatEvaluateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CPChatEvaluateType_CpcetZero:
    case PB3CPChatEvaluateType_CpcetJustSoSo:
    case PB3CPChatEvaluateType_CpcetSatisfactory:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PopWindowMode

GPBEnumDescriptor *PB3PopWindowMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PwmNone\000PwmOnce\000PwmEveryTime\000";
    static const int32_t values[] = {
        PB3PopWindowMode_PwmNone,
        PB3PopWindowMode_PwmOnce,
        PB3PopWindowMode_PwmEveryTime,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PopWindowMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PopWindowMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PopWindowMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PopWindowMode_PwmNone:
    case PB3PopWindowMode_PwmOnce:
    case PB3PopWindowMode_PwmEveryTime:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3ChatEmoji

@implementation PB3ChatEmoji

@dynamic fid;
@dynamic tid;
@dynamic emojiId;

typedef struct PB3ChatEmoji__storage_ {
  uint32_t _has_storage_[1];
  int64_t fid;
  int64_t tid;
  int64_t emojiId;
} PB3ChatEmoji__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fid",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEmoji_FieldNumber_Fid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatEmoji__storage_, fid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tid",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEmoji_FieldNumber_Tid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatEmoji__storage_, tid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "emojiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatEmoji_FieldNumber_EmojiId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatEmoji__storage_, emojiId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatEmoji class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatEmoji__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EmojiConfReq

@implementation PB3EmojiConfReq


typedef struct PB3EmojiConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3EmojiConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EmojiConfReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3EmojiConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EmojiConfRes

@implementation PB3EmojiConfRes

@dynamic emojisArray, emojisArray_Count;

typedef struct PB3EmojiConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *emojisArray;
} PB3EmojiConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "emojisArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Emoji),
        .number = PB3EmojiConfRes_FieldNumber_EmojisArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EmojiConfRes__storage_, emojisArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EmojiConfRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EmojiConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EmojiConfCDNReq

@implementation PB3EmojiConfCDNReq


typedef struct PB3EmojiConfCDNReq__storage_ {
  uint32_t _has_storage_[1];
} PB3EmojiConfCDNReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EmojiConfCDNReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3EmojiConfCDNReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EmojiConfCDNRes

@implementation PB3EmojiConfCDNRes

@dynamic confURL;

typedef struct PB3EmojiConfCDNRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *confURL;
} PB3EmojiConfCDNRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3EmojiConfCDNRes_FieldNumber_ConfURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EmojiConfCDNRes__storage_, confURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EmojiConfCDNRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EmojiConfCDNRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EmojiIdsReq

@implementation PB3EmojiIdsReq


typedef struct PB3EmojiIdsReq__storage_ {
  uint32_t _has_storage_[1];
} PB3EmojiIdsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EmojiIdsReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3EmojiIdsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EmojiIdsRes

@implementation PB3EmojiIdsRes

@dynamic listsArray, listsArray_Count;

typedef struct PB3EmojiIdsRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *listsArray;
} PB3EmojiIdsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3EmojiIdsRes_FieldNumber_ListsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3EmojiIdsRes__storage_, listsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EmojiIdsRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EmojiIdsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Emoji

@implementation PB3Emoji

@dynamic id_p;
@dynamic name;
@dynamic img;
@dynamic dynamicImg;
@dynamic cycleTimes;
@dynamic sort;
@dynamic remark;
@dynamic gameDynamicImg;
@dynamic additionalResource;
@dynamic emojiType;

typedef struct PB3Emoji__storage_ {
  uint32_t _has_storage_[1];
  int32_t cycleTimes;
  int32_t sort;
  int32_t emojiType;
  NSString *name;
  NSString *img;
  NSString *dynamicImg;
  NSString *remark;
  NSString *gameDynamicImg;
  NSString *additionalResource;
  int64_t id_p;
} PB3Emoji__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "img",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_Img,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, img),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dynamicImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_DynamicImg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, dynamicImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cycleTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_CycleTimes,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, cycleTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_Sort,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_Remark,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameDynamicImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_GameDynamicImg,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, gameDynamicImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "additionalResource",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_AdditionalResource,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, additionalResource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "emojiType",
        .dataTypeSpecific.className = NULL,
        .number = PB3Emoji_FieldNumber_EmojiType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3Emoji__storage_, emojiType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Emoji class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Emoji__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CleanSendChatReq

@implementation PB3CleanSendChatReq


typedef struct PB3CleanSendChatReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CleanSendChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CleanSendChatReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CleanSendChatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CleanSendChatRes

@implementation PB3CleanSendChatRes


typedef struct PB3CleanSendChatRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CleanSendChatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CleanSendChatRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CleanSendChatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChatAnonymousCdReq

@implementation PB3ChatAnonymousCdReq


typedef struct PB3ChatAnonymousCdReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ChatAnonymousCdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatAnonymousCdReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChatAnonymousCdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChatAnonymousCdRes

@implementation PB3ChatAnonymousCdRes

@dynamic cdTime;
@dynamic channelsArray, channelsArray_Count;
@dynamic confArray, confArray_Count;

typedef struct PB3ChatAnonymousCdRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t cdTime;
  GPBEnumArray *channelsArray;
  NSMutableArray *confArray;
} PB3ChatAnonymousCdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cdTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatAnonymousCdRes_FieldNumber_CdTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatAnonymousCdRes__storage_, cdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channelsArray",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3ChatAnonymousCdRes_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatAnonymousCdRes__storage_, channelsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "confArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AllChatCfg),
        .number = PB3ChatAnonymousCdRes_FieldNumber_ConfArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatAnonymousCdRes__storage_, confArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatAnonymousCdRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatAnonymousCdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChatCPCustom

@implementation PB3ChatCPCustom

@dynamic customType;

typedef struct PB3ChatCPCustom__storage_ {
  uint32_t _has_storage_[1];
  int32_t customType;
} PB3ChatCPCustom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPCustom_FieldNumber_CustomType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatCPCustom__storage_, customType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatCPCustom class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatCPCustom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerCP

@implementation PB3PlayerCP

@dynamic playerId;
@dynamic name;
@dynamic icon;
@dynamic sex;
@dynamic gmeAuth;
@dynamic tipsArray, tipsArray_Count;
@dynamic iconEffectId;

typedef struct PB3PlayerCP__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t iconEffectId;
  NSString *name;
  NSString *icon;
  NSData *gmeAuth;
  NSMutableArray *tipsArray;
  int64_t playerId;
} PB3PlayerCP__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCP_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerCP__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCP_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerCP__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCP_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerCP__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3PlayerCP_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerCP__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gmeAuth",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCP_FieldNumber_GmeAuth,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerCP__storage_, gmeAuth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tipsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCP_FieldNumber_TipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerCP__storage_, tipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconEffectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCP_FieldNumber_IconEffectId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerCP__storage_, iconEffectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerCP class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerCP__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerCP_Sex_RawValue(PB3PlayerCP *message) {
  GPBDescriptor *descriptor = [PB3PlayerCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerCP_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerCP_Sex_RawValue(PB3PlayerCP *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerCP_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChatCPDial

@implementation PB3ChatCPDial

@dynamic id_p;
@dynamic playerId;
@dynamic name;
@dynamic icon;
@dynamic sex;
@dynamic condition;
@dynamic endTime;
@dynamic diamonds;
@dynamic cpType;
@dynamic chatType;
@dynamic chatProfit;
@dynamic hasCustom, custom;
@dynamic dialApp;

typedef struct PB3ChatCPDial__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t diamonds;
  PB3ChatCPType cpType;
  PB3ChatCPType chatType;
  PB3Application dialApp;
  NSString *id_p;
  NSString *name;
  NSString *icon;
  NSString *condition;
  NSString *chatProfit;
  PB3ChatCPCustom *custom;
  int64_t playerId;
  int64_t endTime;
} PB3ChatCPDial__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3ChatCPDial_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "condition",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_Condition,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, condition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "diamonds",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_Diamonds,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, diamonds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatCPDial_FieldNumber_CpType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatCPDial_FieldNumber_ChatType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatProfit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDial_FieldNumber_ChatProfit,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, chatProfit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3ChatCPDial_FieldNumber_Custom,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dialApp",
        .dataTypeSpecific.enumDescFunc = PB3Application_EnumDescriptor,
        .number = PB3ChatCPDial_FieldNumber_DialApp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3ChatCPDial__storage_, dialApp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatCPDial class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatCPDial__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChatCPDial_Sex_RawValue(PB3ChatCPDial *message) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPDial_Sex_RawValue(PB3ChatCPDial *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatCPDial_CpType_RawValue(PB3ChatCPDial *message) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPDial_CpType_RawValue(PB3ChatCPDial *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatCPDial_ChatType_RawValue(PB3ChatCPDial *message) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_ChatType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPDial_ChatType_RawValue(PB3ChatCPDial *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_ChatType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatCPDial_DialApp_RawValue(PB3ChatCPDial *message) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_DialApp];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPDial_DialApp_RawValue(PB3ChatCPDial *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPDial descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPDial_FieldNumber_DialApp];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChatFirstPayCP

@implementation PB3ChatFirstPayCP

@dynamic id_p;
@dynamic hasPlayer, player;
@dynamic hasCp, cp;
@dynamic chatTime;
@dynamic deviceType;
@dynamic giftIdListArray, giftIdListArray_Count;
@dynamic isChange;
@dynamic timeLong;
@dynamic endTime;
@dynamic cpType;
@dynamic chatType;
@dynamic chatPageURL;
@dynamic hasChatInfo, chatInfo;
@dynamic hasCustom, custom;
@dynamic sdkType;
@dynamic sameCity;
@dynamic surplusChangeTimes;
@dynamic dialApp;

typedef struct PB3ChatFirstPayCP__storage_ {
  uint32_t _has_storage_[1];
  PB3DeviceType deviceType;
  int32_t timeLong;
  PB3ChatCPType cpType;
  PB3ChatCPType chatType;
  PB3VoiceSdkType sdkType;
  int32_t surplusChangeTimes;
  PB3Application dialApp;
  NSString *id_p;
  PB3PlayerCP *player;
  PB3PlayerCP *cp;
  GPBUInt32Array *giftIdListArray;
  NSString *chatPageURL;
  PB3CPChatInfo *chatInfo;
  PB3ChatCPCustom *custom;
  NSString *sameCity;
  int64_t chatTime;
  int64_t endTime;
} PB3ChatFirstPayCP__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerCP),
        .number = PB3ChatFirstPayCP_FieldNumber_Player,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cp",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerCP),
        .number = PB3ChatFirstPayCP_FieldNumber_Cp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, cp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_ChatTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, chatTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3ChatFirstPayCP_FieldNumber_DeviceType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "giftIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_GiftIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, giftIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isChange",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_IsChange,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeLong",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_TimeLong,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, timeLong),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_EndTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatFirstPayCP_FieldNumber_CpType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatFirstPayCP_FieldNumber_ChatType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatPageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_ChatPageURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, chatPageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CPChatInfo),
        .number = PB3ChatFirstPayCP_FieldNumber_ChatInfo,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, chatInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3ChatFirstPayCP_FieldNumber_Custom,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sdkType",
        .dataTypeSpecific.enumDescFunc = PB3VoiceSdkType_EnumDescriptor,
        .number = PB3ChatFirstPayCP_FieldNumber_SdkType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, sdkType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sameCity",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_SameCity,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, sameCity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "surplusChangeTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatFirstPayCP_FieldNumber_SurplusChangeTimes,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, surplusChangeTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dialApp",
        .dataTypeSpecific.enumDescFunc = PB3Application_EnumDescriptor,
        .number = PB3ChatFirstPayCP_FieldNumber_DialApp,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3ChatFirstPayCP__storage_, dialApp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatFirstPayCP class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatFirstPayCP__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\014\004\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChatFirstPayCP_DeviceType_RawValue(PB3ChatFirstPayCP *message) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatFirstPayCP_DeviceType_RawValue(PB3ChatFirstPayCP *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatFirstPayCP_CpType_RawValue(PB3ChatFirstPayCP *message) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatFirstPayCP_CpType_RawValue(PB3ChatFirstPayCP *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatFirstPayCP_ChatType_RawValue(PB3ChatFirstPayCP *message) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_ChatType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatFirstPayCP_ChatType_RawValue(PB3ChatFirstPayCP *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_ChatType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatFirstPayCP_SdkType_RawValue(PB3ChatFirstPayCP *message) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_SdkType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatFirstPayCP_SdkType_RawValue(PB3ChatFirstPayCP *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_SdkType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatFirstPayCP_DialApp_RawValue(PB3ChatFirstPayCP *message) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_DialApp];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatFirstPayCP_DialApp_RawValue(PB3ChatFirstPayCP *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatFirstPayCP descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatFirstPayCP_FieldNumber_DialApp];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChatCPEnd

@implementation PB3ChatCPEnd

@dynamic id_p;
@dynamic type;
@dynamic btnText;
@dynamic btnURL;
@dynamic endTime;
@dynamic text;
@dynamic hasPlayer, player;
@dynamic hasCp, cp;
@dynamic listArray, listArray_Count;
@dynamic gold;
@dynamic totalGold;
@dynamic cpText;
@dynamic cpType;
@dynamic chatType;
@dynamic hasChatInfo, chatInfo;
@dynamic hasCustom, custom;
@dynamic cpGuideline;
@dynamic chatTime;

typedef struct PB3ChatCPEnd__storage_ {
  uint32_t _has_storage_[1];
  PB3FirstPayCPEndType type;
  int32_t gold;
  PB3ChatCPType cpType;
  PB3ChatCPType chatType;
  NSString *id_p;
  NSString *btnText;
  NSString *btnURL;
  NSString *text;
  PB3Player *player;
  PB3Player *cp;
  NSMutableArray *listArray;
  NSString *cpText;
  PB3CPChatInfo *chatInfo;
  PB3ChatCPCustom *custom;
  NSString *cpGuideline;
  int64_t endTime;
  int64_t totalGold;
  int64_t chatTime;
} PB3ChatCPEnd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3FirstPayCPEndType_EnumDescriptor,
        .number = PB3ChatCPEnd_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "btnText",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_BtnText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, btnText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_BtnURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, btnURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_Text,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3ChatCPEnd_FieldNumber_Player,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cp",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3ChatCPEnd_FieldNumber_Cp,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, cp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CPGainGift),
        .number = PB3ChatCPEnd_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_Gold,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_TotalGold,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, totalGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cpText",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_CpText,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, cpText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatCPEnd_FieldNumber_CpType,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatCPEnd_FieldNumber_ChatType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CPChatInfo),
        .number = PB3ChatCPEnd_FieldNumber_ChatInfo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, chatInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3ChatCPEnd_FieldNumber_Custom,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cpGuideline",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_CpGuideline,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, cpGuideline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPEnd_FieldNumber_ChatTime,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3ChatCPEnd__storage_, chatTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatCPEnd class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatCPEnd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChatCPEnd_Type_RawValue(PB3ChatCPEnd *message) {
  GPBDescriptor *descriptor = [PB3ChatCPEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPEnd_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPEnd_Type_RawValue(PB3ChatCPEnd *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPEnd_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatCPEnd_CpType_RawValue(PB3ChatCPEnd *message) {
  GPBDescriptor *descriptor = [PB3ChatCPEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPEnd_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPEnd_CpType_RawValue(PB3ChatCPEnd *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPEnd_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatCPEnd_ChatType_RawValue(PB3ChatCPEnd *message) {
  GPBDescriptor *descriptor = [PB3ChatCPEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPEnd_FieldNumber_ChatType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPEnd_ChatType_RawValue(PB3ChatCPEnd *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPEnd_FieldNumber_ChatType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPChatInfo

@implementation PB3CPChatInfo

@dynamic originalGold;
@dynamic condition;
@dynamic cpType;
@dynamic voiceId;
@dynamic couponId;
@dynamic chatImGold;
@dynamic hasCustom, custom;
@dynamic sex;

typedef struct PB3CPChatInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t originalGold;
  PB3ChatCPType cpType;
  int32_t voiceId;
  int32_t chatImGold;
  PB3SexType sex;
  NSString *condition;
  PB3ChatCPCustom *custom;
  int64_t couponId;
} PB3CPChatInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "originalGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatInfo_FieldNumber_OriginalGold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, originalGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "condition",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatInfo_FieldNumber_Condition,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, condition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3CPChatInfo_FieldNumber_CpType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voiceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatInfo_FieldNumber_VoiceId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, voiceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "couponId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatInfo_FieldNumber_CouponId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, couponId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "chatImGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatInfo_FieldNumber_ChatImGold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, chatImGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3CPChatInfo_FieldNumber_Custom,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3CPChatInfo_FieldNumber_Sex,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CPChatInfo__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatInfo class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CPChatInfo_CpType_RawValue(PB3CPChatInfo *message) {
  GPBDescriptor *descriptor = [PB3CPChatInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatInfo_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPChatInfo_CpType_RawValue(PB3CPChatInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPChatInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatInfo_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CPChatInfo_Sex_RawValue(PB3CPChatInfo *message) {
  GPBDescriptor *descriptor = [PB3CPChatInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatInfo_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPChatInfo_Sex_RawValue(PB3CPChatInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPChatInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatInfo_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChatCPBossCancel

@implementation PB3ChatCPBossCancel

@dynamic id_p;
@dynamic cpType;

typedef struct PB3ChatCPBossCancel__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType cpType;
  NSString *id_p;
} PB3ChatCPBossCancel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPBossCancel_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatCPBossCancel__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatCPBossCancel_FieldNumber_CpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatCPBossCancel__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatCPBossCancel class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatCPBossCancel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChatCPBossCancel_CpType_RawValue(PB3ChatCPBossCancel *message) {
  GPBDescriptor *descriptor = [PB3ChatCPBossCancel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPBossCancel_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPBossCancel_CpType_RawValue(PB3ChatCPBossCancel *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPBossCancel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPBossCancel_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SquareChatMsg

@implementation PB3SquareChatMsg

@dynamic userId;
@dynamic name;
@dynamic avatar;
@dynamic sexType;
@dynamic msgTime;
@dynamic hasMsg, msg;
@dynamic msgId;

typedef struct PB3SquareChatMsg__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sexType;
  NSString *name;
  NSString *avatar;
  PB3ChatMsg *msg;
  int64_t userId;
  int64_t msgTime;
  int64_t msgId;
} PB3SquareChatMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SquareChatMsg_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SquareChatMsg__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SquareChatMsg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SquareChatMsg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = PB3SquareChatMsg_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SquareChatMsg__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sexType",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3SquareChatMsg_FieldNumber_SexType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SquareChatMsg__storage_, sexType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SquareChatMsg_FieldNumber_MsgTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SquareChatMsg__storage_, msgTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatMsg),
        .number = PB3SquareChatMsg_FieldNumber_Msg,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SquareChatMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SquareChatMsg_FieldNumber_MsgId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SquareChatMsg__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SquareChatMsg class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SquareChatMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SquareChatMsg_SexType_RawValue(PB3SquareChatMsg *message) {
  GPBDescriptor *descriptor = [PB3SquareChatMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SquareChatMsg_FieldNumber_SexType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SquareChatMsg_SexType_RawValue(PB3SquareChatMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SquareChatMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SquareChatMsg_FieldNumber_SexType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PushDelSquareChatMsg

@implementation PB3PushDelSquareChatMsg

@dynamic msgId;

typedef struct PB3PushDelSquareChatMsg__storage_ {
  uint32_t _has_storage_[1];
  int64_t msgId;
} PB3PushDelSquareChatMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushDelSquareChatMsg_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PushDelSquareChatMsg__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PushDelSquareChatMsg class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PushDelSquareChatMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CPGainGift

@implementation PB3CPGainGift

@dynamic giftId;
@dynamic giftNum;

typedef struct PB3CPGainGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
} PB3CPGainGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPGainGift_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPGainGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPGainGift_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPGainGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPGainGift class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPGainGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChatCPConf

@implementation PB3ChatCPConf

@dynamic endTime;
@dynamic cpListArray, cpListArray_Count;
@dynamic listArray, listArray_Count;
@dynamic gold;
@dynamic cpType;
@dynamic originalGold;
@dynamic bgURL;
@dynamic btnText;
@dynamic windowPageURL;
@dynamic windowPageCouponURL;
@dynamic choicePageName;
@dynamic blackWhaleTabName;
@dynamic blackWhaleListArray, blackWhaleListArray_Count;
@dynamic hasCustom, custom;
@dynamic sameSexListArray, sameSexListArray_Count;
@dynamic windowInfoArray, windowInfoArray_Count;
@dynamic dialPopWindow;
@dynamic imGold;
@dynamic hasBlindBoxWindow, blindBoxWindow;

typedef struct PB3ChatCPConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t gold;
  PB3ChatCPType cpType;
  int32_t originalGold;
  PB3PopWindowMode dialPopWindow;
  int32_t imGold;
  NSMutableArray *cpListArray;
  NSMutableArray *listArray;
  NSString *bgURL;
  NSString *btnText;
  NSString *windowPageURL;
  NSString *windowPageCouponURL;
  NSString *choicePageName;
  NSString *blackWhaleTabName;
  NSMutableArray *blackWhaleListArray;
  PB3ChatCPCustom *custom;
  NSMutableArray *sameSexListArray;
  NSMutableArray *windowInfoArray;
  PB3CPDialWindow *blindBoxWindow;
  int64_t endTime;
} PB3ChatCPConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_EndTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cpListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CPInfo),
        .number = PB3ChatCPConf_FieldNumber_CpListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, cpListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChargeFirstWelfareItem),
        .number = PB3ChatCPConf_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChatCPConf_FieldNumber_CpType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "originalGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_OriginalGold,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, originalGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_BgURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, bgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnText",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_BtnText,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, btnText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "windowPageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_WindowPageURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, windowPageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "windowPageCouponURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_WindowPageCouponURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, windowPageCouponURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "choicePageName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_ChoicePageName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, choicePageName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blackWhaleTabName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_BlackWhaleTabName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, blackWhaleTabName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blackWhaleListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpBlackWhaleCfg),
        .number = PB3ChatCPConf_FieldNumber_BlackWhaleListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, blackWhaleListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3ChatCPConf_FieldNumber_Custom,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sameSexListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CPInfo),
        .number = PB3ChatCPConf_FieldNumber_SameSexListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, sameSexListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "windowInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CPDialWindow),
        .number = PB3ChatCPConf_FieldNumber_WindowInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, windowInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dialPopWindow",
        .dataTypeSpecific.enumDescFunc = PB3PopWindowMode_EnumDescriptor,
        .number = PB3ChatCPConf_FieldNumber_DialPopWindow,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, dialPopWindow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "imGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPConf_FieldNumber_ImGold,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, imGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "blindBoxWindow",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CPDialWindow),
        .number = PB3ChatCPConf_FieldNumber_BlindBoxWindow,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3ChatCPConf__storage_, blindBoxWindow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatCPConf class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatCPConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\007\002\241!!\000\t\006\244\241!!\000\n\006\244\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChatCPConf_CpType_RawValue(PB3ChatCPConf *message) {
  GPBDescriptor *descriptor = [PB3ChatCPConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPConf_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPConf_CpType_RawValue(PB3ChatCPConf *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPConf_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChatCPConf_DialPopWindow_RawValue(PB3ChatCPConf *message) {
  GPBDescriptor *descriptor = [PB3ChatCPConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPConf_FieldNumber_DialPopWindow];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChatCPConf_DialPopWindow_RawValue(PB3ChatCPConf *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChatCPConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChatCPConf_FieldNumber_DialPopWindow];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CpBlackWhaleCfg

@implementation PB3CpBlackWhaleCfg

@dynamic cpType;
@dynamic chattingTitleURL;
@dynamic originalGold;
@dynamic isOpen;
@dynamic startTime;
@dynamic endTime;
@dynamic bgURL;
@dynamic voiceURL;
@dynamic voiceTime;
@dynamic btnBgURL;
@dynamic btnText;
@dynamic btnBgURLNotOpen;
@dynamic voiceStartColor;
@dynamic voiceEndColor;
@dynamic earlyTastePrice;
@dynamic hasCustom, custom;
@dynamic sort;

typedef struct PB3CpBlackWhaleCfg__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType cpType;
  int32_t originalGold;
  int32_t voiceTime;
  int32_t sort;
  NSString *chattingTitleURL;
  NSString *bgURL;
  NSString *voiceURL;
  NSString *btnBgURL;
  NSString *btnText;
  NSString *btnBgURLNotOpen;
  NSString *voiceStartColor;
  NSString *voiceEndColor;
  NSString *earlyTastePrice;
  PB3ChatCPCustom *custom;
  int64_t startTime;
  int64_t endTime;
} PB3CpBlackWhaleCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3CpBlackWhaleCfg_FieldNumber_CpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chattingTitleURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_ChattingTitleURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, chattingTitleURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "originalGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_OriginalGold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, originalGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isOpen",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_IsOpen,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_BgURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, bgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_VoiceURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, voiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_VoiceTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, voiceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "btnBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_BtnBgURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, btnBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnText",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_BtnText,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, btnText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnBgURLNotOpen",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_BtnBgURLNotOpen,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, btnBgURLNotOpen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceStartColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_VoiceStartColor,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, voiceStartColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceEndColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_VoiceEndColor,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, voiceEndColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "earlyTastePrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_EarlyTastePrice,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, earlyTastePrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3CpBlackWhaleCfg_FieldNumber_Custom,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpBlackWhaleCfg_FieldNumber_Sort,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3CpBlackWhaleCfg__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpBlackWhaleCfg class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpBlackWhaleCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\010\245\241!!\000\007\002\241!!\000\010\005\241!!\000\n\003\242\241!!\000\014\003\242\241!!\243\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CpBlackWhaleCfg_CpType_RawValue(PB3CpBlackWhaleCfg *message) {
  GPBDescriptor *descriptor = [PB3CpBlackWhaleCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CpBlackWhaleCfg_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CpBlackWhaleCfg_CpType_RawValue(PB3CpBlackWhaleCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CpBlackWhaleCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CpBlackWhaleCfg_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPInfo

@implementation PB3CPInfo

@dynamic imageURL;
@dynamic voiceURL;
@dynamic condition;
@dynamic voiceTime;
@dynamic voiceId;
@dynamic sex;
@dynamic id_p;
@dynamic isShowTone;

typedef struct PB3CPInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t voiceTime;
  int32_t voiceId;
  PB3SexType sex;
  int32_t id_p;
  NSString *imageURL;
  NSString *voiceURL;
  NSString *condition;
} PB3CPInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPInfo_FieldNumber_ImageURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPInfo__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPInfo_FieldNumber_VoiceURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPInfo__storage_, voiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "condition",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPInfo_FieldNumber_Condition,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CPInfo__storage_, condition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPInfo_FieldNumber_VoiceTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CPInfo__storage_, voiceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPInfo_FieldNumber_VoiceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CPInfo__storage_, voiceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3CPInfo_FieldNumber_Sex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CPInfo__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPInfo_FieldNumber_Id_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CPInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isShowTone",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPInfo_FieldNumber_IsShowTone,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPInfo class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\241!!\000\002\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CPInfo_Sex_RawValue(PB3CPInfo *message) {
  GPBDescriptor *descriptor = [PB3CPInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPInfo_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPInfo_Sex_RawValue(PB3CPInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPInfo_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChoiceCPReq

@implementation PB3ChoiceCPReq

@dynamic condition;
@dynamic cpType;
@dynamic cpIdsArray, cpIdsArray_Count;
@dynamic voiceId;
@dynamic hasCoupon, coupon;
@dynamic hasCustom, custom;
@dynamic sex;
@dynamic source;

typedef struct PB3ChoiceCPReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType cpType;
  int32_t voiceId;
  PB3SexType sex;
  PB3CPClickSource source;
  NSString *condition;
  GPBInt64Array *cpIdsArray;
  PB3CouponUsedData *coupon;
  PB3ChatCPCustom *custom;
} PB3ChoiceCPReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "condition",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChoiceCPReq_FieldNumber_Condition,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, condition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ChoiceCPReq_FieldNumber_CpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cpIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChoiceCPReq_FieldNumber_CpIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, cpIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voiceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChoiceCPReq_FieldNumber_VoiceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, voiceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "coupon",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CouponUsedData),
        .number = PB3ChoiceCPReq_FieldNumber_Coupon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, coupon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3ChoiceCPReq_FieldNumber_Custom,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3ChoiceCPReq_FieldNumber_Sex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "source",
        .dataTypeSpecific.enumDescFunc = PB3CPClickSource_EnumDescriptor,
        .number = PB3ChoiceCPReq_FieldNumber_Source,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ChoiceCPReq__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChoiceCPReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChoiceCPReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChoiceCPReq_CpType_RawValue(PB3ChoiceCPReq *message) {
  GPBDescriptor *descriptor = [PB3ChoiceCPReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChoiceCPReq_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChoiceCPReq_CpType_RawValue(PB3ChoiceCPReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChoiceCPReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChoiceCPReq_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChoiceCPReq_Sex_RawValue(PB3ChoiceCPReq *message) {
  GPBDescriptor *descriptor = [PB3ChoiceCPReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChoiceCPReq_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChoiceCPReq_Sex_RawValue(PB3ChoiceCPReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChoiceCPReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChoiceCPReq_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ChoiceCPReq_Source_RawValue(PB3ChoiceCPReq *message) {
  GPBDescriptor *descriptor = [PB3ChoiceCPReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChoiceCPReq_FieldNumber_Source];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChoiceCPReq_Source_RawValue(PB3ChoiceCPReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChoiceCPReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChoiceCPReq_FieldNumber_Source];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChoiceCPRes

@implementation PB3ChoiceCPRes

@dynamic id_p;

typedef struct PB3ChoiceCPRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} PB3ChoiceCPRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChoiceCPRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChoiceCPRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChoiceCPRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChoiceCPRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GrabbingOrderReq

@implementation PB3GrabbingOrderReq

@dynamic id_p;
@dynamic cpType;

typedef struct PB3GrabbingOrderReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType cpType;
  NSString *id_p;
} PB3GrabbingOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GrabbingOrderReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GrabbingOrderReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3GrabbingOrderReq_FieldNumber_CpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GrabbingOrderReq__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GrabbingOrderReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GrabbingOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GrabbingOrderReq_CpType_RawValue(PB3GrabbingOrderReq *message) {
  GPBDescriptor *descriptor = [PB3GrabbingOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GrabbingOrderReq_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GrabbingOrderReq_CpType_RawValue(PB3GrabbingOrderReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GrabbingOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GrabbingOrderReq_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GrabbingOrderRes

@implementation PB3GrabbingOrderRes


typedef struct PB3GrabbingOrderRes__storage_ {
  uint32_t _has_storage_[1];
} PB3GrabbingOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GrabbingOrderRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GrabbingOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CPChatOptReq

@implementation PB3CPChatOptReq

@dynamic type;
@dynamic id_p;
@dynamic cpType;

typedef struct PB3CPChatOptReq__storage_ {
  uint32_t _has_storage_[1];
  PB3CPChatOptType type;
  PB3ChatCPType cpType;
  NSString *id_p;
} PB3CPChatOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CPChatOptType_EnumDescriptor,
        .number = PB3CPChatOptReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPChatOptReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatOptReq_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPChatOptReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3CPChatOptReq_FieldNumber_CpType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CPChatOptReq__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatOptReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CPChatOptReq_Type_RawValue(PB3CPChatOptReq *message) {
  GPBDescriptor *descriptor = [PB3CPChatOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatOptReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPChatOptReq_Type_RawValue(PB3CPChatOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPChatOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatOptReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CPChatOptReq_CpType_RawValue(PB3CPChatOptReq *message) {
  GPBDescriptor *descriptor = [PB3CPChatOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatOptReq_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPChatOptReq_CpType_RawValue(PB3CPChatOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPChatOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatOptReq_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPChatOptRes

@implementation PB3CPChatOptRes

@dynamic id_p;
@dynamic isEnd;
@dynamic hasEndInfo, endInfo;

typedef struct PB3CPChatOptRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  PB3ChatCPEnd *endInfo;
} PB3CPChatOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatOptRes_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPChatOptRes__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isEnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatOptRes_FieldNumber_IsEnd,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "endInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPEnd),
        .number = PB3CPChatOptRes_FieldNumber_EndInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CPChatOptRes__storage_, endInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatOptRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CPChatIsEndReq

@implementation PB3CPChatIsEndReq

@dynamic id_p;
@dynamic cpType;

typedef struct PB3CPChatIsEndReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType cpType;
  NSString *id_p;
} PB3CPChatIsEndReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatIsEndReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPChatIsEndReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3CPChatIsEndReq_FieldNumber_CpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPChatIsEndReq__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatIsEndReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatIsEndReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CPChatIsEndReq_CpType_RawValue(PB3CPChatIsEndReq *message) {
  GPBDescriptor *descriptor = [PB3CPChatIsEndReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatIsEndReq_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPChatIsEndReq_CpType_RawValue(PB3CPChatIsEndReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPChatIsEndReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatIsEndReq_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPChatIsEndRes

@implementation PB3CPChatIsEndRes

@dynamic isEnd;
@dynamic hasEndInfo, endInfo;

typedef struct PB3CPChatIsEndRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPEnd *endInfo;
} PB3CPChatIsEndRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isEnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatIsEndRes_FieldNumber_IsEnd,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "endInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPEnd),
        .number = PB3CPChatIsEndRes_FieldNumber_EndInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CPChatIsEndRes__storage_, endInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatIsEndRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatIsEndRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CPChatNotDisturbReq

@implementation PB3CPChatNotDisturbReq

@dynamic cpType;
@dynamic id_p;

typedef struct PB3CPChatNotDisturbReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType cpType;
  NSString *id_p;
} PB3CPChatNotDisturbReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cpType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3CPChatNotDisturbReq_FieldNumber_CpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPChatNotDisturbReq__storage_, cpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatNotDisturbReq_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPChatNotDisturbReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatNotDisturbReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatNotDisturbReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CPChatNotDisturbReq_CpType_RawValue(PB3CPChatNotDisturbReq *message) {
  GPBDescriptor *descriptor = [PB3CPChatNotDisturbReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatNotDisturbReq_FieldNumber_CpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPChatNotDisturbReq_CpType_RawValue(PB3CPChatNotDisturbReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPChatNotDisturbReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatNotDisturbReq_FieldNumber_CpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPChatNotDisturbRes

@implementation PB3CPChatNotDisturbRes


typedef struct PB3CPChatNotDisturbRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CPChatNotDisturbRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatNotDisturbRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CPChatNotDisturbRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCPChatStatusReq

@implementation PB3GetCPChatStatusReq


typedef struct PB3GetCPChatStatusReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetCPChatStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCPChatStatusReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetCPChatStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCPChatStatusRes

@implementation PB3GetCPChatStatusRes

@dynamic hasCp, cp;
@dynamic status;

typedef struct PB3GetCPChatStatusRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CPChatStatus status;
  PB3ChatFirstPayCP *cp;
} PB3GetCPChatStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cp",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatFirstPayCP),
        .number = PB3GetCPChatStatusRes_FieldNumber_Cp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCPChatStatusRes__storage_, cp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3CPChatStatus_EnumDescriptor,
        .number = PB3GetCPChatStatusRes_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetCPChatStatusRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCPChatStatusRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCPChatStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetCPChatStatusRes_Status_RawValue(PB3GetCPChatStatusRes *message) {
  GPBDescriptor *descriptor = [PB3GetCPChatStatusRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetCPChatStatusRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetCPChatStatusRes_Status_RawValue(PB3GetCPChatStatusRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetCPChatStatusRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetCPChatStatusRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPChatCannel

@implementation PB3CPChatCannel

@dynamic id_p;

typedef struct PB3CPChatCannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} PB3CPChatCannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatCannel_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPChatCannel__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatCannel class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatCannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IMGiftConfReq

@implementation PB3IMGiftConfReq


typedef struct PB3IMGiftConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IMGiftConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMGiftConfReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IMGiftConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IMGiftConfRes

@implementation PB3IMGiftConfRes

@dynamic giftIdListArray, giftIdListArray_Count;
@dynamic interactionListArray, interactionListArray_Count;

typedef struct PB3IMGiftConfRes__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *giftIdListArray;
  NSMutableArray *interactionListArray;
} PB3IMGiftConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3IMGiftConfRes_FieldNumber_GiftIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IMGiftConfRes__storage_, giftIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "interactionListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IMInteractionConfList),
        .number = PB3IMGiftConfRes_FieldNumber_InteractionListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IMGiftConfRes__storage_, interactionListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IMGiftConfRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IMGiftConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIMGiftRecordReq

@implementation PB3GetIMGiftRecordReq


typedef struct PB3GetIMGiftRecordReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetIMGiftRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIMGiftRecordReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetIMGiftRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetIMGiftRecordRes

@implementation PB3GetIMGiftRecordRes

@dynamic playerListArray, playerListArray_Count;

typedef struct PB3GetIMGiftRecordRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *playerListArray;
} PB3GetIMGiftRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetIMGiftRecordRes_FieldNumber_PlayerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetIMGiftRecordRes__storage_, playerListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetIMGiftRecordRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetIMGiftRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetChatCPConfReq

@implementation PB3GetChatCPConfReq

@dynamic containCpInfoId;

typedef struct PB3GetChatCPConfReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t containCpInfoId;
} PB3GetChatCPConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "containCpInfoId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetChatCPConfReq_FieldNumber_ContainCpInfoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetChatCPConfReq__storage_, containCpInfoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetChatCPConfReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetChatCPConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendChannelChatReq

@implementation PB3SendChannelChatReq

@dynamic hasMsg, msg;
@dynamic channel;

typedef struct PB3SendChannelChatReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelType channel;
  PB3ChatMsg *msg;
} PB3SendChannelChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatMsg),
        .number = PB3SendChannelChatReq_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendChannelChatReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3SendChannelChatReq_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendChannelChatReq__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendChannelChatReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendChannelChatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SendChannelChatReq_Channel_RawValue(PB3SendChannelChatReq *message) {
  GPBDescriptor *descriptor = [PB3SendChannelChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SendChannelChatReq_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SendChannelChatReq_Channel_RawValue(PB3SendChannelChatReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SendChannelChatReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SendChannelChatReq_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SendChannelChatRes

@implementation PB3SendChannelChatRes


typedef struct PB3SendChannelChatRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendChannelChatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendChannelChatRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendChannelChatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetChannelChatMsgReq

@implementation PB3GetChannelChatMsgReq

@dynamic channel;

typedef struct PB3GetChannelChatMsgReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelType channel;
} PB3GetChannelChatMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3GetChannelChatMsgReq_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetChannelChatMsgReq__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetChannelChatMsgReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetChannelChatMsgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetChannelChatMsgReq_Channel_RawValue(PB3GetChannelChatMsgReq *message) {
  GPBDescriptor *descriptor = [PB3GetChannelChatMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetChannelChatMsgReq_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetChannelChatMsgReq_Channel_RawValue(PB3GetChannelChatMsgReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetChannelChatMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetChannelChatMsgReq_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetChannelChatMsgRes

@implementation PB3GetChannelChatMsgRes

@dynamic squareMsgArray, squareMsgArray_Count;

typedef struct PB3GetChannelChatMsgRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *squareMsgArray;
} PB3GetChannelChatMsgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "squareMsgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SquareChatMsg),
        .number = PB3GetChannelChatMsgRes_FieldNumber_SquareMsgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetChannelChatMsgRes__storage_, squareMsgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetChannelChatMsgRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetChannelChatMsgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FetchChannelChatMsgReq

@implementation PB3FetchChannelChatMsgReq

@dynamic channel;

typedef struct PB3FetchChannelChatMsgReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelType channel;
} PB3FetchChannelChatMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3FetchChannelChatMsgReq_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FetchChannelChatMsgReq__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FetchChannelChatMsgReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FetchChannelChatMsgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FetchChannelChatMsgReq_Channel_RawValue(PB3FetchChannelChatMsgReq *message) {
  GPBDescriptor *descriptor = [PB3FetchChannelChatMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FetchChannelChatMsgReq_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FetchChannelChatMsgReq_Channel_RawValue(PB3FetchChannelChatMsgReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FetchChannelChatMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FetchChannelChatMsgReq_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FetchChannelChatMsgRes

@implementation PB3FetchChannelChatMsgRes

@dynamic squareMsgArray, squareMsgArray_Count;

typedef struct PB3FetchChannelChatMsgRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *squareMsgArray;
} PB3FetchChannelChatMsgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "squareMsgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SquareChatMsg),
        .number = PB3FetchChannelChatMsgRes_FieldNumber_SquareMsgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FetchChannelChatMsgRes__storage_, squareMsgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FetchChannelChatMsgRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FetchChannelChatMsgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveChatCPDialReq

@implementation PB3ReceiveChatCPDialReq

@dynamic id_p;
@dynamic chatType;
@dynamic hasCustom, custom;

typedef struct PB3ReceiveChatCPDialReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType chatType;
  NSString *id_p;
  PB3ChatCPCustom *custom;
} PB3ReceiveChatCPDialReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChatCPDialReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveChatCPDialReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3ReceiveChatCPDialReq_FieldNumber_ChatType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReceiveChatCPDialReq__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPCustom),
        .number = PB3ReceiveChatCPDialReq_FieldNumber_Custom,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReceiveChatCPDialReq__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveChatCPDialReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveChatCPDialReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReceiveChatCPDialReq_ChatType_RawValue(PB3ReceiveChatCPDialReq *message) {
  GPBDescriptor *descriptor = [PB3ReceiveChatCPDialReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveChatCPDialReq_FieldNumber_ChatType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveChatCPDialReq_ChatType_RawValue(PB3ReceiveChatCPDialReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveChatCPDialReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveChatCPDialReq_FieldNumber_ChatType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReceiveChatCPDialRes

@implementation PB3ReceiveChatCPDialRes

@dynamic dialListArray, dialListArray_Count;
@dynamic isToast;

typedef struct PB3ReceiveChatCPDialRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dialListArray;
} PB3ReceiveChatCPDialRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dialListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChatCPDial),
        .number = PB3ReceiveChatCPDialRes_FieldNumber_DialListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReceiveChatCPDialRes__storage_, dialListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isToast",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReceiveChatCPDialRes_FieldNumber_IsToast,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveChatCPDialRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveChatCPDialRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IgnoreChatCPDialReq

@implementation PB3IgnoreChatCPDialReq

@dynamic id_p;
@dynamic chatType;

typedef struct PB3IgnoreChatCPDialReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChatCPType chatType;
  NSString *id_p;
} PB3IgnoreChatCPDialReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IgnoreChatCPDialReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IgnoreChatCPDialReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = PB3ChatCPType_EnumDescriptor,
        .number = PB3IgnoreChatCPDialReq_FieldNumber_ChatType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IgnoreChatCPDialReq__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IgnoreChatCPDialReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IgnoreChatCPDialReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IgnoreChatCPDialReq_ChatType_RawValue(PB3IgnoreChatCPDialReq *message) {
  GPBDescriptor *descriptor = [PB3IgnoreChatCPDialReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IgnoreChatCPDialReq_FieldNumber_ChatType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IgnoreChatCPDialReq_ChatType_RawValue(PB3IgnoreChatCPDialReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IgnoreChatCPDialReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IgnoreChatCPDialReq_FieldNumber_ChatType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IgnoreChatCPDialRes

@implementation PB3IgnoreChatCPDialRes


typedef struct PB3IgnoreChatCPDialRes__storage_ {
  uint32_t _has_storage_[1];
} PB3IgnoreChatCPDialRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IgnoreChatCPDialRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IgnoreChatCPDialRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfirmReceivedPushReq

@implementation PB3ConfirmReceivedPushReq

@dynamic cmdId;
@dynamic id_p;

typedef struct PB3ConfirmReceivedPushReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t cmdId;
  NSString *id_p;
} PB3ConfirmReceivedPushReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmdId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfirmReceivedPushReq_FieldNumber_CmdId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfirmReceivedPushReq__storage_, cmdId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfirmReceivedPushReq_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfirmReceivedPushReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfirmReceivedPushReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfirmReceivedPushReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfirmReceivedPushRes

@implementation PB3ConfirmReceivedPushRes


typedef struct PB3ConfirmReceivedPushRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ConfirmReceivedPushRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfirmReceivedPushRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ConfirmReceivedPushRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuickChatConfReq

@implementation PB3QuickChatConfReq

@dynamic toId;

typedef struct PB3QuickChatConfReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t toId;
} PB3QuickChatConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuickChatConfReq_FieldNumber_ToId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuickChatConfReq__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuickChatConfReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuickChatConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QuickChatConfRes

@implementation PB3QuickChatConfRes

@dynamic currentLimit;
@dynamic show;
@dynamic quickChatsArray, quickChatsArray_Count;
@dynamic userType;

typedef struct PB3QuickChatConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t currentLimit;
  PB3ChatShowType show;
  PB3QuickChatUserType userType;
  NSMutableArray *quickChatsArray;
} PB3QuickChatConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currentLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3QuickChatConfRes_FieldNumber_CurrentLimit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QuickChatConfRes__storage_, currentLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "show",
        .dataTypeSpecific.enumDescFunc = PB3ChatShowType_EnumDescriptor,
        .number = PB3QuickChatConfRes_FieldNumber_Show,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QuickChatConfRes__storage_, show),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "quickChatsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3QuickChat),
        .number = PB3QuickChatConfRes_FieldNumber_QuickChatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QuickChatConfRes__storage_, quickChatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userType",
        .dataTypeSpecific.enumDescFunc = PB3QuickChatUserType_EnumDescriptor,
        .number = PB3QuickChatConfRes_FieldNumber_UserType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QuickChatConfRes__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QuickChatConfRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QuickChatConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3QuickChatConfRes_Show_RawValue(PB3QuickChatConfRes *message) {
  GPBDescriptor *descriptor = [PB3QuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuickChatConfRes_FieldNumber_Show];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QuickChatConfRes_Show_RawValue(PB3QuickChatConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuickChatConfRes_FieldNumber_Show];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3QuickChatConfRes_UserType_RawValue(PB3QuickChatConfRes *message) {
  GPBDescriptor *descriptor = [PB3QuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuickChatConfRes_FieldNumber_UserType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QuickChatConfRes_UserType_RawValue(PB3QuickChatConfRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QuickChatConfRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QuickChatConfRes_FieldNumber_UserType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SendEmojiReq

@implementation PB3SendEmojiReq

@dynamic chatType;
@dynamic fid;
@dynamic tid;
@dynamic emojiId;

typedef struct PB3SendEmojiReq__storage_ {
  uint32_t _has_storage_[1];
  PB3EmojiChatType chatType;
  int64_t fid;
  int64_t tid;
  int64_t emojiId;
} PB3SendEmojiReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = PB3EmojiChatType_EnumDescriptor,
        .number = PB3SendEmojiReq_FieldNumber_ChatType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendEmojiReq__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fid",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendEmojiReq_FieldNumber_Fid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendEmojiReq__storage_, fid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tid",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendEmojiReq_FieldNumber_Tid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SendEmojiReq__storage_, tid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "emojiId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendEmojiReq_FieldNumber_EmojiId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SendEmojiReq__storage_, emojiId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendEmojiReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendEmojiReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SendEmojiReq_ChatType_RawValue(PB3SendEmojiReq *message) {
  GPBDescriptor *descriptor = [PB3SendEmojiReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SendEmojiReq_FieldNumber_ChatType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SendEmojiReq_ChatType_RawValue(PB3SendEmojiReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SendEmojiReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SendEmojiReq_FieldNumber_ChatType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SendEmojiRes

@implementation PB3SendEmojiRes


typedef struct PB3SendEmojiRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendEmojiRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendEmojiRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendEmojiRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpPayRecord

@implementation PB3CpPayRecord

@dynamic time;
@dynamic username;
@dynamic userid;
@dynamic gain;

typedef struct PB3CpPayRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *time;
  NSString *username;
  int64_t userid;
  int64_t gain;
} PB3CpPayRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecord_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpPayRecord__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecord_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpPayRecord__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userid",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecord_FieldNumber_Userid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpPayRecord__storage_, userid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gain",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecord_FieldNumber_Gain,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CpPayRecord__storage_, gain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpPayRecord class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpPayRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpPayRecordReq

@implementation PB3CpPayRecordReq

@dynamic page;
@dynamic pageSize;
@dynamic id_p;

typedef struct PB3CpPayRecordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  int64_t id_p;
} PB3CpPayRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecordReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpPayRecordReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecordReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpPayRecordReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecordReq_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpPayRecordReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpPayRecordReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpPayRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpPayRecordRes

@implementation PB3CpPayRecordRes

@dynamic recordArray, recordArray_Count;
@dynamic total;
@dynamic gain;

typedef struct PB3CpPayRecordRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *recordArray;
  int64_t gain;
} PB3CpPayRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpPayRecord),
        .number = PB3CpPayRecordRes_FieldNumber_RecordArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CpPayRecordRes__storage_, recordArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecordRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpPayRecordRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gain",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPayRecordRes_FieldNumber_Gain,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpPayRecordRes__storage_, gain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpPayRecordRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpPayRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChatCPDialDisappear

@implementation PB3ChatCPDialDisappear

@dynamic id_p;

typedef struct PB3ChatCPDialDisappear__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} PB3ChatCPDialDisappear__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChatCPDialDisappear_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChatCPDialDisappear__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChatCPDialDisappear class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChatCPDialDisappear__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CPChatEvaluateReq

@implementation PB3CPChatEvaluateReq

@dynamic id_p;
@dynamic evaluate;

typedef struct PB3CPChatEvaluateReq__storage_ {
  uint32_t _has_storage_[1];
  PB3CPChatEvaluateType evaluate;
  NSString *id_p;
} PB3CPChatEvaluateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPChatEvaluateReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPChatEvaluateReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "evaluate",
        .dataTypeSpecific.enumDescFunc = PB3CPChatEvaluateType_EnumDescriptor,
        .number = PB3CPChatEvaluateReq_FieldNumber_Evaluate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPChatEvaluateReq__storage_, evaluate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatEvaluateReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPChatEvaluateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CPChatEvaluateReq_Evaluate_RawValue(PB3CPChatEvaluateReq *message) {
  GPBDescriptor *descriptor = [PB3CPChatEvaluateReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatEvaluateReq_FieldNumber_Evaluate];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CPChatEvaluateReq_Evaluate_RawValue(PB3CPChatEvaluateReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CPChatEvaluateReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CPChatEvaluateReq_FieldNumber_Evaluate];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CPChatEvaluateRes

@implementation PB3CPChatEvaluateRes


typedef struct PB3CPChatEvaluateRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CPChatEvaluateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPChatEvaluateRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CPChatEvaluateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IsShowCPRecordReq

@implementation PB3IsShowCPRecordReq


typedef struct PB3IsShowCPRecordReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IsShowCPRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IsShowCPRecordReq class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IsShowCPRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IsShowCPRecordRes

@implementation PB3IsShowCPRecordRes

@dynamic isShow;

typedef struct PB3IsShowCPRecordRes__storage_ {
  uint32_t _has_storage_[1];
} PB3IsShowCPRecordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3IsShowCPRecordRes_FieldNumber_IsShow,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IsShowCPRecordRes class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IsShowCPRecordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CPDialWindow

@implementation PB3CPDialWindow

@dynamic title;
@dynamic text;
@dynamic picURL;

typedef struct PB3CPDialWindow__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *text;
  NSString *picURL;
} PB3CPDialWindow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPDialWindow_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CPDialWindow__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPDialWindow_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CPDialWindow__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CPDialWindow_FieldNumber_PicURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CPDialWindow__storage_, picURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CPDialWindow class]
                                     rootClass:[PB3ChatExtRoot class]
                                          file:PB3ChatExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CPDialWindow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
