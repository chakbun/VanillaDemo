// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/activity_cli.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class PB3ActPicture;
@class PB3Activity;
@class PB3ActivityResource;
@class PB3ActivityTask;
@class PB3AssignItem;
@class PB3CardGift;
@class PB3CardTask;
@class PB3ClanInfo;
@class PB3CompoundAsset;
@class PB3CompoundFormula;
@class PB3ConfActAwardShow;
@class PB3ConfActFormCarrier;
@class PB3ConfActPage;
@class PB3ConfBlindLottery;
@class PB3ConfCard;
@class PB3ConfCompound;
@class PB3ConfCultivate;
@class PB3ConfCultivateAward;
@class PB3ConfDefendPets;
@class PB3ConfDrawCard;
@class PB3ConfGoldBack;
@class PB3ConfLottery;
@class PB3ConfLotteryPoint;
@class PB3ConfNewAward;
@class PB3ConfNewAwardCustomAward;
@class PB3ConfPetBattle;
@class PB3ConfPuzzle;
@class PB3ConfRelPuzzle;
@class PB3ConfServerLottery;
@class PB3ConfSummary;
@class PB3ConfTreasure;
@class PB3ConfTreasureGift;
@class PB3ConfUserStint;
@class PB3ConfVote;
@class PB3ConfVoteAward;
@class PB3ConfVoteList;
@class PB3ConfWelfare;
@class PB3CpPlayerInfo;
@class PB3EventBoxReward;
@class PB3FailAsset;
@class PB3GoldBackRanking;
@class PB3Int32s;
@class PB3LimitActData;
@class PB3LotteryAward;
@class PB3OnTimeWelfareData;
@class PB3Player;
@class PB3RelActivity;
@class PB3ServerTimestamp;
@class PB3UserStint;
@class PB3UserStintConfig;
GPB_ENUM_FWD_DECLARE(PB3CpPublicNoticeStatus);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PB3ActivityLocation

/** 活动房间入口位置 */
typedef GPB_ENUM(PB3ActivityLocation) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3ActivityLocation_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3ActivityLocation_LocationNone = 0,
  PB3ActivityLocation_LocationLeftTop = 1,
  PB3ActivityLocation_LocationRightTop = 2,
  PB3ActivityLocation_LocationBottom = 3,
  PB3ActivityLocation_LocationCenter = 4,
};

GPBEnumDescriptor *PB3ActivityLocation_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3ActivityLocation_IsValidValue(int32_t value);

#pragma mark - Enum PB3RoomSubInfoShow

/** 房间角标数据类型 */
typedef GPB_ENUM(PB3RoomSubInfoShow) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3RoomSubInfoShow_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3RoomSubInfoShow_RoomSubInfoShowNone = 0,

  /** 积分 */
  PB3RoomSubInfoShow_ShowPoint = 1,

  /** 人数 */
  PB3RoomSubInfoShow_ShowPeople = 2,

  /** 姻缘值 */
  PB3RoomSubInfoShow_ShowMarriage = 3,
};

GPBEnumDescriptor *PB3RoomSubInfoShow_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3RoomSubInfoShow_IsValidValue(int32_t value);

#pragma mark - Enum PB3PlayerPageType

/** 个人页数据类型 具体看文档https://www.tapd.cn/35578143/prong/stories/view/1135578143001001130 */
typedef GPB_ENUM(PB3PlayerPageType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3PlayerPageType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3PlayerPageType_PlayerPageTypeNone = 0,
  PB3PlayerPageType_OnePointPoint = 1,
  PB3PlayerPageType_TwoPointPoint = 2,
  PB3PlayerPageType_OneNumNum = 3,
  PB3PlayerPageType_TwoNumNum = 4,
  PB3PlayerPageType_OneNumPoint = 5,
  PB3PlayerPageType_TwoPointPointCount = 6,
};

GPBEnumDescriptor *PB3PlayerPageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3PlayerPageType_IsValidValue(int32_t value);

#pragma mark - Enum PB3ActivityType

typedef GPB_ENUM(PB3ActivityType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3ActivityType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3ActivityType_TypeNone = 0,

  /** 普通积分类型 */
  PB3ActivityType_TypeNormal = 1,

  /** 任务类型 */
  PB3ActivityType_TypeTask = 2,
};

GPBEnumDescriptor *PB3ActivityType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3ActivityType_IsValidValue(int32_t value);

#pragma mark - Enum PB3RelActivityType

typedef GPB_ENUM(PB3RelActivityType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3RelActivityType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3RelActivityType_RelTypeNone = 0,

  /** 靓号活动 */
  PB3RelActivityType_RelTypeGoodNum = 1,

  /** 排行榜赠送活动 */
  PB3RelActivityType_RelTypeSortSend = 2,

  /** 排行榜获得活动 */
  PB3RelActivityType_RelTypeSortGet = 3,

  /** 矿山 */
  PB3RelActivityType_RelTypeMine = 4,

  /** 排行榜充值活动 */
  PB3RelActivityType_RelTypeSortPay = 5,

  /** 排行榜消费活动 */
  PB3RelActivityType_RelTypeSortConsume = 6,

  /** 普通活动 */
  PB3RelActivityType_RelTypeCommon = 7,
};

GPBEnumDescriptor *PB3RelActivityType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3RelActivityType_IsValidValue(int32_t value);

#pragma mark - Enum PB3ActivityTaskType

/** 活动任务类型 */
typedef GPB_ENUM(PB3ActivityTaskType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3ActivityTaskType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3ActivityTaskType_TaskTypeNone = 0,

  /** 充值 */
  PB3ActivityTaskType_TaskTypePay = 1,

  /** 个人获得礼物 */
  PB3ActivityTaskType_TaskTypeGiftGet = 2,

  /** 房间获得礼物 */
  PB3ActivityTaskType_TaskTypeRoomGiftGet = 3,

  /** 购买 针对于靓号 */
  PB3ActivityTaskType_TaskTypeBuy = 4,

  /** 个人送礼 */
  PB3ActivityTaskType_TaskTypeGiftSend = 6,

  /** 完成任务 */
  PB3ActivityTaskType_TaskTypeCompletedTask = 7,
};

GPBEnumDescriptor *PB3ActivityTaskType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3ActivityTaskType_IsValidValue(int32_t value);

#pragma mark - Enum PB3ActivityTaskTriggerType

/** 活动触发类型 */
typedef GPB_ENUM(PB3ActivityTaskTriggerType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3ActivityTaskTriggerType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3ActivityTaskTriggerType_TaskTriggerTypeNone = 0,

  /** 重复 */
  PB3ActivityTaskTriggerType_TaskTriggerTypeRepeated = 1,

  /** 一次性 */
  PB3ActivityTaskTriggerType_TaskTriggerTypeOnce = 2,

  /** 每日 */
  PB3ActivityTaskTriggerType_TaskTriggerTypeDay = 3,
};

GPBEnumDescriptor *PB3ActivityTaskTriggerType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3ActivityTaskTriggerType_IsValidValue(int32_t value);

#pragma mark - Enum PB3ActivityTaskTriggerPointType

typedef GPB_ENUM(PB3ActivityTaskTriggerPointType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3ActivityTaskTriggerPointType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3ActivityTaskTriggerPointType_TaskTriggerPointTypeNone = 0,

  /** 数量 */
  PB3ActivityTaskTriggerPointType_TaskTriggerPointTypeNum = 1,

  /** 积分 */
  PB3ActivityTaskTriggerPointType_TaskTriggerPointTypePoint = 2,
};

GPBEnumDescriptor *PB3ActivityTaskTriggerPointType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3ActivityTaskTriggerPointType_IsValidValue(int32_t value);

#pragma mark - Enum PB3ActivityConfType

/** 活动配置 */
typedef GPB_ENUM(PB3ActivityConfType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3ActivityConfType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 占位 */
  PB3ActivityConfType_ActNone = 0,
  PB3ActivityConfType_ActActivity = 1,

  /** 福利配置 */
  PB3ActivityConfType_ActWelfare = 2,

  /** 拼图配置 */
  PB3ActivityConfType_ActPuzzle = 3,

  /** 抽奖配置 */
  PB3ActivityConfType_ActLottery = 4,

  /** 投票 */
  PB3ActivityConfType_ActVote = 5,

  /** 养成配置 */
  PB3ActivityConfType_ActCultivate = 6,

  /** 新版奖励 */
  PB3ActivityConfType_ActNewAward = 7,

  /** 返现配置 */
  PB3ActivityConfType_ActGoldBack = 8,

  /** 合成配置 */
  PB3ActivityConfType_ActCompound = 9,

  /** 抽卡配置 */
  PB3ActivityConfType_ActDrawCard = 10,

  /** 抽奖配置 */
  PB3ActivityConfType_ActLottery2 = 11,

  /** 活动用户限制规则 */
  PB3ActivityConfType_ActUserStint = 12,

  /** 夺宝配置列表 */
  PB3ActivityConfType_ActTreasureList = 13,

  /** 夺宝礼物列表 */
  PB3ActivityConfType_ActTreasureGiftList = 14,

  /** 动态表单配置 - 表单载体 */
  PB3ActivityConfType_ActFormCarrier = 15,

  /** 盘点配置 */
  PB3ActivityConfType_ActSummaryList = 16,

  /** 全服抽奖配置 */
  PB3ActivityConfType_ActServerLottery = 17,

  /** 盲盒抽奖 */
  PB3ActivityConfType_ActBlindLottery = 18,

  /** 保卫宠物 */
  PB3ActivityConfType_ActDefendPets = 19,

  /** 保卫宠物对战配置 */
  PB3ActivityConfType_ActDefendPetsBattle = 20,

  /** 兑换 */
  PB3ActivityConfType_ActExchange = 23,

  /** 用户二次关联信息聚合 */
  PB3ActivityConfType_ActPlayerPolyInfo = 24,

  /** 查看个人信息(只用于站内)(默认返回) */
  PB3ActivityConfType_ActPlayer = 26,

  /** 公会信息(默认返回) */
  PB3ActivityConfType_ActClaninfo = 27,

  /** 服务器时间(默认返回) */
  PB3ActivityConfType_ActServerTimestamp = 28,

  /** 活动配置奖励，特效、礼物等ID聚合 */
  PB3ActivityConfType_ActConfIdDig = 29,
};

GPBEnumDescriptor *PB3ActivityConfType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3ActivityConfType_IsValidValue(int32_t value);

#pragma mark - Enum PB3ActivityCmdId

/** 202 */
typedef GPB_ENUM(PB3ActivityCmdId) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3ActivityCmdId_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PB3ActivityCmdId_IcActivityNone = 0,

  /** 活动通知 NoticeActivity */
  PB3ActivityCmdId_ActivityNotice = 202101,
};

GPBEnumDescriptor *PB3ActivityCmdId_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3ActivityCmdId_IsValidValue(int32_t value);

#pragma mark - Enum PB3RewardType

/** 物品奖励类型 */
typedef GPB_ENUM(PB3RewardType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PB3RewardType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 无 */
  PB3RewardType_RewardTypeNull = 0,

  /** 金币 */
  PB3RewardType_RewardTypeGold = 1,

  /** 钻石 */
  PB3RewardType_RewardTypeGiftTicket = 2,

  /** 礼物 */
  PB3RewardType_RewardTypeGift = 3,

  /** 奖金池 */
  PB3RewardType_RewardTypeGoldPool = 4,

  /** 特效 */
  PB3RewardType_RewardTypeGoldEffect = 5,

  /** 挚友背景 */
  PB3RewardType_RewardTypeCronyBackground = 6,

  /** 特殊 */
  PB3RewardType_RewardTypeSpecial = 7,

  /** 红包 */
  PB3RewardType_RewardTypeRedPacket = 8,

  /** 房间背景 */
  PB3RewardType_RewardTypeRoomBackground = 9,

  /** 宝盒礼物 */
  PB3RewardType_RewardTypeGiftBox = 10,
};

GPBEnumDescriptor *PB3RewardType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PB3RewardType_IsValidValue(int32_t value);

#pragma mark - PB3ActivityCliExtRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface PB3ActivityCliExtRoot : GPBRootObject
@end

#pragma mark - PB3ActPicture

typedef GPB_ENUM(PB3ActPicture_FieldNumber) {
  PB3ActPicture_FieldNumber_Name = 1,
  PB3ActPicture_FieldNumber_Picture = 2,
  PB3ActPicture_FieldNumber_Link = 3,
  PB3ActPicture_FieldNumber_Sort = 4,
  PB3ActPicture_FieldNumber_StartTime = 5,
  PB3ActPicture_FieldNumber_EndTime = 6,
  PB3ActPicture_FieldNumber_Status = 7,
  PB3ActPicture_FieldNumber_Video = 8,
};

@interface PB3ActPicture : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *picture;

@property(nonatomic, readwrite, copy, null_resettable) NSString *link;

/** 排序 */
@property(nonatomic, readwrite) int32_t sort;

@property(nonatomic, readwrite) int64_t startTime;

@property(nonatomic, readwrite) int64_t endTime;

/** 开启状态 */
@property(nonatomic, readwrite) int32_t status;

@property(nonatomic, readwrite, copy, null_resettable) NSString *video;

@end

#pragma mark - PB3ConfActPage

typedef GPB_ENUM(PB3ConfActPage_FieldNumber) {
  PB3ConfActPage_FieldNumber_IsShare = 1,
  PB3ConfActPage_FieldNumber_ActRule = 2,
  PB3ConfActPage_FieldNumber_SharePicture = 3,
  PB3ConfActPage_FieldNumber_ActPictureArray = 4,
};

/**
 * 页面内容
 **/
@interface PB3ConfActPage : GPBMessage

/** 支持分享0否1是 */
@property(nonatomic, readwrite) int32_t isShare;

/** 活动规则 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *actRule;

/** 分享按钮图片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharePicture;

/** 活动图片 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ActPicture*> *actPictureArray;
/** The number of items in @c actPictureArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger actPictureArray_Count;

@end

#pragma mark - PB3Int32s

typedef GPB_ENUM(PB3Int32s_FieldNumber) {
  PB3Int32s_FieldNumber_ArrArray = 1,
};

@interface PB3Int32s : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *arrArray;
/** The number of items in @c arrArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger arrArray_Count;

@end

#pragma mark - PB3ActivityTask

typedef GPB_ENUM(PB3ActivityTask_FieldNumber) {
  PB3ActivityTask_FieldNumber_Id_p = 1,
  PB3ActivityTask_FieldNumber_Name = 2,
  PB3ActivityTask_FieldNumber_Type = 3,
  PB3ActivityTask_FieldNumber_TriggerIdArray = 4,
  PB3ActivityTask_FieldNumber_TriggerType = 5,
  PB3ActivityTask_FieldNumber_TriggerPoint = 6,
  PB3ActivityTask_FieldNumber_TriggerPointType = 7,
  PB3ActivityTask_FieldNumber_RewardArray = 8,
  PB3ActivityTask_FieldNumber_RoomRewardArray = 9,
  PB3ActivityTask_FieldNumber_PlayerAwardPoint = 10,
  PB3ActivityTask_FieldNumber_RoomAwardPoint = 11,
};

/**
 * 活动任务
 **/
@interface PB3ActivityTask : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 任务类型 任务类型 1-充值 2-个人获礼 3-房间送礼获礼 4-个人送礼 6 购买 7-完成任务 */
@property(nonatomic, readwrite) PB3ActivityTaskType type;

/** 活动触发id */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *triggerIdArray;
/** The number of items in @c triggerIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger triggerIdArray_Count;

/** 活动触发类型 //活动触发类型 1-重复 2-一次性 3-每日 */
@property(nonatomic, readwrite) PB3ActivityTaskTriggerType triggerType;

/** 活动触发点 */
@property(nonatomic, readwrite) int64_t triggerPoint;

/** 触发点的类型 //触发点的类型 //1-数量 2-积分 */
@property(nonatomic, readwrite) PB3ActivityTaskTriggerPointType triggerPointType;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3Int32s*> *rewardArray;
/** The number of items in @c rewardArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rewardArray_Count;

/** 房间奖励 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3Int32s*> *roomRewardArray;
/** The number of items in @c roomRewardArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger roomRewardArray_Count;

/** 人员奖励积分 */
@property(nonatomic, readwrite) int64_t playerAwardPoint;

/** 房间奖励积分 */
@property(nonatomic, readwrite) int64_t roomAwardPoint;

@end

/**
 * Fetches the raw value of a @c PB3ActivityTask's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3ActivityTask_Type_RawValue(PB3ActivityTask *message);
/**
 * Sets the raw value of an @c PB3ActivityTask's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3ActivityTask_Type_RawValue(PB3ActivityTask *message, int32_t value);

/**
 * Fetches the raw value of a @c PB3ActivityTask's @c triggerType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3ActivityTask_TriggerType_RawValue(PB3ActivityTask *message);
/**
 * Sets the raw value of an @c PB3ActivityTask's @c triggerType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3ActivityTask_TriggerType_RawValue(PB3ActivityTask *message, int32_t value);

/**
 * Fetches the raw value of a @c PB3ActivityTask's @c triggerPointType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3ActivityTask_TriggerPointType_RawValue(PB3ActivityTask *message);
/**
 * Sets the raw value of an @c PB3ActivityTask's @c triggerPointType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3ActivityTask_TriggerPointType_RawValue(PB3ActivityTask *message, int32_t value);

#pragma mark - PB3ActivityResource

typedef GPB_ENUM(PB3ActivityResource_FieldNumber) {
  PB3ActivityResource_FieldNumber_Location = 1,
  PB3ActivityResource_FieldNumber_ActivityURL = 2,
  PB3ActivityResource_FieldNumber_ProgressColor = 3,
  PB3ActivityResource_FieldNumber_EnterBackground = 4,
  PB3ActivityResource_FieldNumber_EnterSmallBackground = 5,
  PB3ActivityResource_FieldNumber_CardBackground = 6,
  PB3ActivityResource_FieldNumber_PlayerPageStatus = 7,
  PB3ActivityResource_FieldNumber_PlayerPageType = 8,
  PB3ActivityResource_FieldNumber_PlayerPageURL = 9,
  PB3ActivityResource_FieldNumber_RoomsubinfoShow = 10,
  PB3ActivityResource_FieldNumber_PcEnterBackground = 11,
  PB3ActivityResource_FieldNumber_Weight = 12,
};

@interface PB3ActivityResource : GPBMessage

/** 入口位置 */
@property(nonatomic, readwrite) PB3ActivityLocation location;

/** 活动链接 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *activityURL;

/** 进度条颜色 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *progressColor;

/** 入口角标 url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enterBackground;

/** 入口右下角角标 url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *enterSmallBackground;

/** 卡片背景 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cardBackground;

/** 个人活动页状态，表示是否开启 */
@property(nonatomic, readwrite) BOOL playerPageStatus;

/** 个人页类型 */
@property(nonatomic, readwrite) PB3PlayerPageType playerPageType;

/** 个人页url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *playerPageURL;

/** point或者people */
@property(nonatomic, readwrite) PB3RoomSubInfoShow roomsubinfoShow;

/** pc入口角标 url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pcEnterBackground;

/** 权重 */
@property(nonatomic, readwrite) int32_t weight;

@end

/**
 * Fetches the raw value of a @c PB3ActivityResource's @c location property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3ActivityResource_Location_RawValue(PB3ActivityResource *message);
/**
 * Sets the raw value of an @c PB3ActivityResource's @c location property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3ActivityResource_Location_RawValue(PB3ActivityResource *message, int32_t value);

/**
 * Fetches the raw value of a @c PB3ActivityResource's @c playerPageType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3ActivityResource_PlayerPageType_RawValue(PB3ActivityResource *message);
/**
 * Sets the raw value of an @c PB3ActivityResource's @c playerPageType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3ActivityResource_PlayerPageType_RawValue(PB3ActivityResource *message, int32_t value);

/**
 * Fetches the raw value of a @c PB3ActivityResource's @c roomsubinfoShow property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3ActivityResource_RoomsubinfoShow_RawValue(PB3ActivityResource *message);
/**
 * Sets the raw value of an @c PB3ActivityResource's @c roomsubinfoShow property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3ActivityResource_RoomsubinfoShow_RawValue(PB3ActivityResource *message, int32_t value);

#pragma mark - PB3RelActivity

typedef GPB_ENUM(PB3RelActivity_FieldNumber) {
  PB3RelActivity_FieldNumber_Id_p = 1,
  PB3RelActivity_FieldNumber_Name = 2,
  PB3RelActivity_FieldNumber_Type = 3,
  PB3RelActivity_FieldNumber_GiftIdArray = 4,
  PB3RelActivity_FieldNumber_TasksArray = 5,
  PB3RelActivity_FieldNumber_StartTime = 6,
  PB3RelActivity_FieldNumber_EndTime = 7,
  PB3RelActivity_FieldNumber_GuaranteedTimes = 8,
  PB3RelActivity_FieldNumber_Gender = 9,
  PB3RelActivity_FieldNumber_SortCountType = 10,
  PB3RelActivity_FieldNumber_StatistStartTime = 11,
  PB3RelActivity_FieldNumber_StatistEndTime = 12,
};

/**
 * 子活动
 **/
@interface PB3RelActivity : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) PB3RelActivityType type;

/** 关联的礼物id */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *giftIdArray;
/** The number of items in @c giftIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger giftIdArray_Count;

/** 活动任务 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ActivityTask*> *tasksArray;
/** The number of items in @c tasksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tasksArray_Count;

/** 开始时间 */
@property(nonatomic, readwrite) int64_t startTime;

/** 结束时间 */
@property(nonatomic, readwrite) int64_t endTime;

/** 保底触发次数 */
@property(nonatomic, readwrite) int64_t guaranteedTimes;

/** 性别 0-不分性别 1-男 2 -女 */
@property(nonatomic, readwrite) int32_t gender;

/**    repeated ListGiftShow gift_shows = 10; //礼物墙配置 */
@property(nonatomic, readwrite) int32_t sortCountType;

/** 统计开始时间 格式（HH:mm:ss)，默认没限制为空 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *statistStartTime;

/** 统计结束时间，格式同上 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *statistEndTime;

@end

/**
 * Fetches the raw value of a @c PB3RelActivity's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3RelActivity_Type_RawValue(PB3RelActivity *message);
/**
 * Sets the raw value of an @c PB3RelActivity's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3RelActivity_Type_RawValue(PB3RelActivity *message, int32_t value);

#pragma mark - PB3Activity

typedef GPB_ENUM(PB3Activity_FieldNumber) {
  PB3Activity_FieldNumber_Id_p = 1,
  PB3Activity_FieldNumber_Name = 2,
  PB3Activity_FieldNumber_Status = 3,
  PB3Activity_FieldNumber_Type = 4,
  PB3Activity_FieldNumber_StartTime = 5,
  PB3Activity_FieldNumber_EndTime = 6,
  PB3Activity_FieldNumber_Resource = 7,
  PB3Activity_FieldNumber_RelArray = 8,
  PB3Activity_FieldNumber_ActPage = 9,
  PB3Activity_FieldNumber_IsLimit = 10,
  PB3Activity_FieldNumber_SelfActGender = 11,
};

/**
 * 主活动结构
 **/
@interface PB3Activity : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) BOOL status;

@property(nonatomic, readwrite) PB3ActivityType type;

@property(nonatomic, readwrite) int64_t startTime;

@property(nonatomic, readwrite) int64_t endTime;

@property(nonatomic, readwrite, strong, null_resettable) PB3ActivityResource *resource;
/** Test to see if @c resource has been set. */
@property(nonatomic, readwrite) BOOL hasResource;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3RelActivity*> *relArray;
/** The number of items in @c relArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger relArray_Count;

/** 页面内容 */
@property(nonatomic, readwrite, strong, null_resettable) PB3ConfActPage *actPage;
/** Test to see if @c actPage has been set. */
@property(nonatomic, readwrite) BOOL hasActPage;

/** 0-不限制 1-在限制中 */
@property(nonatomic, readwrite) int32_t isLimit;

/** 自身参与活动时性别 */
@property(nonatomic, readwrite) int32_t selfActGender;

@end

/**
 * Fetches the raw value of a @c PB3Activity's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3Activity_Type_RawValue(PB3Activity *message);
/**
 * Sets the raw value of an @c PB3Activity's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3Activity_Type_RawValue(PB3Activity *message, int32_t value);

#pragma mark - PB3ConfNewAwardCustomAward

typedef GPB_ENUM(PB3ConfNewAwardCustomAward_FieldNumber) {
  PB3ConfNewAwardCustomAward_FieldNumber_AwardId = 1,
  PB3ConfNewAwardCustomAward_FieldNumber_AwardName = 2,
  PB3ConfNewAwardCustomAward_FieldNumber_PrizeId = 3,
  PB3ConfNewAwardCustomAward_FieldNumber_Picture = 4,
  PB3ConfNewAwardCustomAward_FieldNumber_Remark = 5,
  PB3ConfNewAwardCustomAward_FieldNumber_Price = 6,
  PB3ConfNewAwardCustomAward_FieldNumber_Num = 7,
  PB3ConfNewAwardCustomAward_FieldNumber_Unit = 8,
  PB3ConfNewAwardCustomAward_FieldNumber_Type = 9,
};

/**
 * 新版奖励自定义奖励
 **/
@interface PB3ConfNewAwardCustomAward : GPBMessage

/** 奖励id */
@property(nonatomic, readwrite) int32_t awardId;

/** 奖励名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *awardName;

/** 奖品id */
@property(nonatomic, readwrite) int32_t prizeId;

/** 图片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *picture;

/** 备注  //如果是秒，转换成时或天，否则用原来的单位 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remark;

@property(nonatomic, readwrite) int64_t price;

@property(nonatomic, readwrite) int64_t num;

/** 单位 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *unit;

/** 奖励类型 1:金币；2:钻石；3:礼物；4：奖金池；5:特效；6:挚友背景；7:特殊；8:红包；9:房间背景；10:宝盒礼物；11:解锁礼物 */
@property(nonatomic, readwrite) int32_t type;

@end

#pragma mark - PB3ConfActAwardShow

typedef GPB_ENUM(PB3ConfActAwardShow_FieldNumber) {
  PB3ConfActAwardShow_FieldNumber_Id_p = 1,
  PB3ConfActAwardShow_FieldNumber_Name = 2,
  PB3ConfActAwardShow_FieldNumber_ActId = 3,
  PB3ConfActAwardShow_FieldNumber_RelId = 4,
  PB3ConfActAwardShow_FieldNumber_GiftId = 5,
  PB3ConfActAwardShow_FieldNumber_GiftNum = 6,
  PB3ConfActAwardShow_FieldNumber_Picture = 7,
  PB3ConfActAwardShow_FieldNumber_Thumbnail = 8,
  PB3ConfActAwardShow_FieldNumber_Sort = 9,
  PB3ConfActAwardShow_FieldNumber_Msg = 10,
  PB3ConfActAwardShow_FieldNumber_Remark = 11,
};

/**
 * 奖品展示
 **/
@interface PB3ConfActAwardShow : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 活动id */
@property(nonatomic, readwrite) int32_t actId;

@property(nonatomic, readwrite) int32_t relId;

@property(nonatomic, readwrite) int32_t giftId;

@property(nonatomic, readwrite) int32_t giftNum;

@property(nonatomic, readwrite, copy, null_resettable) NSString *picture;

@property(nonatomic, readwrite, copy, null_resettable) NSString *thumbnail;

@property(nonatomic, readwrite) int32_t sort;

@property(nonatomic, readwrite, copy, null_resettable) NSString *msg;

@property(nonatomic, readwrite, copy, null_resettable) NSString *remark;

@end

#pragma mark - PB3ConfNewAward

typedef GPB_ENUM(PB3ConfNewAward_FieldNumber) {
  PB3ConfNewAward_FieldNumber_AwardsArray = 1,
  PB3ConfNewAward_FieldNumber_AwardShowsArray = 2,
};

/**
 * 新版奖励
 **/
@interface PB3ConfNewAward : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfNewAwardCustomAward*> *awardsArray;
/** The number of items in @c awardsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfActAwardShow*> *awardShowsArray;
/** The number of items in @c awardShowsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardShowsArray_Count;

@end

#pragma mark - PB3ConfWelfare

typedef GPB_ENUM(PB3ConfWelfare_FieldNumber) {
  PB3ConfWelfare_FieldNumber_Id_p = 1,
  PB3ConfWelfare_FieldNumber_Group = 2,
  PB3ConfWelfare_FieldNumber_RelativeId = 3,
  PB3ConfWelfare_FieldNumber_Status = 4,
  PB3ConfWelfare_FieldNumber_TriggerNum = 5,
  PB3ConfWelfare_FieldNumber_TriggerType = 6,
  PB3ConfWelfare_FieldNumber_TriggerRate = 7,
  PB3ConfWelfare_FieldNumber_NumLimit = 8,
  PB3ConfWelfare_FieldNumber_PreposeArray = 9,
  PB3ConfWelfare_FieldNumber_BillTypeArray = 10,
  PB3ConfWelfare_FieldNumber_SkipId = 11,
  PB3ConfWelfare_FieldNumber_WelfareName = 12,
  PB3ConfWelfare_FieldNumber_CountNum = 13,
  PB3ConfWelfare_FieldNumber_AwardsArray = 14,
  PB3ConfWelfare_FieldNumber_GiftId = 15,
  PB3ConfWelfare_FieldNumber_GiftNum = 16,
  PB3ConfWelfare_FieldNumber_LotteryId = 17,
  PB3ConfWelfare_FieldNumber_Redirect = 18,
  PB3ConfWelfare_FieldNumber_RedirectURL = 19,
  PB3ConfWelfare_FieldNumber_Remark = 20,
  PB3ConfWelfare_FieldNumber_TriggerNumRepeated = 21,
  PB3ConfWelfare_FieldNumber_ValidityStartTime = 22,
  PB3ConfWelfare_FieldNumber_ValidityEndTime = 23,
  PB3ConfWelfare_FieldNumber_NumOfReceived = 24,
  PB3ConfWelfare_FieldNumber_TotalNum = 25,
  PB3ConfWelfare_FieldNumber_DayOrWeekNumLimit = 26,
  PB3ConfWelfare_FieldNumber_RangeIdsArray = 27,
};

@interface PB3ConfWelfare : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

/** //分组 */
@property(nonatomic, readwrite) int32_t group;

/** //关联id */
@property(nonatomic, readwrite) int32_t relativeId;

/** 状态 1-执行中 2-待领取 */
@property(nonatomic, readwrite) int32_t status;

/** 触发次数 表示当完成某个任务多少次之后可完成福利 */
@property(nonatomic, readwrite) int64_t triggerNum;

/** 触发类型 */
@property(nonatomic, readwrite) int32_t triggerType;

/** 触发频率 */
@property(nonatomic, readwrite) int32_t triggerRate;

/** 数量限制 */
@property(nonatomic, readwrite) int64_t numLimit;

/** 前置福利  就是需要完成某些福利后才能进行此福利 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *preposeArray;
/** The number of items in @c preposeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger preposeArray_Count;

/** 订单类型 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *billTypeArray;
/** The number of items in @c billTypeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger billTypeArray_Count;

/** 跳转id */
@property(nonatomic, readwrite) int64_t skipId;

/** 福利名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *welfareName;

/** 累计天数 */
@property(nonatomic, readwrite) int32_t countNum;

/** 新版奖励信息 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfNewAwardCustomAward*> *awardsArray;
/** The number of items in @c awardsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardsArray_Count;

/** 补签道具id   废弃 */
@property(nonatomic, readwrite) int32_t giftId DEPRECATED_ATTRIBUTE;

/** 补签道具数量 废弃 */
@property(nonatomic, readwrite) int32_t giftNum DEPRECATED_ATTRIBUTE;

/** 抽奖配置 */
@property(nonatomic, readwrite) int32_t lotteryId;

/** 是否跳转 0否1是 */
@property(nonatomic, readwrite) int32_t redirect;

/** 跳转链接 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *redirectURL;

/** 备注 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remark;

/** 触发次数判定 */
@property(nonatomic, readwrite) int32_t triggerNumRepeated;

/** 限时福利开始时间 0不限制 */
@property(nonatomic, readwrite) int64_t validityStartTime;

/** 限时福利结束时间 0不限制 */
@property(nonatomic, readwrite) int64_t validityEndTime;

/** 全福里全服領取的数量 当total_num>0有效 */
@property(nonatomic, readwrite) int64_t numOfReceived;

/** 福利全服总数 */
@property(nonatomic, readwrite) int64_t totalNum;

/** 每天或每日完成次数限制 */
@property(nonatomic, readwrite) int32_t dayOrWeekNumLimit;

/** 范围id列表 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *rangeIdsArray;
/** The number of items in @c rangeIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rangeIdsArray_Count;

@end

#pragma mark - PB3ConfRelPuzzle

typedef GPB_ENUM(PB3ConfRelPuzzle_FieldNumber) {
  PB3ConfRelPuzzle_FieldNumber_RelPuzzleId = 1,
  PB3ConfRelPuzzle_FieldNumber_Line = 2,
  PB3ConfRelPuzzle_FieldNumber_NumsArray = 3,
};

@interface PB3ConfRelPuzzle : GPBMessage

@property(nonatomic, readwrite) int32_t relPuzzleId;

/** 行数 */
@property(nonatomic, readwrite) int32_t line;

/** 数量 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *numsArray;
/** The number of items in @c numsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger numsArray_Count;

@end

#pragma mark - PB3Puzzle

typedef GPB_ENUM(PB3Puzzle_FieldNumber) {
  PB3Puzzle_FieldNumber_PuzzleId = 1,
  PB3Puzzle_FieldNumber_LinesArray = 2,
  PB3Puzzle_FieldNumber_Finished = 3,
};

@interface PB3Puzzle : GPBMessage

@property(nonatomic, readwrite) int32_t puzzleId;

/** nums //下标从零开始，若已经完成则把对应下标的数字变成0  例如 [1,2,3] [0,2,3]则表示第一个已经完成 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfRelPuzzle*> *linesArray;
/** The number of items in @c linesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger linesArray_Count;

/** 表示是否已全部完成 */
@property(nonatomic, readwrite) BOOL finished;

@end

#pragma mark - PB3ConfPuzzle

typedef GPB_ENUM(PB3ConfPuzzle_FieldNumber) {
  PB3ConfPuzzle_FieldNumber_PuzzleId = 1,
  PB3ConfPuzzle_FieldNumber_Name = 2,
  PB3ConfPuzzle_FieldNumber_RelId = 3,
  PB3ConfPuzzle_FieldNumber_StartTime = 4,
  PB3ConfPuzzle_FieldNumber_EndTime = 5,
  PB3ConfPuzzle_FieldNumber_ConfRelPuzzleArray = 6,
  PB3ConfPuzzle_FieldNumber_GiftId = 7,
};

/**
 * 拼图配置
 **/
@interface PB3ConfPuzzle : GPBMessage

@property(nonatomic, readwrite) int32_t puzzleId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 关联id 子活动id */
@property(nonatomic, readwrite) int32_t relId;

/** 开始时间 */
@property(nonatomic, readwrite) int64_t startTime;

/** 结束时间 */
@property(nonatomic, readwrite) int64_t endTime;

/** 子拼图配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfRelPuzzle*> *confRelPuzzleArray;
/** The number of items in @c confRelPuzzleArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confRelPuzzleArray_Count;

/** 拼图物品id */
@property(nonatomic, readwrite) int32_t giftId;

@end

#pragma mark - PB3ConfLotteryPoint

typedef GPB_ENUM(PB3ConfLotteryPoint_FieldNumber) {
  PB3ConfLotteryPoint_FieldNumber_Point = 1,
  PB3ConfLotteryPoint_FieldNumber_Rate = 2,
  PB3ConfLotteryPoint_FieldNumber_ConfLuckId = 3,
  PB3ConfLotteryPoint_FieldNumber_Corrects = 4,
};

@interface PB3ConfLotteryPoint : GPBMessage

/** 幸运值 */
@property(nonatomic, readwrite) int32_t point;

/** 达到幸运值后的倍率 第一位是奖品等级（1-小，2-中 3-大奖），第二是倍率 200代表翻两倍 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Int32Dictionary *rate;
/** The number of items in @c rate without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rate_Count;

/** 幸运值配置的ID */
@property(nonatomic, readwrite) int32_t confLuckId;

/** 修正值， map<LotteryAward.lottery_award_id, weight> */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Int32Dictionary *corrects;
/** The number of items in @c corrects without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger corrects_Count;

@end

#pragma mark - PB3LotteryAward

typedef GPB_ENUM(PB3LotteryAward_FieldNumber) {
  PB3LotteryAward_FieldNumber_LotteryAwardId = 1,
  PB3LotteryAward_FieldNumber_LotteryAwardName = 2,
  PB3LotteryAward_FieldNumber_ShowRate = 3,
  PB3LotteryAward_FieldNumber_Weight = 4,
  PB3LotteryAward_FieldNumber_StartTime = 5,
  PB3LotteryAward_FieldNumber_EndTime = 6,
  PB3LotteryAward_FieldNumber_AwardsArray = 7,
  PB3LotteryAward_FieldNumber_Tips = 8,
};

@interface PB3LotteryAward : GPBMessage

@property(nonatomic, readwrite) int32_t lotteryAwardId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *lotteryAwardName;

/** 显示概率 */
@property(nonatomic, readwrite) int32_t showRate;

/** 奖品等级 */
@property(nonatomic, readwrite) int32_t weight;

@property(nonatomic, readwrite) int64_t startTime;

@property(nonatomic, readwrite) int64_t endTime;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfNewAwardCustomAward*> *awardsArray;
/** The number of items in @c awardsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardsArray_Count;

/** 奖品配置文案 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tips;

@end

#pragma mark - PB3AssignItem

typedef GPB_ENUM(PB3AssignItem_FieldNumber) {
  PB3AssignItem_FieldNumber_Id_p = 1,
  PB3AssignItem_FieldNumber_Num = 2,
};

@interface PB3AssignItem : GPBMessage

/** 是定物品id */
@property(nonatomic, readwrite) int32_t id_p;

/** 指定物品数量 */
@property(nonatomic, readwrite) int32_t num;

@end

#pragma mark - PB3ConfLottery

typedef GPB_ENUM(PB3ConfLottery_FieldNumber) {
  PB3ConfLottery_FieldNumber_ConfId = 1,
  PB3ConfLottery_FieldNumber_Name = 2,
  PB3ConfLottery_FieldNumber_RelId = 3,
  PB3ConfLottery_FieldNumber_GetNumType = 4,
  PB3ConfLottery_FieldNumber_AssignId = 5,
  PB3ConfLottery_FieldNumber_AssignNum = 6,
  PB3ConfLottery_FieldNumber_PointListArray = 7,
  PB3ConfLottery_FieldNumber_AwardPoolArray = 8,
  PB3ConfLottery_FieldNumber_AssignItemsArray = 9,
  PB3ConfLottery_FieldNumber_LuckyLimit = 10,
  PB3ConfLottery_FieldNumber_LuckyReset = 11,
};

@interface PB3ConfLottery : GPBMessage

/** id */
@property(nonatomic, readwrite) int32_t confId;

/** 名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 子活动 */
@property(nonatomic, readwrite) int32_t relId;

/** 获取抽奖次数类型 1-特定礼物 2-特定商品 */
@property(nonatomic, readwrite) int32_t getNumType;

/** 指定id */
@property(nonatomic, readwrite) int32_t assignId;

/** 指定数量 */
@property(nonatomic, readwrite) int32_t assignNum;

/** 幸运值 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfLotteryPoint*> *pointListArray;
/** The number of items in @c pointListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pointListArray_Count;

/** 奖励池 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3LotteryAward*> *awardPoolArray;
/** The number of items in @c awardPoolArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardPoolArray_Count;

/** 指定物品列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3AssignItem*> *assignItemsArray;
/** The number of items in @c assignItemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger assignItemsArray_Count;

/** 幸运值范围 0-全服 1-个人 */
@property(nonatomic, readwrite) int32_t luckyLimit;

/** 幸运值重置 0-中奖重置 1-中奖不重置 */
@property(nonatomic, readwrite) int32_t luckyReset;

@end

#pragma mark - PB3ConfBlindLottery

typedef GPB_ENUM(PB3ConfBlindLottery_FieldNumber) {
  PB3ConfBlindLottery_FieldNumber_ConfId = 1,
  PB3ConfBlindLottery_FieldNumber_Name = 2,
  PB3ConfBlindLottery_FieldNumber_RelId = 3,
  PB3ConfBlindLottery_FieldNumber_GetNumType = 4,
  PB3ConfBlindLottery_FieldNumber_AwardPoolArray = 5,
  PB3ConfBlindLottery_FieldNumber_AssignItemsArray = 6,
};

@interface PB3ConfBlindLottery : GPBMessage

/** id */
@property(nonatomic, readwrite) int32_t confId;

/** 名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 子活动 */
@property(nonatomic, readwrite) int32_t relId;

/** 获取抽奖次数类型 1-特定礼物 2-特定商品 */
@property(nonatomic, readwrite) int32_t getNumType;

/** 奖励池 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3LotteryAward*> *awardPoolArray;
/** The number of items in @c awardPoolArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardPoolArray_Count;

/** 指定物品列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3AssignItem*> *assignItemsArray;
/** The number of items in @c assignItemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger assignItemsArray_Count;

@end

#pragma mark - PB3ConfVoteList

typedef GPB_ENUM(PB3ConfVoteList_FieldNumber) {
  PB3ConfVoteList_FieldNumber_Id_p = 1,
  PB3ConfVoteList_FieldNumber_RelId = 2,
  PB3ConfVoteList_FieldNumber_Name = 3,
  PB3ConfVoteList_FieldNumber_Type = 4,
  PB3ConfVoteList_FieldNumber_VoteCate = 5,
  PB3ConfVoteList_FieldNumber_ByVoterNum = 6,
  PB3ConfVoteList_FieldNumber_RateEachNum = 8,
  PB3ConfVoteList_FieldNumber_VoteNum = 9,
  PB3ConfVoteList_FieldNumber_StartTime = 10,
  PB3ConfVoteList_FieldNumber_EndTime = 11,
};

@interface PB3ConfVoteList : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

/** 关联id */
@property(nonatomic, readwrite) int32_t relId;

/** 投票名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 投票类型1-排行榜报名 2-入围名单 */
@property(nonatomic, readwrite) int32_t type;

/** 投票类型分类 排行榜：1-人员榜 2-房间榜 入围名单，不用填 */
@property(nonatomic, readwrite) int32_t voteCate;

/** 被投票人数 */
@property(nonatomic, readwrite) int32_t byVoterNum;

/** 循环内每人被投票次数   如果频率是每天，这个是1，表示每天可以给每人投一票 */
@property(nonatomic, readwrite) int32_t rateEachNum;

/** 投票次数 每个周期可投票的次数 */
@property(nonatomic, readwrite) int32_t voteNum;

@property(nonatomic, readwrite) int64_t startTime;

@property(nonatomic, readwrite) int64_t endTime;

@end

#pragma mark - PB3ConfVoteAward

typedef GPB_ENUM(PB3ConfVoteAward_FieldNumber) {
  PB3ConfVoteAward_FieldNumber_Id_p = 1,
  PB3ConfVoteAward_FieldNumber_ActId = 2,
  PB3ConfVoteAward_FieldNumber_Name = 3,
  PB3ConfVoteAward_FieldNumber_RelIdArray = 4,
  PB3ConfVoteAward_FieldNumber_Num = 5,
};

@interface PB3ConfVoteAward : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

/** 主活动id */
@property(nonatomic, readwrite) int32_t actId;

/** 名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 子活动列表 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *relIdArray;
/** The number of items in @c relIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger relIdArray_Count;

/** 数量 */
@property(nonatomic, readwrite) int32_t num;

@end

#pragma mark - PB3ConfVote

typedef GPB_ENUM(PB3ConfVote_FieldNumber) {
  PB3ConfVote_FieldNumber_ListArray = 1,
  PB3ConfVote_FieldNumber_AwardsArray = 2,
};

/**
 * 投票配置
 **/
@interface PB3ConfVote : GPBMessage

/** 投票配置列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfVoteList*> *listArray;
/** The number of items in @c listArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger listArray_Count;

/** 投票奖励列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfVoteAward*> *awardsArray;
/** The number of items in @c awardsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardsArray_Count;

@end

#pragma mark - PB3ConfCultivateAward

typedef GPB_ENUM(PB3ConfCultivateAward_FieldNumber) {
  PB3ConfCultivateAward_FieldNumber_Id_p = 1,
  PB3ConfCultivateAward_FieldNumber_Name = 2,
  PB3ConfCultivateAward_FieldNumber_RelId = 3,
  PB3ConfCultivateAward_FieldNumber_Cycle = 4,
  PB3ConfCultivateAward_FieldNumber_StartDot = 5,
  PB3ConfCultivateAward_FieldNumber_EndDot = 6,
  PB3ConfCultivateAward_FieldNumber_GiftListArray = 7,
};

/**
 * 养成奖励
 **/
@interface PB3ConfCultivateAward : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int32_t relId;

/** 循环 1-长期 2-每日 3-每星期 4-每月 */
@property(nonatomic, readwrite) int32_t cycle;

@property(nonatomic, readwrite) int64_t startDot;

@property(nonatomic, readwrite) int64_t endDot;

/** 礼物列表 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *giftListArray;
/** The number of items in @c giftListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger giftListArray_Count;

@end

#pragma mark - PB3ConfCultivate

typedef GPB_ENUM(PB3ConfCultivate_FieldNumber) {
  PB3ConfCultivate_FieldNumber_RelId = 1,
  PB3ConfCultivate_FieldNumber_CultivateName = 2,
  PB3ConfCultivate_FieldNumber_MostLevel = 3,
  PB3ConfCultivate_FieldNumber_Cycle = 4,
  PB3ConfCultivate_FieldNumber_CycleLevel = 5,
  PB3ConfCultivate_FieldNumber_CycleLevelType = 6,
  PB3ConfCultivate_FieldNumber_AwardsArray = 7,
};

/**
 * 养成配置
 **/
@interface PB3ConfCultivate : GPBMessage

@property(nonatomic, readwrite) int32_t relId;

/** 养成名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cultivateName;

/** 最高等级 */
@property(nonatomic, readwrite) int32_t mostLevel;

/** 循环 1-长期 2-每日 3-每星期 4-每月 */
@property(nonatomic, readwrite) int32_t cycle;

/** 一次循环可升的等级，例如每日14，那一天就只能提升14级 */
@property(nonatomic, readwrite) int32_t cycleLevel;

/** 1-叠加 2-不叠加 */
@property(nonatomic, readwrite) int32_t cycleLevelType;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfCultivateAward*> *awardsArray;
/** The number of items in @c awardsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardsArray_Count;

@end

#pragma mark - PB3GoldBackRanking

typedef GPB_ENUM(PB3GoldBackRanking_FieldNumber) {
  PB3GoldBackRanking_FieldNumber_MinRank = 1,
  PB3GoldBackRanking_FieldNumber_MaxRank = 2,
  PB3GoldBackRanking_FieldNumber_Num = 3,
};

@interface PB3GoldBackRanking : GPBMessage

@property(nonatomic, readwrite) int32_t minRank;

@property(nonatomic, readwrite) int32_t maxRank;

@property(nonatomic, readwrite) int32_t num;

@end

#pragma mark - PB3ConfGoldBack

typedef GPB_ENUM(PB3ConfGoldBack_FieldNumber) {
  PB3ConfGoldBack_FieldNumber_Id_p = 1,
  PB3ConfGoldBack_FieldNumber_Name = 2,
  PB3ConfGoldBack_FieldNumber_RelId = 3,
  PB3ConfGoldBack_FieldNumber_RankArray = 4,
  PB3ConfGoldBack_FieldNumber_MaxGold = 5,
};

/**
 * 返现配置
 **/
@interface PB3ConfGoldBack : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int32_t relId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3GoldBackRanking*> *rankArray;
/** The number of items in @c rankArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rankArray_Count;

/** 返现最高金额 */
@property(nonatomic, readwrite) int64_t maxGold;

@end

#pragma mark - PB3CompoundAsset

typedef GPB_ENUM(PB3CompoundAsset_FieldNumber) {
  PB3CompoundAsset_FieldNumber_AssetId = 1,
  PB3CompoundAsset_FieldNumber_AssetNum = 2,
  PB3CompoundAsset_FieldNumber_Rate = 3,
  PB3CompoundAsset_FieldNumber_AssetName = 4,
  PB3CompoundAsset_FieldNumber_AssetImageURL = 5,
};

/**
 * 合成
 **/
@interface PB3CompoundAsset : GPBMessage

@property(nonatomic, readwrite) int32_t assetId;

@property(nonatomic, readwrite) int32_t assetNum;

@property(nonatomic, readwrite) int32_t rate;

@property(nonatomic, readwrite, copy, null_resettable) NSString *assetName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *assetImageURL;

@end

#pragma mark - PB3FailAsset

typedef GPB_ENUM(PB3FailAsset_FieldNumber) {
  PB3FailAsset_FieldNumber_Id_p = 1,
  PB3FailAsset_FieldNumber_AssetId = 2,
  PB3FailAsset_FieldNumber_AssetNum = 3,
  PB3FailAsset_FieldNumber_Cycle = 4,
  PB3FailAsset_FieldNumber_MinRate = 5,
  PB3FailAsset_FieldNumber_Group = 6,
  PB3FailAsset_FieldNumber_AssetName = 7,
  PB3FailAsset_FieldNumber_AssetImageURL = 8,
};

@interface PB3FailAsset : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) int32_t assetId;

@property(nonatomic, readwrite) int32_t assetNum;

/** 1-循环 2-每天 3-一次性 */
@property(nonatomic, readwrite) int32_t cycle;

/** 保底概率 */
@property(nonatomic, readwrite) int32_t minRate;

/** 分组 */
@property(nonatomic, readwrite) int32_t group;

@property(nonatomic, readwrite, copy, null_resettable) NSString *assetName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *assetImageURL;

@end

#pragma mark - PB3CompoundFormula

typedef GPB_ENUM(PB3CompoundFormula_FieldNumber) {
  PB3CompoundFormula_FieldNumber_AssetId = 1,
  PB3CompoundFormula_FieldNumber_CompoundRate = 2,
  PB3CompoundFormula_FieldNumber_MinNum = 3,
  PB3CompoundFormula_FieldNumber_MaxNum = 4,
  PB3CompoundFormula_FieldNumber_FailDeductNum = 5,
  PB3CompoundFormula_FieldNumber_CliRate = 6,
  PB3CompoundFormula_FieldNumber_AssetName = 7,
  PB3CompoundFormula_FieldNumber_AssetImageURL = 8,
};

@interface PB3CompoundFormula : GPBMessage

@property(nonatomic, readwrite) int32_t assetId;

@property(nonatomic, readwrite) int32_t compoundRate;

@property(nonatomic, readwrite) int32_t minNum;

@property(nonatomic, readwrite) int32_t maxNum;

/** 失败扣除物品 */
@property(nonatomic, readwrite) int32_t failDeductNum;

/** 显示概率 */
@property(nonatomic, readwrite) int32_t cliRate;

@property(nonatomic, readwrite, copy, null_resettable) NSString *assetName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *assetImageURL;

@end

#pragma mark - PB3LimitActData

typedef GPB_ENUM(PB3LimitActData_FieldNumber) {
  PB3LimitActData_FieldNumber_LimitNum = 1,
  PB3LimitActData_FieldNumber_LimitRange = 2,
  PB3LimitActData_FieldNumber_UseNum = 3,
  PB3LimitActData_FieldNumber_LimitCycle = 4,
};

@interface PB3LimitActData : GPBMessage

/** 限制数量 */
@property(nonatomic, readwrite) int32_t limitNum;

/** 1-全服 2-个人 */
@property(nonatomic, readwrite) int32_t limitRange;

/** 已兑换数量 */
@property(nonatomic, readwrite) int32_t useNum;

/** 每隔一段时间重置 1-每周 2-每月 3-每天 4-不重置 */
@property(nonatomic, readwrite) int32_t limitCycle;

@end

#pragma mark - PB3ConfCompound

typedef GPB_ENUM(PB3ConfCompound_FieldNumber) {
  PB3ConfCompound_FieldNumber_Id_p = 1,
  PB3ConfCompound_FieldNumber_Name = 2,
  PB3ConfCompound_FieldNumber_RelId = 3,
  PB3ConfCompound_FieldNumber_SuccessAssetArray = 4,
  PB3ConfCompound_FieldNumber_CompoundFormulaArray = 5,
  PB3ConfCompound_FieldNumber_FailAssetArray = 6,
  PB3ConfCompound_FieldNumber_LimitsArray = 7,
};

@interface PB3ConfCompound : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int32_t relId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CompoundAsset*> *successAssetArray;
/** The number of items in @c successAssetArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger successAssetArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CompoundFormula*> *compoundFormulaArray;
/** The number of items in @c compoundFormulaArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger compoundFormulaArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3FailAsset*> *failAssetArray;
/** The number of items in @c failAssetArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger failAssetArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3LimitActData*> *limitsArray;
/** The number of items in @c limitsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger limitsArray_Count;

@end

#pragma mark - PB3LogCompound

typedef GPB_ENUM(PB3LogCompound_FieldNumber) {
  PB3LogCompound_FieldNumber_RelId = 1,
  PB3LogCompound_FieldNumber_CompoundId = 2,
  PB3LogCompound_FieldNumber_PlayerId = 3,
  PB3LogCompound_FieldNumber_UsedAssetArray = 4,
  PB3LogCompound_FieldNumber_CompoundAssetArray = 5,
  PB3LogCompound_FieldNumber_ConsumeAssetArray = 6,
  PB3LogCompound_FieldNumber_Status = 7,
  PB3LogCompound_FieldNumber_Rate = 8,
  PB3LogCompound_FieldNumber_Created = 9,
  PB3LogCompound_FieldNumber_CliRate = 10,
};

/**
 * 合成结构
 **/
@interface PB3LogCompound : GPBMessage

@property(nonatomic, readwrite) int32_t relId;

@property(nonatomic, readwrite) int32_t compoundId;

@property(nonatomic, readwrite) int64_t playerId;

/** 使用物品 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CompoundAsset*> *usedAssetArray;
/** The number of items in @c usedAssetArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger usedAssetArray_Count;

/** 合成出来的物品，无论成败 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CompoundAsset*> *compoundAssetArray;
/** The number of items in @c compoundAssetArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger compoundAssetArray_Count;

/** 消耗物品 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CompoundAsset*> *consumeAssetArray;
/** The number of items in @c consumeAssetArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger consumeAssetArray_Count;

/** 成败 */
@property(nonatomic, readwrite) BOOL status;

/** 合成的概率 */
@property(nonatomic, readwrite) int32_t rate;

/** 合成时间 */
@property(nonatomic, readwrite) int64_t created;

/** 显示概率 */
@property(nonatomic, readwrite) int32_t cliRate;

@end

#pragma mark - PB3ConfCard

typedef GPB_ENUM(PB3ConfCard_FieldNumber) {
  PB3ConfCard_FieldNumber_Id_p = 1,
  PB3ConfCard_FieldNumber_Name = 2,
  PB3ConfCard_FieldNumber_RelId = 3,
  PB3ConfCard_FieldNumber_ConfDrawCardId = 4,
  PB3ConfCard_FieldNumber_Type = 5,
  PB3ConfCard_FieldNumber_Rate = 6,
  PB3ConfCard_FieldNumber_Picture = 7,
  PB3ConfCard_FieldNumber_Tips = 8,
};

@interface PB3ConfCard : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int32_t relId;

/** 抽卡配置 */
@property(nonatomic, readwrite) int32_t confDrawCardId;

/** 卡牌类型 1-普通 2-特殊 */
@property(nonatomic, readwrite) int32_t type;

/** 概率 */
@property(nonatomic, readwrite) int32_t rate;

/** 图片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *picture;

/** 文案 （数组形式） */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tips;

@end

#pragma mark - PB3ConfDrawCard

typedef GPB_ENUM(PB3ConfDrawCard_FieldNumber) {
  PB3ConfDrawCard_FieldNumber_Id_p = 1,
  PB3ConfDrawCard_FieldNumber_Name = 2,
  PB3ConfDrawCard_FieldNumber_RelId = 3,
  PB3ConfDrawCard_FieldNumber_ConsumeType = 4,
  PB3ConfDrawCard_FieldNumber_ConsumeNum = 5,
  PB3ConfDrawCard_FieldNumber_GainNum = 6,
  PB3ConfDrawCard_FieldNumber_Total = 7,
  PB3ConfDrawCard_FieldNumber_Usable = 8,
  PB3ConfDrawCard_FieldNumber_CardsArray = 9,
  PB3ConfDrawCard_FieldNumber_SumCardRate = 10,
};

/**
 * 抽卡配置
 **/
@interface PB3ConfDrawCard : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int32_t relId;

/** 抽卡耗费类型 1-充值 */
@property(nonatomic, readwrite) int32_t consumeType;

/** 耗费数量 */
@property(nonatomic, readwrite) int32_t consumeNum;

@property(nonatomic, readwrite) int32_t gainNum;

/** 每轮总卡数 */
@property(nonatomic, readwrite) int32_t total;

/** 最大抽卡数量 */
@property(nonatomic, readwrite) int32_t usable;

/** 卡片配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfCard*> *cardsArray;
/** The number of items in @c cardsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cardsArray_Count;

/** 总概率 */
@property(nonatomic, readwrite) int32_t sumCardRate;

@end

#pragma mark - PB3UserStintConfig

typedef GPB_ENUM(PB3UserStintConfig_FieldNumber) {
  PB3UserStintConfig_FieldNumber_StintType = 1,
  PB3UserStintConfig_FieldNumber_WealthLevel = 2,
  PB3UserStintConfig_FieldNumber_Operation = 3,
  PB3UserStintConfig_FieldNumber_CharmLevel = 4,
  PB3UserStintConfig_FieldNumber_BindPhone = 5,
  PB3UserStintConfig_FieldNumber_Verified = 6,
  PB3UserStintConfig_FieldNumber_MaxParticipate = 7,
  PB3UserStintConfig_FieldNumber_MaxWinning = 8,
  PB3UserStintConfig_FieldNumber_RoomIdArray = 9,
  PB3UserStintConfig_FieldNumber_CpType = 10,
};

@interface PB3UserStintConfig : GPBMessage

/** 限制类型 1等级限制 2用户认证 3参与次数限制 4中奖次数限制 5房间限制; 11:组队限制 */
@property(nonatomic, readwrite) int32_t stintType;

/** 财富等级 */
@property(nonatomic, readwrite) int32_t wealthLevel;

/** 1 and 2 or */
@property(nonatomic, readwrite) int32_t operation;

/** 魅力等级 */
@property(nonatomic, readwrite) int32_t charmLevel;

/** 是否绑定手机 0否 1是 */
@property(nonatomic, readwrite) int32_t bindPhone;

/** 是否实名认证 0否 1是 */
@property(nonatomic, readwrite) int32_t verified;

/** 最大参与次数 */
@property(nonatomic, readwrite) int32_t maxParticipate;

/** 最大中奖次数 */
@property(nonatomic, readwrite) int32_t maxWinning;

/** 房间列表 废弃 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *roomIdArray DEPRECATED_ATTRIBUTE;
/** The number of items in @c roomIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger roomIdArray_Count DEPRECATED_ATTRIBUTE;

/** 组队限制：1：必须CP组队；2:必须不组队 */
@property(nonatomic, readwrite) int32_t cpType;

@end

#pragma mark - PB3ConfUserStint

typedef GPB_ENUM(PB3ConfUserStint_FieldNumber) {
  PB3ConfUserStint_FieldNumber_ConfId = 1,
  PB3ConfUserStint_FieldNumber_Name = 2,
  PB3ConfUserStint_FieldNumber_YoungModel = 3,
  PB3ConfUserStint_FieldNumber_ConfigListArray = 4,
};

@interface PB3ConfUserStint : GPBMessage

/** id */
@property(nonatomic, readwrite) int32_t confId;

/** 名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 青少年模式 */
@property(nonatomic, readwrite) int32_t youngModel;

/** 配置列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3UserStintConfig*> *configListArray;
/** The number of items in @c configListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger configListArray_Count;

@end

#pragma mark - PB3UserStint

typedef GPB_ENUM(PB3UserStint_FieldNumber) {
  PB3UserStint_FieldNumber_ActId = 1,
  PB3UserStint_FieldNumber_RelId = 2,
  PB3UserStint_FieldNumber_ConfId = 3,
  PB3UserStint_FieldNumber_ConfUserStint = 4,
};

@interface PB3UserStint : GPBMessage

@property(nonatomic, readwrite) int32_t actId;

@property(nonatomic, readwrite) int32_t relId;

/** 配置id */
@property(nonatomic, readwrite) int32_t confId;

/** 配置 */
@property(nonatomic, readwrite, strong, null_resettable) PB3ConfUserStint *confUserStint;
/** Test to see if @c confUserStint has been set. */
@property(nonatomic, readwrite) BOOL hasConfUserStint;

@end

#pragma mark - PB3ConfTreasure

typedef GPB_ENUM(PB3ConfTreasure_FieldNumber) {
  PB3ConfTreasure_FieldNumber_Id_p = 1,
  PB3ConfTreasure_FieldNumber_ActId = 2,
  PB3ConfTreasure_FieldNumber_RelActId = 3,
  PB3ConfTreasure_FieldNumber_Name = 4,
  PB3ConfTreasure_FieldNumber_DurationTime = 5,
  PB3ConfTreasure_FieldNumber_WaitTime = 6,
  PB3ConfTreasure_FieldNumber_GiftId = 7,
  PB3ConfTreasure_FieldNumber_GiftNum = 8,
};

/**
 * 夺宝配置
 **/
@interface PB3ConfTreasure : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) int32_t actId;

@property(nonatomic, readwrite) int32_t relActId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 每期夺宝开启时间，单位秒 */
@property(nonatomic, readwrite) int64_t durationTime;

/** 开奖后，下一期等待时间 0表示立即开启下一期 */
@property(nonatomic, readwrite) int64_t waitTime;

/** 投注物品id */
@property(nonatomic, readwrite) int32_t giftId;

/** 1注需要投入的物品数量 */
@property(nonatomic, readwrite) int32_t giftNum;

@end

#pragma mark - PB3ConfTreasureGift

typedef GPB_ENUM(PB3ConfTreasureGift_FieldNumber) {
  PB3ConfTreasureGift_FieldNumber_Id_p = 1,
  PB3ConfTreasureGift_FieldNumber_Name = 2,
  PB3ConfTreasureGift_FieldNumber_TreasureId = 3,
  PB3ConfTreasureGift_FieldNumber_PrizeId = 4,
  PB3ConfTreasureGift_FieldNumber_GiftMaxNum = 5,
  PB3ConfTreasureGift_FieldNumber_PoolSize = 6,
  PB3ConfTreasureGift_FieldNumber_PlayerBetMaxNum = 7,
  PB3ConfTreasureGift_FieldNumber_Weight = 8,
  PB3ConfTreasureGift_FieldNumber_ActId = 9,
  PB3ConfTreasureGift_FieldNumber_RelActId = 10,
};

/**
 * 夺宝礼物配置
 **/
@interface PB3ConfTreasureGift : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int32_t treasureId;

/** 奖品礼物id */
@property(nonatomic, readwrite) int32_t prizeId;

/** 奖品产出最大数量 */
@property(nonatomic, readwrite) int32_t giftMaxNum;

/** 投注池大小，达到这个数字时开奖数 */
@property(nonatomic, readwrite) int32_t poolSize;

/** 单人最大投注数量 */
@property(nonatomic, readwrite) int32_t playerBetMaxNum;

/** 权重 最大10000 */
@property(nonatomic, readwrite) int32_t weight;

/** 活动 */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动 */
@property(nonatomic, readwrite) int32_t relActId;

@end

#pragma mark - PB3ConfActFormCarrier

typedef GPB_ENUM(PB3ConfActFormCarrier_FieldNumber) {
  PB3ConfActFormCarrier_FieldNumber_Id_p = 1,
  PB3ConfActFormCarrier_FieldNumber_Name = 2,
  PB3ConfActFormCarrier_FieldNumber_ActId = 3,
  PB3ConfActFormCarrier_FieldNumber_RelActId = 4,
  PB3ConfActFormCarrier_FieldNumber_FormId = 5,
  PB3ConfActFormCarrier_FieldNumber_Verify = 6,
  PB3ConfActFormCarrier_FieldNumber_Status = 7,
  PB3ConfActFormCarrier_FieldNumber_StartTime = 8,
  PB3ConfActFormCarrier_FieldNumber_EndTime = 9,
};

/**
 * 动态表单配置
 **/
@interface PB3ConfActFormCarrier : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

/** 载体名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 活动id */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动id */
@property(nonatomic, readwrite) int32_t relActId;

/** 表单id */
@property(nonatomic, readwrite) int32_t formId;

/** 是否开启审核，0不开启 1开启 */
@property(nonatomic, readwrite) int32_t verify;

/** 状态 0关闭 1启用 */
@property(nonatomic, readwrite) int32_t status;

/** 配置开启时间，时间戳 */
@property(nonatomic, readwrite) int64_t startTime;

/** 配置结束时间，时间戳 */
@property(nonatomic, readwrite) int64_t endTime;

@end

#pragma mark - PB3CardProgressReq

typedef GPB_ENUM(PB3CardProgressReq_FieldNumber) {
  PB3CardProgressReq_FieldNumber_ActivityId = 1,
  PB3CardProgressReq_FieldNumber_RelActivityId = 2,
  PB3CardProgressReq_FieldNumber_PlayerId = 3,
};

/**
 * 个人信息卡进度
 **/
@interface PB3CardProgressReq : GPBMessage

@property(nonatomic, readwrite) int32_t activityId;

@property(nonatomic, readwrite) int32_t relActivityId;

@property(nonatomic, readwrite) int64_t playerId;

@end

#pragma mark - PB3CardGift

typedef GPB_ENUM(PB3CardGift_FieldNumber) {
  PB3CardGift_FieldNumber_TaskId = 1,
  PB3CardGift_FieldNumber_GiftIdArray = 2,
  PB3CardGift_FieldNumber_GiftNum = 3,
  PB3CardGift_FieldNumber_Point = 4,
};

@interface PB3CardGift : GPBMessage

@property(nonatomic, readwrite) int32_t taskId;

/** 礼物id */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *giftIdArray;
/** The number of items in @c giftIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger giftIdArray_Count;

/** 礼物积分或者数量 按类型区分 */
@property(nonatomic, readwrite) int64_t giftNum;

/** 积分 */
@property(nonatomic, readwrite) int64_t point;

@end

#pragma mark - PB3CardProgressRes

typedef GPB_ENUM(PB3CardProgressRes_FieldNumber) {
  PB3CardProgressRes_FieldNumber_PointTotal = 1,
  PB3CardProgressRes_FieldNumber_PointExtra = 2,
  PB3CardProgressRes_FieldNumber_GiftArray = 3,
};

@interface PB3CardProgressRes : GPBMessage

/** 总积分 */
@property(nonatomic, readwrite) int64_t pointTotal;

/** 当日获得的额外分数 */
@property(nonatomic, readwrite) int64_t pointExtra;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CardGift*> *giftArray;
/** The number of items in @c giftArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger giftArray_Count;

@end

#pragma mark - PB3GetActivityReq

typedef GPB_ENUM(PB3GetActivityReq_FieldNumber) {
  PB3GetActivityReq_FieldNumber_ActId = 1,
  PB3GetActivityReq_FieldNumber_ConfsArray = 2,
  PB3GetActivityReq_FieldNumber_PlayerId = 3,
};

/**
 * 获取配置
 **/
@interface PB3GetActivityReq : GPBMessage

/** 0或者此活动id不存在，则返回所有 */
@property(nonatomic, readwrite) int32_t actId;

/** 请求的活动配置 (空数组表示返回所有) */
// |confsArray| contains |PB3ActivityConfType|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *confsArray;
/** The number of items in @c confsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confsArray_Count;

/** 用户ID */
@property(nonatomic, readwrite) int64_t playerId;

@end

#pragma mark - PB3GetActivityRes

typedef GPB_ENUM(PB3GetActivityRes_FieldNumber) {
  PB3GetActivityRes_FieldNumber_ActivityArray = 1,
  PB3GetActivityRes_FieldNumber_WelfareArray = 2,
  PB3GetActivityRes_FieldNumber_ConfPuzzleArray = 3,
  PB3GetActivityRes_FieldNumber_LotteryArray = 4,
  PB3GetActivityRes_FieldNumber_Vote = 5,
  PB3GetActivityRes_FieldNumber_CultivateArray = 6,
  PB3GetActivityRes_FieldNumber_NewAward = 7,
  PB3GetActivityRes_FieldNumber_GoldBackArray = 8,
  PB3GetActivityRes_FieldNumber_CompoundArray = 9,
  PB3GetActivityRes_FieldNumber_DrawCardArray = 10,
  PB3GetActivityRes_FieldNumber_Lottery2Array = 11,
  PB3GetActivityRes_FieldNumber_UserStintArray = 12,
  PB3GetActivityRes_FieldNumber_ConfTreasureListArray = 13,
  PB3GetActivityRes_FieldNumber_ConfTreasureGiftListArray = 14,
  PB3GetActivityRes_FieldNumber_ConfActFormCarrierArray = 15,
  PB3GetActivityRes_FieldNumber_ConfSummaryListArray = 16,
  PB3GetActivityRes_FieldNumber_ConfServerLotteryArray = 17,
  PB3GetActivityRes_FieldNumber_BlindLotteryArray = 18,
  PB3GetActivityRes_FieldNumber_ConfDefendPetsArray = 19,
  PB3GetActivityRes_FieldNumber_ConfPetBattleArray = 20,
  PB3GetActivityRes_FieldNumber_Player = 21,
  PB3GetActivityRes_FieldNumber_Clan = 22,
  PB3GetActivityRes_FieldNumber_ServerTimestamp = 23,
};

@interface PB3GetActivityRes : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3Activity*> *activityArray;
/** The number of items in @c activityArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger activityArray_Count;

/** 福利配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfWelfare*> *welfareArray;
/** The number of items in @c welfareArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger welfareArray_Count;

/** 拼图配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfPuzzle*> *confPuzzleArray;
/** The number of items in @c confPuzzleArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confPuzzleArray_Count;

/** 抽奖配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfLottery*> *lotteryArray;
/** The number of items in @c lotteryArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger lotteryArray_Count;

/** 投票 */
@property(nonatomic, readwrite, strong, null_resettable) PB3ConfVote *vote;
/** Test to see if @c vote has been set. */
@property(nonatomic, readwrite) BOOL hasVote;

/** 养成配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfCultivate*> *cultivateArray;
/** The number of items in @c cultivateArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cultivateArray_Count;

/** 新版奖励 */
@property(nonatomic, readwrite, strong, null_resettable) PB3ConfNewAward *newAward NS_RETURNS_NOT_RETAINED;
/** Test to see if @c newAward has been set. */
@property(nonatomic, readwrite) BOOL hasNewAward;

/** 返现配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfGoldBack*> *goldBackArray;
/** The number of items in @c goldBackArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger goldBackArray_Count;

/** 合成配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfCompound*> *compoundArray;
/** The number of items in @c compoundArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger compoundArray_Count;

/** 抽卡配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfDrawCard*> *drawCardArray;
/** The number of items in @c drawCardArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger drawCardArray_Count;

/** 抽奖配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfLottery*> *lottery2Array;
/** The number of items in @c lottery2Array without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger lottery2Array_Count;

/** 活动用户限制规则 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3UserStint*> *userStintArray;
/** The number of items in @c userStintArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger userStintArray_Count;

/** 夺宝配置列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfTreasure*> *confTreasureListArray;
/** The number of items in @c confTreasureListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confTreasureListArray_Count;

/** 夺宝礼物列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfTreasureGift*> *confTreasureGiftListArray;
/** The number of items in @c confTreasureGiftListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confTreasureGiftListArray_Count;

/** 动态表单配置 - 表单载体 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfActFormCarrier*> *confActFormCarrierArray;
/** The number of items in @c confActFormCarrierArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confActFormCarrierArray_Count;

/** 盘点配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfSummary*> *confSummaryListArray;
/** The number of items in @c confSummaryListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confSummaryListArray_Count;

/** 全服抽奖配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfServerLottery*> *confServerLotteryArray;
/** The number of items in @c confServerLotteryArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confServerLotteryArray_Count;

/** 盲盒抽奖 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfBlindLottery*> *blindLotteryArray;
/** The number of items in @c blindLotteryArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger blindLotteryArray_Count;

/** 保卫宠物配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfDefendPets*> *confDefendPetsArray;
/** The number of items in @c confDefendPetsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confDefendPetsArray_Count;

/** 保卫宠物对战配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3ConfPetBattle*> *confPetBattleArray;
/** The number of items in @c confPetBattleArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confPetBattleArray_Count;

/** 查看个人信息(只用于站内) */
@property(nonatomic, readwrite, strong, null_resettable) PB3Player *player;
/** Test to see if @c player has been set. */
@property(nonatomic, readwrite) BOOL hasPlayer;

/** 公会信息 */
@property(nonatomic, readwrite, strong, null_resettable) PB3ClanInfo *clan;
/** Test to see if @c clan has been set. */
@property(nonatomic, readwrite) BOOL hasClan;

/** 服务器时间 */
@property(nonatomic, readwrite, strong, null_resettable) PB3ServerTimestamp *serverTimestamp;
/** Test to see if @c serverTimestamp has been set. */
@property(nonatomic, readwrite) BOOL hasServerTimestamp;

@end

#pragma mark - PB3ConfPetBattle

typedef GPB_ENUM(PB3ConfPetBattle_FieldNumber) {
  PB3ConfPetBattle_FieldNumber_Id_p = 1,
  PB3ConfPetBattle_FieldNumber_ActId = 2,
  PB3ConfPetBattle_FieldNumber_RelActId = 3,
  PB3ConfPetBattle_FieldNumber_RevengeRelActId = 4,
  PB3ConfPetBattle_FieldNumber_BattleName = 5,
  PB3ConfPetBattle_FieldNumber_ChangePetCost = 6,
  PB3ConfPetBattle_FieldNumber_BattleCostItemId = 7,
  PB3ConfPetBattle_FieldNumber_PkCostNum = 8,
  PB3ConfPetBattle_FieldNumber_RevengeCostNum = 9,
  PB3ConfPetBattle_FieldNumber_RevengeProbability = 10,
};

/**
 * 宠物对战配置
 **/
@interface PB3ConfPetBattle : GPBMessage

/** 宠物配置id */
@property(nonatomic, readwrite) int32_t id_p;

/** 活动ID */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动Id */
@property(nonatomic, readwrite) int32_t relActId;

/**  复仇关联子活动ID */
@property(nonatomic, readwrite) int32_t revengeRelActId;

/** 战斗配置名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *battleName;

/** 换宠花费金币 */
@property(nonatomic, readwrite) int32_t changePetCost;

/** 体力值消耗物品ID */
@property(nonatomic, readwrite) int32_t battleCostItemId;

/** 进行pk消耗物品数量 */
@property(nonatomic, readwrite) int32_t pkCostNum;

/** 进行复仇消耗物品数量 */
@property(nonatomic, readwrite) int32_t revengeCostNum;

/** 复仇成功概率 */
@property(nonatomic, readwrite) int32_t revengeProbability;

@end

#pragma mark - PB3ConfDefendPets

typedef GPB_ENUM(PB3ConfDefendPets_FieldNumber) {
  PB3ConfDefendPets_FieldNumber_Id_p = 1,
  PB3ConfDefendPets_FieldNumber_Name = 2,
  PB3ConfDefendPets_FieldNumber_PetImage = 3,
  PB3ConfDefendPets_FieldNumber_PetAnimation = 4,
  PB3ConfDefendPets_FieldNumber_Prop = 5,
  PB3ConfDefendPets_FieldNumber_Desc = 6,
  PB3ConfDefendPets_FieldNumber_RestraintDesc = 7,
};

/**
 * 宠物配置
 **/
@interface PB3ConfDefendPets : GPBMessage

/** 宠物id */
@property(nonatomic, readwrite) int32_t id_p;

/** 宠物名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 宠物形象 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *petImage;

/** 宠物属性 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *petAnimation;

/** 宠物属性(1-水,2-火,3-草) */
@property(nonatomic, readwrite) int32_t prop;

/** 宠物描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *desc;

/** 宠物克制信息描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *restraintDesc;

@end

#pragma mark - PB3ConfSummary

typedef GPB_ENUM(PB3ConfSummary_FieldNumber) {
  PB3ConfSummary_FieldNumber_Id_p = 1,
  PB3ConfSummary_FieldNumber_Name = 2,
  PB3ConfSummary_FieldNumber_ActId = 3,
  PB3ConfSummary_FieldNumber_RelId = 4,
  PB3ConfSummary_FieldNumber_StartTime = 5,
  PB3ConfSummary_FieldNumber_EndTime = 6,
  PB3ConfSummary_FieldNumber_Year = 7,
};

/**
 * 盘点配置
 **/
@interface PB3ConfSummary : GPBMessage

/** 盘点配置 */
@property(nonatomic, readwrite) int32_t id_p;

/** 盘点配置名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 活动id */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动id */
@property(nonatomic, readwrite) int32_t relId;

/** 配置开始时间 */
@property(nonatomic, readwrite) int64_t startTime;

/** 配置结束时间 */
@property(nonatomic, readwrite) int64_t endTime;

/** 盘点，统计年份 */
@property(nonatomic, readwrite) int32_t year;

@end

#pragma mark - PB3ActivityRoomSubInfoReq

typedef GPB_ENUM(PB3ActivityRoomSubInfoReq_FieldNumber) {
  PB3ActivityRoomSubInfoReq_FieldNumber_ActivityId = 1,
  PB3ActivityRoomSubInfoReq_FieldNumber_RelActivityId = 2,
};

/**
 * 房间角标信息
 **/
@interface PB3ActivityRoomSubInfoReq : GPBMessage

@property(nonatomic, readwrite) int32_t activityId;

@property(nonatomic, readwrite) int32_t relActivityId;

@end

#pragma mark - PB3ActivityRoomSubInfoRes

typedef GPB_ENUM(PB3ActivityRoomSubInfoRes_FieldNumber) {
  PB3ActivityRoomSubInfoRes_FieldNumber_Sort = 1,
  PB3ActivityRoomSubInfoRes_FieldNumber_Num = 2,
};

@interface PB3ActivityRoomSubInfoRes : GPBMessage

/** 排名 */
@property(nonatomic, readwrite) int64_t sort;

/** 积分或完成任务的人数，按需变化 */
@property(nonatomic, readwrite) int64_t num;

@end

#pragma mark - PB3NoticeActivity

typedef GPB_ENUM(PB3NoticeActivity_FieldNumber) {
  PB3NoticeActivity_FieldNumber_Type = 1,
  PB3NoticeActivity_FieldNumber_ActIdArray = 2,
};

/**
 * 活动通知
 **/
@interface PB3NoticeActivity : GPBMessage

/** 1-角标积分 */
@property(nonatomic, readwrite) int32_t type;

/** 活动id列表  用这些id去请求角标积分 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *actIdArray;
/** The number of items in @c actIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger actIdArray_Count;

@end

#pragma mark - PB3GoodNumListReq

typedef GPB_ENUM(PB3GoodNumListReq_FieldNumber) {
  PB3GoodNumListReq_FieldNumber_PlayerId = 1,
};

/**
 * ###########靓号库
 * 获取靓号库列表
 **/
@interface PB3GoodNumListReq : GPBMessage

@property(nonatomic, readwrite) int64_t playerId;

@end

#pragma mark - PB3GoodNumListRes

typedef GPB_ENUM(PB3GoodNumListRes_FieldNumber) {
  PB3GoodNumListRes_FieldNumber_ListArray = 1,
  PB3GoodNumListRes_FieldNumber_Used = 2,
  PB3GoodNumListRes_FieldNumber_Num = 3,
  PB3GoodNumListRes_FieldNumber_PlayerName = 4,
  PB3GoodNumListRes_FieldNumber_PlayerIcon = 5,
  PB3GoodNumListRes_FieldNumber_PlayerId = 6,
};

@interface PB3GoodNumListRes : GPBMessage

/** 靓号列表 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *listArray;
/** The number of items in @c listArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger listArray_Count;

/** 使用中的靓号 */
@property(nonatomic, readwrite) int64_t used;

/** 靓号库槽位 */
@property(nonatomic, readwrite) int64_t num;

/** 用户名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *playerName;

/** 用户头像 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *playerIcon;

/** 用户Id */
@property(nonatomic, readwrite) int64_t playerId;

@end

#pragma mark - PB3BuyGoodNumSlotReq

/**
 * 购买靓号库位置
 **/
@interface PB3BuyGoodNumSlotReq : GPBMessage

@end

#pragma mark - PB3BuyGoodNumSlotRes

@interface PB3BuyGoodNumSlotRes : GPBMessage

@end

#pragma mark - PB3UseGoodNumReq

typedef GPB_ENUM(PB3UseGoodNumReq_FieldNumber) {
  PB3UseGoodNumReq_FieldNumber_Num = 1,
};

/**
 * 使用靓号
 **/
@interface PB3UseGoodNumReq : GPBMessage

@property(nonatomic, readwrite) int64_t num;

@end

#pragma mark - PB3UseGoodNumRes

@interface PB3UseGoodNumRes : GPBMessage

@end

#pragma mark - PB3DelGoodNumReq

typedef GPB_ENUM(PB3DelGoodNumReq_FieldNumber) {
  PB3DelGoodNumReq_FieldNumber_NumsArray = 1,
};

/**
 * 批量删除靓号
 **/
@interface PB3DelGoodNumReq : GPBMessage

/** 批量删除靓号 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *numsArray;
/** The number of items in @c numsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger numsArray_Count;

@end

#pragma mark - PB3DelGoodNumRes

@interface PB3DelGoodNumRes : GPBMessage

@end

#pragma mark - PB3DrawEventRewardBoxReq

typedef GPB_ENUM(PB3DrawEventRewardBoxReq_FieldNumber) {
  PB3DrawEventRewardBoxReq_FieldNumber_ActId = 1,
  PB3DrawEventRewardBoxReq_FieldNumber_RelActId = 2,
  PB3DrawEventRewardBoxReq_FieldNumber_RoomId = 3,
  PB3DrawEventRewardBoxReq_FieldNumber_BoxId = 4,
  PB3DrawEventRewardBoxReq_FieldNumber_BoxNum = 5,
};

/**
 * 开启事件宝箱
 **/
@interface PB3DrawEventRewardBoxReq : GPBMessage

/** 活动id */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动id */
@property(nonatomic, readwrite) int32_t relActId;

/** 房间id(废弃字段不用传) */
@property(nonatomic, readwrite) int64_t roomId;

/** 宝箱id */
@property(nonatomic, readwrite) int32_t boxId;

/** 宝箱数量 */
@property(nonatomic, readwrite) int32_t boxNum;

@end

#pragma mark - PB3EventBoxReward

typedef GPB_ENUM(PB3EventBoxReward_FieldNumber) {
  PB3EventBoxReward_FieldNumber_PrizeId = 1,
  PB3EventBoxReward_FieldNumber_Num = 2,
  PB3EventBoxReward_FieldNumber_Type = 3,
  PB3EventBoxReward_FieldNumber_Unit = 4,
  PB3EventBoxReward_FieldNumber_AwardId = 5,
};

@interface PB3EventBoxReward : GPBMessage

/** 物品id */
@property(nonatomic, readwrite) int32_t prizeId;

/** 奖励数量 */
@property(nonatomic, readwrite) int32_t num;

/** 奖励类型 */
@property(nonatomic, readwrite) int32_t type;

/** 单位 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *unit;

/** 自定义奖励ID，不是活动服奖励，可能该ID为0 */
@property(nonatomic, readwrite) int32_t awardId;

@end

#pragma mark - PB3DrawEventRewardBoxRes

typedef GPB_ENUM(PB3DrawEventRewardBoxRes_FieldNumber) {
  PB3DrawEventRewardBoxRes_FieldNumber_RewardListArray = 1,
  PB3DrawEventRewardBoxRes_FieldNumber_CurHitTimes = 2,
  PB3DrawEventRewardBoxRes_FieldNumber_MaxHitTimes = 3,
  PB3DrawEventRewardBoxRes_FieldNumber_MaxHitPlayerName = 4,
  PB3DrawEventRewardBoxRes_FieldNumber_IsNewRecord = 5,
  PB3DrawEventRewardBoxRes_FieldNumber_Desc = 6,
};

@interface PB3DrawEventRewardBoxRes : GPBMessage

/** 奖励列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3EventBoxReward*> *rewardListArray;
/** The number of items in @c rewardListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rewardListArray_Count;

/** 本次开奖点击次数 */
@property(nonatomic, readwrite) int32_t curHitTimes;

/** 本日最高点击次数 */
@property(nonatomic, readwrite) int32_t maxHitTimes;

/** 本日最高记录保持者 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *maxHitPlayerName;

/** 是否是新纪录 0否 1是新纪录 */
@property(nonatomic, readwrite) int32_t isNewRecord;

/** 提示文案 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *desc;

@end

#pragma mark - PB3TriggerEventRewardBoxReq

typedef GPB_ENUM(PB3TriggerEventRewardBoxReq_FieldNumber) {
  PB3TriggerEventRewardBoxReq_FieldNumber_ActId = 1,
  PB3TriggerEventRewardBoxReq_FieldNumber_RelActId = 2,
};

/**
 * 土豪引爆宝箱
 **/
@interface PB3TriggerEventRewardBoxReq : GPBMessage

/** 活动id */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动id */
@property(nonatomic, readwrite) int32_t relActId;

@end

#pragma mark - PB3TriggerEventRewardBoxRes

typedef GPB_ENUM(PB3TriggerEventRewardBoxRes_FieldNumber) {
  PB3TriggerEventRewardBoxRes_FieldNumber_RewardListArray = 1,
};

/**
 * 土豪引爆宝箱返回
 **/
@interface PB3TriggerEventRewardBoxRes : GPBMessage

/** 奖励列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3EventBoxReward*> *rewardListArray;
/** The number of items in @c rewardListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rewardListArray_Count;

@end

#pragma mark - PB3ConfServerLottery

typedef GPB_ENUM(PB3ConfServerLottery_FieldNumber) {
  PB3ConfServerLottery_FieldNumber_ActId = 1,
  PB3ConfServerLottery_FieldNumber_RelActId = 2,
  PB3ConfServerLottery_FieldNumber_LotteryIdListArray = 3,
  PB3ConfServerLottery_FieldNumber_LuckyPoint = 4,
  PB3ConfServerLottery_FieldNumber_AwardListArray = 5,
};

/**
 * 全服抽奖信息
 **/
@interface PB3ConfServerLottery : GPBMessage

@property(nonatomic, readwrite) int32_t actId;

@property(nonatomic, readwrite) int32_t relActId;

/** 抽奖id列表 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *lotteryIdListArray;
/** The number of items in @c lotteryIdListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger lotteryIdListArray_Count;

/** 配置的幸运值 */
@property(nonatomic, readwrite) int32_t luckyPoint;

/** 奖品列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3LotteryAward*> *awardListArray;
/** The number of items in @c awardListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger awardListArray_Count;

@end

#pragma mark - PB3OnTimeWelfareData

typedef GPB_ENUM(PB3OnTimeWelfareData_FieldNumber) {
  PB3OnTimeWelfareData_FieldNumber_ConfId = 1,
  PB3OnTimeWelfareData_FieldNumber_WelfareName = 2,
  PB3OnTimeWelfareData_FieldNumber_WelfareDes = 3,
  PB3OnTimeWelfareData_FieldNumber_RelateLotteryId = 4,
  PB3OnTimeWelfareData_FieldNumber_IosPicURL = 5,
  PB3OnTimeWelfareData_FieldNumber_AndroidPicURL = 6,
  PB3OnTimeWelfareData_FieldNumber_RouterURL = 7,
  PB3OnTimeWelfareData_FieldNumber_TimeColor = 8,
  PB3OnTimeWelfareData_FieldNumber_BeginTime = 9,
  PB3OnTimeWelfareData_FieldNumber_EndTime = 10,
  PB3OnTimeWelfareData_FieldNumber_IsShowWidget = 11,
  PB3OnTimeWelfareData_FieldNumber_ActId = 12,
  PB3OnTimeWelfareData_FieldNumber_RelActId = 13,
  PB3OnTimeWelfareData_FieldNumber_IsShowRouterURL = 14,
};

/**
 * 限时福利配置数据
 **/
@interface PB3OnTimeWelfareData : GPBMessage

/** 配置福利ID */
@property(nonatomic, readwrite) int64_t confId;

/** 福利昵称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *welfareName;

/** 福利描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *welfareDes;

/** 关联抽奖ID */
@property(nonatomic, readwrite) int32_t relateLotteryId;

/** ios背景图地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *iosPicURL;

/** android背景图地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *androidPicURL;

/** 跳转路由 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *routerURL;

/** 时间颜色 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeColor;

/** 开始时间 */
@property(nonatomic, readwrite) int32_t beginTime;

/** 结束时间 */
@property(nonatomic, readwrite) int32_t endTime;

/** 是否限时挂件 */
@property(nonatomic, readwrite) int32_t isShowWidget;

/** 活动ID */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动ID */
@property(nonatomic, readwrite) int32_t relActId;

/** 是否弹出路由 */
@property(nonatomic, readwrite) int32_t isShowRouterURL;

@end

#pragma mark - PB3FindOnTimeWelfareConfReq

typedef GPB_ENUM(PB3FindOnTimeWelfareConfReq_FieldNumber) {
  PB3FindOnTimeWelfareConfReq_FieldNumber_ConfId = 1,
};

/**
 * 获取限时福利配置
 **/
@interface PB3FindOnTimeWelfareConfReq : GPBMessage

/** 福利配置ID，传0时拉取当前正在进行的配置 */
@property(nonatomic, readwrite) int64_t confId;

@end

#pragma mark - PB3FindOnTimeWelfareConfRes

typedef GPB_ENUM(PB3FindOnTimeWelfareConfRes_FieldNumber) {
  PB3FindOnTimeWelfareConfRes_FieldNumber_ConfListArray = 1,
};

/**
 * 获取限时福利配置
 **/
@interface PB3FindOnTimeWelfareConfRes : GPBMessage

/** 限时福利 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3OnTimeWelfareData*> *confListArray;
/** The number of items in @c confListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confListArray_Count;

@end

#pragma mark - PB3OnTimeWelfareStart

typedef GPB_ENUM(PB3OnTimeWelfareStart_FieldNumber) {
  PB3OnTimeWelfareStart_FieldNumber_StartConf = 1,
};

/**
 * 定时在线福利开启推送 cmdId=101045
 **/
@interface PB3OnTimeWelfareStart : GPBMessage

/** 在线福利配置ID */
@property(nonatomic, readwrite, strong, null_resettable) PB3OnTimeWelfareData *startConf;
/** Test to see if @c startConf has been set. */
@property(nonatomic, readwrite) BOOL hasStartConf;

@end

#pragma mark - PB3PlayAnnualGameReq

typedef GPB_ENUM(PB3PlayAnnualGameReq_FieldNumber) {
  PB3PlayAnnualGameReq_FieldNumber_ActId = 1,
  PB3PlayAnnualGameReq_FieldNumber_RelActId = 2,
  PB3PlayAnnualGameReq_FieldNumber_BoxId = 3,
  PB3PlayAnnualGameReq_FieldNumber_HitTimes = 4,
  PB3PlayAnnualGameReq_FieldNumber_IsOver = 5,
};

/**
 * 周年金蟾小游戏点击请求
 **/
@interface PB3PlayAnnualGameReq : GPBMessage

/** 活动ID */
@property(nonatomic, readwrite) int32_t actId;

/** 子活动Id */
@property(nonatomic, readwrite) int32_t relActId;

/** 宝箱id */
@property(nonatomic, readwrite) int32_t boxId;

/** 点击次数 */
@property(nonatomic, readwrite) int32_t hitTimes;

/** 是否是最后一次点击 0不是 1是 */
@property(nonatomic, readwrite) int32_t isOver;

@end

#pragma mark - PB3PlayAnnualGameRes

/**
 * 周年金蟾小游戏点击返回
 **/
@interface PB3PlayAnnualGameRes : GPBMessage

@end

#pragma mark - PB3CardTask

typedef GPB_ENUM(PB3CardTask_FieldNumber) {
  PB3CardTask_FieldNumber_TaskId = 1,
  PB3CardTask_FieldNumber_TaskName = 2,
  PB3CardTask_FieldNumber_Progress = 3,
  PB3CardTask_FieldNumber_Total = 4,
};

@interface PB3CardTask : GPBMessage

/** 任务Id */
@property(nonatomic, readwrite) int32_t taskId;

/** 任务名称（5个字以内） */
@property(nonatomic, readwrite, copy, null_resettable) NSString *taskName;

/** 进度 */
@property(nonatomic, readwrite) int32_t progress;

/** 任务上限 */
@property(nonatomic, readwrite) int32_t total;

@end

#pragma mark - PB3ListCardTaskReq

typedef GPB_ENUM(PB3ListCardTaskReq_FieldNumber) {
  PB3ListCardTaskReq_FieldNumber_PlayerId = 1,
};

/**
 * 获取个人名片任务栏数据
 **/
@interface PB3ListCardTaskReq : GPBMessage

@property(nonatomic, readwrite) int64_t playerId;

@end

#pragma mark - PB3ListCardTaskRes

typedef GPB_ENUM(PB3ListCardTaskRes_FieldNumber) {
  PB3ListCardTaskRes_FieldNumber_TasksArray = 1,
  PB3ListCardTaskRes_FieldNumber_Score = 2,
  PB3ListCardTaskRes_FieldNumber_EntryURL = 3,
  PB3ListCardTaskRes_FieldNumber_IsShow = 4,
  PB3ListCardTaskRes_FieldNumber_Title = 5,
};

@interface PB3ListCardTaskRes : GPBMessage

/** 任务数据 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CardTask*> *tasksArray;
/** The number of items in @c tasksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tasksArray_Count;

/** 任务总积分 */
@property(nonatomic, readwrite) int64_t score;

/** 活动入口地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *entryURL;

/** 是否显示名片任务栏数据 */
@property(nonatomic, readwrite) BOOL isShow;

/** 顶部文案 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

@end

#pragma mark - PB3CpPlayerInfo

typedef GPB_ENUM(PB3CpPlayerInfo_FieldNumber) {
  PB3CpPlayerInfo_FieldNumber_Id_p = 1,
  PB3CpPlayerInfo_FieldNumber_Id2 = 2,
  PB3CpPlayerInfo_FieldNumber_Name = 3,
  PB3CpPlayerInfo_FieldNumber_Icon = 4,
};

@interface PB3CpPlayerInfo : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite) int64_t id2;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *icon;

@end

#pragma mark - PB3FindCpPublicNoticeReq

/**
 * 获取告白位数据
 **/
@interface PB3FindCpPublicNoticeReq : GPBMessage

@end

#pragma mark - PB3FindCpPublicNoticeRes

typedef GPB_ENUM(PB3FindCpPublicNoticeRes_FieldNumber) {
  PB3FindCpPublicNoticeRes_FieldNumber_PlayersArray = 1,
  PB3FindCpPublicNoticeRes_FieldNumber_Countdown = 2,
  PB3FindCpPublicNoticeRes_FieldNumber_CountdownColor = 3,
  PB3FindCpPublicNoticeRes_FieldNumber_BgURL = 4,
  PB3FindCpPublicNoticeRes_FieldNumber_PcBgURL = 5,
  PB3FindCpPublicNoticeRes_FieldNumber_Status = 6,
};

@interface PB3FindCpPublicNoticeRes : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PB3CpPlayerInfo*> *playersArray;
/** The number of items in @c playersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger playersArray_Count;

/** 倒计时结束的时间戳(秒) （虚位以待或者活动结束，countdown都为0） */
@property(nonatomic, readwrite) int64_t countdown;

/** 倒计时颜色值 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *countdownColor;

/** 背景资源 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bgURL;

/** PC背景资源 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pcBgURL;

/** 当前状态 1-有CP数据；2-虚位以待；3-活动结束不显示图标 */
@property(nonatomic, readwrite) enum PB3CpPublicNoticeStatus status;

@end

/**
 * Fetches the raw value of a @c PB3FindCpPublicNoticeRes's @c status property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PB3FindCpPublicNoticeRes_Status_RawValue(PB3FindCpPublicNoticeRes *message);
/**
 * Sets the raw value of an @c PB3FindCpPublicNoticeRes's @c status property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPB3FindCpPublicNoticeRes_Status_RawValue(PB3FindCpPublicNoticeRes *message, int32_t value);

#pragma mark - PB3CheckPromoterRecallUpdateReq

/**
 * 检查赏金任务是否有更新
 **/
@interface PB3CheckPromoterRecallUpdateReq : GPBMessage

@end

#pragma mark - PB3CheckPromoterRecallUpdateRes

typedef GPB_ENUM(PB3CheckPromoterRecallUpdateRes_FieldNumber) {
  PB3CheckPromoterRecallUpdateRes_FieldNumber_NewTaskNum = 1,
  PB3CheckPromoterRecallUpdateRes_FieldNumber_CurrentTaskNum = 2,
};

@interface PB3CheckPromoterRecallUpdateRes : GPBMessage

/** 新分配的任务数量 （不为0时，显示新任务数，否则显示正在进行任务数） */
@property(nonatomic, readwrite) int32_t newTaskNum;

/** 当前正在进行的任务数量 */
@property(nonatomic, readwrite) int32_t currentTaskNum;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
