// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/user.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/UserExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
#import "pb/BillExt.pbobjc.h"
#import "pb/SystemExt.pbobjc.h"
#import "pb/NobilityExt.pbobjc.h"
#import "pb/AcmConfExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3UserExtRoot

@implementation PB3UserExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3UserExtRoot_FileDescriptor

static GPBFileDescriptor *PB3UserExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3UserCode

GPBEnumDescriptor *PB3UserCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000ErrUserKeyExpired\000ErrUserBanAcco"
        "unt\000ErrUserBanIp\000ErrUserNameIllegal\000ErrU"
        "serRelogin\000ErrUserNameDuplicate\000ErrUserW"
        "rongArgs\000ErrUserFail\000ErrUserNotBindBand\000"
        "ErrUserBindMaliFail\000ErrUserNoRight\000ErrUs"
        "erPassword\000ErrUserBusy\000ErrUserBindIdCard"
        "\000ErrUserNotAgree\000ErrUserNameDirty\000ErrUse"
        "rPassLength\000ErrUserKickOutRoom\000ErrUserIn"
        "dexTop\000ErrUserOffline\000ErrUserPasswdLengt"
        "h\000ErrUserPasswdEqual\000ErrUserOriginPasswd"
        "\000ErrUserSmscode\000ErrUserBindPhone\000ErrUser"
        "LoginTimeout\000ErrUserNamePasswd\000ErrUser3R"
        "dError\000ErrUserBindPhoneRewardAgain\000ErrUs"
        "erBindPhoneNot\000ErrUserBindPhoneEquel\000Err"
        "UserBindPhoneErr\000ErrUserSamePhoneBind10\000"
        "ErrUserCertificationInput\000ErrUserCertifi"
        "cationCardNoErr\000ErrUserCertificationFull"
        "\000ErrUserCertificationBusy\000ErrUserCertifi"
        "cationCallback\000ErrUserCertificationFail\000"
        "ErrUserCertificationChangeGold\000ErrUserHa"
        "dCertified\000ErrUserCertifyUpdateUserInfo\000"
        "ErrUserCodeCertifyWord\000ErrUserUserName\000E"
        "rrUserBillSignature\000ErrUserBillFreeze\000Er"
        "rUserBillCheck\000ErrUserBillClose\000ErrUserB"
        "illNone\000ErrUserBillNoRight\000ErrUserBillFi"
        "leNotExist\000ErrUserNoCertify\000ErrUserSendS"
        "mscode\000ErrUserRecentVisitorOptLimit\000ErrU"
        "serDataAudit\000ErrUserBillSkillNotAuth\000Err"
        "UserNoBillSkill\000ErrUserNewPlayerBillNoAu"
        "th\000ErrUserBillSkillAlreadyAuth\000ErrUserBi"
        "llSkillChecking\000ErrUserBillSkillNotOpen\000"
        "ErrUserProtectionOfMinors\000ErrUserRemarkE"
        "xceed\000ErrUserWrongType\000ErrUserBindPhoneB"
        "yUmeng\000ErrUserBillProtectionOfMinors\000Err"
        "UserInfoChecking\000ErrUserChangeCoin\000";
    static const int32_t values[] = {
        PB3UserCode_Success,
        PB3UserCode_ErrUserKeyExpired,
        PB3UserCode_ErrUserBanAccount,
        PB3UserCode_ErrUserBanIp,
        PB3UserCode_ErrUserNameIllegal,
        PB3UserCode_ErrUserRelogin,
        PB3UserCode_ErrUserNameDuplicate,
        PB3UserCode_ErrUserWrongArgs,
        PB3UserCode_ErrUserFail,
        PB3UserCode_ErrUserNotBindBand,
        PB3UserCode_ErrUserBindMaliFail,
        PB3UserCode_ErrUserNoRight,
        PB3UserCode_ErrUserPassword,
        PB3UserCode_ErrUserBusy,
        PB3UserCode_ErrUserBindIdCard,
        PB3UserCode_ErrUserNotAgree,
        PB3UserCode_ErrUserNameDirty,
        PB3UserCode_ErrUserPassLength,
        PB3UserCode_ErrUserKickOutRoom,
        PB3UserCode_ErrUserIndexTop,
        PB3UserCode_ErrUserOffline,
        PB3UserCode_ErrUserPasswdLength,
        PB3UserCode_ErrUserPasswdEqual,
        PB3UserCode_ErrUserOriginPasswd,
        PB3UserCode_ErrUserSmscode,
        PB3UserCode_ErrUserBindPhone,
        PB3UserCode_ErrUserLoginTimeout,
        PB3UserCode_ErrUserNamePasswd,
        PB3UserCode_ErrUser3RdError,
        PB3UserCode_ErrUserBindPhoneRewardAgain,
        PB3UserCode_ErrUserBindPhoneNot,
        PB3UserCode_ErrUserBindPhoneEquel,
        PB3UserCode_ErrUserBindPhoneErr,
        PB3UserCode_ErrUserSamePhoneBind10,
        PB3UserCode_ErrUserCertificationInput,
        PB3UserCode_ErrUserCertificationCardNoErr,
        PB3UserCode_ErrUserCertificationFull,
        PB3UserCode_ErrUserCertificationBusy,
        PB3UserCode_ErrUserCertificationCallback,
        PB3UserCode_ErrUserCertificationFail,
        PB3UserCode_ErrUserCertificationChangeGold,
        PB3UserCode_ErrUserHadCertified,
        PB3UserCode_ErrUserCertifyUpdateUserInfo,
        PB3UserCode_ErrUserCodeCertifyWord,
        PB3UserCode_ErrUserUserName,
        PB3UserCode_ErrUserBillSignature,
        PB3UserCode_ErrUserBillFreeze,
        PB3UserCode_ErrUserBillCheck,
        PB3UserCode_ErrUserBillClose,
        PB3UserCode_ErrUserBillNone,
        PB3UserCode_ErrUserBillNoRight,
        PB3UserCode_ErrUserBillFileNotExist,
        PB3UserCode_ErrUserNoCertify,
        PB3UserCode_ErrUserSendSmscode,
        PB3UserCode_ErrUserRecentVisitorOptLimit,
        PB3UserCode_ErrUserDataAudit,
        PB3UserCode_ErrUserBillSkillNotAuth,
        PB3UserCode_ErrUserNoBillSkill,
        PB3UserCode_ErrUserNewPlayerBillNoAuth,
        PB3UserCode_ErrUserBillSkillAlreadyAuth,
        PB3UserCode_ErrUserBillSkillChecking,
        PB3UserCode_ErrUserBillSkillNotOpen,
        PB3UserCode_ErrUserProtectionOfMinors,
        PB3UserCode_ErrUserRemarkExceed,
        PB3UserCode_ErrUserWrongType,
        PB3UserCode_ErrUserBindPhoneByUmeng,
        PB3UserCode_ErrUserBillProtectionOfMinors,
        PB3UserCode_ErrUserInfoChecking,
        PB3UserCode_ErrUserChangeCoin,
    };
    static const char *extraTextFormatInfo = "D\001\021\000\002\021\000\003\014\000\004\022\000\005\016\000\006\024\000\007\020\000\010\013\000\t\022\000\n\023\000\013\016\000\014\017\000\r\013\000\016\021\000\017\017\000\020\020\000\021\021\000\022\022\000\023\017\000\024\016\000\025\023\000\026\022\000\027\023\000\030\010c\003\000\031\020\000\032\023\000\033\021\000\034\010\'\000\035\033\000\036\023\000\037\025\000 \023\000!\026\000\"\031\000#\035\000$\030\000%\030\000&\034\000\'\030\000(\036\000)\023\000*\034\000+\026\000,\017\000-\024\000.\021\000/\020\0000\020\0001\017\0002\022\0003\027\0004\020\0005\014c\003\0006\034\0007\020\0008\027\0009\022\000:\032\000;\033\000<\030\000=\027\000>\031\000?\023\000@\020\000A\027\000B\035\000C\023\000D\021\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserCode_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserCode_Success:
    case PB3UserCode_ErrUserKeyExpired:
    case PB3UserCode_ErrUserBanAccount:
    case PB3UserCode_ErrUserBanIp:
    case PB3UserCode_ErrUserNameIllegal:
    case PB3UserCode_ErrUserRelogin:
    case PB3UserCode_ErrUserNameDuplicate:
    case PB3UserCode_ErrUserWrongArgs:
    case PB3UserCode_ErrUserFail:
    case PB3UserCode_ErrUserNotBindBand:
    case PB3UserCode_ErrUserBindMaliFail:
    case PB3UserCode_ErrUserNoRight:
    case PB3UserCode_ErrUserPassword:
    case PB3UserCode_ErrUserBusy:
    case PB3UserCode_ErrUserBindIdCard:
    case PB3UserCode_ErrUserNotAgree:
    case PB3UserCode_ErrUserNameDirty:
    case PB3UserCode_ErrUserPassLength:
    case PB3UserCode_ErrUserKickOutRoom:
    case PB3UserCode_ErrUserIndexTop:
    case PB3UserCode_ErrUserOffline:
    case PB3UserCode_ErrUserPasswdLength:
    case PB3UserCode_ErrUserPasswdEqual:
    case PB3UserCode_ErrUserOriginPasswd:
    case PB3UserCode_ErrUserSmscode:
    case PB3UserCode_ErrUserBindPhone:
    case PB3UserCode_ErrUserLoginTimeout:
    case PB3UserCode_ErrUserNamePasswd:
    case PB3UserCode_ErrUser3RdError:
    case PB3UserCode_ErrUserBindPhoneRewardAgain:
    case PB3UserCode_ErrUserBindPhoneNot:
    case PB3UserCode_ErrUserBindPhoneEquel:
    case PB3UserCode_ErrUserBindPhoneErr:
    case PB3UserCode_ErrUserSamePhoneBind10:
    case PB3UserCode_ErrUserCertificationInput:
    case PB3UserCode_ErrUserCertificationCardNoErr:
    case PB3UserCode_ErrUserCertificationFull:
    case PB3UserCode_ErrUserCertificationBusy:
    case PB3UserCode_ErrUserCertificationCallback:
    case PB3UserCode_ErrUserCertificationFail:
    case PB3UserCode_ErrUserCertificationChangeGold:
    case PB3UserCode_ErrUserHadCertified:
    case PB3UserCode_ErrUserCertifyUpdateUserInfo:
    case PB3UserCode_ErrUserCodeCertifyWord:
    case PB3UserCode_ErrUserUserName:
    case PB3UserCode_ErrUserBillSignature:
    case PB3UserCode_ErrUserBillFreeze:
    case PB3UserCode_ErrUserBillCheck:
    case PB3UserCode_ErrUserBillClose:
    case PB3UserCode_ErrUserBillNone:
    case PB3UserCode_ErrUserBillNoRight:
    case PB3UserCode_ErrUserBillFileNotExist:
    case PB3UserCode_ErrUserNoCertify:
    case PB3UserCode_ErrUserSendSmscode:
    case PB3UserCode_ErrUserRecentVisitorOptLimit:
    case PB3UserCode_ErrUserDataAudit:
    case PB3UserCode_ErrUserBillSkillNotAuth:
    case PB3UserCode_ErrUserNoBillSkill:
    case PB3UserCode_ErrUserNewPlayerBillNoAuth:
    case PB3UserCode_ErrUserBillSkillAlreadyAuth:
    case PB3UserCode_ErrUserBillSkillChecking:
    case PB3UserCode_ErrUserBillSkillNotOpen:
    case PB3UserCode_ErrUserProtectionOfMinors:
    case PB3UserCode_ErrUserRemarkExceed:
    case PB3UserCode_ErrUserWrongType:
    case PB3UserCode_ErrUserBindPhoneByUmeng:
    case PB3UserCode_ErrUserBillProtectionOfMinors:
    case PB3UserCode_ErrUserInfoChecking:
    case PB3UserCode_ErrUserChangeCoin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UserCmdId

GPBEnumDescriptor *PB3UserCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UcZero\000UcUpdatePlayerName\000UcCharmLevel\000U"
        "cWealthLevel\000UcUserBan\000UcPlayerFlags\000UcU"
        "pdateIcon\000UcUpdateOnOff\000UcSetShortId\000UcS"
        "earchPlayer\000UcIsChargeToday\000UcVersionCon"
        "tent\000UcCountdownStart\000UcAuditDetail\000UcFl"
        "owerLevel\000UcPlayerFlagsKv\000UcAntiAddictio"
        "n\000UcOfficialAuth\000UcBillPlayerStatus\000UcDe"
        "lProfileVoice\000UcLeaveMessage\000UcBlackWhal"
        "e\000UcIntimateFansCardInfo\000UcWhaleBossList"
        "\000UcWhaleBossStatus\000UcSettingOnOffChange\000"
        "UcImGenerationWindows\000UcBroadcastJoinInt"
        "imateFansV2\000UcBroadcastIntimateFansExp\000U"
        "cBroadcastNeteaseToken\000";
    static const int32_t values[] = {
        PB3UserCmdId_UcZero,
        PB3UserCmdId_UcUpdatePlayerName,
        PB3UserCmdId_UcCharmLevel,
        PB3UserCmdId_UcWealthLevel,
        PB3UserCmdId_UcUserBan,
        PB3UserCmdId_UcPlayerFlags,
        PB3UserCmdId_UcUpdateIcon,
        PB3UserCmdId_UcUpdateOnOff,
        PB3UserCmdId_UcSetShortId,
        PB3UserCmdId_UcSearchPlayer,
        PB3UserCmdId_UcIsChargeToday,
        PB3UserCmdId_UcVersionContent,
        PB3UserCmdId_UcCountdownStart,
        PB3UserCmdId_UcAuditDetail,
        PB3UserCmdId_UcFlowerLevel,
        PB3UserCmdId_UcPlayerFlagsKv,
        PB3UserCmdId_UcAntiAddiction,
        PB3UserCmdId_UcOfficialAuth,
        PB3UserCmdId_UcBillPlayerStatus,
        PB3UserCmdId_UcDelProfileVoice,
        PB3UserCmdId_UcLeaveMessage,
        PB3UserCmdId_UcBlackWhale,
        PB3UserCmdId_UcIntimateFansCardInfo,
        PB3UserCmdId_UcWhaleBossList,
        PB3UserCmdId_UcWhaleBossStatus,
        PB3UserCmdId_UcSettingOnOffChange,
        PB3UserCmdId_UcImGenerationWindows,
        PB3UserCmdId_UcBroadcastJoinIntimateFansV2,
        PB3UserCmdId_UcBroadcastIntimateFansExp,
        PB3UserCmdId_UcBroadcastNeteaseToken,
    };
    static const char *extraTextFormatInfo = "\036\000b\204\000\001b\220\000\002b\212\000\003b\213\000\004b\207\000\005b\213\000\006b\212\000\007b\213\000\010b\212\000\tb\214\000\nb\215\000\013b\216\000\014b\216\000\rb\213\000\016b\213\000\017b\214A\000\020b\215\000\021b\214\000\022b\220\000\023b\217\000\024b\214\000\025b\212\000\026b\224\000\027b\215\000\030b\217\000\031b\222\000\032b\223\000\033b\233\000\034b\230\000\035b\225\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserCmdId_UcZero:
    case PB3UserCmdId_UcUpdatePlayerName:
    case PB3UserCmdId_UcCharmLevel:
    case PB3UserCmdId_UcWealthLevel:
    case PB3UserCmdId_UcUserBan:
    case PB3UserCmdId_UcPlayerFlags:
    case PB3UserCmdId_UcUpdateIcon:
    case PB3UserCmdId_UcUpdateOnOff:
    case PB3UserCmdId_UcSetShortId:
    case PB3UserCmdId_UcSearchPlayer:
    case PB3UserCmdId_UcIsChargeToday:
    case PB3UserCmdId_UcVersionContent:
    case PB3UserCmdId_UcCountdownStart:
    case PB3UserCmdId_UcAuditDetail:
    case PB3UserCmdId_UcFlowerLevel:
    case PB3UserCmdId_UcPlayerFlagsKv:
    case PB3UserCmdId_UcAntiAddiction:
    case PB3UserCmdId_UcOfficialAuth:
    case PB3UserCmdId_UcBillPlayerStatus:
    case PB3UserCmdId_UcDelProfileVoice:
    case PB3UserCmdId_UcLeaveMessage:
    case PB3UserCmdId_UcBlackWhale:
    case PB3UserCmdId_UcIntimateFansCardInfo:
    case PB3UserCmdId_UcWhaleBossList:
    case PB3UserCmdId_UcWhaleBossStatus:
    case PB3UserCmdId_UcSettingOnOffChange:
    case PB3UserCmdId_UcImGenerationWindows:
    case PB3UserCmdId_UcBroadcastJoinIntimateFansV2:
    case PB3UserCmdId_UcBroadcastIntimateFansExp:
    case PB3UserCmdId_UcBroadcastNeteaseToken:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AntiAddictionAlertType

GPBEnumDescriptor *PB3AntiAddictionAlertType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AntiAddictionAlertTypeNone\000AntiAddiction"
        "AlertTypePrompt\000AntiAddictionAlertTypeEn"
        "force\000AntiAddictionAlertTypeClose\000";
    static const int32_t values[] = {
        PB3AntiAddictionAlertType_AntiAddictionAlertTypeNone,
        PB3AntiAddictionAlertType_AntiAddictionAlertTypePrompt,
        PB3AntiAddictionAlertType_AntiAddictionAlertTypeEnforce,
        PB3AntiAddictionAlertType_AntiAddictionAlertTypeClose,
    };
    static const char *extraTextFormatInfo = "\004\000\026\204\000\001\026\206\000\002\026\207\000\003\026\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AntiAddictionAlertType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AntiAddictionAlertType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AntiAddictionAlertType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AntiAddictionAlertType_AntiAddictionAlertTypeNone:
    case PB3AntiAddictionAlertType_AntiAddictionAlertTypePrompt:
    case PB3AntiAddictionAlertType_AntiAddictionAlertTypeEnforce:
    case PB3AntiAddictionAlertType_AntiAddictionAlertTypeClose:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UserBindPhoneOpType

GPBEnumDescriptor *PB3UserBindPhoneOpType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UcphoneOpTypeSendCode\000UcphoneOpTypeConfi"
        "rmCode\000UcphoneOpTypeOldSendCode\000UcphoneO"
        "pTypeOldConfirmCode\000UcphoneOpTypeNewSend"
        "Code\000UcphoneOpTypeNewConfirmCode\000";
    static const int32_t values[] = {
        PB3UserBindPhoneOpType_UcphoneOpTypeSendCode,
        PB3UserBindPhoneOpType_UcphoneOpTypeConfirmCode,
        PB3UserBindPhoneOpType_UcphoneOpTypeOldSendCode,
        PB3UserBindPhoneOpType_UcphoneOpTypeOldConfirmCode,
        PB3UserBindPhoneOpType_UcphoneOpTypeNewSendCode,
        PB3UserBindPhoneOpType_UcphoneOpTypeNewConfirmCode,
    };
    static const char *extraTextFormatInfo = "\006\000c\n\210\000\001c\n\213\000\002c\n\213\000\003c\n\216\000\004c\n\213\000\005c\n\216\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserBindPhoneOpType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserBindPhoneOpType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserBindPhoneOpType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserBindPhoneOpType_UcphoneOpTypeSendCode:
    case PB3UserBindPhoneOpType_UcphoneOpTypeConfirmCode:
    case PB3UserBindPhoneOpType_UcphoneOpTypeOldSendCode:
    case PB3UserBindPhoneOpType_UcphoneOpTypeOldConfirmCode:
    case PB3UserBindPhoneOpType_UcphoneOpTypeNewSendCode:
    case PB3UserBindPhoneOpType_UcphoneOpTypeNewConfirmCode:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UserBindPhoneItemType

GPBEnumDescriptor *PB3UserBindPhoneItemType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UcphoneItemTypeGift\000UcphoneItemTypeGold\000";
    static const int32_t values[] = {
        PB3UserBindPhoneItemType_UcphoneItemTypeGift,
        PB3UserBindPhoneItemType_UcphoneItemTypeGold,
    };
    static const char *extraTextFormatInfo = "\002\000c\014\204\000\001c\014\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserBindPhoneItemType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserBindPhoneItemType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserBindPhoneItemType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserBindPhoneItemType_UcphoneItemTypeGift:
    case PB3UserBindPhoneItemType_UcphoneItemTypeGold:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3UserMailType

GPBEnumDescriptor *PB3UserMailType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UserMailNone\000UserMailSystem\000UserMailActi"
        "vity\000";
    static const int32_t values[] = {
        PB3UserMailType_UserMailNone,
        PB3UserMailType_UserMailSystem,
        PB3UserMailType_UserMailActivity,
    };
    static const char *extraTextFormatInfo = "\003\000\010\204\000\001\010\206\000\002\010\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3UserMailType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3UserMailType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3UserMailType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3UserMailType_UserMailNone:
    case PB3UserMailType_UserMailSystem:
    case PB3UserMailType_UserMailActivity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3BanType

GPBEnumDescriptor *PB3BanType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BtZero\000BtAccount\000BtSpeak\000BtRoom\000BtIp\000BtD"
        "evice\000BtTakeLeave\000BtWarning\000BtTop\000BtBroa"
        "dcastFriend\000BtTickoutRoom\000BtBanPhone\000BtB"
        "anIdcard\000BtBanPm\000BtCommunityPublish\000BtCo"
        "mmunityComment\000BtBanModify\000BtForceLogout"
        "\000BtBanVideo\000BtBanWithdrawal\000BtBanStrange"
        "rPm\000BtBanStrangerLevel5Pm\000BtBanRoomVoice"
        "\000BtBanLeaveChair\000BtBanSilence\000BtBanCpCha"
        "t\000BtBanLeaveChairSpecifyRoom\000BtBanFocus\000"
        "BtBanImSelf\000";
    static const int32_t values[] = {
        PB3BanType_BtZero,
        PB3BanType_BtAccount,
        PB3BanType_BtSpeak,
        PB3BanType_BtRoom,
        PB3BanType_BtIp,
        PB3BanType_BtDevice,
        PB3BanType_BtTakeLeave,
        PB3BanType_BtWarning,
        PB3BanType_BtTop,
        PB3BanType_BtBroadcastFriend,
        PB3BanType_BtTickoutRoom,
        PB3BanType_BtBanPhone,
        PB3BanType_BtBanIdcard,
        PB3BanType_BtBanPm,
        PB3BanType_BtCommunityPublish,
        PB3BanType_BtCommunityComment,
        PB3BanType_BtBanModify,
        PB3BanType_BtForceLogout,
        PB3BanType_BtBanVideo,
        PB3BanType_BtBanWithdrawal,
        PB3BanType_BtBanStrangerPm,
        PB3BanType_BtBanStrangerLevel5Pm,
        PB3BanType_BtBanRoomVoice,
        PB3BanType_BtBanLeaveChair,
        PB3BanType_BtBanSilence,
        PB3BanType_BtBanCpChat,
        PB3BanType_BtBanLeaveChairSpecifyRoom,
        PB3BanType_BtBanFocus,
        PB3BanType_BtBanImSelf,
    };
    static const char *extraTextFormatInfo = "\016\000b\204\000\001b\207\000\002b\205\000\003b\204\000\005b\206\000\006b\211\000\007b\207\000\010b\203\000\tb\217\000\nb\247\244\000\016b\220\000\017b\220\000\020b\343\206\000\021b\213\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3BanType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3BanType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3BanType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3BanType_BtZero:
    case PB3BanType_BtAccount:
    case PB3BanType_BtSpeak:
    case PB3BanType_BtRoom:
    case PB3BanType_BtIp:
    case PB3BanType_BtDevice:
    case PB3BanType_BtTakeLeave:
    case PB3BanType_BtWarning:
    case PB3BanType_BtTop:
    case PB3BanType_BtBroadcastFriend:
    case PB3BanType_BtTickoutRoom:
    case PB3BanType_BtBanPhone:
    case PB3BanType_BtBanIdcard:
    case PB3BanType_BtBanPm:
    case PB3BanType_BtCommunityPublish:
    case PB3BanType_BtCommunityComment:
    case PB3BanType_BtBanModify:
    case PB3BanType_BtForceLogout:
    case PB3BanType_BtBanVideo:
    case PB3BanType_BtBanWithdrawal:
    case PB3BanType_BtBanStrangerPm:
    case PB3BanType_BtBanStrangerLevel5Pm:
    case PB3BanType_BtBanRoomVoice:
    case PB3BanType_BtBanLeaveChair:
    case PB3BanType_BtBanSilence:
    case PB3BanType_BtBanCpChat:
    case PB3BanType_BtBanLeaveChairSpecifyRoom:
    case PB3BanType_BtBanFocus:
    case PB3BanType_BtBanImSelf:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RegisterType

GPBEnumDescriptor *PB3RegisterType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Rtzero\000RtWeixin\000RtQq\000RtPhone\000";
    static const int32_t values[] = {
        PB3RegisterType_Rtzero,
        PB3RegisterType_RtWeixin,
        PB3RegisterType_RtQq,
        PB3RegisterType_RtPhone,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RegisterType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RegisterType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RegisterType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RegisterType_Rtzero:
    case PB3RegisterType_RtWeixin:
    case PB3RegisterType_RtQq:
    case PB3RegisterType_RtPhone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RequestSourceType

GPBEnumDescriptor *PB3RequestSourceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RstZero\000RstIm\000RstPk\000";
    static const int32_t values[] = {
        PB3RequestSourceType_RstZero,
        PB3RequestSourceType_RstIm,
        PB3RequestSourceType_RstPk,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RequestSourceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RequestSourceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RequestSourceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RequestSourceType_RstZero:
    case PB3RequestSourceType_RstIm:
    case PB3RequestSourceType_RstPk:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SourceType

GPBEnumDescriptor *PB3SourceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StModify\000StRegister\000";
    static const int32_t values[] = {
        PB3SourceType_StModify,
        PB3SourceType_StRegister,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SourceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SourceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SourceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SourceType_StModify:
    case PB3SourceType_StRegister:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AccountChannelType

GPBEnumDescriptor *PB3AccountChannelType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ActZero\000ActPhone\000ActQq\000ActWechat\000ActAppl"
        "eId\000ActSubsidiary\000";
    static const int32_t values[] = {
        PB3AccountChannelType_ActZero,
        PB3AccountChannelType_ActPhone,
        PB3AccountChannelType_ActQq,
        PB3AccountChannelType_ActWechat,
        PB3AccountChannelType_ActAppleId,
        PB3AccountChannelType_ActSubsidiary,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AccountChannelType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AccountChannelType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AccountChannelType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AccountChannelType_ActZero:
    case PB3AccountChannelType_ActPhone:
    case PB3AccountChannelType_ActQq:
    case PB3AccountChannelType_ActWechat:
    case PB3AccountChannelType_ActAppleId:
    case PB3AccountChannelType_ActSubsidiary:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChongZhiType

GPBEnumDescriptor *PB3ChongZhiType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChongZhiTypeZero\000ChongZhiTypeWeixin\000Chon"
        "gZhiTypeZhifubao\000ChongZhiTypeUnion\000Chong"
        "ZhiTypeHalfWeixin\000ChongZhiTypeHalfZhifub"
        "ao\000ChongZhiTypePcZhifubao\000ChongZhiTypePc"
        "Weixin\000ChongzhiTypeInnerZhifubao\000Chongzh"
        "iTypeInnerWeixin\000";
    static const int32_t values[] = {
        PB3ChongZhiType_ChongZhiTypeZero,
        PB3ChongZhiType_ChongZhiTypeWeixin,
        PB3ChongZhiType_ChongZhiTypeZhifubao,
        PB3ChongZhiType_ChongZhiTypeUnion,
        PB3ChongZhiType_ChongZhiTypeHalfWeixin,
        PB3ChongZhiType_ChongZhiTypeHalfZhifubao,
        PB3ChongZhiType_ChongZhiTypePcZhifubao,
        PB3ChongZhiType_ChongZhiTypePcWeixin,
        PB3ChongZhiType_ChongzhiTypeInnerZhifubao,
        PB3ChongZhiType_ChongzhiTypeInnerWeixin,
    };
    static const char *extraTextFormatInfo = "\n\000\014\204\000\001\014\206\000\002\014\210\000\003\014\205\000\004\014\212\000\005\014\214\000\006\014\212\000\007\014\210\000\010\014\215\000\t\014\213\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChongZhiType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChongZhiType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChongZhiType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChongZhiType_ChongZhiTypeZero:
    case PB3ChongZhiType_ChongZhiTypeWeixin:
    case PB3ChongZhiType_ChongZhiTypeZhifubao:
    case PB3ChongZhiType_ChongZhiTypeUnion:
    case PB3ChongZhiType_ChongZhiTypeHalfWeixin:
    case PB3ChongZhiType_ChongZhiTypeHalfZhifubao:
    case PB3ChongZhiType_ChongZhiTypePcZhifubao:
    case PB3ChongZhiType_ChongZhiTypePcWeixin:
    case PB3ChongZhiType_ChongzhiTypeInnerZhifubao:
    case PB3ChongZhiType_ChongzhiTypeInnerWeixin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChargeBonusType

GPBEnumDescriptor *PB3ChargeBonusType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CbtNone\000CbtAliPay\000";
    static const int32_t values[] = {
        PB3ChargeBonusType_CbtNone,
        PB3ChargeBonusType_CbtAliPay,
    };
    static const char *extraTextFormatInfo = "\002\000c\204\000\001c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChargeBonusType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChargeBonusType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChargeBonusType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChargeBonusType_CbtNone:
    case PB3ChargeBonusType_CbtAliPay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ChongZhiPlayerType

GPBEnumDescriptor *PB3ChongZhiPlayerType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChongZhiPlayerTypeAll\000ChongZhiPlayerType"
        "NotCps\000ChongZhiPlayerTypeCps\000ChongZhiPla"
        "yerTypeWhiteList\000";
    static const int32_t values[] = {
        PB3ChongZhiPlayerType_ChongZhiPlayerTypeAll,
        PB3ChongZhiPlayerType_ChongZhiPlayerTypeNotCps,
        PB3ChongZhiPlayerType_ChongZhiPlayerTypeCps,
        PB3ChongZhiPlayerType_ChongZhiPlayerTypeWhiteList,
    };
    static const char *extraTextFormatInfo = "\004\000\022\203\000\001\022\203\343\000\002\022\343\000\003\022\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ChongZhiPlayerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ChongZhiPlayerType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ChongZhiPlayerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ChongZhiPlayerType_ChongZhiPlayerTypeAll:
    case PB3ChongZhiPlayerType_ChongZhiPlayerTypeNotCps:
    case PB3ChongZhiPlayerType_ChongZhiPlayerTypeCps:
    case PB3ChongZhiPlayerType_ChongZhiPlayerTypeWhiteList:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SmsCode

GPBEnumDescriptor *PB3SmsCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SmsOk\000SmsError\000";
    static const int32_t values[] = {
        PB3SmsCode_SmsOk,
        PB3SmsCode_SmsError,
    };
    static const char *extraTextFormatInfo = "\001\001c\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SmsCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SmsCode_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SmsCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SmsCode_SmsOk:
    case PB3SmsCode_SmsError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RiskType

GPBEnumDescriptor *PB3RiskType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtZero\000RtWarn\000RtRisk\000";
    static const int32_t values[] = {
        PB3RiskType_RtZero,
        PB3RiskType_RtWarn,
        PB3RiskType_RtRisk,
    };
    static const char *extraTextFormatInfo = "\003\000b\204\000\001b\204\000\002b\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RiskType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RiskType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RiskType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RiskType_RtZero:
    case PB3RiskType_RtWarn:
    case PB3RiskType_RtRisk:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PrivacyType

GPBEnumDescriptor *PB3PrivacyType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PrivacyZero\000Incognito\000ShowRecentVisit\000Re"
        "cPushMsg\000HideRoom\000ShowPosition\000ShowAllTr"
        "ends\000UpdateTrendNotice\000OnlineNotice\000Push"
        "TrendLike\000PushTrendComment\000PushTrendAt\000P"
        "ushTrendNoticeNew\000PushNewFans\000PushStrang"
        "erMsg\000PushImpresentGift\000RecImpresentGift"
        "\000ImquickChatContent\000RoomQuickChatContent"
        "\000RoomRankNotFlower\000PersonalizationSwitch"
        "\000";
    static const int32_t values[] = {
        PB3PrivacyType_PrivacyZero,
        PB3PrivacyType_Incognito,
        PB3PrivacyType_ShowRecentVisit,
        PB3PrivacyType_RecPushMsg,
        PB3PrivacyType_HideRoom,
        PB3PrivacyType_ShowPosition,
        PB3PrivacyType_ShowAllTrends,
        PB3PrivacyType_UpdateTrendNotice,
        PB3PrivacyType_OnlineNotice,
        PB3PrivacyType_PushTrendLike,
        PB3PrivacyType_PushTrendComment,
        PB3PrivacyType_PushTrendAt,
        PB3PrivacyType_PushTrendNoticeNew,
        PB3PrivacyType_PushNewFans,
        PB3PrivacyType_PushStrangerMsg,
        PB3PrivacyType_PushImpresentGift,
        PB3PrivacyType_RecImpresentGift,
        PB3PrivacyType_ImquickChatContent,
        PB3PrivacyType_RoomQuickChatContent,
        PB3PrivacyType_RoomRankNotFlower,
        PB3PrivacyType_PersonalizationSwitch,
    };
    static const char *extraTextFormatInfo = "\025\000\013\000\001\t\000\002\017\000\003\n\000\004\010\000\005\014\000\006\r\000\007\021\000\010\014\000\t\r\000\n\020\000\013\013\000\014\022\000\r\013\000\016\017\000\017\005b\n\000\020\004b\n\000\021c\017\000\022\024\000\023\021\000\024\025\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PrivacyType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PrivacyType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PrivacyType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PrivacyType_PrivacyZero:
    case PB3PrivacyType_Incognito:
    case PB3PrivacyType_ShowRecentVisit:
    case PB3PrivacyType_RecPushMsg:
    case PB3PrivacyType_HideRoom:
    case PB3PrivacyType_ShowPosition:
    case PB3PrivacyType_ShowAllTrends:
    case PB3PrivacyType_UpdateTrendNotice:
    case PB3PrivacyType_OnlineNotice:
    case PB3PrivacyType_PushTrendLike:
    case PB3PrivacyType_PushTrendComment:
    case PB3PrivacyType_PushTrendAt:
    case PB3PrivacyType_PushTrendNoticeNew:
    case PB3PrivacyType_PushNewFans:
    case PB3PrivacyType_PushStrangerMsg:
    case PB3PrivacyType_PushImpresentGift:
    case PB3PrivacyType_RecImpresentGift:
    case PB3PrivacyType_ImquickChatContent:
    case PB3PrivacyType_RoomQuickChatContent:
    case PB3PrivacyType_RoomRankNotFlower:
    case PB3PrivacyType_PersonalizationSwitch:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CertifySourceState

GPBEnumDescriptor *PB3CertifySourceState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CssNone\000CssNotUpload\000CssAuditing\000CssRefu"
        "se\000CssPass\000CssReAuditing\000";
    static const int32_t values[] = {
        PB3CertifySourceState_CssNone,
        PB3CertifySourceState_CssNotUpload,
        PB3CertifySourceState_CssAuditing,
        PB3CertifySourceState_CssRefuse,
        PB3CertifySourceState_CssPass,
        PB3CertifySourceState_CssReAuditing,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CertifySourceState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CertifySourceState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CertifySourceState_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CertifySourceState_CssNone:
    case PB3CertifySourceState_CssNotUpload:
    case PB3CertifySourceState_CssAuditing:
    case PB3CertifySourceState_CssRefuse:
    case PB3CertifySourceState_CssPass:
    case PB3CertifySourceState_CssReAuditing:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ClearMsgRedType

GPBEnumDescriptor *PB3ClearMsgRedType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CmrtypeNone\000CmrtypeAll\000CmrtypeBillVisit\000";
    static const int32_t values[] = {
        PB3ClearMsgRedType_CmrtypeNone,
        PB3ClearMsgRedType_CmrtypeAll,
        PB3ClearMsgRedType_CmrtypeBillVisit,
    };
    static const char *extraTextFormatInfo = "\003\000d\003\204\000\001d\003\343\000\002d\003\211\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ClearMsgRedType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ClearMsgRedType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ClearMsgRedType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ClearMsgRedType_CmrtypeNone:
    case PB3ClearMsgRedType_CmrtypeAll:
    case PB3ClearMsgRedType_CmrtypeBillVisit:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WeChatLogin

GPBEnumDescriptor *PB3WeChatLogin_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WxLoginZero\000WxLoginPhone\000WxLoginIdPsw\000";
    static const int32_t values[] = {
        PB3WeChatLogin_WxLoginZero,
        PB3WeChatLogin_WxLoginPhone,
        PB3WeChatLogin_WxLoginIdPsw,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WeChatLogin)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WeChatLogin_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WeChatLogin_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WeChatLogin_WxLoginZero:
    case PB3WeChatLogin_WxLoginPhone:
    case PB3WeChatLogin_WxLoginIdPsw:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3AuthGainType

GPBEnumDescriptor *PB3AuthGainType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AuthGainGuild\000AuthGainOffical\000AuthGainLe"
        "velUp\000";
    static const int32_t values[] = {
        PB3AuthGainType_AuthGainGuild,
        PB3AuthGainType_AuthGainOffical,
        PB3AuthGainType_AuthGainLevelUp,
    };
    static const char *extraTextFormatInfo = "\003\000\r\000\001\017\000\002\017\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3AuthGainType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3AuthGainType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3AuthGainType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3AuthGainType_AuthGainGuild:
    case PB3AuthGainType_AuthGainOffical:
    case PB3AuthGainType_AuthGainLevelUp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CheckType

GPBEnumDescriptor *PB3CheckType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CheckNone\000CheckChangePwd\000CheckBindPhone\000"
        "CheckChangeExchangePwd\000";
    static const int32_t values[] = {
        PB3CheckType_CheckNone,
        PB3CheckType_CheckChangePwd,
        PB3CheckType_CheckBindPhone,
        PB3CheckType_CheckChangeExchangePwd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CheckType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CheckType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CheckType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CheckType_CheckNone:
    case PB3CheckType_CheckChangePwd:
    case PB3CheckType_CheckBindPhone:
    case PB3CheckType_CheckChangeExchangePwd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LeaveMessageType

GPBEnumDescriptor *PB3LeaveMessageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LmtNone\000LmtOwner\000LmtOther\000";
    static const int32_t values[] = {
        PB3LeaveMessageType_LmtNone,
        PB3LeaveMessageType_LmtOwner,
        PB3LeaveMessageType_LmtOther,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LeaveMessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LeaveMessageType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LeaveMessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LeaveMessageType_LmtNone:
    case PB3LeaveMessageType_LmtOwner:
    case PB3LeaveMessageType_LmtOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IntimateFansDayConf

GPBEnumDescriptor *PB3IntimateFansDayConf_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IntimateFansNone\000IntimateFansDay\000Intimat"
        "eFansMonth\000IntimateFansYear\000";
    static const int32_t values[] = {
        PB3IntimateFansDayConf_IntimateFansNone,
        PB3IntimateFansDayConf_IntimateFansDay,
        PB3IntimateFansDayConf_IntimateFansMonth,
        PB3IntimateFansDayConf_IntimateFansYear,
    };
    static const char *extraTextFormatInfo = "\004\000\010\204\204\000\001\010\204\203\000\002\010\204\205\000\003\010\204\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IntimateFansDayConf)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IntimateFansDayConf_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IntimateFansDayConf_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IntimateFansDayConf_IntimateFansNone:
    case PB3IntimateFansDayConf_IntimateFansDay:
    case PB3IntimateFansDayConf_IntimateFansMonth:
    case PB3IntimateFansDayConf_IntimateFansYear:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PushIntimateFansCardInfoType

GPBEnumDescriptor *PB3PushIntimateFansCardInfoType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PifcitUpd\000PifcitAdd\000PifcitDel\000PifcitLev\000"
        "PifcitCard\000";
    static const int32_t values[] = {
        PB3PushIntimateFansCardInfoType_PifcitUpd,
        PB3PushIntimateFansCardInfoType_PifcitAdd,
        PB3PushIntimateFansCardInfoType_PifcitDel,
        PB3PushIntimateFansCardInfoType_PifcitLev,
        PB3PushIntimateFansCardInfoType_PifcitCard,
    };
    static const char *extraTextFormatInfo = "\005\000f\203\000\001f\203\000\002f\203\000\003f\203\000\004f\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PushIntimateFansCardInfoType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PushIntimateFansCardInfoType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PushIntimateFansCardInfoType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PushIntimateFansCardInfoType_PifcitUpd:
    case PB3PushIntimateFansCardInfoType_PifcitAdd:
    case PB3PushIntimateFansCardInfoType_PifcitDel:
    case PB3PushIntimateFansCardInfoType_PifcitLev:
    case PB3PushIntimateFansCardInfoType_PifcitCard:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IntimateFansHostViewType

GPBEnumDescriptor *PB3IntimateFansHostViewType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IfhvtHostView\000IfhvtFansView\000";
    static const int32_t values[] = {
        PB3IntimateFansHostViewType_IfhvtHostView,
        PB3IntimateFansHostViewType_IfhvtFansView,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IntimateFansHostViewType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IntimateFansHostViewType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IntimateFansHostViewType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IntimateFansHostViewType_IfhvtHostView:
    case PB3IntimateFansHostViewType_IfhvtFansView:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SettingType

GPBEnumDescriptor *PB3SettingType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SonofftZero\000SonofftMessage\000SonofftImGift"
        "\000";
    static const int32_t values[] = {
        PB3SettingType_SonofftZero,
        PB3SettingType_SonofftMessage,
        PB3SettingType_SonofftImGift,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SettingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SettingType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SettingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SettingType_SonofftZero:
    case PB3SettingType_SonofftMessage:
    case PB3SettingType_SonofftImGift:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ParentCollectionBillType

GPBEnumDescriptor *PB3ParentCollectionBillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PcbtNone\000PcbtPersonBasicInfo\000PcbtPersonI"
        "dentifyInfo\000PcbtPersonNetInfo\000PcbtPerson"
        "VirtualAsset\000PcbtPersonUsageInfo\000PcbtPer"
        "sonDeviceInfo\000";
    static const int32_t values[] = {
        PB3ParentCollectionBillType_PcbtNone,
        PB3ParentCollectionBillType_PcbtPersonBasicInfo,
        PB3ParentCollectionBillType_PcbtPersonIdentifyInfo,
        PB3ParentCollectionBillType_PcbtPersonNetInfo,
        PB3ParentCollectionBillType_PcbtPersonVirtualAsset,
        PB3ParentCollectionBillType_PcbtPersonUsageInfo,
        PB3ParentCollectionBillType_PcbtPersonDeviceInfo,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ParentCollectionBillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ParentCollectionBillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ParentCollectionBillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ParentCollectionBillType_PcbtNone:
    case PB3ParentCollectionBillType_PcbtPersonBasicInfo:
    case PB3ParentCollectionBillType_PcbtPersonIdentifyInfo:
    case PB3ParentCollectionBillType_PcbtPersonNetInfo:
    case PB3ParentCollectionBillType_PcbtPersonVirtualAsset:
    case PB3ParentCollectionBillType_PcbtPersonUsageInfo:
    case PB3ParentCollectionBillType_PcbtPersonDeviceInfo:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SubCollectionBillType

GPBEnumDescriptor *PB3SubCollectionBillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ScbtNone\000ScbtRealName\000ScbtPhone\000ScbtCard"
        "Id\000ScbtFaceId\000ScbtThinking\000ScbtPicture\000S"
        "cbtPassword\000ScbtTeenagerPassword\000ScbtIpA"
        "ddr\000ScbtAccountStatus\000ScbtAccountBan\000Scb"
        "tDeviceInfo\000ScbtOsVersion\000ScbtSoftVersio"
        "n\000ScbtIosAdIdfa\000ScbtUuid\000";
    static const int32_t values[] = {
        PB3SubCollectionBillType_ScbtNone,
        PB3SubCollectionBillType_ScbtRealName,
        PB3SubCollectionBillType_ScbtPhone,
        PB3SubCollectionBillType_ScbtCardId,
        PB3SubCollectionBillType_ScbtFaceId,
        PB3SubCollectionBillType_ScbtThinking,
        PB3SubCollectionBillType_ScbtPicture,
        PB3SubCollectionBillType_ScbtPassword,
        PB3SubCollectionBillType_ScbtTeenagerPassword,
        PB3SubCollectionBillType_ScbtIpAddr,
        PB3SubCollectionBillType_ScbtAccountStatus,
        PB3SubCollectionBillType_ScbtAccountBan,
        PB3SubCollectionBillType_ScbtDeviceInfo,
        PB3SubCollectionBillType_ScbtOsVersion,
        PB3SubCollectionBillType_ScbtSoftVersion,
        PB3SubCollectionBillType_ScbtIosAdIdfa,
        PB3SubCollectionBillType_ScbtUuid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SubCollectionBillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SubCollectionBillType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SubCollectionBillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SubCollectionBillType_ScbtNone:
    case PB3SubCollectionBillType_ScbtRealName:
    case PB3SubCollectionBillType_ScbtPhone:
    case PB3SubCollectionBillType_ScbtCardId:
    case PB3SubCollectionBillType_ScbtFaceId:
    case PB3SubCollectionBillType_ScbtThinking:
    case PB3SubCollectionBillType_ScbtPicture:
    case PB3SubCollectionBillType_ScbtPassword:
    case PB3SubCollectionBillType_ScbtTeenagerPassword:
    case PB3SubCollectionBillType_ScbtIpAddr:
    case PB3SubCollectionBillType_ScbtAccountStatus:
    case PB3SubCollectionBillType_ScbtAccountBan:
    case PB3SubCollectionBillType_ScbtDeviceInfo:
    case PB3SubCollectionBillType_ScbtOsVersion:
    case PB3SubCollectionBillType_ScbtSoftVersion:
    case PB3SubCollectionBillType_ScbtIosAdIdfa:
    case PB3SubCollectionBillType_ScbtUuid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3TimeCollectionBillType

GPBEnumDescriptor *PB3TimeCollectionBillType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TcbtNone\000Tcbt7Day\000Tcbt1Month\000Tcbt1Year\000";
    static const int32_t values[] = {
        PB3TimeCollectionBillType_TcbtNone,
        PB3TimeCollectionBillType_Tcbt7Day,
        PB3TimeCollectionBillType_Tcbt1Month,
        PB3TimeCollectionBillType_Tcbt1Year,
    };
    static const char *extraTextFormatInfo = "\003\001d\201\343\000\002d\201\345\000\003d\201\344\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3TimeCollectionBillType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3TimeCollectionBillType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3TimeCollectionBillType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3TimeCollectionBillType_TcbtNone:
    case PB3TimeCollectionBillType_Tcbt7Day:
    case PB3TimeCollectionBillType_Tcbt1Month:
    case PB3TimeCollectionBillType_Tcbt1Year:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PersonPublicSettleSignStatus

GPBEnumDescriptor *PB3PersonPublicSettleSignStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PpsssNone\000PpsssCompanyAuditing\000PpsssComp"
        "anyAuditPass\000PpsssCompanyAuditReject\000Pps"
        "ssContractAuditing\000PpsssContractAuditPas"
        "s\000PpsssContractAuditReject\000PpsbossBreakO"
        "ffAuditing\000PpsbossBreakOffAuditPass\000Ppsb"
        "ossBreakOffAuditReject\000PpsbossAbort\000Ppsb"
        "ossRenewal\000PpsbossDelByAdmin\000";
    static const int32_t values[] = {
        PB3PersonPublicSettleSignStatus_PpsssNone,
        PB3PersonPublicSettleSignStatus_PpsssCompanyAuditing,
        PB3PersonPublicSettleSignStatus_PpsssCompanyAuditPass,
        PB3PersonPublicSettleSignStatus_PpsssCompanyAuditReject,
        PB3PersonPublicSettleSignStatus_PpsssContractAuditing,
        PB3PersonPublicSettleSignStatus_PpsssContractAuditPass,
        PB3PersonPublicSettleSignStatus_PpsssContractAuditReject,
        PB3PersonPublicSettleSignStatus_PpsbossBreakOffAuditing,
        PB3PersonPublicSettleSignStatus_PpsbossBreakOffAuditPass,
        PB3PersonPublicSettleSignStatus_PpsbossBreakOffAuditReject,
        PB3PersonPublicSettleSignStatus_PpsbossAbort,
        PB3PersonPublicSettleSignStatus_PpsbossRenewal,
        PB3PersonPublicSettleSignStatus_PpsbossDelByAdmin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PersonPublicSettleSignStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PersonPublicSettleSignStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PersonPublicSettleSignStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PersonPublicSettleSignStatus_PpsssNone:
    case PB3PersonPublicSettleSignStatus_PpsssCompanyAuditing:
    case PB3PersonPublicSettleSignStatus_PpsssCompanyAuditPass:
    case PB3PersonPublicSettleSignStatus_PpsssCompanyAuditReject:
    case PB3PersonPublicSettleSignStatus_PpsssContractAuditing:
    case PB3PersonPublicSettleSignStatus_PpsssContractAuditPass:
    case PB3PersonPublicSettleSignStatus_PpsssContractAuditReject:
    case PB3PersonPublicSettleSignStatus_PpsbossBreakOffAuditing:
    case PB3PersonPublicSettleSignStatus_PpsbossBreakOffAuditPass:
    case PB3PersonPublicSettleSignStatus_PpsbossBreakOffAuditReject:
    case PB3PersonPublicSettleSignStatus_PpsbossAbort:
    case PB3PersonPublicSettleSignStatus_PpsbossRenewal:
    case PB3PersonPublicSettleSignStatus_PpsbossDelByAdmin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewerBoxDialogType

GPBEnumDescriptor *PB3NewerBoxDialogType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NbdtNone\000NbdtIndex\000NbdtFree\000";
    static const int32_t values[] = {
        PB3NewerBoxDialogType_NbdtNone,
        PB3NewerBoxDialogType_NbdtIndex,
        PB3NewerBoxDialogType_NbdtFree,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewerBoxDialogType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewerBoxDialogType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewerBoxDialogType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewerBoxDialogType_NbdtNone:
    case PB3NewerBoxDialogType_NbdtIndex:
    case PB3NewerBoxDialogType_NbdtFree:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewerBoxRewardReceiveStatus

GPBEnumDescriptor *PB3NewerBoxRewardReceiveStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NbrrsNone\000NbrrsNotReach\000NbrrsNotReceived"
        "\000NbrrsReceived\000";
    static const int32_t values[] = {
        PB3NewerBoxRewardReceiveStatus_NbrrsNone,
        PB3NewerBoxRewardReceiveStatus_NbrrsNotReach,
        PB3NewerBoxRewardReceiveStatus_NbrrsNotReceived,
        PB3NewerBoxRewardReceiveStatus_NbrrsReceived,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewerBoxRewardReceiveStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewerBoxRewardReceiveStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewerBoxRewardReceiveStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewerBoxRewardReceiveStatus_NbrrsNone:
    case PB3NewerBoxRewardReceiveStatus_NbrrsNotReach:
    case PB3NewerBoxRewardReceiveStatus_NbrrsNotReceived:
    case PB3NewerBoxRewardReceiveStatus_NbrrsReceived:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewerBoxType

GPBEnumDescriptor *PB3NewerBoxType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NbtNone\000NbtFree\000NbtSix\000NbtAccumulate\000";
    static const int32_t values[] = {
        PB3NewerBoxType_NbtNone,
        PB3NewerBoxType_NbtFree,
        PB3NewerBoxType_NbtSix,
        PB3NewerBoxType_NbtAccumulate,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewerBoxType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewerBoxType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewerBoxType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewerBoxType_NbtNone:
    case PB3NewerBoxType_NbtFree:
    case PB3NewerBoxType_NbtSix:
    case PB3NewerBoxType_NbtAccumulate:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewerBoxTaskType

GPBEnumDescriptor *PB3NewerBoxTaskType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NbttNone\000NbttFree\000NbttSix\000NbttAccumulate"
        "1\000NbttAccumulate2\000NbttAccumulate3\000";
    static const int32_t values[] = {
        PB3NewerBoxTaskType_NbttNone,
        PB3NewerBoxTaskType_NbttFree,
        PB3NewerBoxTaskType_NbttSix,
        PB3NewerBoxTaskType_NbttAccumulate1,
        PB3NewerBoxTaskType_NbttAccumulate2,
        PB3NewerBoxTaskType_NbttAccumulate3,
    };
    static const char *extraTextFormatInfo = "\003\003d\352\201\000\004d\352\201\000\005d\352\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewerBoxTaskType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewerBoxTaskType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewerBoxTaskType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewerBoxTaskType_NbttNone:
    case PB3NewerBoxTaskType_NbttFree:
    case PB3NewerBoxTaskType_NbttSix:
    case PB3NewerBoxTaskType_NbttAccumulate1:
    case PB3NewerBoxTaskType_NbttAccumulate2:
    case PB3NewerBoxTaskType_NbttAccumulate3:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NewerBoxTaskStatus

GPBEnumDescriptor *PB3NewerBoxTaskStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NbtsNone\000NbtsIng\000NbtsFinish\000";
    static const int32_t values[] = {
        PB3NewerBoxTaskStatus_NbtsNone,
        PB3NewerBoxTaskStatus_NbtsIng,
        PB3NewerBoxTaskStatus_NbtsFinish,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NewerBoxTaskStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NewerBoxTaskStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NewerBoxTaskStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NewerBoxTaskStatus_NbtsNone:
    case PB3NewerBoxTaskStatus_NbtsIng:
    case PB3NewerBoxTaskStatus_NbtsFinish:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3BroadcastAntiAddictionAlert

@implementation PB3BroadcastAntiAddictionAlert

@dynamic type;
@dynamic limitHours;

typedef struct PB3BroadcastAntiAddictionAlert__storage_ {
  uint32_t _has_storage_[1];
  PB3AntiAddictionAlertType type;
  int32_t limitHours;
} PB3BroadcastAntiAddictionAlert__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3AntiAddictionAlertType_EnumDescriptor,
        .number = PB3BroadcastAntiAddictionAlert_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastAntiAddictionAlert__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "limitHours",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastAntiAddictionAlert_FieldNumber_LimitHours,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastAntiAddictionAlert__storage_, limitHours),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastAntiAddictionAlert class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastAntiAddictionAlert__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastAntiAddictionAlert_Type_RawValue(PB3BroadcastAntiAddictionAlert *message) {
  GPBDescriptor *descriptor = [PB3BroadcastAntiAddictionAlert descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastAntiAddictionAlert_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastAntiAddictionAlert_Type_RawValue(PB3BroadcastAntiAddictionAlert *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastAntiAddictionAlert descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastAntiAddictionAlert_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BroadcastUpdatePlayerName

@implementation PB3BroadcastUpdatePlayerName

@dynamic id_p;
@dynamic name;

typedef struct PB3BroadcastUpdatePlayerName__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  int64_t id_p;
} PB3BroadcastUpdatePlayerName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastUpdatePlayerName_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastUpdatePlayerName__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastUpdatePlayerName_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastUpdatePlayerName__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastUpdatePlayerName class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastUpdatePlayerName__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastCharmLevel

@implementation PB3BroadcastCharmLevel

@dynamic id_p;
@dynamic name;
@dynamic charm;
@dynamic charmLevel;
@dynamic hasNobilityInfo, nobilityInfo;

typedef struct PB3BroadcastCharmLevel__storage_ {
  uint32_t _has_storage_[1];
  int32_t charmLevel;
  NSString *name;
  PB3RoomNobilityInfo *nobilityInfo;
  int64_t id_p;
  int64_t charm;
} PB3BroadcastCharmLevel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastCharmLevel_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastCharmLevel__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastCharmLevel_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastCharmLevel__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "charm",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastCharmLevel_FieldNumber_Charm,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastCharmLevel__storage_, charm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastCharmLevel_FieldNumber_CharmLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastCharmLevel__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3BroadcastCharmLevel_FieldNumber_NobilityInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastCharmLevel__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastCharmLevel class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastCharmLevel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastWealthLevel

@implementation PB3BroadcastWealthLevel

@dynamic id_p;
@dynamic name;
@dynamic wealth;
@dynamic wealthLevel;
@dynamic hasNobilityInfo, nobilityInfo;

typedef struct PB3BroadcastWealthLevel__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealthLevel;
  NSString *name;
  PB3RoomNobilityInfo *nobilityInfo;
  int64_t id_p;
  int64_t wealth;
} PB3BroadcastWealthLevel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastWealthLevel_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastWealthLevel__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastWealthLevel_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastWealthLevel__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastWealthLevel_FieldNumber_Wealth,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastWealthLevel__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastWealthLevel_FieldNumber_WealthLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastWealthLevel__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nobilityInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomNobilityInfo),
        .number = PB3BroadcastWealthLevel_FieldNumber_NobilityInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastWealthLevel__storage_, nobilityInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastWealthLevel class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastWealthLevel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastFlowerLevel

@implementation PB3BroadcastFlowerLevel

@dynamic id_p;
@dynamic name;
@dynamic flower;
@dynamic flowerLevel;

typedef struct PB3BroadcastFlowerLevel__storage_ {
  uint32_t _has_storage_[1];
  int32_t flowerLevel;
  NSString *name;
  int64_t id_p;
  int64_t flower;
} PB3BroadcastFlowerLevel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFlowerLevel_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastFlowerLevel__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFlowerLevel_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastFlowerLevel__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flower",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFlowerLevel_FieldNumber_Flower,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastFlowerLevel__storage_, flower),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "flowerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastFlowerLevel_FieldNumber_FlowerLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastFlowerLevel__storage_, flowerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastFlowerLevel class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastFlowerLevel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastBan

@implementation PB3BroadcastBan

@dynamic banType;
@dynamic status;
@dynamic time;
@dynamic remark;
@dynamic operaterId;
@dynamic banName;

typedef struct PB3BroadcastBan__storage_ {
  uint32_t _has_storage_[1];
  uint32_t banType;
  uint32_t status;
  uint32_t time;
  NSString *remark;
  NSString *banName;
  uint64_t operaterId;
} PB3BroadcastBan__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "banType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBan_FieldNumber_BanType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastBan__storage_, banType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBan_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastBan__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBan_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastBan__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBan_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastBan__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operaterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBan_FieldNumber_OperaterId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastBan__storage_, operaterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "banName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastBan_FieldNumber_BanName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastBan__storage_, banName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastBan class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastBan__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\005\n\000\006\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BraodUpdatePlayerFlags

@implementation PB3BraodUpdatePlayerFlags

@dynamic playerId;
@dynamic flagType;
@dynamic flagVal;

typedef struct PB3BraodUpdatePlayerFlags__storage_ {
  uint32_t _has_storage_[1];
  int32_t flagType;
  int64_t playerId;
  int64_t flagVal;
} PB3BraodUpdatePlayerFlags__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BraodUpdatePlayerFlags_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BraodUpdatePlayerFlags__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "flagType",
        .dataTypeSpecific.className = NULL,
        .number = PB3BraodUpdatePlayerFlags_FieldNumber_FlagType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BraodUpdatePlayerFlags__storage_, flagType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flagVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3BraodUpdatePlayerFlags_FieldNumber_FlagVal,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BraodUpdatePlayerFlags__storage_, flagVal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BraodUpdatePlayerFlags class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BraodUpdatePlayerFlags__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\010\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BraodUpdateIcon

@implementation PB3BraodUpdateIcon

@dynamic playerId;
@dynamic icon;

typedef struct PB3BraodUpdateIcon__storage_ {
  uint32_t _has_storage_[1];
  NSString *icon;
  int64_t playerId;
} PB3BraodUpdateIcon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BraodUpdateIcon_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BraodUpdateIcon__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BraodUpdateIcon_FieldNumber_Icon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BraodUpdateIcon__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BraodUpdateIcon class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BraodUpdateIcon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastUpdateOnOff

@implementation PB3BroadcastUpdateOnOff

@dynamic hasOnOff, onOff;

typedef struct PB3BroadcastUpdateOnOff__storage_ {
  uint32_t _has_storage_[1];
  PB3OnOffStatus *onOff;
} PB3BroadcastUpdateOnOff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OnOffStatus),
        .number = PB3BroadcastUpdateOnOff_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastUpdateOnOff__storage_, onOff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastUpdateOnOff class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastUpdateOnOff__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastShortId

@implementation PB3BroadcastShortId

@dynamic playerId;
@dynamic shortId;

typedef struct PB3BroadcastShortId__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t shortId;
} PB3BroadcastShortId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastShortId_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastShortId__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "shortId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastShortId_FieldNumber_ShortId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastShortId__storage_, shortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastShortId class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastShortId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastUpdateFlagsKV

@implementation PB3BroadcastUpdateFlagsKV

@dynamic playerId;
@dynamic flagKey;
@dynamic flagVal;

typedef struct PB3BroadcastUpdateFlagsKV__storage_ {
  uint32_t _has_storage_[1];
  PB3PlayerFlagKey flagKey;
  int32_t flagVal;
  int64_t playerId;
} PB3BroadcastUpdateFlagsKV__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastUpdateFlagsKV_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastUpdateFlagsKV__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "flagKey",
        .dataTypeSpecific.enumDescFunc = PB3PlayerFlagKey_EnumDescriptor,
        .number = PB3BroadcastUpdateFlagsKV_FieldNumber_FlagKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastUpdateFlagsKV__storage_, flagKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "flagVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastUpdateFlagsKV_FieldNumber_FlagVal,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastUpdateFlagsKV__storage_, flagVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastUpdateFlagsKV class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastUpdateFlagsKV__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BroadcastUpdateFlagsKV_FlagKey_RawValue(PB3BroadcastUpdateFlagsKV *message) {
  GPBDescriptor *descriptor = [PB3BroadcastUpdateFlagsKV descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastUpdateFlagsKV_FieldNumber_FlagKey];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BroadcastUpdateFlagsKV_FlagKey_RawValue(PB3BroadcastUpdateFlagsKV *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BroadcastUpdateFlagsKV descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BroadcastUpdateFlagsKV_FieldNumber_FlagKey];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlayerReq

@implementation PB3PlayerReq

@dynamic id_p;

typedef struct PB3PlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3PlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerRes

@implementation PB3PlayerRes

@dynamic hasPlayer, player;
@dynamic accountFlags;
@dynamic effectArray, effectArray_Count;
@dynamic activityAdchannel;
@dynamic hasClan, clan;
@dynamic hasBindPhoneInfo, bindPhoneInfo;
@dynamic charmWeekRank;
@dynamic wealthWeekRank;
@dynamic hasBillPlayer, billPlayer;
@dynamic displayDownloadAppEntry;
@dynamic hasUserInfo, userInfo;
@dynamic isMinors;
@dynamic inviteCode;
@dynamic hasLastRoomInfo, lastRoomInfo;
@dynamic isBlackWhale;
@dynamic adChannel;
@dynamic realChannel;
@dynamic accountCreateAt;
@dynamic accountType;
@dynamic isPublicSettle;
@dynamic isCpGuide;

typedef struct PB3PlayerRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityAdchannel;
  int32_t charmWeekRank;
  int32_t wealthWeekRank;
  int32_t isMinors;
  int32_t adChannel;
  int32_t realChannel;
  PB3AccountType accountType;
  PB3Player *player;
  NSMutableArray *effectArray;
  PB3ClanInfo *clan;
  PB3BindPhoneInfo *bindPhoneInfo;
  PB3BillPlayerCard *billPlayer;
  PB3UserInfo *userInfo;
  NSString *inviteCode;
  PB3LastRoomInfo *lastRoomInfo;
  int64_t accountFlags;
  int64_t accountCreateAt;
} PB3PlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3PlayerRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accountFlags",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_AccountFlags,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, accountFlags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "effectArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Effect),
        .number = PB3PlayerRes_FieldNumber_EffectArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, effectArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "activityAdchannel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_ActivityAdchannel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, activityAdchannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "clan",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClanInfo),
        .number = PB3PlayerRes_FieldNumber_Clan,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, clan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bindPhoneInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BindPhoneInfo),
        .number = PB3PlayerRes_FieldNumber_BindPhoneInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, bindPhoneInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "charmWeekRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_CharmWeekRank,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, charmWeekRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealthWeekRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_WealthWeekRank,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, wealthWeekRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "billPlayer",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BillPlayerCard),
        .number = PB3PlayerRes_FieldNumber_BillPlayer,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, billPlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "displayDownloadAppEntry",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_DisplayDownloadAppEntry,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserInfo),
        .number = PB3PlayerRes_FieldNumber_UserInfo,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, userInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isMinors",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_IsMinors,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, isMinors),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviteCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_InviteCode,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, inviteCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastRoomInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LastRoomInfo),
        .number = PB3PlayerRes_FieldNumber_LastRoomInfo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, lastRoomInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isBlackWhale",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_IsBlackWhale,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "adChannel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_AdChannel,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, adChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "realChannel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_RealChannel,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, realChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accountCreateAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_AccountCreateAt,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, accountCreateAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "accountType",
        .dataTypeSpecific.enumDescFunc = PB3AccountType_EnumDescriptor,
        .number = PB3PlayerRes_FieldNumber_AccountType,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3PlayerRes__storage_, accountType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isPublicSettle",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_IsPublicSettle,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isCpGuide",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerRes_FieldNumber_IsCpGuide,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\r\000\020\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerRes_AccountType_RawValue(PB3PlayerRes *message) {
  GPBDescriptor *descriptor = [PB3PlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerRes_FieldNumber_AccountType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerRes_AccountType_RawValue(PB3PlayerRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerRes_FieldNumber_AccountType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3H5PlayerReq

@implementation PB3H5PlayerReq


typedef struct PB3H5PlayerReq__storage_ {
  uint32_t _has_storage_[1];
} PB3H5PlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5PlayerReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3H5PlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3H5PlayerRes

@implementation PB3H5PlayerRes

@dynamic hasPlayer, player;
@dynamic isMinors;
@dynamic hasClan, clan;

typedef struct PB3H5PlayerRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t isMinors;
  PB3Player *player;
  PB3ClanInfo *clan;
} PB3H5PlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3H5PlayerRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3H5PlayerRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isMinors",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5PlayerRes_FieldNumber_IsMinors,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3H5PlayerRes__storage_, isMinors),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "clan",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClanInfo),
        .number = PB3H5PlayerRes_FieldNumber_Clan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3H5PlayerRes__storage_, clan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5PlayerRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3H5PlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LastRoomInfo

@implementation PB3LastRoomInfo

@dynamic id_p;
@dynamic id2;
@dynamic name;

typedef struct PB3LastRoomInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  int64_t id_p;
  int64_t id2;
} PB3LastRoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3LastRoomInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LastRoomInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3LastRoomInfo_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LastRoomInfo__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3LastRoomInfo_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LastRoomInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LastRoomInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LastRoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BindPhoneInfo

@implementation PB3BindPhoneInfo

@dynamic isDraw;
@dynamic phone;
@dynamic type;

typedef struct PB3BindPhoneInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3RegisterType type;
  NSString *phone;
} PB3BindPhoneInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isDraw",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneInfo_FieldNumber_IsDraw,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneInfo_FieldNumber_Phone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BindPhoneInfo__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RegisterType_EnumDescriptor,
        .number = PB3BindPhoneInfo_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BindPhoneInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindPhoneInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BindPhoneInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BindPhoneInfo_Type_RawValue(PB3BindPhoneInfo *message) {
  GPBDescriptor *descriptor = [PB3BindPhoneInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhoneInfo_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BindPhoneInfo_Type_RawValue(PB3BindPhoneInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BindPhoneInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhoneInfo_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlayerInfoListReq

@implementation PB3PlayerInfoListReq

@dynamic idsArray, idsArray_Count;
@dynamic type;

typedef struct PB3PlayerInfoListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RequestSourceType type;
  GPBInt64Array *idsArray;
} PB3PlayerInfoListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerInfoListReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerInfoListReq__storage_, idsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RequestSourceType_EnumDescriptor,
        .number = PB3PlayerInfoListReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerInfoListReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerInfoListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerInfoListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PlayerInfoListReq_Type_RawValue(PB3PlayerInfoListReq *message) {
  GPBDescriptor *descriptor = [PB3PlayerInfoListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerInfoListReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PlayerInfoListReq_Type_RawValue(PB3PlayerInfoListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PlayerInfoListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PlayerInfoListReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlayerInfoListRes

@implementation PB3PlayerInfoListRes

@dynamic listArray, listArray_Count;

typedef struct PB3PlayerInfoListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3PlayerInfoListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerInfo),
        .number = PB3PlayerInfoListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerInfoListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerInfoListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerInfoListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LevelReq

@implementation PB3LevelReq


typedef struct PB3LevelReq__storage_ {
  uint32_t _has_storage_[1];
} PB3LevelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LevelReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3LevelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LevelRes

@implementation PB3LevelRes

@dynamic charm;
@dynamic charmLevel;
@dynamic charmRank;
@dynamic wealth;
@dynamic wealthLevel;
@dynamic wealthRank;
@dynamic exp;
@dynamic expRank;
@dynamic bill;
@dynamic billLevel;
@dynamic billRank;
@dynamic billTick;
@dynamic charmExp;
@dynamic wealthExp;
@dynamic prevCharmExp;
@dynamic prevWealthExp;
@dynamic charmMaxLevel;
@dynamic wealthMaxLevel;
@dynamic newWealth;
@dynamic fishCharm;
@dynamic fishCharmLevel;
@dynamic fishCharmRank;
@dynamic fishWealth;
@dynamic fishWealthLevel;
@dynamic fishWealthRank;
@dynamic fishCharmExp;
@dynamic fishWealthExp;
@dynamic fishPrevCharmExp;
@dynamic fishPrevWealthExp;

typedef struct PB3LevelRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t charmLevel;
  int32_t charmRank;
  int32_t wealth;
  int32_t wealthLevel;
  int32_t wealthRank;
  int32_t exp;
  int32_t expRank;
  int32_t bill;
  int32_t billLevel;
  int32_t billRank;
  int32_t charmMaxLevel;
  int32_t wealthMaxLevel;
  int32_t fishCharmLevel;
  int32_t fishCharmRank;
  int32_t fishWealthLevel;
  int32_t fishWealthRank;
  int64_t charm;
  int64_t billTick;
  int64_t charmExp;
  int64_t wealthExp;
  int64_t prevCharmExp;
  int64_t prevWealthExp;
  int64_t newWealth;
  int64_t fishCharm;
  int64_t fishWealth;
  int64_t fishCharmExp;
  int64_t fishWealthExp;
  int64_t fishPrevCharmExp;
  int64_t fishPrevWealthExp;
} PB3LevelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "charm",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_Charm,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, charm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_CharmLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "charmRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_CharmRank,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, charmRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_Wealth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, wealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_WealthLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealthRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_WealthRank,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, wealthRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_Exp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "expRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_ExpRank,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, expRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "bill",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_Bill,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, bill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "billLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_BillLevel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, billLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "billRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_BillRank,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, billRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "billTick",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_BillTick,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, billTick),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "charmExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_CharmExp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, charmExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "wealthExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_WealthExp,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, wealthExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "prevCharmExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_PrevCharmExp,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, prevCharmExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "prevWealthExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_PrevWealthExp,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, prevWealthExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "charmMaxLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_CharmMaxLevel,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, charmMaxLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "wealthMaxLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_WealthMaxLevel,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, wealthMaxLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "newWealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_NewWealth,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, newWealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishCharm",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishCharm,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishCharm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishCharmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishCharmLevel,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishCharmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "fishCharmRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishCharmRank,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishCharmRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "fishWealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishWealth,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishWealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishWealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishWealthLevel,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishWealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "fishWealthRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishWealthRank,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishWealthRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "fishCharmExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishCharmExp,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishCharmExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishWealthExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishWealthExp,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishWealthExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishPrevCharmExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishPrevCharmExp,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishPrevCharmExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "fishPrevWealthExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3LevelRes_FieldNumber_FishPrevWealthExp,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3LevelRes__storage_, fishPrevWealthExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LevelRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LevelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserInfoReq

@implementation PB3UserInfoReq

@dynamic type;
@dynamic nickname;
@dynamic sex;
@dynamic city;
@dynamic signature;
@dynamic mind;
@dynamic birthday;
@dynamic voiceURL;
@dynamic sourceType;
@dynamic cubismIcon;
@dynamic genderPattern;

typedef struct PB3UserInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  PB3SexType sex;
  PB3SourceType sourceType;
  PB3GenderPattern genderPattern;
  NSString *nickname;
  NSString *city;
  NSString *signature;
  NSString *mind;
  NSString *birthday;
  NSString *voiceURL;
  NSString *cubismIcon;
} PB3UserInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3UserInfoReq_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_City,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_Signature,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mind",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_Mind,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, mind),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthday",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_Birthday,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, birthday),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_VoiceURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, voiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceType",
        .dataTypeSpecific.enumDescFunc = PB3SourceType_EnumDescriptor,
        .number = PB3UserInfoReq_FieldNumber_SourceType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, sourceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cubismIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoReq_FieldNumber_CubismIcon,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, cubismIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "genderPattern",
        .dataTypeSpecific.enumDescFunc = PB3GenderPattern_EnumDescriptor,
        .number = PB3UserInfoReq_FieldNumber_GenderPattern,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3UserInfoReq__storage_, genderPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UserInfoReq_Sex_RawValue(PB3UserInfoReq *message) {
  GPBDescriptor *descriptor = [PB3UserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoReq_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserInfoReq_Sex_RawValue(PB3UserInfoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoReq_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserInfoReq_SourceType_RawValue(PB3UserInfoReq *message) {
  GPBDescriptor *descriptor = [PB3UserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoReq_FieldNumber_SourceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserInfoReq_SourceType_RawValue(PB3UserInfoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoReq_FieldNumber_SourceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserInfoReq_GenderPattern_RawValue(PB3UserInfoReq *message) {
  GPBDescriptor *descriptor = [PB3UserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoReq_FieldNumber_GenderPattern];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserInfoReq_GenderPattern_RawValue(PB3UserInfoReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserInfoReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoReq_FieldNumber_GenderPattern];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UserInfoRes

@implementation PB3UserInfoRes

@dynamic type;
@dynamic status;
@dynamic oldValue;
@dynamic newValue;

typedef struct PB3UserInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  PB3AuditStatus status;
  NSString *oldValue;
  NSString *newValue;
} PB3UserInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoRes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserInfoRes__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3UserInfoRes_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserInfoRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "oldValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoRes_FieldNumber_OldValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserInfoRes__storage_, oldValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserInfoRes_FieldNumber_NewValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserInfoRes__storage_, newValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UserInfoRes_Status_RawValue(PB3UserInfoRes *message) {
  GPBDescriptor *descriptor = [PB3UserInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserInfoRes_Status_RawValue(PB3UserInfoRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserInfoRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CertificationSexTypeReq

@implementation PB3CertificationSexTypeReq


typedef struct PB3CertificationSexTypeReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CertificationSexTypeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CertificationSexTypeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CertificationSexTypeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CertificationSexTypeRes

@implementation PB3CertificationSexTypeRes

@dynamic sex;

typedef struct PB3CertificationSexTypeRes__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
} PB3CertificationSexTypeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3CertificationSexTypeRes_FieldNumber_Sex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CertificationSexTypeRes__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CertificationSexTypeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CertificationSexTypeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CertificationSexTypeRes_Sex_RawValue(PB3CertificationSexTypeRes *message) {
  GPBDescriptor *descriptor = [PB3CertificationSexTypeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CertificationSexTypeRes_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CertificationSexTypeRes_Sex_RawValue(PB3CertificationSexTypeRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CertificationSexTypeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CertificationSexTypeRes_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UserAuditDetailReq

@implementation PB3UserAuditDetailReq


typedef struct PB3UserAuditDetailReq__storage_ {
  uint32_t _has_storage_[1];
} PB3UserAuditDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserAuditDetailReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UserAuditDetailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserAuditDetailRes

@implementation PB3UserAuditDetailRes

@dynamic playerId;
@dynamic nickName;
@dynamic nickNameStatus;
@dynamic icon;
@dynamic iconStatus;
@dynamic sign;
@dynamic signStatus;
@dynamic mind;
@dynamic mindStatus;
@dynamic voice;
@dynamic voiceTime;
@dynamic voiceStatus;
@dynamic hasVoiceTagInfo, voiceTagInfo;
@dynamic voiceTagStatus;

typedef struct PB3UserAuditDetailRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AuditStatus nickNameStatus;
  PB3AuditStatus iconStatus;
  PB3AuditStatus signStatus;
  PB3AuditStatus mindStatus;
  int32_t voiceTime;
  PB3AuditStatus voiceStatus;
  PB3AuditStatus voiceTagStatus;
  NSString *nickName;
  NSString *icon;
  NSString *sign;
  NSString *mind;
  NSString *voice;
  PB3VoiceTagInfo *voiceTagInfo;
  int64_t playerId;
} PB3UserAuditDetailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserAuditDetailRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserAuditDetailRes_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickNameStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3UserAuditDetailRes_FieldNumber_NickNameStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, nickNameStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserAuditDetailRes_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3UserAuditDetailRes_FieldNumber_IconStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, iconStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserAuditDetailRes_FieldNumber_Sign,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, sign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3UserAuditDetailRes_FieldNumber_SignStatus,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, signStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "mind",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserAuditDetailRes_FieldNumber_Mind,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, mind),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mindStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3UserAuditDetailRes_FieldNumber_MindStatus,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, mindStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserAuditDetailRes_FieldNumber_Voice,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserAuditDetailRes_FieldNumber_VoiceTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, voiceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3UserAuditDetailRes_FieldNumber_VoiceStatus,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, voiceStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voiceTagInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceTagInfo),
        .number = PB3UserAuditDetailRes_FieldNumber_VoiceTagInfo,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, voiceTagInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceTagStatus",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3UserAuditDetailRes_FieldNumber_VoiceTagStatus,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3UserAuditDetailRes__storage_, voiceTagStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserAuditDetailRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserAuditDetailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UserAuditDetailRes_NickNameStatus_RawValue(PB3UserAuditDetailRes *message) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_NickNameStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserAuditDetailRes_NickNameStatus_RawValue(PB3UserAuditDetailRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_NickNameStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserAuditDetailRes_IconStatus_RawValue(PB3UserAuditDetailRes *message) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_IconStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserAuditDetailRes_IconStatus_RawValue(PB3UserAuditDetailRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_IconStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserAuditDetailRes_SignStatus_RawValue(PB3UserAuditDetailRes *message) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_SignStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserAuditDetailRes_SignStatus_RawValue(PB3UserAuditDetailRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_SignStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserAuditDetailRes_MindStatus_RawValue(PB3UserAuditDetailRes *message) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_MindStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserAuditDetailRes_MindStatus_RawValue(PB3UserAuditDetailRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_MindStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserAuditDetailRes_VoiceStatus_RawValue(PB3UserAuditDetailRes *message) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_VoiceStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserAuditDetailRes_VoiceStatus_RawValue(PB3UserAuditDetailRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_VoiceStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3UserAuditDetailRes_VoiceTagStatus_RawValue(PB3UserAuditDetailRes *message) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_VoiceTagStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UserAuditDetailRes_VoiceTagStatus_RawValue(PB3UserAuditDetailRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UserAuditDetailRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UserAuditDetailRes_FieldNumber_VoiceTagStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UserSetting

@implementation PB3UserSetting

@dynamic userId;
@dynamic imFriend;
@dynamic imMessage;
@dynamic imWealthLevel;
@dynamic isInvite;
@dynamic isPosition;
@dynamic isWealth;
@dynamic isRemind;
@dynamic isTotalRemind;
@dynamic chatShowCity;

typedef struct PB3UserSetting__storage_ {
  uint32_t _has_storage_[1];
  uint32_t imWealthLevel;
  int64_t userId;
} PB3UserSetting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserSetting__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "imFriend",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_ImFriend,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "imMessage",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_ImMessage,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "imWealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_ImWealthLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UserSetting__storage_, imWealthLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isInvite",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_IsInvite,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPosition",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_IsPosition,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isWealth",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_IsWealth,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isRemind",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_IsRemind,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isTotalRemind",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_IsTotalRemind,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "chatShowCity",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserSetting_FieldNumber_ChatShowCity,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserSetting class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserSetting__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\006\000\002\010\000\003\t\000\004\r\000\005\010\000\006\n\000\007\010\000\010\010\000\t\r\000\014\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetUserSettingRes

@implementation PB3SetUserSettingRes


typedef struct PB3SetUserSettingRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetUserSettingRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetUserSettingRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetUserSettingRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangePasswdReq

@implementation PB3ChangePasswdReq

@dynamic value;

typedef struct PB3ChangePasswdReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
} PB3ChangePasswdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangePasswdReq_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangePasswdReq__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangePasswdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangePasswdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangePasswdRes

@implementation PB3ChangePasswdRes


typedef struct PB3ChangePasswdRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChangePasswdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangePasswdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChangePasswdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SuperManagerReq

@implementation PB3SuperManagerReq

@dynamic playerId;
@dynamic banType;
@dynamic time;
@dynamic opType;

typedef struct PB3SuperManagerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t banType;
  uint32_t time;
  int32_t opType;
  int64_t playerId;
} PB3SuperManagerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SuperManagerReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SuperManagerReq__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "banType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SuperManagerReq_FieldNumber_BanType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SuperManagerReq__storage_, banType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3SuperManagerReq_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SuperManagerReq__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SuperManagerReq_FieldNumber_OpType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SuperManagerReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SuperManagerReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SuperManagerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\007\000\004\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SuperManagerRes

@implementation PB3SuperManagerRes


typedef struct PB3SuperManagerRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SuperManagerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SuperManagerRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SuperManagerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetOnOffListReq

@implementation PB3GetOnOffListReq

@dynamic playerId;

typedef struct PB3GetOnOffListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GetOnOffListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetOnOffListReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetOnOffListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetOnOffListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetOnOffListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetOnOffListRes

@implementation PB3GetOnOffListRes

@dynamic statusListArray, statusListArray_Count;

typedef struct PB3GetOnOffListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *statusListArray;
} PB3GetOnOffListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "statusListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OnOffStatus),
        .number = PB3GetOnOffListRes_FieldNumber_StatusListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetOnOffListRes__storage_, statusListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetOnOffListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetOnOffListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchPlayersReq

@implementation PB3SearchPlayersReq

@dynamic page;
@dynamic pageSize;
@dynamic keyWord;

typedef struct PB3SearchPlayersReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  NSString *keyWord;
} PB3SearchPlayersReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayersReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchPlayersReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayersReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchPlayersReq__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "keyWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayersReq_FieldNumber_KeyWord,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SearchPlayersReq__storage_, keyWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchPlayersReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchPlayersReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchPlayersRes

@implementation PB3SearchPlayersRes

@dynamic page;
@dynamic pageSize;
@dynamic listArray, listArray_Count;

typedef struct PB3SearchPlayersRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  NSMutableArray *listArray;
} PB3SearchPlayersRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayersRes_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchPlayersRes__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayersRes_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchPlayersRes__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SearchPlayerEntry),
        .number = PB3SearchPlayersRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SearchPlayersRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchPlayersRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchPlayersRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SearchPlayers

@implementation PB3SearchPlayers

@dynamic page;
@dynamic pageSize;
@dynamic keyWord;
@dynamic listArray, listArray_Count;

typedef struct PB3SearchPlayers__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
  NSString *keyWord;
  NSMutableArray *listArray;
} PB3SearchPlayers__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayers_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SearchPlayers__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayers_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SearchPlayers__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "keyWord",
        .dataTypeSpecific.className = NULL,
        .number = PB3SearchPlayers_FieldNumber_KeyWord,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SearchPlayers__storage_, keyWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SearchPlayerEntry),
        .number = PB3SearchPlayers_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SearchPlayers__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SearchPlayers class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SearchPlayers__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPlayerGainsReq

@implementation PB3GetPlayerGainsReq

@dynamic type;

typedef struct PB3GetPlayerGainsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
} PB3GetPlayerGainsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerGainsReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPlayerGainsReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPlayerGainsReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPlayerGainsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPlayerGainsRes

@implementation PB3GetPlayerGainsRes

@dynamic today;
@dynamic week;
@dynamic month;
@dynamic lastMonth;
@dynamic isFastWithdraw;

typedef struct PB3GetPlayerGainsRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *today;
  NSString *week;
  NSString *month;
  NSString *lastMonth;
} PB3GetPlayerGainsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "today",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerGainsRes_FieldNumber_Today,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPlayerGainsRes__storage_, today),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "week",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerGainsRes_FieldNumber_Week,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetPlayerGainsRes__storage_, week),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "month",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerGainsRes_FieldNumber_Month,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetPlayerGainsRes__storage_, month),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastMonth",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerGainsRes_FieldNumber_LastMonth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetPlayerGainsRes__storage_, lastMonth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isFastWithdraw",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPlayerGainsRes_FieldNumber_IsFastWithdraw,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPlayerGainsRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPlayerGainsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetTatolGainReq

@implementation PB3GetTatolGainReq

@dynamic type;

typedef struct PB3GetTatolGainReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
} PB3GetTatolGainReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTatolGainReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTatolGainReq__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTatolGainReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTatolGainReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetTatolGainRes

@implementation PB3GetTatolGainRes

@dynamic totalGain;

typedef struct PB3GetTatolGainRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *totalGain;
} PB3GetTatolGainRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalGain",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetTatolGainRes_FieldNumber_TotalGain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetTatolGainRes__storage_, totalGain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetTatolGainRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetTatolGainRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MailMsg

@implementation PB3MailMsg

@dynamic id_p;
@dynamic cmdId;
@dynamic createAt;
@dynamic data_p;
@dynamic type;
@dynamic subMsgType;

typedef struct PB3MailMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t cmdId;
  int32_t createAt;
  PB3UserMailType type;
  PB3SubMsgType subMsgType;
  NSData *data_p;
  int64_t id_p;
} PB3MailMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3MailMsg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MailMsg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cmdId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MailMsg_FieldNumber_CmdId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MailMsg__storage_, cmdId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3MailMsg_FieldNumber_CreateAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3MailMsg__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3MailMsg_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3MailMsg__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UserMailType_EnumDescriptor,
        .number = PB3MailMsg_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3MailMsg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "subMsgType",
        .dataTypeSpecific.enumDescFunc = PB3SubMsgType_EnumDescriptor,
        .number = PB3MailMsg_FieldNumber_SubMsgType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3MailMsg__storage_, subMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MailMsg class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MailMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3MailMsg_Type_RawValue(PB3MailMsg *message) {
  GPBDescriptor *descriptor = [PB3MailMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MailMsg_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3MailMsg_Type_RawValue(PB3MailMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3MailMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MailMsg_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3MailMsg_SubMsgType_RawValue(PB3MailMsg *message) {
  GPBDescriptor *descriptor = [PB3MailMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MailMsg_FieldNumber_SubMsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3MailMsg_SubMsgType_RawValue(PB3MailMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3MailMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3MailMsg_FieldNumber_SubMsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReadMailReq

@implementation PB3ReadMailReq

@dynamic lastReadTime;
@dynamic type;
@dynamic subMsgType;

typedef struct PB3ReadMailReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t lastReadTime;
  PB3UserMailType type;
  PB3SubMsgType subMsgType;
} PB3ReadMailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastReadTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReadMailReq_FieldNumber_LastReadTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReadMailReq__storage_, lastReadTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UserMailType_EnumDescriptor,
        .number = PB3ReadMailReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ReadMailReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "subMsgType",
        .dataTypeSpecific.enumDescFunc = PB3SubMsgType_EnumDescriptor,
        .number = PB3ReadMailReq_FieldNumber_SubMsgType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ReadMailReq__storage_, subMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReadMailReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReadMailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReadMailReq_Type_RawValue(PB3ReadMailReq *message) {
  GPBDescriptor *descriptor = [PB3ReadMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReadMailReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReadMailReq_Type_RawValue(PB3ReadMailReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReadMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReadMailReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ReadMailReq_SubMsgType_RawValue(PB3ReadMailReq *message) {
  GPBDescriptor *descriptor = [PB3ReadMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReadMailReq_FieldNumber_SubMsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReadMailReq_SubMsgType_RawValue(PB3ReadMailReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReadMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReadMailReq_FieldNumber_SubMsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReadMailRes

@implementation PB3ReadMailRes

@dynamic listArray, listArray_Count;
@dynamic msgIdArray, msgIdArray_Count;

typedef struct PB3ReadMailRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  GPBInt64Array *msgIdArray;
} PB3ReadMailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MailMsg),
        .number = PB3ReadMailRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReadMailRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ReadMailRes_FieldNumber_MsgIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ReadMailRes__storage_, msgIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReadMailRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReadMailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LastMailReq

@implementation PB3LastMailReq

@dynamic lastReadTime;
@dynamic type;
@dynamic subMsgType;

typedef struct PB3LastMailReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t lastReadTime;
  PB3UserMailType type;
  PB3SubMsgType subMsgType;
} PB3LastMailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastReadTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LastMailReq_FieldNumber_LastReadTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LastMailReq__storage_, lastReadTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UserMailType_EnumDescriptor,
        .number = PB3LastMailReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LastMailReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "subMsgType",
        .dataTypeSpecific.enumDescFunc = PB3SubMsgType_EnumDescriptor,
        .number = PB3LastMailReq_FieldNumber_SubMsgType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LastMailReq__storage_, subMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LastMailReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LastMailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LastMailReq_Type_RawValue(PB3LastMailReq *message) {
  GPBDescriptor *descriptor = [PB3LastMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LastMailReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LastMailReq_Type_RawValue(PB3LastMailReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LastMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LastMailReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3LastMailReq_SubMsgType_RawValue(PB3LastMailReq *message) {
  GPBDescriptor *descriptor = [PB3LastMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LastMailReq_FieldNumber_SubMsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LastMailReq_SubMsgType_RawValue(PB3LastMailReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LastMailReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LastMailReq_FieldNumber_SubMsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LastMailRes

@implementation PB3LastMailRes

@dynamic flag;

typedef struct PB3LastMailRes__storage_ {
  uint32_t _has_storage_[1];
} PB3LastMailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3LastMailRes_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LastMailRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LastMailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastMailMsg

@implementation PB3BroadcastMailMsg

@dynamic hasMail, mail;

typedef struct PB3BroadcastMailMsg__storage_ {
  uint32_t _has_storage_[1];
  PB3MailMsg *mail;
} PB3BroadcastMailMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mail",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3MailMsg),
        .number = PB3BroadcastMailMsg_FieldNumber_Mail,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastMailMsg__storage_, mail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastMailMsg class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastMailMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPhoneUsedReq

@implementation PB3GetPhoneUsedReq

@dynamic countryCode;
@dynamic phoneNo;
@dynamic phoneSign;

typedef struct PB3GetPhoneUsedReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *countryCode;
  NSString *phoneNo;
  NSString *phoneSign;
} PB3GetPhoneUsedReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "countryCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPhoneUsedReq_FieldNumber_CountryCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetPhoneUsedReq__storage_, countryCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPhoneUsedReq_FieldNumber_PhoneNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetPhoneUsedReq__storage_, phoneNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneSign",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPhoneUsedReq_FieldNumber_PhoneSign,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetPhoneUsedReq__storage_, phoneSign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPhoneUsedReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPhoneUsedReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetPhoneUsedRes

@implementation PB3GetPhoneUsedRes

@dynamic isUsed;

typedef struct PB3GetPhoneUsedRes__storage_ {
  uint32_t _has_storage_[1];
} PB3GetPhoneUsedRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isUsed",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetPhoneUsedRes_FieldNumber_IsUsed,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetPhoneUsedRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetPhoneUsedRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LoginWithPhoneSMSReq

@implementation PB3LoginWithPhoneSMSReq

@dynamic phoneNo;
@dynamic smsToken;
@dynamic channel;
@dynamic deviceType;
@dynamic deviceId;

typedef struct PB3LoginWithPhoneSMSReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t channel;
  PB3DeviceType deviceType;
  NSString *phoneNo;
  NSString *smsToken;
  NSString *deviceId;
} PB3LoginWithPhoneSMSReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhoneSMSReq_FieldNumber_PhoneNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LoginWithPhoneSMSReq__storage_, phoneNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smsToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhoneSMSReq_FieldNumber_SmsToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LoginWithPhoneSMSReq__storage_, smsToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhoneSMSReq_FieldNumber_Channel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LoginWithPhoneSMSReq__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3LoginWithPhoneSMSReq_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LoginWithPhoneSMSReq__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhoneSMSReq_FieldNumber_DeviceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LoginWithPhoneSMSReq__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LoginWithPhoneSMSReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LoginWithPhoneSMSReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LoginWithPhoneSMSReq_DeviceType_RawValue(PB3LoginWithPhoneSMSReq *message) {
  GPBDescriptor *descriptor = [PB3LoginWithPhoneSMSReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LoginWithPhoneSMSReq_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LoginWithPhoneSMSReq_DeviceType_RawValue(PB3LoginWithPhoneSMSReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LoginWithPhoneSMSReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LoginWithPhoneSMSReq_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LoginWithPhoneSMSRes

@implementation PB3LoginWithPhoneSMSRes

@dynamic loginToken;
@dynamic isNew;

typedef struct PB3LoginWithPhoneSMSRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginToken;
} PB3LoginWithPhoneSMSRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhoneSMSRes_FieldNumber_LoginToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LoginWithPhoneSMSRes__storage_, loginToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhoneSMSRes_FieldNumber_IsNew,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LoginWithPhoneSMSRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LoginWithPhoneSMSRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LoginWithPhonePasswordReq

@implementation PB3LoginWithPhonePasswordReq

@dynamic phoneNo;
@dynamic password;
@dynamic channel;

typedef struct PB3LoginWithPhonePasswordReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t channel;
  NSString *phoneNo;
  NSString *password;
} PB3LoginWithPhonePasswordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhonePasswordReq_FieldNumber_PhoneNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LoginWithPhonePasswordReq__storage_, phoneNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhonePasswordReq_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LoginWithPhonePasswordReq__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhonePasswordReq_FieldNumber_Channel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LoginWithPhonePasswordReq__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LoginWithPhonePasswordReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LoginWithPhonePasswordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LoginWithPhonePasswordRes

@implementation PB3LoginWithPhonePasswordRes

@dynamic loginToken;

typedef struct PB3LoginWithPhonePasswordRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginToken;
} PB3LoginWithPhonePasswordRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3LoginWithPhonePasswordRes_FieldNumber_LoginToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LoginWithPhonePasswordRes__storage_, loginToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LoginWithPhonePasswordRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LoginWithPhonePasswordRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChinaMobileQuickLoginReq

@implementation PB3ChinaMobileQuickLoginReq

@dynamic appId;
@dynamic token;
@dynamic channel;
@dynamic deviceType;
@dynamic deviceId;

typedef struct PB3ChinaMobileQuickLoginReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t channel;
  PB3DeviceType deviceType;
  NSString *appId;
  NSString *token;
  NSString *deviceId;
} PB3ChinaMobileQuickLoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaMobileQuickLoginReq_FieldNumber_AppId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChinaMobileQuickLoginReq__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaMobileQuickLoginReq_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChinaMobileQuickLoginReq__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaMobileQuickLoginReq_FieldNumber_Channel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChinaMobileQuickLoginReq__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3ChinaMobileQuickLoginReq_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChinaMobileQuickLoginReq__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaMobileQuickLoginReq_FieldNumber_DeviceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChinaMobileQuickLoginReq__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChinaMobileQuickLoginReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChinaMobileQuickLoginReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChinaMobileQuickLoginReq_DeviceType_RawValue(PB3ChinaMobileQuickLoginReq *message) {
  GPBDescriptor *descriptor = [PB3ChinaMobileQuickLoginReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChinaMobileQuickLoginReq_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChinaMobileQuickLoginReq_DeviceType_RawValue(PB3ChinaMobileQuickLoginReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChinaMobileQuickLoginReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChinaMobileQuickLoginReq_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChinaMobileQuickLoginRes

@implementation PB3ChinaMobileQuickLoginRes

@dynamic loginToken;
@dynamic isNew;

typedef struct PB3ChinaMobileQuickLoginRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginToken;
} PB3ChinaMobileQuickLoginRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaMobileQuickLoginRes_FieldNumber_LoginToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChinaMobileQuickLoginRes__storage_, loginToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaMobileQuickLoginRes_FieldNumber_IsNew,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChinaMobileQuickLoginRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChinaMobileQuickLoginRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChinaTelecomAuthReq

@implementation PB3ChinaTelecomAuthReq

@dynamic accessToken;
@dynamic channel;
@dynamic deviceType;
@dynamic deviceId;

typedef struct PB3ChinaTelecomAuthReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t channel;
  PB3DeviceType deviceType;
  NSString *accessToken;
  NSString *deviceId;
} PB3ChinaTelecomAuthReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaTelecomAuthReq_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChinaTelecomAuthReq__storage_, accessToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaTelecomAuthReq_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChinaTelecomAuthReq__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3ChinaTelecomAuthReq_FieldNumber_DeviceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChinaTelecomAuthReq__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaTelecomAuthReq_FieldNumber_DeviceId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChinaTelecomAuthReq__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChinaTelecomAuthReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChinaTelecomAuthReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChinaTelecomAuthReq_DeviceType_RawValue(PB3ChinaTelecomAuthReq *message) {
  GPBDescriptor *descriptor = [PB3ChinaTelecomAuthReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChinaTelecomAuthReq_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChinaTelecomAuthReq_DeviceType_RawValue(PB3ChinaTelecomAuthReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChinaTelecomAuthReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChinaTelecomAuthReq_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChinaTelecomAuthRes

@implementation PB3ChinaTelecomAuthRes

@dynamic loginToken;
@dynamic isNew;

typedef struct PB3ChinaTelecomAuthRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginToken;
} PB3ChinaTelecomAuthRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaTelecomAuthRes_FieldNumber_LoginToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChinaTelecomAuthRes__storage_, loginToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isNew",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChinaTelecomAuthRes_FieldNumber_IsNew,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChinaTelecomAuthRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChinaTelecomAuthRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewAuthTokenReq

@implementation PB3NewAuthTokenReq


typedef struct PB3NewAuthTokenReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NewAuthTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewAuthTokenReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NewAuthTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewAuthTokenRes

@implementation PB3NewAuthTokenRes

@dynamic authReqToken;

typedef struct PB3NewAuthTokenRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *authReqToken;
} PB3NewAuthTokenRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authReqToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAuthTokenRes_FieldNumber_AuthReqToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewAuthTokenRes__storage_, authReqToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewAuthTokenRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewAuthTokenRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AuthReqTokenConfirmReq

@implementation PB3AuthReqTokenConfirmReq

@dynamic authReqToken;

typedef struct PB3AuthReqTokenConfirmReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *authReqToken;
} PB3AuthReqTokenConfirmReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authReqToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthReqTokenConfirmReq_FieldNumber_AuthReqToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthReqTokenConfirmReq__storage_, authReqToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthReqTokenConfirmReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthReqTokenConfirmReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AuthReqTokenConfirmRes

@implementation PB3AuthReqTokenConfirmRes


typedef struct PB3AuthReqTokenConfirmRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AuthReqTokenConfirmRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthReqTokenConfirmRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AuthReqTokenConfirmRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AuthReqResultReq

@implementation PB3AuthReqResultReq

@dynamic authReqToken;

typedef struct PB3AuthReqResultReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *authReqToken;
} PB3AuthReqResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authReqToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthReqResultReq_FieldNumber_AuthReqToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthReqResultReq__storage_, authReqToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthReqResultReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthReqResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AuthReqResultRes

@implementation PB3AuthReqResultRes

@dynamic result;
@dynamic loginToken;

typedef struct PB3AuthReqResultRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t result;
  NSString *loginToken;
} PB3AuthReqResultRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthReqResultRes_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthReqResultRes__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "loginToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthReqResultRes_FieldNumber_LoginToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AuthReqResultRes__storage_, loginToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthReqResultRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthReqResultRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomAssets

@implementation PB3RoomAssets

@dynamic assetsType;
@dynamic assetsNum;
@dynamic isFreeze;

typedef struct PB3RoomAssets__storage_ {
  uint32_t _has_storage_[1];
  int64_t assetsType;
  int64_t assetsNum;
} PB3RoomAssets__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetsType",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAssets_FieldNumber_AssetsType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomAssets__storage_, assetsType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "assetsNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAssets_FieldNumber_AssetsNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomAssets__storage_, assetsNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isFreeze",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAssets_FieldNumber_IsFreeze,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomAssets class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomAssets__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomGiftTicketReq

@implementation PB3RoomGiftTicketReq

@dynamic playerId;

typedef struct PB3RoomGiftTicketReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3RoomGiftTicketReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomGiftTicketReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomGiftTicketReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomGiftTicketReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomGiftTicketReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomGiftTicketRes

@implementation PB3RoomGiftTicketRes

@dynamic result;
@dynamic value;
@dynamic assetsMap, assetsMap_Count;

typedef struct PB3RoomGiftTicketRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64ObjectDictionary *assetsMap;
  int64_t result;
  int64_t value;
} PB3RoomGiftTicketRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomGiftTicketRes_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomGiftTicketRes__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomGiftTicketRes_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomGiftTicketRes__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "assetsMap",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomAssets),
        .number = PB3RoomGiftTicketRes_FieldNumber_AssetsMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomGiftTicketRes__storage_, assetsMap),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomGiftTicketRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomGiftTicketRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HasUpdateSexPasswdReq

@implementation PB3HasUpdateSexPasswdReq


typedef struct PB3HasUpdateSexPasswdReq__storage_ {
  uint32_t _has_storage_[1];
} PB3HasUpdateSexPasswdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HasUpdateSexPasswdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3HasUpdateSexPasswdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HasUpdateSexPasswdRes

@implementation PB3HasUpdateSexPasswdRes

@dynamic isSet;
@dynamic isSetInterest;

typedef struct PB3HasUpdateSexPasswdRes__storage_ {
  uint32_t _has_storage_[1];
} PB3HasUpdateSexPasswdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSet",
        .dataTypeSpecific.className = NULL,
        .number = PB3HasUpdateSexPasswdRes_FieldNumber_IsSet,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isSetInterest",
        .dataTypeSpecific.className = NULL,
        .number = PB3HasUpdateSexPasswdRes_FieldNumber_IsSetInterest,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HasUpdateSexPasswdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HasUpdateSexPasswdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetUpdateSexPasswdReq

@implementation PB3SetUpdateSexPasswdReq


typedef struct PB3SetUpdateSexPasswdReq__storage_ {
  uint32_t _has_storage_[1];
} PB3SetUpdateSexPasswdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetUpdateSexPasswdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetUpdateSexPasswdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetUpdateSexPasswdRes

@implementation PB3SetUpdateSexPasswdRes


typedef struct PB3SetUpdateSexPasswdRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetUpdateSexPasswdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetUpdateSexPasswdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetUpdateSexPasswdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateSexReq

@implementation PB3UpdateSexReq


typedef struct PB3UpdateSexReq__storage_ {
  uint32_t _has_storage_[1];
} PB3UpdateSexReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateSexReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UpdateSexReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateSexRes

@implementation PB3UpdateSexRes


typedef struct PB3UpdateSexRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UpdateSexRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateSexRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UpdateSexRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdatePasswdReq

@implementation PB3UpdatePasswdReq

@dynamic oldPasswd;
@dynamic newPasswd1;
@dynamic newPasswd2;

typedef struct PB3UpdatePasswdReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *oldPasswd;
  NSString *newPasswd1;
  NSString *newPasswd2;
} PB3UpdatePasswdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oldPasswd",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdReq_FieldNumber_OldPasswd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdReq__storage_, oldPasswd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPasswd1",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdReq_FieldNumber_NewPasswd1,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdReq__storage_, newPasswd1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPasswd2",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdReq_FieldNumber_NewPasswd2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdReq__storage_, newPasswd2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdatePasswdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdatePasswdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdatePasswdRes

@implementation PB3UpdatePasswdRes


typedef struct PB3UpdatePasswdRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UpdatePasswdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdatePasswdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UpdatePasswdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdatePasswdChangePhoneReq

@implementation PB3UpdatePasswdChangePhoneReq

@dynamic newPasswd1;
@dynamic newPasswd2;
@dynamic name;
@dynamic identityCardNo;
@dynamic identityCardPhoto;
@dynamic id_p;
@dynamic phone;

typedef struct PB3UpdatePasswdChangePhoneReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *newPasswd1;
  NSString *newPasswd2;
  NSString *name;
  NSString *identityCardNo;
  NSString *identityCardPhoto;
  NSString *phone;
  int64_t id_p;
} PB3UpdatePasswdChangePhoneReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "newPasswd1",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneReq_FieldNumber_NewPasswd1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneReq__storage_, newPasswd1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPasswd2",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneReq_FieldNumber_NewPasswd2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneReq__storage_, newPasswd2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneReq_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityCardNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneReq_FieldNumber_IdentityCardNo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneReq__storage_, identityCardNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityCardPhoto",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneReq_FieldNumber_IdentityCardPhoto,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneReq__storage_, identityCardPhoto),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneReq_FieldNumber_Id_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneReq_FieldNumber_Phone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdatePasswdChangePhoneReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdatePasswdChangePhoneReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdatePasswdChangePhoneRes

@implementation PB3UpdatePasswdChangePhoneRes

@dynamic type;
@dynamic name;
@dynamic time;

typedef struct PB3UpdatePasswdChangePhoneRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CheckType type;
  NSString *name;
  NSString *time;
} PB3UpdatePasswdChangePhoneRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CheckType_EnumDescriptor,
        .number = PB3UpdatePasswdChangePhoneRes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneRes_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdatePasswdChangePhoneRes_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UpdatePasswdChangePhoneRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdatePasswdChangePhoneRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdatePasswdChangePhoneRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UpdatePasswdChangePhoneRes_Type_RawValue(PB3UpdatePasswdChangePhoneRes *message) {
  GPBDescriptor *descriptor = [PB3UpdatePasswdChangePhoneRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UpdatePasswdChangePhoneRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UpdatePasswdChangePhoneRes_Type_RawValue(PB3UpdatePasswdChangePhoneRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UpdatePasswdChangePhoneRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UpdatePasswdChangePhoneRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChangeExchangePasswdReq

@implementation PB3ChangeExchangePasswdReq

@dynamic newPasswd1;
@dynamic newPasswd2;
@dynamic name;
@dynamic identityCardNo;
@dynamic identityCardPhoto;
@dynamic cardNum;
@dynamic phone;

typedef struct PB3ChangeExchangePasswdReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *newPasswd1;
  NSString *newPasswd2;
  NSString *name;
  NSString *identityCardNo;
  NSString *identityCardPhoto;
  NSString *cardNum;
  NSString *phone;
} PB3ChangeExchangePasswdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "newPasswd1",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdReq_FieldNumber_NewPasswd1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdReq__storage_, newPasswd1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPasswd2",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdReq_FieldNumber_NewPasswd2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdReq__storage_, newPasswd2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdReq_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityCardNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdReq_FieldNumber_IdentityCardNo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdReq__storage_, identityCardNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityCardPhoto",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdReq_FieldNumber_IdentityCardPhoto,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdReq__storage_, identityCardPhoto),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdReq_FieldNumber_CardNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdReq__storage_, cardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdReq_FieldNumber_Phone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeExchangePasswdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeExchangePasswdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeExchangePasswdRes

@implementation PB3ChangeExchangePasswdRes

@dynamic type;
@dynamic name;
@dynamic time;

typedef struct PB3ChangeExchangePasswdRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CheckType type;
  NSString *name;
  NSString *time;
} PB3ChangeExchangePasswdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CheckType_EnumDescriptor,
        .number = PB3ChangeExchangePasswdRes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdRes_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeExchangePasswdRes_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChangeExchangePasswdRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeExchangePasswdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeExchangePasswdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChangeExchangePasswdRes_Type_RawValue(PB3ChangeExchangePasswdRes *message) {
  GPBDescriptor *descriptor = [PB3ChangeExchangePasswdRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeExchangePasswdRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChangeExchangePasswdRes_Type_RawValue(PB3ChangeExchangePasswdRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChangeExchangePasswdRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChangeExchangePasswdRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BindPhoneReq

@implementation PB3BindPhoneReq

@dynamic phoneAreaCode;
@dynamic phone;
@dynamic code;
@dynamic opType;
@dynamic yidunToken;
@dynamic phoneSign;

typedef struct PB3BindPhoneReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UserBindPhoneOpType opType;
  NSString *phoneAreaCode;
  NSString *phone;
  NSString *code;
  NSString *yidunToken;
  NSString *phoneSign;
} PB3BindPhoneReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneAreaCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneReq_FieldNumber_PhoneAreaCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BindPhoneReq__storage_, phoneAreaCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneReq_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BindPhoneReq__storage_, phone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneReq_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BindPhoneReq__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "opType",
        .dataTypeSpecific.enumDescFunc = PB3UserBindPhoneOpType_EnumDescriptor,
        .number = PB3BindPhoneReq_FieldNumber_OpType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BindPhoneReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "yidunToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneReq_FieldNumber_YidunToken,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BindPhoneReq__storage_, yidunToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneSign",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneReq_FieldNumber_PhoneSign,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BindPhoneReq__storage_, phoneSign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindPhoneReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BindPhoneReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001M\000\002E\000\003D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BindPhoneReq_OpType_RawValue(PB3BindPhoneReq *message) {
  GPBDescriptor *descriptor = [PB3BindPhoneReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhoneReq_FieldNumber_OpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BindPhoneReq_OpType_RawValue(PB3BindPhoneReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BindPhoneReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhoneReq_FieldNumber_OpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3H5BindPhoneReq

@implementation PB3H5BindPhoneReq

@dynamic phoneAreaCode;
@dynamic phone;
@dynamic code;
@dynamic opType;

typedef struct PB3H5BindPhoneReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UserBindPhoneOpType opType;
  NSString *phoneAreaCode;
  NSString *phone;
  NSString *code;
} PB3H5BindPhoneReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneAreaCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5BindPhoneReq_FieldNumber_PhoneAreaCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3H5BindPhoneReq__storage_, phoneAreaCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5BindPhoneReq_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3H5BindPhoneReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5BindPhoneReq_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3H5BindPhoneReq__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "opType",
        .dataTypeSpecific.enumDescFunc = PB3UserBindPhoneOpType_EnumDescriptor,
        .number = PB3H5BindPhoneReq_FieldNumber_OpType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3H5BindPhoneReq__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5BindPhoneReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3H5BindPhoneReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3H5BindPhoneReq_OpType_RawValue(PB3H5BindPhoneReq *message) {
  GPBDescriptor *descriptor = [PB3H5BindPhoneReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3H5BindPhoneReq_FieldNumber_OpType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3H5BindPhoneReq_OpType_RawValue(PB3H5BindPhoneReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3H5BindPhoneReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3H5BindPhoneReq_FieldNumber_OpType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BindPhoneRes

@implementation PB3BindPhoneRes

@dynamic isSucc;
@dynamic phone;

typedef struct PB3BindPhoneRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
} PB3BindPhoneRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSucc",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneRes_FieldNumber_IsSucc,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneRes_FieldNumber_Phone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BindPhoneRes__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindPhoneRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BindPhoneRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BindPhoneItem

@implementation PB3BindPhoneItem

@dynamic giftId;
@dynamic image;
@dynamic name;
@dynamic giftDescription;
@dynamic newUserGift;
@dynamic number;
@dynamic itemType;

typedef struct PB3BindPhoneItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t newUserGift;
  int32_t number;
  PB3UserBindPhoneItemType itemType;
  NSString *image;
  NSString *name;
  NSString *giftDescription;
} PB3BindPhoneItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BindPhoneItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneItem_FieldNumber_Image,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BindPhoneItem__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneItem_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BindPhoneItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftDescription",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneItem_FieldNumber_GiftDescription,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BindPhoneItem__storage_, giftDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newUserGift",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneItem_FieldNumber_NewUserGift,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BindPhoneItem__storage_, newUserGift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhoneItem_FieldNumber_Number,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BindPhoneItem__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "itemType",
        .dataTypeSpecific.enumDescFunc = PB3UserBindPhoneItemType_EnumDescriptor,
        .number = PB3BindPhoneItem_FieldNumber_ItemType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BindPhoneItem__storage_, itemType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindPhoneItem class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BindPhoneItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BindPhoneItem_ItemType_RawValue(PB3BindPhoneItem *message) {
  GPBDescriptor *descriptor = [PB3BindPhoneItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhoneItem_FieldNumber_ItemType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BindPhoneItem_ItemType_RawValue(PB3BindPhoneItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BindPhoneItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhoneItem_FieldNumber_ItemType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetBindPhoneItemReq

@implementation PB3GetBindPhoneItemReq


typedef struct PB3GetBindPhoneItemReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetBindPhoneItemReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBindPhoneItemReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetBindPhoneItemReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetBindPhoneItemRes

@implementation PB3GetBindPhoneItemRes

@dynamic listArray, listArray_Count;
@dynamic isForce;

typedef struct PB3GetBindPhoneItemRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GetBindPhoneItemRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BindPhoneItem),
        .number = PB3GetBindPhoneItemRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetBindPhoneItemRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isForce",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetBindPhoneItemRes_FieldNumber_IsForce,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetBindPhoneItemRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetBindPhoneItemRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CanRechargeCreditReq

@implementation PB3CanRechargeCreditReq

@dynamic playerId;

typedef struct PB3CanRechargeCreditReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3CanRechargeCreditReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CanRechargeCreditReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CanRechargeCreditReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CanRechargeCreditReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CanRechargeCreditReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CanRechargeCreditRes

@implementation PB3CanRechargeCreditRes

@dynamic dayRemainCredit;
@dynamic totalRemainCredit;
@dynamic isLimit;

typedef struct PB3CanRechargeCreditRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t dayRemainCredit;
  uint32_t totalRemainCredit;
} PB3CanRechargeCreditRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dayRemainCredit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CanRechargeCreditRes_FieldNumber_DayRemainCredit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CanRechargeCreditRes__storage_, dayRemainCredit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalRemainCredit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CanRechargeCreditRes_FieldNumber_TotalRemainCredit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CanRechargeCreditRes__storage_, totalRemainCredit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3CanRechargeCreditRes_FieldNumber_IsLimit,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CanRechargeCreditRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CanRechargeCreditRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BindPhonePlayer

@implementation PB3BindPhonePlayer

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic type;
@dynamic sex;

typedef struct PB3BindPhonePlayer__storage_ {
  uint32_t _has_storage_[1];
  PB3AccountChannelType type;
  PB3SexType sex;
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3BindPhonePlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhonePlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BindPhonePlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhonePlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BindPhonePlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhonePlayer_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BindPhonePlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BindPhonePlayer_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BindPhonePlayer__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3AccountChannelType_EnumDescriptor,
        .number = PB3BindPhonePlayer_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BindPhonePlayer__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3BindPhonePlayer_FieldNumber_Sex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BindPhonePlayer__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BindPhonePlayer class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BindPhonePlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BindPhonePlayer_Type_RawValue(PB3BindPhonePlayer *message) {
  GPBDescriptor *descriptor = [PB3BindPhonePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhonePlayer_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BindPhonePlayer_Type_RawValue(PB3BindPhonePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BindPhonePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhonePlayer_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3BindPhonePlayer_Sex_RawValue(PB3BindPhonePlayer *message) {
  GPBDescriptor *descriptor = [PB3BindPhonePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhonePlayer_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BindPhonePlayer_Sex_RawValue(PB3BindPhonePlayer *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BindPhonePlayer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BindPhonePlayer_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowBindPhoneIdsReq

@implementation PB3ShowBindPhoneIdsReq


typedef struct PB3ShowBindPhoneIdsReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowBindPhoneIdsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowBindPhoneIdsReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowBindPhoneIdsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowBindPhoneIdsRes

@implementation PB3ShowBindPhoneIdsRes

@dynamic isBindPhone;
@dynamic listArray, listArray_Count;
@dynamic changePower;
@dynamic isOpen;
@dynamic isShowAdd;
@dynamic contentArray, contentArray_Count;
@dynamic phone;
@dynamic accountNum;
@dynamic isWechatOrQq;
@dynamic isShowIcon;

typedef struct PB3ShowBindPhoneIdsRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t accountNum;
  NSMutableArray *listArray;
  NSMutableArray *contentArray;
  NSString *phone;
} PB3ShowBindPhoneIdsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isBindPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_IsBindPhone,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BindPhonePlayer),
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowBindPhoneIdsRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "changePower",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_ChangePower,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isOpen",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_IsOpen,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShowAdd",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_IsShowAdd,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "contentArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowBindPhoneIdsRes__storage_, contentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_Phone,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ShowBindPhoneIdsRes__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_AccountNum,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ShowBindPhoneIdsRes__storage_, accountNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isWechatOrQq",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_IsWechatOrQq,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isShowIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBindPhoneIdsRes_FieldNumber_IsShowIcon,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowBindPhoneIdsRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowBindPhoneIdsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetShowBindPhoneIdsReq

@implementation PB3GetShowBindPhoneIdsReq

@dynamic smsToken;

typedef struct PB3GetShowBindPhoneIdsReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *smsToken;
} PB3GetShowBindPhoneIdsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "smsToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetShowBindPhoneIdsReq_FieldNumber_SmsToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetShowBindPhoneIdsReq__storage_, smsToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetShowBindPhoneIdsReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetShowBindPhoneIdsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetShowBindPhoneIdsRes

@implementation PB3GetShowBindPhoneIdsRes

@dynamic listArray, listArray_Count;
@dynamic isShowIcon;

typedef struct PB3GetShowBindPhoneIdsRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GetShowBindPhoneIdsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BindPhonePlayer),
        .number = PB3GetShowBindPhoneIdsRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetShowBindPhoneIdsRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isShowIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetShowBindPhoneIdsRes_FieldNumber_IsShowIcon,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetShowBindPhoneIdsRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetShowBindPhoneIdsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreateNewTokenReq

@implementation PB3CreateNewTokenReq

@dynamic id_p;

typedef struct PB3CreateNewTokenReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3CreateNewTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreateNewTokenReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreateNewTokenReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreateNewTokenReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreateNewTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CreateNewTokenRes

@implementation PB3CreateNewTokenRes

@dynamic key;
@dynamic isApplyLogoff;
@dynamic logoffExpired;
@dynamic shortId;

typedef struct PB3CreateNewTokenRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *logoffExpired;
  int64_t shortId;
} PB3CreateNewTokenRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreateNewTokenRes_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CreateNewTokenRes__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isApplyLogoff",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreateNewTokenRes_FieldNumber_IsApplyLogoff,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "logoffExpired",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreateNewTokenRes_FieldNumber_LogoffExpired,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CreateNewTokenRes__storage_, logoffExpired),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CreateNewTokenRes_FieldNumber_ShortId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CreateNewTokenRes__storage_, shortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CreateNewTokenRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CreateNewTokenRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCertificationReq

@implementation PB3GetCertificationReq

@dynamic id_p;

typedef struct PB3GetCertificationReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3GetCertificationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCertificationReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCertificationReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCertificationReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCertificationReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCertificationRes

@implementation PB3GetCertificationRes

@dynamic flag;

typedef struct PB3GetCertificationRes__storage_ {
  uint32_t _has_storage_[1];
} PB3GetCertificationRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCertificationRes_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCertificationRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCertificationRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCertificationInfoReq

@implementation PB3GetCertificationInfoReq

@dynamic certifyId;

typedef struct PB3GetCertificationInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *certifyId;
} PB3GetCertificationInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "certifyId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCertificationInfoReq_FieldNumber_CertifyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCertificationInfoReq__storage_, certifyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCertificationInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCertificationInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetCertificationInfoRes

@implementation PB3GetCertificationInfoRes

@dynamic name;
@dynamic identityCardNo;

typedef struct PB3GetCertificationInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *identityCardNo;
} PB3GetCertificationInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCertificationInfoRes_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetCertificationInfoRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityCardNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetCertificationInfoRes_FieldNumber_IdentityCardNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetCertificationInfoRes__storage_, identityCardNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetCertificationInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetCertificationInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CertificationInfoReq

@implementation PB3CertificationInfoReq


typedef struct PB3CertificationInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CertificationInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CertificationInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CertificationInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CertificationInfoRes

@implementation PB3CertificationInfoRes

@dynamic name;
@dynamic identityCardNo;

typedef struct PB3CertificationInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *identityCardNo;
} PB3CertificationInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CertificationInfoRes_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CertificationInfoRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityCardNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3CertificationInfoRes_FieldNumber_IdentityCardNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CertificationInfoRes__storage_, identityCardNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CertificationInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CertificationInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CertificationUrlReq

@implementation PB3CertificationUrlReq

@dynamic name;
@dynamic identityCardNo;

typedef struct PB3CertificationUrlReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *identityCardNo;
} PB3CertificationUrlReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CertificationUrlReq_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CertificationUrlReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityCardNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3CertificationUrlReq_FieldNumber_IdentityCardNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CertificationUrlReq__storage_, identityCardNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CertificationUrlReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CertificationUrlReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CertificationUrlRes

@implementation PB3CertificationUrlRes

@dynamic targetURL;
@dynamic bizNo;

typedef struct PB3CertificationUrlRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *targetURL;
  NSString *bizNo;
} PB3CertificationUrlRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CertificationUrlRes_FieldNumber_TargetURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CertificationUrlRes__storage_, targetURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bizNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3CertificationUrlRes_FieldNumber_BizNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CertificationUrlRes__storage_, bizNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CertificationUrlRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CertificationUrlRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChargeBonusInfo

@implementation PB3ChargeBonusInfo

@dynamic chargeType;
@dynamic isRandomDouble;
@dynamic tips;
@dynamic desc;

typedef struct PB3ChargeBonusInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3ChargeBonusType chargeType;
  NSString *tips;
  NSString *desc;
} PB3ChargeBonusInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chargeType",
        .dataTypeSpecific.enumDescFunc = PB3ChargeBonusType_EnumDescriptor,
        .number = PB3ChargeBonusInfo_FieldNumber_ChargeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChargeBonusInfo__storage_, chargeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isRandomDouble",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusInfo_FieldNumber_IsRandomDouble,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusInfo_FieldNumber_Tips,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChargeBonusInfo__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusInfo_FieldNumber_Desc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChargeBonusInfo__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChargeBonusInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChargeBonusInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChargeBonusInfo_ChargeType_RawValue(PB3ChargeBonusInfo *message) {
  GPBDescriptor *descriptor = [PB3ChargeBonusInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChargeBonusInfo_FieldNumber_ChargeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChargeBonusInfo_ChargeType_RawValue(PB3ChargeBonusInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChargeBonusInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChargeBonusInfo_FieldNumber_ChargeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetChongZhiReq

@implementation PB3GetChongZhiReq

@dynamic playerId;
@dynamic type;

typedef struct PB3GetChongZhiReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChongZhiType type;
  int64_t playerId;
} PB3GetChongZhiReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetChongZhiReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetChongZhiReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ChongZhiType_EnumDescriptor,
        .number = PB3GetChongZhiReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetChongZhiReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetChongZhiReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetChongZhiReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetChongZhiReq_Type_RawValue(PB3GetChongZhiReq *message) {
  GPBDescriptor *descriptor = [PB3GetChongZhiReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetChongZhiReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetChongZhiReq_Type_RawValue(PB3GetChongZhiReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetChongZhiReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetChongZhiReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetChongZhiRes

@implementation PB3GetChongZhiRes

@dynamic listArray, listArray_Count;
@dynamic isCmbUser;
@dynamic bonusInfoListArray, bonusInfoListArray_Count;

typedef struct PB3GetChongZhiRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  NSMutableArray *bonusInfoListArray;
} PB3GetChongZhiRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChongZhiItem),
        .number = PB3GetChongZhiRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetChongZhiRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isCmbUser",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetChongZhiRes_FieldNumber_IsCmbUser,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bonusInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChargeBonusInfo),
        .number = PB3GetChongZhiRes_FieldNumber_BonusInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetChongZhiRes__storage_, bonusInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetChongZhiRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetChongZhiRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChongZhiItem

@implementation PB3ChongZhiItem

@dynamic unit;
@dynamic gold;
@dynamic amount;
@dynamic playerType;
@dynamic playerTypeMap, playerTypeMap_Count;
@dynamic id_p;

typedef struct PB3ChongZhiItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t gold;
  int32_t amount;
  PB3ChongZhiPlayerType playerType;
  int32_t id_p;
  NSString *unit;
  GPBInt32BoolDictionary *playerTypeMap;
} PB3ChongZhiItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChongZhiItem_FieldNumber_Unit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChongZhiItem__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChongZhiItem_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChongZhiItem__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChongZhiItem_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChongZhiItem__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerType",
        .dataTypeSpecific.enumDescFunc = PB3ChongZhiPlayerType_EnumDescriptor,
        .number = PB3ChongZhiItem_FieldNumber_PlayerType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChongZhiItem__storage_, playerType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerTypeMap",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChongZhiItem_FieldNumber_PlayerTypeMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ChongZhiItem__storage_, playerTypeMap),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChongZhiItem_FieldNumber_Id_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChongZhiItem__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChongZhiItem class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChongZhiItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChongZhiItem_PlayerType_RawValue(PB3ChongZhiItem *message) {
  GPBDescriptor *descriptor = [PB3ChongZhiItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChongZhiItem_FieldNumber_PlayerType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChongZhiItem_PlayerType_RawValue(PB3ChongZhiItem *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChongZhiItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChongZhiItem_FieldNumber_PlayerType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AuthGetCjIdReq

@implementation PB3AuthGetCjIdReq


typedef struct PB3AuthGetCjIdReq__storage_ {
  uint32_t _has_storage_[1];
} PB3AuthGetCjIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthGetCjIdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AuthGetCjIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AuthGetCjIdRes

@implementation PB3AuthGetCjIdRes

@dynamic mzId;
@dynamic cjId;

typedef struct PB3AuthGetCjIdRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t mzId;
  int64_t cjId;
} PB3AuthGetCjIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mzId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthGetCjIdRes_FieldNumber_MzId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthGetCjIdRes__storage_, mzId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cjId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthGetCjIdRes_FieldNumber_CjId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AuthGetCjIdRes__storage_, cjId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthGetCjIdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthGetCjIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DialogCallbackReq

@implementation PB3DialogCallbackReq

@dynamic callbackData;
@dynamic type;

typedef struct PB3DialogCallbackReq__storage_ {
  uint32_t _has_storage_[1];
  PB3DialogButtonType type;
  NSData *callbackData;
} PB3DialogCallbackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callbackData",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogCallbackReq_FieldNumber_CallbackData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DialogCallbackReq__storage_, callbackData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3DialogButtonType_EnumDescriptor,
        .number = PB3DialogCallbackReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DialogCallbackReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DialogCallbackReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DialogCallbackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DialogCallbackReq_Type_RawValue(PB3DialogCallbackReq *message) {
  GPBDescriptor *descriptor = [PB3DialogCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogCallbackReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DialogCallbackReq_Type_RawValue(PB3DialogCallbackReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DialogCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogCallbackReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DialogCallbackRes

@implementation PB3DialogCallbackRes


typedef struct PB3DialogCallbackRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DialogCallbackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DialogCallbackRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DialogCallbackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ImageInfo

@implementation PB3ImageInfo

@dynamic id_p;
@dynamic width;
@dynamic height;
@dynamic isVideo;
@dynamic URL;
@dynamic status;

typedef struct PB3ImageInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t width;
  uint32_t height;
  PB3AuditStatus status;
  NSString *URL;
  int64_t id_p;
} PB3ImageInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImageInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ImageInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImageInfo_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ImageInfo__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImageInfo_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ImageInfo__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isVideo",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImageInfo_FieldNumber_IsVideo,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImageInfo_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ImageInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3AuditStatus_EnumDescriptor,
        .number = PB3ImageInfo_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ImageInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ImageInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ImageInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ImageInfo_Status_RawValue(PB3ImageInfo *message) {
  GPBDescriptor *descriptor = [PB3ImageInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ImageInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ImageInfo_Status_RawValue(PB3ImageInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ImageInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ImageInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ImageInfoList

@implementation PB3ImageInfoList

@dynamic picsArray, picsArray_Count;

typedef struct PB3ImageInfoList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *picsArray;
} PB3ImageInfoList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "picsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ImageInfo),
        .number = PB3ImageInfoList_FieldNumber_PicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ImageInfoList__storage_, picsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ImageInfoList class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ImageInfoList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ImageInfoListReq

@implementation PB3ImageInfoListReq

@dynamic playerId;

typedef struct PB3ImageInfoListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3ImageInfoListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImageInfoListReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ImageInfoListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ImageInfoListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ImageInfoListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ImageInfoListRes

@implementation PB3ImageInfoListRes

@dynamic hasImageInfoList, imageInfoList;

typedef struct PB3ImageInfoListRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ImageInfoList *imageInfoList;
} PB3ImageInfoListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageInfoList",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ImageInfoList),
        .number = PB3ImageInfoListRes_FieldNumber_ImageInfoList,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ImageInfoListRes__storage_, imageInfoList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ImageInfoListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ImageInfoListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3YunpianSmsCodeReq

@implementation PB3YunpianSmsCodeReq

@dynamic phone;
@dynamic country;

typedef struct PB3YunpianSmsCodeReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *country;
} PB3YunpianSmsCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3YunpianSmsCodeReq_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3YunpianSmsCodeReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = PB3YunpianSmsCodeReq_FieldNumber_Country,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3YunpianSmsCodeReq__storage_, country),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3YunpianSmsCodeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3YunpianSmsCodeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3YunpianSmsCodeRes

@implementation PB3YunpianSmsCodeRes

@dynamic code;
@dynamic msg;

typedef struct PB3YunpianSmsCodeRes__storage_ {
  uint32_t _has_storage_[1];
  PB3SmsCode code;
  NSString *msg;
} PB3YunpianSmsCodeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = PB3SmsCode_EnumDescriptor,
        .number = PB3YunpianSmsCodeRes_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3YunpianSmsCodeRes__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3YunpianSmsCodeRes_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3YunpianSmsCodeRes__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3YunpianSmsCodeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3YunpianSmsCodeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3YunpianSmsCodeRes_Code_RawValue(PB3YunpianSmsCodeRes *message) {
  GPBDescriptor *descriptor = [PB3YunpianSmsCodeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3YunpianSmsCodeRes_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3YunpianSmsCodeRes_Code_RawValue(PB3YunpianSmsCodeRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3YunpianSmsCodeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3YunpianSmsCodeRes_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DeleteAccountCheckReq

@implementation PB3DeleteAccountCheckReq

@dynamic clientInfo;

typedef struct PB3DeleteAccountCheckReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientInfo;
} PB3DeleteAccountCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientInfo",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckReq_FieldNumber_ClientInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DeleteAccountCheckReq__storage_, clientInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteAccountCheckReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DeleteAccountCheckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DeleteAccountCheckRes

@implementation PB3DeleteAccountCheckRes

@dynamic accountSafe;
@dynamic accountBan;
@dynamic moneyEmpty;
@dynamic billOrder;
@dynamic hasPlayer, player;
@dynamic isBindPhone;
@dynamic isClanIdentity;
@dynamic isIosVerity;
@dynamic isServicingOrder;
@dynamic isBillOrdering;
@dynamic keepDays;
@dynamic isAccountBanFreedom;

typedef struct PB3DeleteAccountCheckRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t keepDays;
  PB3SimplePlayer *player;
} PB3DeleteAccountCheckRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountSafe",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_AccountSafe,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "accountBan",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_AccountBan,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "moneyEmpty",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_MoneyEmpty,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "billOrder",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_BillOrder,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3DeleteAccountCheckRes_FieldNumber_Player,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3DeleteAccountCheckRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isBindPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_IsBindPhone,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isClanIdentity",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_IsClanIdentity,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isIosVerity",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_IsIosVerity,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isServicingOrder",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_IsServicingOrder,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isBillOrdering",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_IsBillOrdering,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "keepDays",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_KeepDays,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3DeleteAccountCheckRes__storage_, keepDays),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAccountBanFreedom",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountCheckRes_FieldNumber_IsAccountBanFreedom,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteAccountCheckRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DeleteAccountCheckRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DeleteAccountReq

@implementation PB3DeleteAccountReq


typedef struct PB3DeleteAccountReq__storage_ {
  uint32_t _has_storage_[1];
} PB3DeleteAccountReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteAccountReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DeleteAccountReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DeleteAccountRes

@implementation PB3DeleteAccountRes

@dynamic phone;

typedef struct PB3DeleteAccountRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
} PB3DeleteAccountRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountRes_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DeleteAccountRes__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteAccountRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DeleteAccountRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DeleteAccountConfirmReq

@implementation PB3DeleteAccountConfirmReq

@dynamic code;
@dynamic isAbandonAssets;
@dynamic isAbandonServicingOrder;
@dynamic isAbandonBillOrdering;

typedef struct PB3DeleteAccountConfirmReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *code;
} PB3DeleteAccountConfirmReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountConfirmReq_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DeleteAccountConfirmReq__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAbandonAssets",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountConfirmReq_FieldNumber_IsAbandonAssets,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAbandonServicingOrder",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountConfirmReq_FieldNumber_IsAbandonServicingOrder,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAbandonBillOrdering",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountConfirmReq_FieldNumber_IsAbandonBillOrdering,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteAccountConfirmReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DeleteAccountConfirmReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DeleteAccountConfirmRes

@implementation PB3DeleteAccountConfirmRes

@dynamic keepDays;

typedef struct PB3DeleteAccountConfirmRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t keepDays;
} PB3DeleteAccountConfirmRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keepDays",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteAccountConfirmRes_FieldNumber_KeepDays,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DeleteAccountConfirmRes__storage_, keepDays),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteAccountConfirmRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DeleteAccountConfirmRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitNumReq

@implementation PB3VisitNumReq

@dynamic ownerId;

typedef struct PB3VisitNumReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t ownerId;
} PB3VisitNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitNumReq_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitNumReq__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitNumReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitNumRes

@implementation PB3VisitNumRes

@dynamic totalVisitNum;
@dynamic addNum;

typedef struct PB3VisitNumRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t totalVisitNum;
  int64_t addNum;
} PB3VisitNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalVisitNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitNumRes_FieldNumber_TotalVisitNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitNumRes__storage_, totalVisitNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "addNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitNumRes_FieldNumber_AddNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitNumRes__storage_, addNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitNumRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitorStatReq

@implementation PB3VisitorStatReq


typedef struct PB3VisitorStatReq__storage_ {
  uint32_t _has_storage_[1];
} PB3VisitorStatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorStatReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VisitorStatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitorStatRes

@implementation PB3VisitorStatRes

@dynamic totalVisitNum;
@dynamic addNum;
@dynamic todayVisitor;
@dynamic todayVisitNum;

typedef struct PB3VisitorStatRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t totalVisitNum;
  int64_t addNum;
  int64_t todayVisitor;
  int64_t todayVisitNum;
} PB3VisitorStatRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalVisitNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorStatRes_FieldNumber_TotalVisitNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitorStatRes__storage_, totalVisitNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "addNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorStatRes_FieldNumber_AddNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitorStatRes__storage_, addNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "todayVisitor",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorStatRes_FieldNumber_TodayVisitor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VisitorStatRes__storage_, todayVisitor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "todayVisitNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorStatRes_FieldNumber_TodayVisitNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VisitorStatRes__storage_, todayVisitNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorStatRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitorStatRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitorListReq

@implementation PB3VisitorListReq

@dynamic ownerId;
@dynamic page;

typedef struct PB3VisitorListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int64_t ownerId;
} PB3VisitorListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorListReq_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitorListReq__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorListReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitorListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitorListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitorListRes

@implementation PB3VisitorListRes

@dynamic visitorInfoArray, visitorInfoArray_Count;

typedef struct PB3VisitorListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *visitorInfoArray;
} PB3VisitorListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "visitorInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VisitorInfo),
        .number = PB3VisitorListRes_FieldNumber_VisitorInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VisitorListRes__storage_, visitorInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitorListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyVisitListReq

@implementation PB3MyVisitListReq

@dynamic page;

typedef struct PB3MyVisitListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
} PB3MyVisitListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyVisitListReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MyVisitListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyVisitListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MyVisitListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyVisitListRes

@implementation PB3MyVisitListRes

@dynamic visitorInfoArray, visitorInfoArray_Count;

typedef struct PB3MyVisitListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *visitorInfoArray;
} PB3MyVisitListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "visitorInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VisitorInfo),
        .number = PB3MyVisitListRes_FieldNumber_VisitorInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MyVisitListRes__storage_, visitorInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyVisitListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MyVisitListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitorOptReq

@implementation PB3VisitorOptReq

@dynamic ownId;
@dynamic id_p;
@dynamic optType;
@dynamic page;
@dynamic visitorId;

typedef struct PB3VisitorOptReq__storage_ {
  uint32_t _has_storage_[1];
  PB3VisitorOptType optType;
  int32_t page;
  int64_t ownId;
  int64_t id_p;
  int64_t visitorId;
} PB3VisitorOptReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptReq_FieldNumber_OwnId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitorOptReq__storage_, ownId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptReq_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitorOptReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3VisitorOptType_EnumDescriptor,
        .number = PB3VisitorOptReq_FieldNumber_OptType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VisitorOptReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VisitorOptReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "visitorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptReq_FieldNumber_VisitorId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VisitorOptReq__storage_, visitorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorOptReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitorOptReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VisitorOptReq_OptType_RawValue(PB3VisitorOptReq *message) {
  GPBDescriptor *descriptor = [PB3VisitorOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorOptReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VisitorOptReq_OptType_RawValue(PB3VisitorOptReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VisitorOptReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorOptReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VisitorOptRes

@implementation PB3VisitorOptRes

@dynamic code;

typedef struct PB3VisitorOptRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
} PB3VisitorOptRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptRes_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitorOptRes__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorOptRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitorOptRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitorOptLimitReq

@implementation PB3VisitorOptLimitReq


typedef struct PB3VisitorOptLimitReq__storage_ {
  uint32_t _has_storage_[1];
} PB3VisitorOptLimitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorOptLimitReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VisitorOptLimitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VisitorOptLimitRes

@implementation PB3VisitorOptLimitRes

@dynamic hideLimitType;
@dynamic hideLimitLv;
@dynamic invisible;
@dynamic invisibleLimitLv;
@dynamic hideDescribe;
@dynamic invisibleDescribe;

typedef struct PB3VisitorOptLimitRes__storage_ {
  uint32_t _has_storage_[1];
  PB3VisitorOptLimitType hideLimitType;
  int32_t hideLimitLv;
  PB3VisitorOptLimitType invisible;
  int32_t invisibleLimitLv;
  NSString *hideDescribe;
  NSString *invisibleDescribe;
} PB3VisitorOptLimitRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hideLimitType",
        .dataTypeSpecific.enumDescFunc = PB3VisitorOptLimitType_EnumDescriptor,
        .number = PB3VisitorOptLimitRes_FieldNumber_HideLimitType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VisitorOptLimitRes__storage_, hideLimitType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hideLimitLv",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptLimitRes_FieldNumber_HideLimitLv,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VisitorOptLimitRes__storage_, hideLimitLv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "invisible",
        .dataTypeSpecific.enumDescFunc = PB3VisitorOptLimitType_EnumDescriptor,
        .number = PB3VisitorOptLimitRes_FieldNumber_Invisible,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VisitorOptLimitRes__storage_, invisible),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "invisibleLimitLv",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptLimitRes_FieldNumber_InvisibleLimitLv,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VisitorOptLimitRes__storage_, invisibleLimitLv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hideDescribe",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptLimitRes_FieldNumber_HideDescribe,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VisitorOptLimitRes__storage_, hideDescribe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invisibleDescribe",
        .dataTypeSpecific.className = NULL,
        .number = PB3VisitorOptLimitRes_FieldNumber_InvisibleDescribe,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VisitorOptLimitRes__storage_, invisibleDescribe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VisitorOptLimitRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VisitorOptLimitRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VisitorOptLimitRes_HideLimitType_RawValue(PB3VisitorOptLimitRes *message) {
  GPBDescriptor *descriptor = [PB3VisitorOptLimitRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorOptLimitRes_FieldNumber_HideLimitType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VisitorOptLimitRes_HideLimitType_RawValue(PB3VisitorOptLimitRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VisitorOptLimitRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorOptLimitRes_FieldNumber_HideLimitType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3VisitorOptLimitRes_Invisible_RawValue(PB3VisitorOptLimitRes *message) {
  GPBDescriptor *descriptor = [PB3VisitorOptLimitRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorOptLimitRes_FieldNumber_Invisible];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VisitorOptLimitRes_Invisible_RawValue(PB3VisitorOptLimitRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VisitorOptLimitRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VisitorOptLimitRes_FieldNumber_Invisible];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IsChargeToday

@implementation PB3IsChargeToday

@dynamic isCharge;
@dynamic giftIcon;

typedef struct PB3IsChargeToday__storage_ {
  uint32_t _has_storage_[1];
  int32_t isCharge;
  int32_t giftIcon;
} PB3IsChargeToday__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isCharge",
        .dataTypeSpecific.className = NULL,
        .number = PB3IsChargeToday_FieldNumber_IsCharge,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IsChargeToday__storage_, isCharge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IsChargeToday_FieldNumber_GiftIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IsChargeToday__storage_, giftIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IsChargeToday class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IsChargeToday__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetSimplePlayerReq

@implementation PB3GetSimplePlayerReq

@dynamic playerId;

typedef struct PB3GetSimplePlayerReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GetSimplePlayerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetSimplePlayerReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetSimplePlayerReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSimplePlayerReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetSimplePlayerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetSimplePlayerRes

@implementation PB3GetSimplePlayerRes

@dynamic hasPlayer, player;
@dynamic riskType;

typedef struct PB3GetSimplePlayerRes__storage_ {
  uint32_t _has_storage_[1];
  PB3RiskType riskType;
  PB3SimplePlayer *player;
} PB3GetSimplePlayerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3GetSimplePlayerRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetSimplePlayerRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "riskType",
        .dataTypeSpecific.enumDescFunc = PB3RiskType_EnumDescriptor,
        .number = PB3GetSimplePlayerRes_FieldNumber_RiskType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetSimplePlayerRes__storage_, riskType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetSimplePlayerRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetSimplePlayerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetSimplePlayerRes_RiskType_RawValue(PB3GetSimplePlayerRes *message) {
  GPBDescriptor *descriptor = [PB3GetSimplePlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetSimplePlayerRes_FieldNumber_RiskType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetSimplePlayerRes_RiskType_RawValue(PB3GetSimplePlayerRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetSimplePlayerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetSimplePlayerRes_FieldNumber_RiskType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UresOssCallbackReq

@implementation PB3UresOssCallbackReq

@dynamic type;

typedef struct PB3UresOssCallbackReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UploadType type;
} PB3UresOssCallbackReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UploadType_EnumDescriptor,
        .number = PB3UresOssCallbackReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UresOssCallbackReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UresOssCallbackReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UresOssCallbackReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UresOssCallbackReq_Type_RawValue(PB3UresOssCallbackReq *message) {
  GPBDescriptor *descriptor = [PB3UresOssCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UresOssCallbackReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UresOssCallbackReq_Type_RawValue(PB3UresOssCallbackReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UresOssCallbackReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UresOssCallbackReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UresOssCallbackRes

@implementation PB3UresOssCallbackRes


typedef struct PB3UresOssCallbackRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UresOssCallbackRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UresOssCallbackRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UresOssCallbackRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveOssImageListReq

@implementation PB3SaveOssImageListReq

@dynamic type;
@dynamic URLArray, URLArray_Count;
@dynamic voiceTime;
@dynamic voiceTagId;
@dynamic voiceTagNum;
@dynamic voiceStyleId;
@dynamic voiceStyleNum;
@dynamic charTagsArray, charTagsArray_Count;
@dynamic imageWidth;
@dynamic imageHeight;

typedef struct PB3SaveOssImageListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UploadType type;
  int32_t voiceTime;
  int32_t voiceTagId;
  int32_t voiceTagNum;
  int32_t voiceStyleId;
  int32_t voiceStyleNum;
  int32_t imageWidth;
  int32_t imageHeight;
  NSMutableArray *URLArray;
  NSMutableArray *charTagsArray;
} PB3SaveOssImageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UploadType_EnumDescriptor,
        .number = PB3SaveOssImageListReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URLArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_URLArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, URLArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_VoiceTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, voiceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceTagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_VoiceTagId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, voiceTagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceTagNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_VoiceTagNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, voiceTagNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceStyleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_VoiceStyleId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, voiceStyleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceStyleNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_VoiceStyleNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, voiceStyleNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charTagsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_CharTagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, charTagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageWidth",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_ImageWidth,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, imageWidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imageHeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveOssImageListReq_FieldNumber_ImageHeight,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SaveOssImageListReq__storage_, imageHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveOssImageListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaveOssImageListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000url\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SaveOssImageListReq_Type_RawValue(PB3SaveOssImageListReq *message) {
  GPBDescriptor *descriptor = [PB3SaveOssImageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SaveOssImageListReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SaveOssImageListReq_Type_RawValue(PB3SaveOssImageListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SaveOssImageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SaveOssImageListReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SaveOssImageListRes

@implementation PB3SaveOssImageListRes


typedef struct PB3SaveOssImageListRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SaveOssImageListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveOssImageListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SaveOssImageListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DeleteOssImageListReq

@implementation PB3DeleteOssImageListReq

@dynamic id_p;
@dynamic type;
@dynamic URL;

typedef struct PB3DeleteOssImageListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UploadType type;
  NSString *URL;
  int64_t id_p;
} PB3DeleteOssImageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteOssImageListReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DeleteOssImageListReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UploadType_EnumDescriptor,
        .number = PB3DeleteOssImageListReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DeleteOssImageListReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteOssImageListReq_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DeleteOssImageListReq__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteOssImageListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DeleteOssImageListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DeleteOssImageListReq_Type_RawValue(PB3DeleteOssImageListReq *message) {
  GPBDescriptor *descriptor = [PB3DeleteOssImageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DeleteOssImageListReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DeleteOssImageListReq_Type_RawValue(PB3DeleteOssImageListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DeleteOssImageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DeleteOssImageListReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DeleteOssImageListRes

@implementation PB3DeleteOssImageListRes


typedef struct PB3DeleteOssImageListRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DeleteOssImageListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteOssImageListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DeleteOssImageListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewVersionContent

@implementation PB3NewVersionContent

@dynamic contentsArray, contentsArray_Count;
@dynamic title;

typedef struct PB3NewVersionContent__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contentsArray;
  NSString *title;
} PB3NewVersionContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVersionContent_FieldNumber_ContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewVersionContent__storage_, contentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewVersionContent_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewVersionContent__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewVersionContent class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewVersionContent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CountdownStart

@implementation PB3CountdownStart


typedef struct PB3CountdownStart__storage_ {
  uint32_t _has_storage_[1];
} PB3CountdownStart__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CountdownStart class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CountdownStart__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PrivacySettingReq

@implementation PB3PrivacySettingReq


typedef struct PB3PrivacySettingReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PrivacySettingReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivacySettingReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PrivacySettingReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PrivacySettingRes

@implementation PB3PrivacySettingRes

@dynamic onOffListArray, onOffListArray_Count;
@dynamic incognitoDescribe;

typedef struct PB3PrivacySettingRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *onOffListArray;
  NSString *incognitoDescribe;
} PB3PrivacySettingRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOffListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PrivacyTypeVal),
        .number = PB3PrivacySettingRes_FieldNumber_OnOffListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PrivacySettingRes__storage_, onOffListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "incognitoDescribe",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivacySettingRes_FieldNumber_IncognitoDescribe,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PrivacySettingRes__storage_, incognitoDescribe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivacySettingRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivacySettingRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangePrivacyReq

@implementation PB3ChangePrivacyReq

@dynamic hasOnOff, onOff;

typedef struct PB3ChangePrivacyReq__storage_ {
  uint32_t _has_storage_[1];
  PB3PrivacyTypeVal *onOff;
} PB3ChangePrivacyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PrivacyTypeVal),
        .number = PB3ChangePrivacyReq_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangePrivacyReq__storage_, onOff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangePrivacyReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangePrivacyReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangePrivacyRes

@implementation PB3ChangePrivacyRes

@dynamic hasOnOff, onOff;

typedef struct PB3ChangePrivacyRes__storage_ {
  uint32_t _has_storage_[1];
  PB3PrivacyTypeVal *onOff;
} PB3ChangePrivacyRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PrivacyTypeVal),
        .number = PB3ChangePrivacyRes_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangePrivacyRes__storage_, onOff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangePrivacyRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangePrivacyRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PrivacyTypeVal

@implementation PB3PrivacyTypeVal

@dynamic onOffType;
@dynamic onOffVal;

typedef struct PB3PrivacyTypeVal__storage_ {
  uint32_t _has_storage_[1];
  PB3PrivacyType onOffType;
  int32_t onOffVal;
} PB3PrivacyTypeVal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOffType",
        .dataTypeSpecific.enumDescFunc = PB3PrivacyType_EnumDescriptor,
        .number = PB3PrivacyTypeVal_FieldNumber_OnOffType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PrivacyTypeVal__storage_, onOffType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "onOffVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivacyTypeVal_FieldNumber_OnOffVal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PrivacyTypeVal__storage_, onOffVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivacyTypeVal class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivacyTypeVal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PrivacyTypeVal_OnOffType_RawValue(PB3PrivacyTypeVal *message) {
  GPBDescriptor *descriptor = [PB3PrivacyTypeVal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PrivacyTypeVal_FieldNumber_OnOffType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PrivacyTypeVal_OnOffType_RawValue(PB3PrivacyTypeVal *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PrivacyTypeVal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PrivacyTypeVal_FieldNumber_OnOffType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetNoAuthBeforeLoginReq

@implementation PB3GetNoAuthBeforeLoginReq

@dynamic device;
@dynamic version;

typedef struct PB3GetNoAuthBeforeLoginReq__storage_ {
  uint32_t _has_storage_[1];
  PB3DeviceType device;
  NSString *version;
} PB3GetNoAuthBeforeLoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "device",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3GetNoAuthBeforeLoginReq_FieldNumber_Device,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetNoAuthBeforeLoginReq__storage_, device),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetNoAuthBeforeLoginReq_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetNoAuthBeforeLoginReq__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetNoAuthBeforeLoginReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetNoAuthBeforeLoginReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetNoAuthBeforeLoginReq_Device_RawValue(PB3GetNoAuthBeforeLoginReq *message) {
  GPBDescriptor *descriptor = [PB3GetNoAuthBeforeLoginReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetNoAuthBeforeLoginReq_FieldNumber_Device];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetNoAuthBeforeLoginReq_Device_RawValue(PB3GetNoAuthBeforeLoginReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetNoAuthBeforeLoginReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetNoAuthBeforeLoginReq_FieldNumber_Device];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3GetNoAuthBeforeLoginRes

@implementation PB3GetNoAuthBeforeLoginRes

@dynamic listArray, listArray_Count;

typedef struct PB3GetNoAuthBeforeLoginRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3GetNoAuthBeforeLoginRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OnOffStatus),
        .number = PB3GetNoAuthBeforeLoginRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetNoAuthBeforeLoginRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetNoAuthBeforeLoginRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetNoAuthBeforeLoginRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TypeImageListReq

@implementation PB3TypeImageListReq

@dynamic playerId;
@dynamic type;

typedef struct PB3TypeImageListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3UploadType type;
  int64_t playerId;
} PB3TypeImageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TypeImageListReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TypeImageListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UploadType_EnumDescriptor,
        .number = PB3TypeImageListReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TypeImageListReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TypeImageListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TypeImageListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TypeImageListReq_Type_RawValue(PB3TypeImageListReq *message) {
  GPBDescriptor *descriptor = [PB3TypeImageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TypeImageListReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TypeImageListReq_Type_RawValue(PB3TypeImageListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TypeImageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TypeImageListReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3TypeImageListRes

@implementation PB3TypeImageListRes

@dynamic picsArray, picsArray_Count;
@dynamic type;

typedef struct PB3TypeImageListRes__storage_ {
  uint32_t _has_storage_[1];
  PB3UploadType type;
  NSMutableArray *picsArray;
} PB3TypeImageListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "picsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ImageInfo),
        .number = PB3TypeImageListRes_FieldNumber_PicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TypeImageListRes__storage_, picsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3UploadType_EnumDescriptor,
        .number = PB3TypeImageListRes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TypeImageListRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TypeImageListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TypeImageListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TypeImageListRes_Type_RawValue(PB3TypeImageListRes *message) {
  GPBDescriptor *descriptor = [PB3TypeImageListRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TypeImageListRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TypeImageListRes_Type_RawValue(PB3TypeImageListRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TypeImageListRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TypeImageListRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ClearMsgRedReq

@implementation PB3ClearMsgRedReq

@dynamic msgType;

typedef struct PB3ClearMsgRedReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ClearMsgRedType msgType;
} PB3ClearMsgRedReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = PB3ClearMsgRedType_EnumDescriptor,
        .number = PB3ClearMsgRedReq_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClearMsgRedReq__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearMsgRedReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClearMsgRedReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ClearMsgRedReq_MsgType_RawValue(PB3ClearMsgRedReq *message) {
  GPBDescriptor *descriptor = [PB3ClearMsgRedReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClearMsgRedReq_FieldNumber_MsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ClearMsgRedReq_MsgType_RawValue(PB3ClearMsgRedReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ClearMsgRedReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ClearMsgRedReq_FieldNumber_MsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ClearMsgRedRes

@implementation PB3ClearMsgRedRes


typedef struct PB3ClearMsgRedRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ClearMsgRedRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClearMsgRedRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ClearMsgRedRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DynamicIconLevConfReq

@implementation PB3DynamicIconLevConfReq


typedef struct PB3DynamicIconLevConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3DynamicIconLevConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DynamicIconLevConfReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DynamicIconLevConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DynamicIconLevConfRes

@implementation PB3DynamicIconLevConfRes

@dynamic charmLevel;
@dynamic wealthLevel;
@dynamic logic;
@dynamic desc;

typedef struct PB3DynamicIconLevConfRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t charmLevel;
  int32_t wealthLevel;
  int32_t logic;
  NSString *desc;
} PB3DynamicIconLevConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3DynamicIconLevConfRes_FieldNumber_CharmLevel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DynamicIconLevConfRes__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3DynamicIconLevConfRes_FieldNumber_WealthLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DynamicIconLevConfRes__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "logic",
        .dataTypeSpecific.className = NULL,
        .number = PB3DynamicIconLevConfRes_FieldNumber_Logic,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DynamicIconLevConfRes__storage_, logic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3DynamicIconLevConfRes_FieldNumber_Desc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DynamicIconLevConfRes__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DynamicIconLevConfRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DynamicIconLevConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeChatBindListReq

@implementation PB3WeChatBindListReq

@dynamic unionId;
@dynamic openId;
@dynamic appId;
@dynamic loginType;

typedef struct PB3WeChatBindListReq__storage_ {
  uint32_t _has_storage_[1];
  PB3WeChatLogin loginType;
  NSString *unionId;
  NSString *openId;
  NSString *appId;
} PB3WeChatBindListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindListReq_FieldNumber_UnionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeChatBindListReq__storage_, unionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindListReq_FieldNumber_OpenId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeChatBindListReq__storage_, openId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindListReq_FieldNumber_AppId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WeChatBindListReq__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loginType",
        .dataTypeSpecific.enumDescFunc = PB3WeChatLogin_EnumDescriptor,
        .number = PB3WeChatBindListReq_FieldNumber_LoginType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WeChatBindListReq__storage_, loginType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeChatBindListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeChatBindListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WeChatBindListReq_LoginType_RawValue(PB3WeChatBindListReq *message) {
  GPBDescriptor *descriptor = [PB3WeChatBindListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeChatBindListReq_FieldNumber_LoginType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WeChatBindListReq_LoginType_RawValue(PB3WeChatBindListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WeChatBindListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WeChatBindListReq_FieldNumber_LoginType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3WeChatBindListRes

@implementation PB3WeChatBindListRes

@dynamic status;
@dynamic bindListArray, bindListArray_Count;

typedef struct PB3WeChatBindListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *bindListArray;
} PB3WeChatBindListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindListRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bindListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WeChatBind),
        .number = PB3WeChatBindListRes_FieldNumber_BindListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WeChatBindListRes__storage_, bindListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeChatBindListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeChatBindListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeChatBind

@implementation PB3WeChatBind

@dynamic playerId;
@dynamic name;
@dynamic icon;

typedef struct PB3WeChatBind__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *icon;
  int64_t playerId;
} PB3WeChatBind__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBind_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeChatBind__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBind_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeChatBind__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBind_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WeChatBind__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeChatBind class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeChatBind__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeChatBindIdReq

@implementation PB3WeChatBindIdReq

@dynamic unionId;
@dynamic openId;
@dynamic appId;
@dynamic playerId;

typedef struct PB3WeChatBindIdReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *unionId;
  NSString *openId;
  NSString *appId;
  int64_t playerId;
} PB3WeChatBindIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unionId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindIdReq_FieldNumber_UnionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeChatBindIdReq__storage_, unionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindIdReq_FieldNumber_OpenId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeChatBindIdReq__storage_, openId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindIdReq_FieldNumber_AppId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WeChatBindIdReq__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindIdReq_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WeChatBindIdReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeChatBindIdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeChatBindIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeChatBindIdRes

@implementation PB3WeChatBindIdRes

@dynamic token;

typedef struct PB3WeChatBindIdRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} PB3WeChatBindIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeChatBindIdRes_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeChatBindIdRes__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeChatBindIdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeChatBindIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CancelWeChatBindIdReq

@implementation PB3CancelWeChatBindIdReq


typedef struct PB3CancelWeChatBindIdReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CancelWeChatBindIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelWeChatBindIdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CancelWeChatBindIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CancelWeChatBindIdRes

@implementation PB3CancelWeChatBindIdRes


typedef struct PB3CancelWeChatBindIdRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CancelWeChatBindIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelWeChatBindIdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CancelWeChatBindIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelProfileVoiceReq

@implementation PB3DelProfileVoiceReq


typedef struct PB3DelProfileVoiceReq__storage_ {
  uint32_t _has_storage_[1];
} PB3DelProfileVoiceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelProfileVoiceReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DelProfileVoiceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelProfileVoiceRes

@implementation PB3DelProfileVoiceRes

@dynamic isVoiceTag;

typedef struct PB3DelProfileVoiceRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DelProfileVoiceRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isVoiceTag",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelProfileVoiceRes_FieldNumber_IsVoiceTag,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelProfileVoiceRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelProfileVoiceRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WechatBindInfoReq

@implementation PB3WechatBindInfoReq


typedef struct PB3WechatBindInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3WechatBindInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WechatBindInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3WechatBindInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WechatBindInfoRes

@implementation PB3WechatBindInfoRes

@dynamic playerId;
@dynamic name;
@dynamic isBillAuthority;
@dynamic icon;

typedef struct PB3WechatBindInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t isBillAuthority;
  NSString *name;
  NSString *icon;
  int64_t playerId;
} PB3WechatBindInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WechatBindInfoRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WechatBindInfoRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3WechatBindInfoRes_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WechatBindInfoRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isBillAuthority",
        .dataTypeSpecific.className = NULL,
        .number = PB3WechatBindInfoRes_FieldNumber_IsBillAuthority,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WechatBindInfoRes__storage_, isBillAuthority),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3WechatBindInfoRes_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WechatBindInfoRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WechatBindInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WechatBindInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetWeChatSubLoginReq

@implementation PB3GetWeChatSubLoginReq

@dynamic phone;
@dynamic smsCode;

typedef struct PB3GetWeChatSubLoginReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *smsCode;
} PB3GetWeChatSubLoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWeChatSubLoginReq_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetWeChatSubLoginReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smsCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWeChatSubLoginReq_FieldNumber_SmsCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetWeChatSubLoginReq__storage_, smsCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetWeChatSubLoginReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetWeChatSubLoginReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetWeChatSubLoginRes

@implementation PB3GetWeChatSubLoginRes

@dynamic token;

typedef struct PB3GetWeChatSubLoginRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} PB3GetWeChatSubLoginRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetWeChatSubLoginRes_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetWeChatSubLoginRes__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetWeChatSubLoginRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetWeChatSubLoginRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AuthLevCfg

@implementation PB3AuthLevCfg

@dynamic level;
@dynamic name;
@dynamic URL;
@dynamic gainType;
@dynamic levExp;

typedef struct PB3AuthLevCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  PB3AuthGainType gainType;
  NSString *name;
  NSString *URL;
  int64_t levExp;
} PB3AuthLevCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthLevCfg_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthLevCfg__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthLevCfg_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AuthLevCfg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthLevCfg_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AuthLevCfg__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gainType",
        .dataTypeSpecific.enumDescFunc = PB3AuthGainType_EnumDescriptor,
        .number = PB3AuthLevCfg_FieldNumber_GainType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3AuthLevCfg__storage_, gainType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "levExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthLevCfg_FieldNumber_LevExp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3AuthLevCfg__storage_, levExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthLevCfg class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthLevCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AuthLevCfg_GainType_RawValue(PB3AuthLevCfg *message) {
  GPBDescriptor *descriptor = [PB3AuthLevCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthLevCfg_FieldNumber_GainType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AuthLevCfg_GainType_RawValue(PB3AuthLevCfg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AuthLevCfg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthLevCfg_FieldNumber_GainType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AuthLevCfgReq

@implementation PB3AuthLevCfgReq

@dynamic authType;

typedef struct PB3AuthLevCfgReq__storage_ {
  uint32_t _has_storage_[1];
  PB3AuthType authType;
} PB3AuthLevCfgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authType",
        .dataTypeSpecific.enumDescFunc = PB3AuthType_EnumDescriptor,
        .number = PB3AuthLevCfgReq_FieldNumber_AuthType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthLevCfgReq__storage_, authType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthLevCfgReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthLevCfgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AuthLevCfgReq_AuthType_RawValue(PB3AuthLevCfgReq *message) {
  GPBDescriptor *descriptor = [PB3AuthLevCfgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthLevCfgReq_FieldNumber_AuthType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AuthLevCfgReq_AuthType_RawValue(PB3AuthLevCfgReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AuthLevCfgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthLevCfgReq_FieldNumber_AuthType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AuthLevCfgRes

@implementation PB3AuthLevCfgRes

@dynamic authType;
@dynamic authLevCfgArray, authLevCfgArray_Count;

typedef struct PB3AuthLevCfgRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AuthType authType;
  NSMutableArray *authLevCfgArray;
} PB3AuthLevCfgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authType",
        .dataTypeSpecific.enumDescFunc = PB3AuthType_EnumDescriptor,
        .number = PB3AuthLevCfgRes_FieldNumber_AuthType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthLevCfgRes__storage_, authType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "authLevCfgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AuthLevCfg),
        .number = PB3AuthLevCfgRes_FieldNumber_AuthLevCfgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AuthLevCfgRes__storage_, authLevCfgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthLevCfgRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthLevCfgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AuthLevCfgRes_AuthType_RawValue(PB3AuthLevCfgRes *message) {
  GPBDescriptor *descriptor = [PB3AuthLevCfgRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthLevCfgRes_FieldNumber_AuthType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AuthLevCfgRes_AuthType_RawValue(PB3AuthLevCfgRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AuthLevCfgRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthLevCfgRes_FieldNumber_AuthType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AuthDelRes

@implementation PB3AuthDelRes

@dynamic authType;

typedef struct PB3AuthDelRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AuthType authType;
} PB3AuthDelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authType",
        .dataTypeSpecific.enumDescFunc = PB3AuthType_EnumDescriptor,
        .number = PB3AuthDelRes_FieldNumber_AuthType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthDelRes__storage_, authType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthDelRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthDelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AuthDelRes_AuthType_RawValue(PB3AuthDelRes *message) {
  GPBDescriptor *descriptor = [PB3AuthDelRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthDelRes_FieldNumber_AuthType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AuthDelRes_AuthType_RawValue(PB3AuthDelRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AuthDelRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthDelRes_FieldNumber_AuthType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AuthClanReq

@implementation PB3AuthClanReq

@dynamic playerId;
@dynamic level;
@dynamic authType;
@dynamic isSet;

typedef struct PB3AuthClanReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  PB3AuthType authType;
  int64_t playerId;
} PB3AuthClanReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthClanReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthClanReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthClanReq_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AuthClanReq__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "authType",
        .dataTypeSpecific.enumDescFunc = PB3AuthType_EnumDescriptor,
        .number = PB3AuthClanReq_FieldNumber_AuthType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AuthClanReq__storage_, authType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isSet",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthClanReq_FieldNumber_IsSet,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthClanReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthClanReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AuthClanReq_AuthType_RawValue(PB3AuthClanReq *message) {
  GPBDescriptor *descriptor = [PB3AuthClanReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthClanReq_FieldNumber_AuthType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AuthClanReq_AuthType_RawValue(PB3AuthClanReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AuthClanReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AuthClanReq_FieldNumber_AuthType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AuthClanRes

@implementation PB3AuthClanRes

@dynamic playerId;
@dynamic hasAuthInfo, authInfo;

typedef struct PB3AuthClanRes__storage_ {
  uint32_t _has_storage_[1];
  PB3AuthInfo *authInfo;
  int64_t playerId;
} PB3AuthClanRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AuthClanRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AuthClanRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "authInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AuthInfo),
        .number = PB3AuthClanRes_FieldNumber_AuthInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AuthClanRes__storage_, authInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AuthClanRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AuthClanRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceTagInfo

@implementation PB3VoiceTagInfo

@dynamic voiceTagId;
@dynamic voiceTagText;
@dynamic voiceTagNum;
@dynamic voiceStyleId;
@dynamic voiceStyleText;
@dynamic voiceStyleNum;
@dynamic charTagsArray, charTagsArray_Count;
@dynamic voiceURL;
@dynamic voiceTime;

typedef struct PB3VoiceTagInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t voiceTagId;
  int32_t voiceTagNum;
  int32_t voiceStyleId;
  int32_t voiceStyleNum;
  int32_t voiceTime;
  NSString *voiceTagText;
  NSString *voiceStyleText;
  NSMutableArray *charTagsArray;
  NSString *voiceURL;
} PB3VoiceTagInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voiceTagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceTagId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceTagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceTagText",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceTagText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceTagText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTagNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceTagNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceTagNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceStyleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceStyleId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceStyleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceStyleText",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceStyleText,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceStyleText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceStyleNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceStyleNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceStyleNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charTagsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_CharTagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, charTagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfo_FieldNumber_VoiceTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfo__storage_, voiceTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceTagInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceTagInfoReq

@implementation PB3VoiceTagInfoReq


typedef struct PB3VoiceTagInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3VoiceTagInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VoiceTagInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceTagInfoRes

@implementation PB3VoiceTagInfoRes

@dynamic hasVoiceTag, voiceTag;
@dynamic signature;
@dynamic voiceTagCfgArray, voiceTagCfgArray_Count;
@dynamic voiceStyleCfgArray, voiceStyleCfgArray_Count;

typedef struct PB3VoiceTagInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3VoiceTagInfo *voiceTag;
  NSString *signature;
  NSMutableArray *voiceTagCfgArray;
  NSMutableArray *voiceStyleCfgArray;
} PB3VoiceTagInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voiceTag",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceTagInfo),
        .number = PB3VoiceTagInfoRes_FieldNumber_VoiceTag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfoRes__storage_, voiceTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagInfoRes_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfoRes__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTagCfgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceTagCfg),
        .number = PB3VoiceTagInfoRes_FieldNumber_VoiceTagCfgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfoRes__storage_, voiceTagCfgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceStyleCfgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceStyleCfg),
        .number = PB3VoiceTagInfoRes_FieldNumber_VoiceStyleCfgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VoiceTagInfoRes__storage_, voiceStyleCfgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceTagInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceTagPlayerInfoReq

@implementation PB3VoiceTagPlayerInfoReq

@dynamic playerId;

typedef struct PB3VoiceTagPlayerInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3VoiceTagPlayerInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagPlayerInfoReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagPlayerInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceTagPlayerInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceTagPlayerInfoRes

@implementation PB3VoiceTagPlayerInfoRes

@dynamic playerId;
@dynamic nickName;
@dynamic signature;
@dynamic hasVoiceTag, voiceTag;
@dynamic icon;
@dynamic shortId;
@dynamic sex;

typedef struct PB3VoiceTagPlayerInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *nickName;
  NSString *signature;
  PB3VoiceTagInfo *voiceTag;
  NSString *icon;
  int64_t playerId;
  int64_t shortId;
} PB3VoiceTagPlayerInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagPlayerInfoRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagPlayerInfoRes_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoRes__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagPlayerInfoRes_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoRes__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceTag",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceTagInfo),
        .number = PB3VoiceTagPlayerInfoRes_FieldNumber_VoiceTag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoRes__storage_, voiceTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagPlayerInfoRes_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoRes__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagPlayerInfoRes_FieldNumber_ShortId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoRes__storage_, shortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3VoiceTagPlayerInfoRes_FieldNumber_Sex,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VoiceTagPlayerInfoRes__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagPlayerInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceTagPlayerInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VoiceTagPlayerInfoRes_Sex_RawValue(PB3VoiceTagPlayerInfoRes *message) {
  GPBDescriptor *descriptor = [PB3VoiceTagPlayerInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VoiceTagPlayerInfoRes_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VoiceTagPlayerInfoRes_Sex_RawValue(PB3VoiceTagPlayerInfoRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VoiceTagPlayerInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VoiceTagPlayerInfoRes_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VoiceTagCfgList

@implementation PB3VoiceTagCfgList

@dynamic gender;
@dynamic voiceTagCfgArray, voiceTagCfgArray_Count;

typedef struct PB3VoiceTagCfgList__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType gender;
  NSMutableArray *voiceTagCfgArray;
} PB3VoiceTagCfgList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gender",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3VoiceTagCfgList_FieldNumber_Gender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceTagCfgList__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voiceTagCfgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceTagCfg),
        .number = PB3VoiceTagCfgList_FieldNumber_VoiceTagCfgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VoiceTagCfgList__storage_, voiceTagCfgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagCfgList class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceTagCfgList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3VoiceTagCfgList_Gender_RawValue(PB3VoiceTagCfgList *message) {
  GPBDescriptor *descriptor = [PB3VoiceTagCfgList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VoiceTagCfgList_FieldNumber_Gender];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3VoiceTagCfgList_Gender_RawValue(PB3VoiceTagCfgList *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3VoiceTagCfgList descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3VoiceTagCfgList_FieldNumber_Gender];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3VoiceTagCfg

@implementation PB3VoiceTagCfg

@dynamic voiceTagId;
@dynamic voiceTagText;

typedef struct PB3VoiceTagCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t voiceTagId;
  NSString *voiceTagText;
} PB3VoiceTagCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voiceTagId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagCfg_FieldNumber_VoiceTagId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceTagCfg__storage_, voiceTagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceTagText",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceTagCfg_FieldNumber_VoiceTagText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoiceTagCfg__storage_, voiceTagText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagCfg class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceTagCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceStyleCfg

@implementation PB3VoiceStyleCfg

@dynamic voiceStyleId;
@dynamic voiceStyleText;

typedef struct PB3VoiceStyleCfg__storage_ {
  uint32_t _has_storage_[1];
  int32_t voiceStyleId;
  NSString *voiceStyleText;
} PB3VoiceStyleCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voiceStyleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceStyleCfg_FieldNumber_VoiceStyleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoiceStyleCfg__storage_, voiceStyleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voiceStyleText",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoiceStyleCfg_FieldNumber_VoiceStyleText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoiceStyleCfg__storage_, voiceStyleText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceStyleCfg class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceStyleCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceTagReq

@implementation PB3VoiceTagReq


typedef struct PB3VoiceTagReq__storage_ {
  uint32_t _has_storage_[1];
} PB3VoiceTagReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3VoiceTagReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoiceTagRes

@implementation PB3VoiceTagRes

@dynamic voiceTagArray, voiceTagArray_Count;
@dynamic voiceStyleArray, voiceStyleArray_Count;

typedef struct PB3VoiceTagRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *voiceTagArray;
  NSMutableArray *voiceStyleArray;
} PB3VoiceTagRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voiceTagArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceTagCfgList),
        .number = PB3VoiceTagRes_FieldNumber_VoiceTagArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VoiceTagRes__storage_, voiceTagArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceStyleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3VoiceStyleCfg),
        .number = PB3VoiceTagRes_FieldNumber_VoiceStyleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3VoiceTagRes__storage_, voiceStyleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoiceTagRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoiceTagRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UmengQuickBindPhoneReq

@implementation PB3UmengQuickBindPhoneReq

@dynamic appKey;
@dynamic token;
@dynamic yidunToken;

typedef struct PB3UmengQuickBindPhoneReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *appKey;
  NSString *token;
  NSString *yidunToken;
} PB3UmengQuickBindPhoneReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appKey",
        .dataTypeSpecific.className = NULL,
        .number = PB3UmengQuickBindPhoneReq_FieldNumber_AppKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UmengQuickBindPhoneReq__storage_, appKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PB3UmengQuickBindPhoneReq_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UmengQuickBindPhoneReq__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "yidunToken",
        .dataTypeSpecific.className = NULL,
        .number = PB3UmengQuickBindPhoneReq_FieldNumber_YidunToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UmengQuickBindPhoneReq__storage_, yidunToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UmengQuickBindPhoneReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UmengQuickBindPhoneReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UmengQuickBindPhoneRes

@implementation PB3UmengQuickBindPhoneRes

@dynamic phone;

typedef struct PB3UmengQuickBindPhoneRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
} PB3UmengQuickBindPhoneRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3UmengQuickBindPhoneRes_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UmengQuickBindPhoneRes__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UmengQuickBindPhoneRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UmengQuickBindPhoneRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateBillPlayerStatus

@implementation PB3UpdateBillPlayerStatus

@dynamic skillId;
@dynamic status;
@dynamic isNewStatus;

typedef struct PB3UpdateBillPlayerStatus__storage_ {
  uint32_t _has_storage_[1];
  int32_t skillId;
} PB3UpdateBillPlayerStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skillId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateBillPlayerStatus_FieldNumber_SkillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdateBillPlayerStatus__storage_, skillId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateBillPlayerStatus_FieldNumber_Status,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isNewStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateBillPlayerStatus_FieldNumber_IsNewStatus,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateBillPlayerStatus class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdateBillPlayerStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IsCheckingReq

@implementation PB3IsCheckingReq

@dynamic id_p;
@dynamic type;

typedef struct PB3IsCheckingReq__storage_ {
  uint32_t _has_storage_[1];
  PB3CheckType type;
  int64_t id_p;
} PB3IsCheckingReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IsCheckingReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IsCheckingReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CheckType_EnumDescriptor,
        .number = PB3IsCheckingReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IsCheckingReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IsCheckingReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IsCheckingReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IsCheckingReq_Type_RawValue(PB3IsCheckingReq *message) {
  GPBDescriptor *descriptor = [PB3IsCheckingReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IsCheckingReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IsCheckingReq_Type_RawValue(PB3IsCheckingReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IsCheckingReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IsCheckingReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IsCheckingRes

@implementation PB3IsCheckingRes

@dynamic flag;
@dynamic type;
@dynamic name;
@dynamic time;

typedef struct PB3IsCheckingRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CheckType type;
  NSString *name;
  NSString *time;
} PB3IsCheckingRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3IsCheckingRes_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CheckType_EnumDescriptor,
        .number = PB3IsCheckingRes_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IsCheckingRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IsCheckingRes_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IsCheckingRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3IsCheckingRes_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IsCheckingRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IsCheckingRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IsCheckingRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IsCheckingRes_Type_RawValue(PB3IsCheckingRes *message) {
  GPBDescriptor *descriptor = [PB3IsCheckingRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IsCheckingRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IsCheckingRes_Type_RawValue(PB3IsCheckingRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IsCheckingRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IsCheckingRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IndexLeaveMessageListReq

@implementation PB3IndexLeaveMessageListReq

@dynamic ownerId;

typedef struct PB3IndexLeaveMessageListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t ownerId;
} PB3IndexLeaveMessageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IndexLeaveMessageListReq_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IndexLeaveMessageListReq__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IndexLeaveMessageListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IndexLeaveMessageListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IndexLeaveMessageListRes

@implementation PB3IndexLeaveMessageListRes

@dynamic leaveMessageInfoArray, leaveMessageInfoArray_Count;

typedef struct PB3IndexLeaveMessageListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *leaveMessageInfoArray;
} PB3IndexLeaveMessageListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "leaveMessageInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LeaveMessageInfo),
        .number = PB3IndexLeaveMessageListRes_FieldNumber_LeaveMessageInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IndexLeaveMessageListRes__storage_, leaveMessageInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IndexLeaveMessageListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IndexLeaveMessageListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LeaveMessageListReq

@implementation PB3LeaveMessageListReq

@dynamic index;
@dynamic leaveMsgType;

typedef struct PB3LeaveMessageListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  PB3LeaveMessageType leaveMsgType;
} PB3LeaveMessageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageListReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LeaveMessageListReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "leaveMsgType",
        .dataTypeSpecific.enumDescFunc = PB3LeaveMessageType_EnumDescriptor,
        .number = PB3LeaveMessageListReq_FieldNumber_LeaveMsgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LeaveMessageListReq__storage_, leaveMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveMessageListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LeaveMessageListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LeaveMessageListReq_LeaveMsgType_RawValue(PB3LeaveMessageListReq *message) {
  GPBDescriptor *descriptor = [PB3LeaveMessageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LeaveMessageListReq_FieldNumber_LeaveMsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LeaveMessageListReq_LeaveMsgType_RawValue(PB3LeaveMessageListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LeaveMessageListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LeaveMessageListReq_FieldNumber_LeaveMsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3LeaveMessageListRes

@implementation PB3LeaveMessageListRes

@dynamic leaveMessageInfoArray, leaveMessageInfoArray_Count;
@dynamic nextIndex;

typedef struct PB3LeaveMessageListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *leaveMessageInfoArray;
} PB3LeaveMessageListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "leaveMessageInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LeaveMessageInfo),
        .number = PB3LeaveMessageListRes_FieldNumber_LeaveMessageInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LeaveMessageListRes__storage_, leaveMessageInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageListRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LeaveMessageListRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveMessageListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LeaveMessageListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LeaveMessageInfo

@implementation PB3LeaveMessageInfo

@dynamic id_p;
@dynamic nickName;
@dynamic icon;
@dynamic leaveMessage;
@dynamic createAt;
@dynamic sex;
@dynamic playerId;
@dynamic receivePlayerId;

typedef struct PB3LeaveMessageInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  NSString *nickName;
  NSString *icon;
  NSString *leaveMessage;
  int64_t id_p;
  int64_t createAt;
  int64_t playerId;
  int64_t receivePlayerId;
} PB3LeaveMessageInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageInfo_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageInfo_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "leaveMessage",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageInfo_FieldNumber_LeaveMessage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, leaveMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageInfo_FieldNumber_CreateAt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, createAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3LeaveMessageInfo_FieldNumber_Sex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageInfo_FieldNumber_PlayerId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receivePlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LeaveMessageInfo_FieldNumber_ReceivePlayerId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LeaveMessageInfo__storage_, receivePlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LeaveMessageInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LeaveMessageInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LeaveMessageInfo_Sex_RawValue(PB3LeaveMessageInfo *message) {
  GPBDescriptor *descriptor = [PB3LeaveMessageInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LeaveMessageInfo_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LeaveMessageInfo_Sex_RawValue(PB3LeaveMessageInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LeaveMessageInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LeaveMessageInfo_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SendLeaveMessageReq

@implementation PB3SendLeaveMessageReq

@dynamic receivePlayerId;
@dynamic leaveMessage;

typedef struct PB3SendLeaveMessageReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *leaveMessage;
  int64_t receivePlayerId;
} PB3SendLeaveMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "receivePlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendLeaveMessageReq_FieldNumber_ReceivePlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SendLeaveMessageReq__storage_, receivePlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "leaveMessage",
        .dataTypeSpecific.className = NULL,
        .number = PB3SendLeaveMessageReq_FieldNumber_LeaveMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SendLeaveMessageReq__storage_, leaveMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendLeaveMessageReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SendLeaveMessageReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SendLeaveMessageRes

@implementation PB3SendLeaveMessageRes


typedef struct PB3SendLeaveMessageRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SendLeaveMessageRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SendLeaveMessageRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SendLeaveMessageRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DeleteLeaveMessageReq

@implementation PB3DeleteLeaveMessageReq

@dynamic id_p;
@dynamic deleteAll;
@dynamic leaveMsgType;

typedef struct PB3DeleteLeaveMessageReq__storage_ {
  uint32_t _has_storage_[1];
  PB3LeaveMessageType leaveMsgType;
  int64_t id_p;
} PB3DeleteLeaveMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteLeaveMessageReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DeleteLeaveMessageReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deleteAll",
        .dataTypeSpecific.className = NULL,
        .number = PB3DeleteLeaveMessageReq_FieldNumber_DeleteAll,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "leaveMsgType",
        .dataTypeSpecific.enumDescFunc = PB3LeaveMessageType_EnumDescriptor,
        .number = PB3DeleteLeaveMessageReq_FieldNumber_LeaveMsgType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DeleteLeaveMessageReq__storage_, leaveMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteLeaveMessageReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DeleteLeaveMessageReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DeleteLeaveMessageReq_LeaveMsgType_RawValue(PB3DeleteLeaveMessageReq *message) {
  GPBDescriptor *descriptor = [PB3DeleteLeaveMessageReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DeleteLeaveMessageReq_FieldNumber_LeaveMsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DeleteLeaveMessageReq_LeaveMsgType_RawValue(PB3DeleteLeaveMessageReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DeleteLeaveMessageReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DeleteLeaveMessageReq_FieldNumber_LeaveMsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DeleteLeaveMessageRes

@implementation PB3DeleteLeaveMessageRes


typedef struct PB3DeleteLeaveMessageRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DeleteLeaveMessageRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DeleteLeaveMessageRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DeleteLeaveMessageRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SimplePlayerListReq

@implementation PB3SimplePlayerListReq

@dynamic idsArray, idsArray_Count;

typedef struct PB3SimplePlayerListReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *idsArray;
} PB3SimplePlayerListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SimplePlayerListReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SimplePlayerListReq__storage_, idsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SimplePlayerListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SimplePlayerListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SimplePlayerListRes

@implementation PB3SimplePlayerListRes

@dynamic listArray, listArray_Count;

typedef struct PB3SimplePlayerListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3SimplePlayerListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3SimplePlayerListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SimplePlayerListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SimplePlayerListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SimplePlayerListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetLeaveMessageRedPointReq

@implementation PB3GetLeaveMessageRedPointReq


typedef struct PB3GetLeaveMessageRedPointReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetLeaveMessageRedPointReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLeaveMessageRedPointReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GetLeaveMessageRedPointReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetLeaveMessageRedPointRes

@implementation PB3GetLeaveMessageRedPointRes

@dynamic total;

typedef struct PB3GetLeaveMessageRedPointRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
} PB3GetLeaveMessageRedPointRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLeaveMessageRedPointRes_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetLeaveMessageRedPointRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLeaveMessageRedPointRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetLeaveMessageRedPointRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerAttributeReq

@implementation PB3PlayerAttributeReq

@dynamic attributes, attributes_Count;

typedef struct PB3PlayerAttributeReq__storage_ {
  uint32_t _has_storage_[1];
  GPBStringInt32Dictionary *attributes;
} PB3PlayerAttributeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "attributes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerAttributeReq_FieldNumber_Attributes,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerAttributeReq__storage_, attributes),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerAttributeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerAttributeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerAttributeRes

@implementation PB3PlayerAttributeRes

@dynamic attributes, attributes_Count;

typedef struct PB3PlayerAttributeRes__storage_ {
  uint32_t _has_storage_[1];
  GPBStringInt32Dictionary *attributes;
} PB3PlayerAttributeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "attributes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerAttributeRes_FieldNumber_Attributes,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayerAttributeRes__storage_, attributes),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerAttributeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerAttributeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BlackWhaleReq

@implementation PB3BlackWhaleReq


typedef struct PB3BlackWhaleReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BlackWhaleReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BlackWhaleReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BlackWhaleReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BlackWhaleRes

@implementation PB3BlackWhaleRes

@dynamic isBlackWhale;

typedef struct PB3BlackWhaleRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BlackWhaleRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isBlackWhale",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlackWhaleRes_FieldNumber_IsBlackWhale,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BlackWhaleRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BlackWhaleRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3JoinIntimateFansReq

@implementation PB3JoinIntimateFansReq

@dynamic playerId;
@dynamic day;
@dynamic type;
@dynamic gold;
@dynamic id_p;

typedef struct PB3JoinIntimateFansReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t day;
  PB3IntimateFansDayConf type;
  int32_t gold;
  int32_t id_p;
  int64_t playerId;
} PB3JoinIntimateFansReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "day",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansReq_FieldNumber_Day,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansReq__storage_, day),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateFansDayConf_EnumDescriptor,
        .number = PB3JoinIntimateFansReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansReq_FieldNumber_Gold,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansReq__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansReq_FieldNumber_Id_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3JoinIntimateFansReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3JoinIntimateFansReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3JoinIntimateFansReq_Type_RawValue(PB3JoinIntimateFansReq *message) {
  GPBDescriptor *descriptor = [PB3JoinIntimateFansReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3JoinIntimateFansReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3JoinIntimateFansReq_Type_RawValue(PB3JoinIntimateFansReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3JoinIntimateFansReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3JoinIntimateFansReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3JoinIntimateFansRes

@implementation PB3JoinIntimateFansRes

@dynamic validAt;

typedef struct PB3JoinIntimateFansRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t validAt;
} PB3JoinIntimateFansRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansRes_FieldNumber_ValidAt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansRes__storage_, validAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3JoinIntimateFansRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3JoinIntimateFansRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3JoinIntimateFansQueryReq

@implementation PB3JoinIntimateFansQueryReq

@dynamic playerId;

typedef struct PB3JoinIntimateFansQueryReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3JoinIntimateFansQueryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansQueryReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansQueryReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3JoinIntimateFansQueryReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3JoinIntimateFansQueryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3JoinIntimateFansQueryRes

@implementation PB3JoinIntimateFansQueryRes

@dynamic hasPlayer, player;
@dynamic fansNum;
@dynamic validAt;
@dynamic confArray, confArray_Count;

typedef struct PB3JoinIntimateFansQueryRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t fansNum;
  PB3Player *player;
  NSMutableArray *confArray;
  int64_t validAt;
} PB3JoinIntimateFansQueryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3JoinIntimateFansQueryRes_FieldNumber_Player,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansQueryRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansQueryRes_FieldNumber_FansNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansQueryRes__storage_, fansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "validAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3JoinIntimateFansQueryRes_FieldNumber_ValidAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansQueryRes__storage_, validAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "confArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansConf),
        .number = PB3JoinIntimateFansQueryRes_FieldNumber_ConfArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3JoinIntimateFansQueryRes__storage_, confArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3JoinIntimateFansQueryRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3JoinIntimateFansQueryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansConf

@implementation PB3IntimateFansConf

@dynamic id_p;
@dynamic day;
@dynamic type;
@dynamic price;
@dynamic discount;

typedef struct PB3IntimateFansConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t day;
  PB3IntimateFansDayConf type;
  int32_t price;
  int32_t discount;
} PB3IntimateFansConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansConf_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansConf__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "day",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansConf_FieldNumber_Day,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansConf__storage_, day),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateFansDayConf_EnumDescriptor,
        .number = PB3IntimateFansConf_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansConf__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansConf_FieldNumber_Price,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansConf__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "discount",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansConf_FieldNumber_Discount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansConf__storage_, discount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansConf class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateFansConf_Type_RawValue(PB3IntimateFansConf *message) {
  GPBDescriptor *descriptor = [PB3IntimateFansConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansConf_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateFansConf_Type_RawValue(PB3IntimateFansConf *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateFansConf descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansConf_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateFansLevConf

@implementation PB3IntimateFansLevConf

@dynamic lev;
@dynamic levName;
@dynamic androidIconURL;
@dynamic androidBannerURL;
@dynamic iosHeadIconURL;
@dynamic iosTailIconURL;
@dynamic iosIconURL;
@dynamic iosIconBannerURL;
@dynamic pcIconURL;
@dynamic pcHeadIconURL;
@dynamic pcMiddleIconURL;
@dynamic pcTailIconURL;
@dynamic pcIconTagURL;
@dynamic pcIconBannerURL;
@dynamic androidIconTagURL;
@dynamic webIconHeadURL;
@dynamic webIconBodyURL;
@dynamic webIconTailURL;
@dynamic levExp;
@dynamic maxDailyExp;

typedef struct PB3IntimateFansLevConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  NSString *levName;
  NSString *androidIconURL;
  NSString *androidBannerURL;
  NSString *iosHeadIconURL;
  NSString *iosTailIconURL;
  NSString *iosIconURL;
  NSString *iosIconBannerURL;
  NSString *pcIconURL;
  NSString *pcHeadIconURL;
  NSString *pcMiddleIconURL;
  NSString *pcTailIconURL;
  NSString *pcIconTagURL;
  NSString *pcIconBannerURL;
  NSString *androidIconTagURL;
  NSString *webIconHeadURL;
  NSString *webIconBodyURL;
  NSString *webIconTailURL;
  int64_t levExp;
  int64_t maxDailyExp;
} PB3IntimateFansLevConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_Lev,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_LevName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, levName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_AndroidIconURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, androidIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidBannerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_AndroidBannerURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, androidBannerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosHeadIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_IosHeadIconURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, iosHeadIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosTailIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_IosTailIconURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, iosTailIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_IosIconURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, iosIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosIconBannerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_IosIconBannerURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, iosIconBannerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_PcIconURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, pcIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcHeadIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_PcHeadIconURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, pcHeadIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcMiddleIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_PcMiddleIconURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, pcMiddleIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcTailIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_PcTailIconURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, pcTailIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcIconTagURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_PcIconTagURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, pcIconTagURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcIconBannerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_PcIconBannerURL,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, pcIconBannerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidIconTagURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_AndroidIconTagURL,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, androidIconTagURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "webIconHeadURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_WebIconHeadURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, webIconHeadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "webIconBodyURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_WebIconBodyURL,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, webIconBodyURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "webIconTailURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_WebIconTailURL,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, webIconTailURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_LevExp,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, levExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxDailyExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevConf_FieldNumber_MaxDailyExp,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConf__storage_, maxDailyExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansLevConf class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansLevConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\003\007\244\241!!\000\004\007\246\241!!\000\005\003\244\244\241!!\000\006\003\244\244\241!!\000\007\003\244\241!!\000\010\003"
        "\244\246\241!!\000\t\002\244\241!!\000\n\002\244\244\241!!\000\013\002\246\244\241!!\000\014\002\244\244\241!!\000\r\002\244"
        "\243\241!!\000\016\002\244\246\241!!\000\017\007\244\243\241!!\000\020\003\244\244\241!!\000\021\003\244\244\241!!\000\022\003\244"
        "\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansLevConfReq

@implementation PB3IntimateFansLevConfReq


typedef struct PB3IntimateFansLevConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateFansLevConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansLevConfReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateFansLevConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansLevConfRes

@implementation PB3IntimateFansLevConfRes

@dynamic confListArray, confListArray_Count;

typedef struct PB3IntimateFansLevConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *confListArray;
} PB3IntimateFansLevConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansLevConf),
        .number = PB3IntimateFansLevConfRes_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevConfRes__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansLevConfRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansLevConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PushIntimateFansCardInfo

@implementation PB3PushIntimateFansCardInfo

@dynamic playerId;
@dynamic cardName;
@dynamic lev;
@dynamic pushType;
@dynamic exp;
@dynamic dailyExp;

typedef struct PB3PushIntimateFansCardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  PB3PushIntimateFansCardInfoType pushType;
  NSString *cardName;
  int64_t playerId;
  int64_t exp;
  int64_t dailyExp;
} PB3PushIntimateFansCardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushIntimateFansCardInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PushIntimateFansCardInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushIntimateFansCardInfo_FieldNumber_CardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PushIntimateFansCardInfo__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushIntimateFansCardInfo_FieldNumber_Lev,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PushIntimateFansCardInfo__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pushType",
        .dataTypeSpecific.enumDescFunc = PB3PushIntimateFansCardInfoType_EnumDescriptor,
        .number = PB3PushIntimateFansCardInfo_FieldNumber_PushType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PushIntimateFansCardInfo__storage_, pushType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushIntimateFansCardInfo_FieldNumber_Exp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PushIntimateFansCardInfo__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dailyExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushIntimateFansCardInfo_FieldNumber_DailyExp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PushIntimateFansCardInfo__storage_, dailyExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PushIntimateFansCardInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PushIntimateFansCardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PushIntimateFansCardInfo_PushType_RawValue(PB3PushIntimateFansCardInfo *message) {
  GPBDescriptor *descriptor = [PB3PushIntimateFansCardInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PushIntimateFansCardInfo_FieldNumber_PushType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PushIntimateFansCardInfo_PushType_RawValue(PB3PushIntimateFansCardInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PushIntimateFansCardInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PushIntimateFansCardInfo_FieldNumber_PushType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateFansCardInfo

@implementation PB3IntimateFansCardInfo

@dynamic playerId;
@dynamic lev;
@dynamic cardName;

typedef struct PB3IntimateFansCardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  NSString *cardName;
  int64_t playerId;
} PB3IntimateFansCardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfo_FieldNumber_Lev,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfo__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfo_FieldNumber_CardName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfo__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansCardInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansCardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansCardInfoReq

@implementation PB3IntimateFansCardInfoReq


typedef struct PB3IntimateFansCardInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateFansCardInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansCardInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateFansCardInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansCardInfoRes

@implementation PB3IntimateFansCardInfoRes

@dynamic usedPlayerId;
@dynamic cardListArray, cardListArray_Count;

typedef struct PB3IntimateFansCardInfoRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cardListArray;
  int64_t usedPlayerId;
} PB3IntimateFansCardInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usedPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoRes_FieldNumber_UsedPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoRes__storage_, usedPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansCardInfo),
        .number = PB3IntimateFansCardInfoRes_FieldNumber_CardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoRes__storage_, cardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansCardInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansCardInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetIntimateFansCardReq

@implementation PB3SetIntimateFansCardReq

@dynamic playerId;

typedef struct PB3SetIntimateFansCardReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3SetIntimateFansCardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetIntimateFansCardReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetIntimateFansCardReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetIntimateFansCardReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetIntimateFansCardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetIntimateFansCardRes

@implementation PB3SetIntimateFansCardRes

@dynamic playerId;

typedef struct PB3SetIntimateFansCardRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3SetIntimateFansCardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetIntimateFansCardRes_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetIntimateFansCardRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetIntimateFansCardRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetIntimateFansCardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansHostInfo

@implementation PB3IntimateFansHostInfo

@dynamic playerId;
@dynamic playerSid;
@dynamic icon;
@dynamic intimateFansNum;
@dynamic intimateVal;
@dynamic intimateRank;
@dynamic rankIconListArray, rankIconListArray_Count;
@dynamic playerName;

typedef struct PB3IntimateFansHostInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *icon;
  NSMutableArray *rankIconListArray;
  NSString *playerName;
  int64_t playerId;
  int64_t playerSid;
  int64_t intimateFansNum;
  int64_t intimateVal;
  int64_t intimateRank;
} PB3IntimateFansHostInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerSid",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_PlayerSid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, playerSid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intimateFansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_IntimateFansNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, intimateFansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_IntimateVal,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, intimateVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_IntimateRank,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, intimateRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rankIconListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_RankIconListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, rankIconListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostInfo_FieldNumber_PlayerName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansHostInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansHostInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansCardSetting

@implementation PB3IntimateFansCardSetting

@dynamic status;
@dynamic cardName;
@dynamic auditName;

typedef struct PB3IntimateFansCardSetting__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *cardName;
  NSString *auditName;
} PB3IntimateFansCardSetting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardSetting_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardSetting__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardSetting_FieldNumber_CardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardSetting__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "auditName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardSetting_FieldNumber_AuditName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardSetting__storage_, auditName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansCardSetting class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansCardSetting__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansLevInfo

@implementation PB3IntimateFansLevInfo

@dynamic lev;
@dynamic exp;
@dynamic gapExp;
@dynamic expiredTime;
@dynamic myIcon;
@dynamic hostIcon;
@dynamic levExp;
@dynamic maxLev;

typedef struct PB3IntimateFansLevInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  NSString *myIcon;
  NSString *hostIcon;
  int64_t exp;
  int64_t gapExp;
  int64_t expiredTime;
  int64_t levExp;
} PB3IntimateFansLevInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_Lev,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevInfo__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_Exp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevInfo__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gapExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_GapExp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevInfo__storage_, gapExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expiredTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_ExpiredTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevInfo__storage_, expiredTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "myIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_MyIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevInfo__storage_, myIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_HostIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevInfo__storage_, hostIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_LevExp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFansLevInfo__storage_, levExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansLevInfo_FieldNumber_MaxLev,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansLevInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansLevInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansHostViewReq

@implementation PB3IntimateFansHostViewReq

@dynamic index;
@dynamic hostId;
@dynamic viewType;

typedef struct PB3IntimateFansHostViewReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  PB3IntimateFansHostViewType viewType;
  int64_t hostId;
} PB3IntimateFansHostViewReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostViewReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hostId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostViewReq_FieldNumber_HostId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewReq__storage_, hostId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "viewType",
        .dataTypeSpecific.enumDescFunc = PB3IntimateFansHostViewType_EnumDescriptor,
        .number = PB3IntimateFansHostViewReq_FieldNumber_ViewType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewReq__storage_, viewType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansHostViewReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansHostViewReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateFansHostViewReq_ViewType_RawValue(PB3IntimateFansHostViewReq *message) {
  GPBDescriptor *descriptor = [PB3IntimateFansHostViewReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansHostViewReq_FieldNumber_ViewType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateFansHostViewReq_ViewType_RawValue(PB3IntimateFansHostViewReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateFansHostViewReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansHostViewReq_FieldNumber_ViewType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateFansHostViewRes

@implementation PB3IntimateFansHostViewRes

@dynamic hasHostInfo, hostInfo;
@dynamic hasCardSetting, cardSetting;
@dynamic fanListArray, fanListArray_Count;
@dynamic nextIndex;
@dynamic hasLevInfo, levInfo;

typedef struct PB3IntimateFansHostViewRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  PB3IntimateFansHostInfo *hostInfo;
  PB3IntimateFansCardSetting *cardSetting;
  NSMutableArray *fanListArray;
  PB3IntimateFansLevInfo *levInfo;
} PB3IntimateFansHostViewRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hostInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansHostInfo),
        .number = PB3IntimateFansHostViewRes_FieldNumber_HostInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewRes__storage_, hostInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardSetting",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansCardSetting),
        .number = PB3IntimateFansHostViewRes_FieldNumber_CardSetting,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewRes__storage_, cardSetting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fanListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFanInfo),
        .number = PB3IntimateFansHostViewRes_FieldNumber_FanListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewRes__storage_, fanListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansHostViewRes_FieldNumber_NextIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansLevInfo),
        .number = PB3IntimateFansHostViewRes_FieldNumber_LevInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansHostViewRes__storage_, levInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansHostViewRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansHostViewRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFanInfo

@implementation PB3IntimateFanInfo

@dynamic lev;
@dynamic exp;
@dynamic fanId;
@dynamic fanId2;
@dynamic fanName;
@dynamic fanIcon;
@dynamic fanCharmLev;
@dynamic fanWealthLev;

typedef struct PB3IntimateFanInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  int32_t fanCharmLev;
  int32_t fanWealthLev;
  NSString *fanName;
  NSString *fanIcon;
  int64_t exp;
  int64_t fanId;
  int64_t fanId2;
} PB3IntimateFanInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_Lev,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_Exp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_FanId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, fanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fanId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_FanId2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, fanId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fanName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_FanName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, fanName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fanIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_FanIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, fanIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fanCharmLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_FanCharmLev,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, fanCharmLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fanWealthLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFanInfo_FieldNumber_FanWealthLev,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateFanInfo__storage_, fanWealthLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFanInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFanInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansViewReq

@implementation PB3IntimateFansViewReq

@dynamic playerId;

typedef struct PB3IntimateFansViewReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3IntimateFansViewReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansViewReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansViewReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansViewReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansViewReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansViewRes

@implementation PB3IntimateFansViewRes

@dynamic hasHostInfo, hostInfo;

typedef struct PB3IntimateFansViewRes__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateFansHostInfo *hostInfo;
} PB3IntimateFansViewRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hostInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansHostInfo),
        .number = PB3IntimateFansViewRes_FieldNumber_HostInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansViewRes__storage_, hostInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansViewRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansViewRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetIntimateFansCardInfoReq

@implementation PB3SetIntimateFansCardInfoReq

@dynamic cardName;

typedef struct PB3SetIntimateFansCardInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *cardName;
} PB3SetIntimateFansCardInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetIntimateFansCardInfoReq_FieldNumber_CardName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetIntimateFansCardInfoReq__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetIntimateFansCardInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetIntimateFansCardInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetIntimateFansCardInfoRes

@implementation PB3SetIntimateFansCardInfoRes

@dynamic hasCardSetting, cardSetting;

typedef struct PB3SetIntimateFansCardInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateFansCardSetting *cardSetting;
} PB3SetIntimateFansCardInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardSetting",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansCardSetting),
        .number = PB3SetIntimateFansCardInfoRes_FieldNumber_CardSetting,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetIntimateFansCardInfoRes__storage_, cardSetting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetIntimateFansCardInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetIntimateFansCardInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansTarget

@implementation PB3IntimateFansTarget

@dynamic id_p;
@dynamic type;
@dynamic name;
@dynamic desc;
@dynamic status;
@dynamic progressVal;
@dynamic targetVal;
@dynamic intimateVal;
@dynamic router;

typedef struct PB3IntimateFansTarget__storage_ {
  uint32_t _has_storage_[1];
  PB3IntimateFansTargetType type;
  int32_t status;
  NSString *name;
  NSString *desc;
  NSString *router;
  int64_t id_p;
  int64_t progressVal;
  int64_t targetVal;
  int64_t intimateVal;
} PB3IntimateFansTarget__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3IntimateFansTargetType_EnumDescriptor,
        .number = PB3IntimateFansTarget_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_Desc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "progressVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_ProgressVal,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, progressVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "targetVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_TargetVal,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, targetVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "intimateVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_IntimateVal,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, intimateVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "router",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansTarget_FieldNumber_Router,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateFansTarget__storage_, router),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansTarget class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansTarget__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IntimateFansTarget_Type_RawValue(PB3IntimateFansTarget *message) {
  GPBDescriptor *descriptor = [PB3IntimateFansTarget descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansTarget_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IntimateFansTarget_Type_RawValue(PB3IntimateFansTarget *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IntimateFansTarget descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IntimateFansTarget_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IntimateFansDetailReq

@implementation PB3IntimateFansDetailReq

@dynamic playerId;

typedef struct PB3IntimateFansDetailReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3IntimateFansDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansDetailReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansDetailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansDetailRes

@implementation PB3IntimateFansDetailRes

@dynamic isValid;
@dynamic targetListArray, targetListArray_Count;
@dynamic hasLevInfo, levInfo;
@dynamic confListArray, confListArray_Count;

typedef struct PB3IntimateFansDetailRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *targetListArray;
  PB3IntimateFansLevInfo *levInfo;
  NSMutableArray *confListArray;
} PB3IntimateFansDetailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isValid",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailRes_FieldNumber_IsValid,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "targetListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansTarget),
        .number = PB3IntimateFansDetailRes_FieldNumber_TargetListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailRes__storage_, targetListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "levInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansLevInfo),
        .number = PB3IntimateFansDetailRes_FieldNumber_LevInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailRes__storage_, levInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansConf),
        .number = PB3IntimateFansDetailRes_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailRes__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansDetailRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansDetailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuardLiveListReq

@implementation PB3GuardLiveListReq


typedef struct PB3GuardLiveListReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GuardLiveListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuardLiveListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3GuardLiveListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuardLiveListRes

@implementation PB3GuardLiveListRes

@dynamic onOff;
@dynamic listArray, listArray_Count;
@dynamic timeoutListArray, timeoutListArray_Count;
@dynamic recommendListArray, recommendListArray_Count;
@dynamic liveId;

typedef struct PB3GuardLiveListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  NSMutableArray *timeoutListArray;
  NSMutableArray *recommendListArray;
  int64_t liveId;
} PB3GuardLiveListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveListRes_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GuardLiveInfo),
        .number = PB3GuardLiveListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GuardLiveListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timeoutListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GuardLiveTimeoutInfo),
        .number = PB3GuardLiveListRes_FieldNumber_TimeoutListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GuardLiveListRes__storage_, timeoutListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "recommendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GuardLiveRecommendInfo),
        .number = PB3GuardLiveListRes_FieldNumber_RecommendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GuardLiveListRes__storage_, recommendListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveListRes_FieldNumber_LiveId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GuardLiveListRes__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuardLiveListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GuardLiveListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuardLiveCommonInfo

@implementation PB3GuardLiveCommonInfo

@dynamic lev;
@dynamic bannerName;
@dynamic liveIcon;
@dynamic liveName;
@dynamic liveId;
@dynamic liveSid;

typedef struct PB3GuardLiveCommonInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  NSString *bannerName;
  NSString *liveIcon;
  NSString *liveName;
  int64_t liveId;
  int64_t liveSid;
} PB3GuardLiveCommonInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveCommonInfo_FieldNumber_Lev,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GuardLiveCommonInfo__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "bannerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveCommonInfo_FieldNumber_BannerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GuardLiveCommonInfo__storage_, bannerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "liveIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveCommonInfo_FieldNumber_LiveIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GuardLiveCommonInfo__storage_, liveIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "liveName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveCommonInfo_FieldNumber_LiveName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GuardLiveCommonInfo__storage_, liveName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "liveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveCommonInfo_FieldNumber_LiveId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GuardLiveCommonInfo__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "liveSid",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveCommonInfo_FieldNumber_LiveSid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GuardLiveCommonInfo__storage_, liveSid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuardLiveCommonInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GuardLiveCommonInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuardLiveInfo

@implementation PB3GuardLiveInfo

@dynamic hasInfo, info;
@dynamic validAt;

typedef struct PB3GuardLiveInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3GuardLiveCommonInfo *info;
  int64_t validAt;
} PB3GuardLiveInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GuardLiveCommonInfo),
        .number = PB3GuardLiveInfo_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GuardLiveInfo__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveInfo_FieldNumber_ValidAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GuardLiveInfo__storage_, validAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuardLiveInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GuardLiveInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuardLiveTimeoutInfo

@implementation PB3GuardLiveTimeoutInfo

@dynamic hasInfo, info;

typedef struct PB3GuardLiveTimeoutInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3GuardLiveCommonInfo *info;
} PB3GuardLiveTimeoutInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GuardLiveCommonInfo),
        .number = PB3GuardLiveTimeoutInfo_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GuardLiveTimeoutInfo__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuardLiveTimeoutInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GuardLiveTimeoutInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GuardLiveRecommendInfo

@implementation PB3GuardLiveRecommendInfo

@dynamic hasInfo, info;
@dynamic fansNum;

typedef struct PB3GuardLiveRecommendInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t fansNum;
  PB3GuardLiveCommonInfo *info;
} PB3GuardLiveRecommendInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GuardLiveCommonInfo),
        .number = PB3GuardLiveRecommendInfo_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GuardLiveRecommendInfo__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GuardLiveRecommendInfo_FieldNumber_FansNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GuardLiveRecommendInfo__storage_, fansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GuardLiveRecommendInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GuardLiveRecommendInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansJumpUrlReq

@implementation PB3IntimateFansJumpUrlReq

@dynamic liveId;

typedef struct PB3IntimateFansJumpUrlReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t liveId;
} PB3IntimateFansJumpUrlReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansJumpUrlReq_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansJumpUrlReq__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansJumpUrlReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansJumpUrlReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansJumpUrlRes

@implementation PB3IntimateFansJumpUrlRes

@dynamic liveId;

typedef struct PB3IntimateFansJumpUrlRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t liveId;
} PB3IntimateFansJumpUrlRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansJumpUrlRes_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansJumpUrlRes__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansJumpUrlRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansJumpUrlRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SwitchStatusReq

@implementation PB3SwitchStatusReq

@dynamic typeListArray, typeListArray_Count;

typedef struct PB3SwitchStatusReq__storage_ {
  uint32_t _has_storage_[1];
  GPBEnumArray *typeListArray;
} PB3SwitchStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeListArray",
        .dataTypeSpecific.enumDescFunc = PB3PrivacyType_EnumDescriptor,
        .number = PB3SwitchStatusReq_FieldNumber_TypeListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SwitchStatusReq__storage_, typeListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SwitchStatusReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SwitchStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SwitchStatusRes

@implementation PB3SwitchStatusRes

@dynamic onOffListArray, onOffListArray_Count;

typedef struct PB3SwitchStatusRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *onOffListArray;
} PB3SwitchStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOffListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PrivacyTypeVal),
        .number = PB3SwitchStatusRes_FieldNumber_OnOffListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SwitchStatusRes__storage_, onOffListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SwitchStatusRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SwitchStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WhaleBossStatusReq

@implementation PB3WhaleBossStatusReq


typedef struct PB3WhaleBossStatusReq__storage_ {
  uint32_t _has_storage_[1];
} PB3WhaleBossStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WhaleBossStatusReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3WhaleBossStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WhaleBossStatusRes

@implementation PB3WhaleBossStatusRes

@dynamic dayTimes;
@dynamic nextTime;

typedef struct PB3WhaleBossStatusRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t dayTimes;
  int64_t nextTime;
} PB3WhaleBossStatusRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dayTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBossStatusRes_FieldNumber_DayTimes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WhaleBossStatusRes__storage_, dayTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBossStatusRes_FieldNumber_NextTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WhaleBossStatusRes__storage_, nextTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WhaleBossStatusRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WhaleBossStatusRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WhaleBoss

@implementation PB3WhaleBoss

@dynamic playerId;
@dynamic playerSid;
@dynamic name;
@dynamic sex;
@dynamic wealthLev;
@dynamic charmLev;
@dynamic potential;
@dynamic icon;

typedef struct PB3WhaleBoss__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t wealthLev;
  int32_t charmLev;
  int32_t potential;
  NSString *name;
  NSString *icon;
  int64_t playerId;
  int64_t playerSid;
} PB3WhaleBoss__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBoss_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerSid",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBoss_FieldNumber_PlayerSid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, playerSid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBoss_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3WhaleBoss_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "wealthLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBoss_FieldNumber_WealthLev,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, wealthLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBoss_FieldNumber_CharmLev,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, charmLev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "potential",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBoss_FieldNumber_Potential,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, potential),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3WhaleBoss_FieldNumber_Icon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3WhaleBoss__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WhaleBoss class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WhaleBoss__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WhaleBoss_Sex_RawValue(PB3WhaleBoss *message) {
  GPBDescriptor *descriptor = [PB3WhaleBoss descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WhaleBoss_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WhaleBoss_Sex_RawValue(PB3WhaleBoss *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WhaleBoss descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WhaleBoss_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3WhaleBossListReq

@implementation PB3WhaleBossListReq


typedef struct PB3WhaleBossListReq__storage_ {
  uint32_t _has_storage_[1];
} PB3WhaleBossListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WhaleBossListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3WhaleBossListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WhaleBossListRes

@implementation PB3WhaleBossListRes

@dynamic bossListArray, bossListArray_Count;

typedef struct PB3WhaleBossListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *bossListArray;
} PB3WhaleBossListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bossListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WhaleBoss),
        .number = PB3WhaleBossListRes_FieldNumber_BossListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WhaleBossListRes__storage_, bossListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WhaleBossListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WhaleBossListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CatchWhaleBossReq

@implementation PB3CatchWhaleBossReq


typedef struct PB3CatchWhaleBossReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CatchWhaleBossReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CatchWhaleBossReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CatchWhaleBossReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CatchWhaleBossRes

@implementation PB3CatchWhaleBossRes

@dynamic bossListArray, bossListArray_Count;
@dynamic dayTimes;
@dynamic nextTime;

typedef struct PB3CatchWhaleBossRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t dayTimes;
  NSMutableArray *bossListArray;
  int64_t nextTime;
} PB3CatchWhaleBossRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bossListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WhaleBoss),
        .number = PB3CatchWhaleBossRes_FieldNumber_BossListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CatchWhaleBossRes__storage_, bossListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dayTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3CatchWhaleBossRes_FieldNumber_DayTimes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CatchWhaleBossRes__storage_, dayTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3CatchWhaleBossRes_FieldNumber_NextTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CatchWhaleBossRes__storage_, nextTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CatchWhaleBossRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CatchWhaleBossRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveSongImgReq

@implementation PB3SaveSongImgReq

@dynamic img;
@dynamic width;
@dynamic height;

typedef struct PB3SaveSongImgReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  NSString *img;
} PB3SaveSongImgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "img",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveSongImgReq_FieldNumber_Img,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SaveSongImgReq__storage_, img),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveSongImgReq_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SaveSongImgReq__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = PB3SaveSongImgReq_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SaveSongImgReq__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveSongImgReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SaveSongImgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SaveSongImgRes

@implementation PB3SaveSongImgRes


typedef struct PB3SaveSongImgRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SaveSongImgRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SaveSongImgRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SaveSongImgRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HomeLoadSuccessReq

@implementation PB3HomeLoadSuccessReq

@dynamic timestamp;
@dynamic isCold;

typedef struct PB3HomeLoadSuccessReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t timestamp;
} PB3HomeLoadSuccessReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3HomeLoadSuccessReq_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3HomeLoadSuccessReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isCold",
        .dataTypeSpecific.className = NULL,
        .number = PB3HomeLoadSuccessReq_FieldNumber_IsCold,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HomeLoadSuccessReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3HomeLoadSuccessReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3HomeLoadSuccessRes

@implementation PB3HomeLoadSuccessRes


typedef struct PB3HomeLoadSuccessRes__storage_ {
  uint32_t _has_storage_[1];
} PB3HomeLoadSuccessRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3HomeLoadSuccessRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3HomeLoadSuccessRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetChannelFilterReq

@implementation PB3SetChannelFilterReq

@dynamic channelListArray, channelListArray_Count;

typedef struct PB3SetChannelFilterReq__storage_ {
  uint32_t _has_storage_[1];
  GPBEnumArray *channelListArray;
} PB3SetChannelFilterReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelListArray",
        .dataTypeSpecific.enumDescFunc = PB3ChannelType_EnumDescriptor,
        .number = PB3SetChannelFilterReq_FieldNumber_ChannelListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SetChannelFilterReq__storage_, channelListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetChannelFilterReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetChannelFilterReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetChannelFilterRes

@implementation PB3SetChannelFilterRes


typedef struct PB3SetChannelFilterRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetChannelFilterRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetChannelFilterRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetChannelFilterRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChannelSubscribeReq

@implementation PB3ChannelSubscribeReq

@dynamic channelId;
@dynamic channelType;
@dynamic timestamp;

typedef struct PB3ChannelSubscribeReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelPrefix channelType;
  int64_t channelId;
  int64_t timestamp;
} PB3ChannelSubscribeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChannelSubscribeReq_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChannelSubscribeReq__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = PB3ChannelPrefix_EnumDescriptor,
        .number = PB3ChannelSubscribeReq_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChannelSubscribeReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChannelSubscribeReq_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChannelSubscribeReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChannelSubscribeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChannelSubscribeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChannelSubscribeReq_ChannelType_RawValue(PB3ChannelSubscribeReq *message) {
  GPBDescriptor *descriptor = [PB3ChannelSubscribeReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChannelSubscribeReq_FieldNumber_ChannelType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChannelSubscribeReq_ChannelType_RawValue(PB3ChannelSubscribeReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChannelSubscribeReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChannelSubscribeReq_FieldNumber_ChannelType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChannelSubscribeRes

@implementation PB3ChannelSubscribeRes


typedef struct PB3ChannelSubscribeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChannelSubscribeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChannelSubscribeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChannelSubscribeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BatchChannelSubscribeReq

@implementation PB3BatchChannelSubscribeReq

@dynamic channelListArray, channelListArray_Count;

typedef struct PB3BatchChannelSubscribeReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelListArray;
} PB3BatchChannelSubscribeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChannelSubscribeReq),
        .number = PB3BatchChannelSubscribeReq_FieldNumber_ChannelListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BatchChannelSubscribeReq__storage_, channelListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BatchChannelSubscribeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BatchChannelSubscribeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BatchChannelSubscribeRes

@implementation PB3BatchChannelSubscribeRes


typedef struct PB3BatchChannelSubscribeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BatchChannelSubscribeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BatchChannelSubscribeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BatchChannelSubscribeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChannelDesubscribeReq

@implementation PB3ChannelDesubscribeReq

@dynamic channelType;
@dynamic timestamp;

typedef struct PB3ChannelDesubscribeReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ChannelPrefix channelType;
  int64_t timestamp;
} PB3ChannelDesubscribeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = PB3ChannelPrefix_EnumDescriptor,
        .number = PB3ChannelDesubscribeReq_FieldNumber_ChannelType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChannelDesubscribeReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChannelDesubscribeReq_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChannelDesubscribeReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChannelDesubscribeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChannelDesubscribeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ChannelDesubscribeReq_ChannelType_RawValue(PB3ChannelDesubscribeReq *message) {
  GPBDescriptor *descriptor = [PB3ChannelDesubscribeReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChannelDesubscribeReq_FieldNumber_ChannelType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ChannelDesubscribeReq_ChannelType_RawValue(PB3ChannelDesubscribeReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ChannelDesubscribeReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ChannelDesubscribeReq_FieldNumber_ChannelType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ChannelDesubscribeRes

@implementation PB3ChannelDesubscribeRes


typedef struct PB3ChannelDesubscribeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChannelDesubscribeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChannelDesubscribeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChannelDesubscribeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BatchChannelDesubscribeReq

@implementation PB3BatchChannelDesubscribeReq

@dynamic channelListArray, channelListArray_Count;

typedef struct PB3BatchChannelDesubscribeReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelListArray;
} PB3BatchChannelDesubscribeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChannelDesubscribeReq),
        .number = PB3BatchChannelDesubscribeReq_FieldNumber_ChannelListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BatchChannelDesubscribeReq__storage_, channelListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BatchChannelDesubscribeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BatchChannelDesubscribeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BatchChannelDesubscribeRes

@implementation PB3BatchChannelDesubscribeRes


typedef struct PB3BatchChannelDesubscribeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BatchChannelDesubscribeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BatchChannelDesubscribeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BatchChannelDesubscribeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateBindPhoneReq

@implementation PB3UpdateBindPhoneReq

@dynamic identityCardPhoto;
@dynamic phone;

typedef struct PB3UpdateBindPhoneReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *identityCardPhoto;
  NSString *phone;
} PB3UpdateBindPhoneReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identityCardPhoto",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateBindPhoneReq_FieldNumber_IdentityCardPhoto,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdateBindPhoneReq__storage_, identityCardPhoto),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateBindPhoneReq_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpdateBindPhoneReq__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateBindPhoneReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdateBindPhoneReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateBindPhoneRes

@implementation PB3UpdateBindPhoneRes

@dynamic type;
@dynamic name;
@dynamic time;

typedef struct PB3UpdateBindPhoneRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CheckType type;
  NSString *name;
  NSString *time;
} PB3UpdateBindPhoneRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CheckType_EnumDescriptor,
        .number = PB3UpdateBindPhoneRes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdateBindPhoneRes__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateBindPhoneRes_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpdateBindPhoneRes__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateBindPhoneRes_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UpdateBindPhoneRes__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateBindPhoneRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdateBindPhoneRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3UpdateBindPhoneRes_Type_RawValue(PB3UpdateBindPhoneRes *message) {
  GPBDescriptor *descriptor = [PB3UpdateBindPhoneRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UpdateBindPhoneRes_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3UpdateBindPhoneRes_Type_RawValue(PB3UpdateBindPhoneRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3UpdateBindPhoneRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3UpdateBindPhoneRes_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SettingOnOffReq

@implementation PB3SettingOnOffReq

@dynamic hasOnOff, onOff;

typedef struct PB3SettingOnOffReq__storage_ {
  uint32_t _has_storage_[1];
  PB3SettingOnOffStatus *onOff;
} PB3SettingOnOffReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOff",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SettingOnOffStatus),
        .number = PB3SettingOnOffReq_FieldNumber_OnOff,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SettingOnOffReq__storage_, onOff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SettingOnOffReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SettingOnOffReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SettingOnOffStatus

@implementation PB3SettingOnOffStatus

@dynamic onOffType;
@dynamic isOpen;

typedef struct PB3SettingOnOffStatus__storage_ {
  uint32_t _has_storage_[1];
  PB3SettingType onOffType;
} PB3SettingOnOffStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onOffType",
        .dataTypeSpecific.enumDescFunc = PB3SettingType_EnumDescriptor,
        .number = PB3SettingOnOffStatus_FieldNumber_OnOffType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SettingOnOffStatus__storage_, onOffType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isOpen",
        .dataTypeSpecific.className = NULL,
        .number = PB3SettingOnOffStatus_FieldNumber_IsOpen,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SettingOnOffStatus class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SettingOnOffStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SettingOnOffStatus_OnOffType_RawValue(PB3SettingOnOffStatus *message) {
  GPBDescriptor *descriptor = [PB3SettingOnOffStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SettingOnOffStatus_FieldNumber_OnOffType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SettingOnOffStatus_OnOffType_RawValue(PB3SettingOnOffStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SettingOnOffStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SettingOnOffStatus_FieldNumber_OnOffType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SettingOnOffRes

@implementation PB3SettingOnOffRes


typedef struct PB3SettingOnOffRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SettingOnOffRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SettingOnOffRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SettingOnOffRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SettingOnOffListReq

@implementation PB3SettingOnOffListReq


typedef struct PB3SettingOnOffListReq__storage_ {
  uint32_t _has_storage_[1];
} PB3SettingOnOffListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SettingOnOffListReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SettingOnOffListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SettingOnOffListRes

@implementation PB3SettingOnOffListRes

@dynamic listArray, listArray_Count;

typedef struct PB3SettingOnOffListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3SettingOnOffListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SettingOnOffStatus),
        .number = PB3SettingOnOffListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SettingOnOffListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SettingOnOffListRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SettingOnOffListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceivePushReq

@implementation PB3ReceivePushReq


typedef struct PB3ReceivePushReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ReceivePushReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceivePushReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReceivePushReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceivePushRes

@implementation PB3ReceivePushRes


typedef struct PB3ReceivePushRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ReceivePushRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceivePushRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReceivePushRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ImGenerationWindows

@implementation PB3ImGenerationWindows

@dynamic playerId;
@dynamic name;
@dynamic sex;
@dynamic tag;
@dynamic icon;
@dynamic content;
@dynamic age;

typedef struct PB3ImGenerationWindows__storage_ {
  uint32_t _has_storage_[1];
  PB3SexType sex;
  int32_t age;
  NSString *name;
  NSString *tag;
  NSString *icon;
  NSString *content;
  int64_t playerId;
} PB3ImGenerationWindows__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImGenerationWindows_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ImGenerationWindows__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImGenerationWindows_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ImGenerationWindows__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PB3SexType_EnumDescriptor,
        .number = PB3ImGenerationWindows_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ImGenerationWindows__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tag",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImGenerationWindows_FieldNumber_Tag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ImGenerationWindows__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImGenerationWindows_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ImGenerationWindows__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImGenerationWindows_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ImGenerationWindows__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImGenerationWindows_FieldNumber_Age,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ImGenerationWindows__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ImGenerationWindows class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ImGenerationWindows__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ImGenerationWindows_Sex_RawValue(PB3ImGenerationWindows *message) {
  GPBDescriptor *descriptor = [PB3ImGenerationWindows descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ImGenerationWindows_FieldNumber_Sex];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ImGenerationWindows_Sex_RawValue(PB3ImGenerationWindows *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ImGenerationWindows descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ImGenerationWindows_FieldNumber_Sex];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ImGenerationReq

@implementation PB3ImGenerationReq

@dynamic playerId;

typedef struct PB3ImGenerationReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3ImGenerationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ImGenerationReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ImGenerationReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ImGenerationReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ImGenerationReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ImGenerationRes

@implementation PB3ImGenerationRes


typedef struct PB3ImGenerationRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ImGenerationRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ImGenerationRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ImGenerationRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DialogCallBackExitReq

@implementation PB3DialogCallBackExitReq

@dynamic type;

typedef struct PB3DialogCallBackExitReq__storage_ {
  uint32_t _has_storage_[1];
  PB3DialogButtonType type;
} PB3DialogCallBackExitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3DialogButtonType_EnumDescriptor,
        .number = PB3DialogCallBackExitReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DialogCallBackExitReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DialogCallBackExitReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DialogCallBackExitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DialogCallBackExitReq_Type_RawValue(PB3DialogCallBackExitReq *message) {
  GPBDescriptor *descriptor = [PB3DialogCallBackExitReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogCallBackExitReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DialogCallBackExitReq_Type_RawValue(PB3DialogCallBackExitReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DialogCallBackExitReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogCallBackExitReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DialogCallBackExitRes

@implementation PB3DialogCallBackExitRes


typedef struct PB3DialogCallBackExitRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DialogCallBackExitRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DialogCallBackExitRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DialogCallBackExitRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastJoinIntimateFansV2

@implementation PB3BroadcastJoinIntimateFansV2

@dynamic anchorId;
@dynamic anchorId2;
@dynamic anchorName;
@dynamic anchorIcon;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic content;
@dynamic btnText;
@dynamic showTime;

typedef struct PB3BroadcastJoinIntimateFansV2__storage_ {
  uint32_t _has_storage_[1];
  NSString *anchorName;
  NSString *anchorIcon;
  NSString *playerName;
  NSString *playerIcon;
  NSString *content;
  NSString *btnText;
  int64_t anchorId;
  int64_t anchorId2;
  int64_t playerId;
  int64_t playerId2;
  int64_t showTime;
} PB3BroadcastJoinIntimateFansV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anchorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_AnchorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "anchorId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_AnchorId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, anchorId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "anchorName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_AnchorName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, anchorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "anchorIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_AnchorIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, anchorIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_PlayerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_PlayerId2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_PlayerName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_PlayerIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_Content,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "btnText",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_BtnText,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, btnText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastJoinIntimateFansV2_FieldNumber_ShowTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3BroadcastJoinIntimateFansV2__storage_, showTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastJoinIntimateFansV2 class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastJoinIntimateFansV2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansVsn2LevConf

@implementation PB3IntimateFansVsn2LevConf

@dynamic lev;
@dynamic levName;
@dynamic cardURL;
@dynamic bannerURL;
@dynamic levExp;
@dynamic maxDailyExp;
@dynamic cardStartColor;
@dynamic cardEndColor;
@dynamic iosHeadIconURL;
@dynamic iosTailIconURL;
@dynamic pcHeadIconURL;
@dynamic pcMiddleIconURL;
@dynamic pcTailIconURL;

typedef struct PB3IntimateFansVsn2LevConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  NSString *levName;
  NSString *cardURL;
  NSString *bannerURL;
  NSString *cardStartColor;
  NSString *cardEndColor;
  NSString *iosHeadIconURL;
  NSString *iosTailIconURL;
  NSString *pcHeadIconURL;
  NSString *pcMiddleIconURL;
  NSString *pcTailIconURL;
  int64_t levExp;
  int64_t maxDailyExp;
} PB3IntimateFansVsn2LevConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_Lev,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "levName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_LevName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, levName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_CardURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, cardURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bannerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_BannerURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, bannerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_LevExp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, levExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxDailyExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_MaxDailyExp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, maxDailyExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cardStartColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_CardStartColor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, cardStartColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardEndColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_CardEndColor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, cardEndColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosHeadIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_IosHeadIconURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, iosHeadIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosTailIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_IosTailIconURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, iosTailIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcHeadIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_PcHeadIconURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, pcHeadIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcMiddleIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_PcMiddleIconURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, pcMiddleIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcTailIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansVsn2LevConf_FieldNumber_PcTailIconURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConf__storage_, pcTailIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansVsn2LevConf class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansVsn2LevConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\003\004\241!!\000\004\006\241!!\000\t\003\244\244\241!!\000\n\003\244\244\241!!\000\013\002\244\244\241!!\000\014\002\246"
        "\244\241!!\000\r\002\244\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansVsn2LevConfReq

@implementation PB3IntimateFansVsn2LevConfReq


typedef struct PB3IntimateFansVsn2LevConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateFansVsn2LevConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansVsn2LevConfReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateFansVsn2LevConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansVsn2LevConfRes

@implementation PB3IntimateFansVsn2LevConfRes

@dynamic confListArray, confListArray_Count;

typedef struct PB3IntimateFansVsn2LevConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *confListArray;
} PB3IntimateFansVsn2LevConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansVsn2LevConf),
        .number = PB3IntimateFansVsn2LevConfRes_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansVsn2LevConfRes__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansVsn2LevConfRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansVsn2LevConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansMissionConfReq

@implementation PB3IntimateFansMissionConfReq


typedef struct PB3IntimateFansMissionConfReq__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateFansMissionConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansMissionConfReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateFansMissionConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansMissionConfRes

@implementation PB3IntimateFansMissionConfRes

@dynamic confListArray, confListArray_Count;

typedef struct PB3IntimateFansMissionConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *confListArray;
} PB3IntimateFansMissionConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansMiddionCliCfg),
        .number = PB3IntimateFansMissionConfRes_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansMissionConfRes__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansMissionConfRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansMissionConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansMissionTarget

@implementation PB3IntimateFansMissionTarget

@dynamic id_p;
@dynamic status;
@dynamic progressVal;

typedef struct PB3IntimateFansMissionTarget__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int64_t id_p;
  int64_t progressVal;
} PB3IntimateFansMissionTarget__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMissionTarget_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansMissionTarget__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMissionTarget_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansMissionTarget__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "progressVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansMissionTarget_FieldNumber_ProgressVal,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansMissionTarget__storage_, progressVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansMissionTarget class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansMissionTarget__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansDetailInfo

@implementation PB3IntimateFansDetailInfo

@dynamic isValid;
@dynamic playerId;
@dynamic nickName;
@dynamic playerSid;
@dynamic playerIcon;
@dynamic giftId;
@dynamic dailyExp;
@dynamic lev;
@dynamic exp;
@dynamic fansNum;
@dynamic targetListArray, targetListArray_Count;
@dynamic cardName;

typedef struct PB3IntimateFansDetailInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *nickName;
  NSString *playerIcon;
  NSMutableArray *targetListArray;
  NSString *cardName;
  int64_t playerId;
  int64_t playerSid;
  int64_t giftId;
  int64_t dailyExp;
  int64_t lev;
  int64_t exp;
  int64_t fansNum;
} PB3IntimateFansDetailInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isValid",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_IsValid,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, nickName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerSid",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_PlayerSid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, playerSid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_PlayerIcon,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_GiftId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dailyExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_DailyExp,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, dailyExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_Lev,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_Exp,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fansNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_FansNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, fansNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "targetListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansMissionTarget),
        .number = PB3IntimateFansDetailInfo_FieldNumber_TargetListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, targetListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailInfo_FieldNumber_CardName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailInfo__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansDetailInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansDetailInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansDetailVsn2Req

@implementation PB3IntimateFansDetailVsn2Req

@dynamic playerIdsArray, playerIdsArray_Count;

typedef struct PB3IntimateFansDetailVsn2Req__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *playerIdsArray;
} PB3IntimateFansDetailVsn2Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansDetailVsn2Req_FieldNumber_PlayerIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailVsn2Req__storage_, playerIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansDetailVsn2Req class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansDetailVsn2Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansDetailVsn2Res

@implementation PB3IntimateFansDetailVsn2Res

@dynamic infoListArray, infoListArray_Count;

typedef struct PB3IntimateFansDetailVsn2Res__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *infoListArray;
} PB3IntimateFansDetailVsn2Res__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansDetailInfo),
        .number = PB3IntimateFansDetailVsn2Res_FieldNumber_InfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansDetailVsn2Res__storage_, infoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansDetailVsn2Res class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansDetailVsn2Res__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansCardInfoV2

@implementation PB3IntimateFansCardInfoV2

@dynamic playerId;
@dynamic lev;
@dynamic cardName;
@dynamic exp;
@dynamic limitExp;
@dynamic gapExp;
@dynamic maxLev;
@dynamic roomId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic currentExp;

typedef struct PB3IntimateFansCardInfoV2__storage_ {
  uint32_t _has_storage_[1];
  int32_t lev;
  int32_t exp;
  int32_t limitExp;
  int32_t gapExp;
  int32_t currentExp;
  NSString *cardName;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t roomId;
  int64_t playerId2;
} PB3IntimateFansCardInfoV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_Lev,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, lev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_CardName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, cardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_Exp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limitExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_LimitExp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, limitExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gapExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_GapExp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, gapExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxLev",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_MaxLev,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_RoomId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_PlayerId2,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_PlayerName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_PlayerIcon,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currentExp",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoV2_FieldNumber_CurrentExp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoV2__storage_, currentExp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansCardInfoV2 class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansCardInfoV2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansCardInfoVsn2Req

@implementation PB3IntimateFansCardInfoVsn2Req


typedef struct PB3IntimateFansCardInfoVsn2Req__storage_ {
  uint32_t _has_storage_[1];
} PB3IntimateFansCardInfoVsn2Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansCardInfoVsn2Req class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3IntimateFansCardInfoVsn2Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IntimateFansCardInfoVsn2Res

@implementation PB3IntimateFansCardInfoVsn2Res

@dynamic usedPlayerId;
@dynamic cardListArray, cardListArray_Count;

typedef struct PB3IntimateFansCardInfoVsn2Res__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cardListArray;
  int64_t usedPlayerId;
} PB3IntimateFansCardInfoVsn2Res__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usedPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IntimateFansCardInfoVsn2Res_FieldNumber_UsedPlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoVsn2Res__storage_, usedPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IntimateFansCardInfoV2),
        .number = PB3IntimateFansCardInfoVsn2Res_FieldNumber_CardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IntimateFansCardInfoVsn2Res__storage_, cardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IntimateFansCardInfoVsn2Res class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IntimateFansCardInfoVsn2Res__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ExitIntimateFansReq

@implementation PB3ExitIntimateFansReq

@dynamic playerId;

typedef struct PB3ExitIntimateFansReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3ExitIntimateFansReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExitIntimateFansReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ExitIntimateFansReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ExitIntimateFansReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ExitIntimateFansReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ExitIntimateFansRes

@implementation PB3ExitIntimateFansRes


typedef struct PB3ExitIntimateFansRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ExitIntimateFansRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ExitIntimateFansRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ExitIntimateFansRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BroadcastIntimateFansExp

@implementation PB3BroadcastIntimateFansExp

@dynamic hostId;

typedef struct PB3BroadcastIntimateFansExp__storage_ {
  uint32_t _has_storage_[1];
  int64_t hostId;
} PB3BroadcastIntimateFansExp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hostId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BroadcastIntimateFansExp_FieldNumber_HostId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BroadcastIntimateFansExp__storage_, hostId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BroadcastIntimateFansExp class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BroadcastIntimateFansExp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NeteaseTokenReq

@implementation PB3NeteaseTokenReq


typedef struct PB3NeteaseTokenReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NeteaseTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NeteaseTokenReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NeteaseTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NeteaseTokenRes

@implementation PB3NeteaseTokenRes

@dynamic token;
@dynamic expireAt;
@dynamic deviceType;

typedef struct PB3NeteaseTokenRes__storage_ {
  uint32_t _has_storage_[1];
  PB3DeviceType deviceType;
  NSString *token;
  int64_t expireAt;
} PB3NeteaseTokenRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PB3NeteaseTokenRes_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NeteaseTokenRes__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expireAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3NeteaseTokenRes_FieldNumber_ExpireAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NeteaseTokenRes__storage_, expireAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PB3DeviceType_EnumDescriptor,
        .number = PB3NeteaseTokenRes_FieldNumber_DeviceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NeteaseTokenRes__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NeteaseTokenRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NeteaseTokenRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3NeteaseTokenRes_DeviceType_RawValue(PB3NeteaseTokenRes *message) {
  GPBDescriptor *descriptor = [PB3NeteaseTokenRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NeteaseTokenRes_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3NeteaseTokenRes_DeviceType_RawValue(PB3NeteaseTokenRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3NeteaseTokenRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3NeteaseTokenRes_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CollectionBillList

@implementation PB3CollectionBillList

@dynamic listArray, listArray_Count;

typedef struct PB3CollectionBillList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3CollectionBillList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CollectionBillList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CollectionBillList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CollectionBillList class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CollectionBillList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CollectionPersonBillReq

@implementation PB3CollectionPersonBillReq

@dynamic parentType;
@dynamic timeType;

typedef struct PB3CollectionPersonBillReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ParentCollectionBillType parentType;
  PB3TimeCollectionBillType timeType;
} PB3CollectionPersonBillReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentType",
        .dataTypeSpecific.enumDescFunc = PB3ParentCollectionBillType_EnumDescriptor,
        .number = PB3CollectionPersonBillReq_FieldNumber_ParentType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CollectionPersonBillReq__storage_, parentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timeType",
        .dataTypeSpecific.enumDescFunc = PB3TimeCollectionBillType_EnumDescriptor,
        .number = PB3CollectionPersonBillReq_FieldNumber_TimeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CollectionPersonBillReq__storage_, timeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CollectionPersonBillReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CollectionPersonBillReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CollectionPersonBillReq_ParentType_RawValue(PB3CollectionPersonBillReq *message) {
  GPBDescriptor *descriptor = [PB3CollectionPersonBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CollectionPersonBillReq_FieldNumber_ParentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CollectionPersonBillReq_ParentType_RawValue(PB3CollectionPersonBillReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CollectionPersonBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CollectionPersonBillReq_FieldNumber_ParentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3CollectionPersonBillReq_TimeType_RawValue(PB3CollectionPersonBillReq *message) {
  GPBDescriptor *descriptor = [PB3CollectionPersonBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CollectionPersonBillReq_FieldNumber_TimeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CollectionPersonBillReq_TimeType_RawValue(PB3CollectionPersonBillReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CollectionPersonBillReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CollectionPersonBillReq_FieldNumber_TimeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CollectionPersonBillRes

@implementation PB3CollectionPersonBillRes

@dynamic billMap, billMap_Count;

typedef struct PB3CollectionPersonBillRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32ObjectDictionary *billMap;
} PB3CollectionPersonBillRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "billMap",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CollectionBillList),
        .number = PB3CollectionPersonBillRes_FieldNumber_BillMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CollectionPersonBillRes__storage_, billMap),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CollectionPersonBillRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CollectionPersonBillRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ExchangeToDepositReq

@implementation PB3ExchangeToDepositReq

@dynamic num;
@dynamic isAdmin;

typedef struct PB3ExchangeToDepositReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t num;
} PB3ExchangeToDepositReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeToDepositReq_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ExchangeToDepositReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isAdmin",
        .dataTypeSpecific.className = NULL,
        .number = PB3ExchangeToDepositReq_FieldNumber_IsAdmin,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ExchangeToDepositReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ExchangeToDepositReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ExchangeToDepositRes

@implementation PB3ExchangeToDepositRes


typedef struct PB3ExchangeToDepositRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ExchangeToDepositRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ExchangeToDepositRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ExchangeToDepositRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FreezeDepositLog

@implementation PB3FreezeDepositLog

@dynamic id_p;
@dynamic createdAt;
@dynamic freezeDeposit;
@dynamic releaseAt;

typedef struct PB3FreezeDepositLog__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
  int64_t createdAt;
  int64_t freezeDeposit;
  int64_t releaseAt;
} PB3FreezeDepositLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLog_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLog__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLog_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLog__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "freezeDeposit",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLog_FieldNumber_FreezeDeposit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLog__storage_, freezeDeposit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "releaseAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLog_FieldNumber_ReleaseAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLog__storage_, releaseAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FreezeDepositLog class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FreezeDepositLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FreezeDepositLogsReq

@implementation PB3FreezeDepositLogsReq

@dynamic page;
@dynamic pageSize;

typedef struct PB3FreezeDepositLogsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
  int32_t pageSize;
} PB3FreezeDepositLogsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLogsReq_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLogsReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLogsReq_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLogsReq__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FreezeDepositLogsReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FreezeDepositLogsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FreezeDepositLogsRes

@implementation PB3FreezeDepositLogsRes

@dynamic sum;
@dynamic logListArray, logListArray_Count;
@dynamic total;

typedef struct PB3FreezeDepositLogsRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  NSMutableArray *logListArray;
  int64_t sum;
} PB3FreezeDepositLogsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLogsRes_FieldNumber_Sum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLogsRes__storage_, sum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "logListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FreezeDepositLog),
        .number = PB3FreezeDepositLogsRes_FieldNumber_LogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLogsRes__storage_, logListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3FreezeDepositLogsRes_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FreezeDepositLogsRes__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FreezeDepositLogsRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FreezeDepositLogsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomExchangeToDepositReq

@implementation PB3RoomExchangeToDepositReq

@dynamic num;
@dynamic isAdmin;

typedef struct PB3RoomExchangeToDepositReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t num;
} PB3RoomExchangeToDepositReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomExchangeToDepositReq_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomExchangeToDepositReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isAdmin",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomExchangeToDepositReq_FieldNumber_IsAdmin,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomExchangeToDepositReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomExchangeToDepositReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomExchangeToDepositRes

@implementation PB3RoomExchangeToDepositRes


typedef struct PB3RoomExchangeToDepositRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomExchangeToDepositRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomExchangeToDepositRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomExchangeToDepositRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UploadCertifySourceReq

@implementation PB3UploadCertifySourceReq

@dynamic name;
@dynamic certifyNo;
@dynamic imgA;
@dynamic imgB;

typedef struct PB3UploadCertifySourceReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *certifyNo;
  NSString *imgA;
  NSString *imgB;
} PB3UploadCertifySourceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadCertifySourceReq_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UploadCertifySourceReq__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "certifyNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadCertifySourceReq_FieldNumber_CertifyNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UploadCertifySourceReq__storage_, certifyNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgA",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadCertifySourceReq_FieldNumber_ImgA,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UploadCertifySourceReq__storage_, imgA),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgB",
        .dataTypeSpecific.className = NULL,
        .number = PB3UploadCertifySourceReq_FieldNumber_ImgB,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UploadCertifySourceReq__storage_, imgB),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UploadCertifySourceReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UploadCertifySourceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UploadCertifySourceRes

@implementation PB3UploadCertifySourceRes


typedef struct PB3UploadCertifySourceRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UploadCertifySourceRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UploadCertifySourceRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UploadCertifySourceRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindGiftRankTop3ByGiftIdReq

@implementation PB3FindGiftRankTop3ByGiftIdReq

@dynamic giftId;

typedef struct PB3FindGiftRankTop3ByGiftIdReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t giftId;
} PB3FindGiftRankTop3ByGiftIdReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindGiftRankTop3ByGiftIdReq_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindGiftRankTop3ByGiftIdReq__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindGiftRankTop3ByGiftIdReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindGiftRankTop3ByGiftIdReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindGiftRankTop3ByGiftIdRes

@implementation PB3FindGiftRankTop3ByGiftIdRes

@dynamic rankListArray, rankListArray_Count;
@dynamic myRank;

typedef struct PB3FindGiftRankTop3ByGiftIdRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t myRank;
  NSMutableArray *rankListArray;
} PB3FindGiftRankTop3ByGiftIdRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Rank),
        .number = PB3FindGiftRankTop3ByGiftIdRes_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindGiftRankTop3ByGiftIdRes__storage_, rankListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "myRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindGiftRankTop3ByGiftIdRes_FieldNumber_MyRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindGiftRankTop3ByGiftIdRes__storage_, myRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindGiftRankTop3ByGiftIdRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindGiftRankTop3ByGiftIdRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChargeBonusLog

@implementation PB3ChargeBonusLog

@dynamic playerId;
@dynamic playerSid;
@dynamic playerName;
@dynamic playerIcon;
@dynamic chargeVal;
@dynamic bonusVal;

typedef struct PB3ChargeBonusLog__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerSid;
  int64_t chargeVal;
  int64_t bonusVal;
} PB3ChargeBonusLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusLog_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChargeBonusLog__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerSid",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusLog_FieldNumber_PlayerSid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ChargeBonusLog__storage_, playerSid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusLog_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ChargeBonusLog__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusLog_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ChargeBonusLog__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chargeVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusLog_FieldNumber_ChargeVal,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ChargeBonusLog__storage_, chargeVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bonusVal",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChargeBonusLog_FieldNumber_BonusVal,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ChargeBonusLog__storage_, bonusVal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChargeBonusLog class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChargeBonusLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetChargeBonusLogsReq

@implementation PB3GetChargeBonusLogsReq

@dynamic isInner;

typedef struct PB3GetChargeBonusLogsReq__storage_ {
  uint32_t _has_storage_[1];
} PB3GetChargeBonusLogsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isInner",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetChargeBonusLogsReq_FieldNumber_IsInner,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetChargeBonusLogsReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetChargeBonusLogsReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetChargeBonusLogsRes

@implementation PB3GetChargeBonusLogsRes

@dynamic logListArray, logListArray_Count;

typedef struct PB3GetChargeBonusLogsRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logListArray;
} PB3GetChargeBonusLogsRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ChargeBonusLog),
        .number = PB3GetChargeBonusLogsRes_FieldNumber_LogListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetChargeBonusLogsRes__storage_, logListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetChargeBonusLogsRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetChargeBonusLogsRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerCubismModelReq

@implementation PB3PlayerCubismModelReq

@dynamic playerId;

typedef struct PB3PlayerCubismModelReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3PlayerCubismModelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCubismModelReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerCubismModelReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerCubismModelReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerCubismModelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerCubismModelRes

@implementation PB3PlayerCubismModelRes

@dynamic cubismModelName;

typedef struct PB3PlayerCubismModelRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *cubismModelName;
} PB3PlayerCubismModelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cubismModelName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerCubismModelRes_FieldNumber_CubismModelName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerCubismModelRes__storage_, cubismModelName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerCubismModelRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerCubismModelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetPlayerCubismModelReq

@implementation PB3SetPlayerCubismModelReq

@dynamic playerId;
@dynamic cubismModelName;

typedef struct PB3SetPlayerCubismModelReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *cubismModelName;
  int64_t playerId;
} PB3SetPlayerCubismModelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetPlayerCubismModelReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetPlayerCubismModelReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cubismModelName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SetPlayerCubismModelReq_FieldNumber_CubismModelName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SetPlayerCubismModelReq__storage_, cubismModelName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetPlayerCubismModelReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetPlayerCubismModelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetPlayerCubismModelRes

@implementation PB3SetPlayerCubismModelRes


typedef struct PB3SetPlayerCubismModelRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetPlayerCubismModelRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetPlayerCubismModelRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetPlayerCubismModelRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeCoinSendCodeReq

@implementation PB3ChangeCoinSendCodeReq

@dynamic gold;

typedef struct PB3ChangeCoinSendCodeReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t gold;
} PB3ChangeCoinSendCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ChangeCoinSendCodeReq_FieldNumber_Gold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ChangeCoinSendCodeReq__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeCoinSendCodeReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ChangeCoinSendCodeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ChangeCoinSendCodeRes

@implementation PB3ChangeCoinSendCodeRes


typedef struct PB3ChangeCoinSendCodeRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ChangeCoinSendCodeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ChangeCoinSendCodeRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ChangeCoinSendCodeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SameCertifyUsersReq

@implementation PB3SameCertifyUsersReq


typedef struct PB3SameCertifyUsersReq__storage_ {
  uint32_t _has_storage_[1];
} PB3SameCertifyUsersReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SameCertifyUsersReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SameCertifyUsersReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SameCertifyUsersRes

@implementation PB3SameCertifyUsersRes

@dynamic playerListArray, playerListArray_Count;

typedef struct PB3SameCertifyUsersRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *playerListArray;
} PB3SameCertifyUsersRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SimplePlayer),
        .number = PB3SameCertifyUsersRes_FieldNumber_PlayerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SameCertifyUsersRes__storage_, playerListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SameCertifyUsersRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SameCertifyUsersRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckIsVipWeixinReq

@implementation PB3CheckIsVipWeixinReq


typedef struct PB3CheckIsVipWeixinReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CheckIsVipWeixinReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckIsVipWeixinReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CheckIsVipWeixinReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckIsVipWeixinRes

@implementation PB3CheckIsVipWeixinRes

@dynamic vipWeixinCustomServiceURL;
@dynamic vipWeixinCustomServiceId;

typedef struct PB3CheckIsVipWeixinRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *vipWeixinCustomServiceURL;
  NSString *vipWeixinCustomServiceId;
} PB3CheckIsVipWeixinRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vipWeixinCustomServiceURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckIsVipWeixinRes_FieldNumber_VipWeixinCustomServiceURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CheckIsVipWeixinRes__storage_, vipWeixinCustomServiceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vipWeixinCustomServiceId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckIsVipWeixinRes_FieldNumber_VipWeixinCustomServiceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CheckIsVipWeixinRes__storage_, vipWeixinCustomServiceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckIsVipWeixinRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckIsVipWeixinRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\003\246\246\247\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PersonPublicSettleSignCheckReq

@implementation PB3PersonPublicSettleSignCheckReq


typedef struct PB3PersonPublicSettleSignCheckReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PersonPublicSettleSignCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonPublicSettleSignCheckReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PersonPublicSettleSignCheckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PersonPublicSettleSignCheckRes

@implementation PB3PersonPublicSettleSignCheckRes


typedef struct PB3PersonPublicSettleSignCheckRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PersonPublicSettleSignCheckRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonPublicSettleSignCheckRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PersonPublicSettleSignCheckRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PersonPublicSettleSignInfo

@implementation PB3PersonPublicSettleSignInfo

@dynamic playerId;
@dynamic status;
@dynamic rejectReason;
@dynamic companyName;
@dynamic unifiedSocialCreditCode;
@dynamic companyAddress;
@dynamic bankAccountCompanyName;
@dynamic bankAccount;
@dynamic bankName;
@dynamic bankSubName;
@dynamic contactUsername;
@dynamic contactPhone;
@dynamic contactAddress;
@dynamic contactEmail;
@dynamic cooperateProofURL;
@dynamic cooperateProofFilename;
@dynamic contractDemoURL;
@dynamic expressNum;
@dynamic signAt;
@dynamic identityCode;
@dynamic phone;
@dynamic certificationName;

typedef struct PB3PersonPublicSettleSignInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3PersonPublicSettleSignStatus status;
  NSString *rejectReason;
  NSString *companyName;
  NSString *unifiedSocialCreditCode;
  NSString *companyAddress;
  NSString *bankAccountCompanyName;
  NSString *bankAccount;
  NSString *bankName;
  NSString *bankSubName;
  NSString *contactUsername;
  NSString *contactPhone;
  NSString *contactAddress;
  NSString *contactEmail;
  NSString *cooperateProofURL;
  NSString *cooperateProofFilename;
  NSString *contractDemoURL;
  NSString *expressNum;
  NSString *identityCode;
  NSString *phone;
  NSString *certificationName;
  int64_t playerId;
  int64_t signAt;
} PB3PersonPublicSettleSignInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3PersonPublicSettleSignStatus_EnumDescriptor,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rejectReason",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_RejectReason,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, rejectReason),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_CompanyName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, companyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unifiedSocialCreditCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_UnifiedSocialCreditCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, unifiedSocialCreditCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyAddress",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_CompanyAddress,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, companyAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankAccountCompanyName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_BankAccountCompanyName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, bankAccountCompanyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankAccount",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_BankAccount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, bankAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_BankName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, bankName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankSubName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_BankSubName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, bankSubName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactUsername",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_ContactUsername,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, contactUsername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_ContactPhone,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, contactPhone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactAddress",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_ContactAddress,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, contactAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactEmail",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_ContactEmail,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, contactEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cooperateProofURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_CooperateProofURL,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, cooperateProofURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cooperateProofFilename",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_CooperateProofFilename,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, cooperateProofFilename),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contractDemoURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_ContractDemoURL,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, contractDemoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expressNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_ExpressNum,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, expressNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_SignAt,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, signAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "identityCode",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_IdentityCode,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, identityCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_Phone,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "certificationName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PersonPublicSettleSignInfo_FieldNumber_CertificationName,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfo__storage_, certificationName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonPublicSettleSignInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PersonPublicSettleSignInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\020\t\245\241!!\000\022\010\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3PersonPublicSettleSignInfo_Status_RawValue(PB3PersonPublicSettleSignInfo *message) {
  GPBDescriptor *descriptor = [PB3PersonPublicSettleSignInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PersonPublicSettleSignInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3PersonPublicSettleSignInfo_Status_RawValue(PB3PersonPublicSettleSignInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3PersonPublicSettleSignInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3PersonPublicSettleSignInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PersonPublicSettleSignInfoReq

@implementation PB3PersonPublicSettleSignInfoReq

@dynamic hasInfo, info;

typedef struct PB3PersonPublicSettleSignInfoReq__storage_ {
  uint32_t _has_storage_[1];
  PB3PersonPublicSettleSignInfo *info;
} PB3PersonPublicSettleSignInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PersonPublicSettleSignInfo),
        .number = PB3PersonPublicSettleSignInfoReq_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfoReq__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonPublicSettleSignInfoReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PersonPublicSettleSignInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PersonPublicSettleSignInfoRes

@implementation PB3PersonPublicSettleSignInfoRes

@dynamic hasInfo, info;

typedef struct PB3PersonPublicSettleSignInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3PersonPublicSettleSignInfo *info;
} PB3PersonPublicSettleSignInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PersonPublicSettleSignInfo),
        .number = PB3PersonPublicSettleSignInfoRes_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PersonPublicSettleSignInfoRes__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonPublicSettleSignInfoRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PersonPublicSettleSignInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PersonPublicSettleBreakOffSignReq

@implementation PB3PersonPublicSettleBreakOffSignReq


typedef struct PB3PersonPublicSettleBreakOffSignReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PersonPublicSettleBreakOffSignReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonPublicSettleBreakOffSignReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PersonPublicSettleBreakOffSignReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PersonPublicSettleBreakOffSignRes

@implementation PB3PersonPublicSettleBreakOffSignRes


typedef struct PB3PersonPublicSettleBreakOffSignRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PersonPublicSettleBreakOffSignRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PersonPublicSettleBreakOffSignRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PersonPublicSettleBreakOffSignRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewUserJumpRouterReq

@implementation PB3NewUserJumpRouterReq


typedef struct PB3NewUserJumpRouterReq__storage_ {
  uint32_t _has_storage_[1];
} PB3NewUserJumpRouterReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewUserJumpRouterReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3NewUserJumpRouterReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewUserJumpRouterRes

@implementation PB3NewUserJumpRouterRes

@dynamic routerURL;

typedef struct PB3NewUserJumpRouterRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *routerURL;
} PB3NewUserJumpRouterRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewUserJumpRouterRes_FieldNumber_RouterURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewUserJumpRouterRes__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewUserJumpRouterRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewUserJumpRouterRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3H5RoomWithDrawFreezeDetailReq

@implementation PB3H5RoomWithDrawFreezeDetailReq

@dynamic roomId;

typedef struct PB3H5RoomWithDrawFreezeDetailReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3H5RoomWithDrawFreezeDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWithDrawFreezeDetailReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3H5RoomWithDrawFreezeDetailReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5RoomWithDrawFreezeDetailReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3H5RoomWithDrawFreezeDetailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3H5RoomWithDrawFreezeDetailRes

@implementation PB3H5RoomWithDrawFreezeDetailRes

@dynamic weeklyGoldStreamTask;
@dynamic currWeekNeedReplenishGold;
@dynamic goldStreamDetailsArray, goldStreamDetailsArray_Count;

typedef struct PB3H5RoomWithDrawFreezeDetailRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *goldStreamDetailsArray;
  int64_t weeklyGoldStreamTask;
  int64_t currWeekNeedReplenishGold;
} PB3H5RoomWithDrawFreezeDetailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "weeklyGoldStreamTask",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWithDrawFreezeDetailRes_FieldNumber_WeeklyGoldStreamTask,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3H5RoomWithDrawFreezeDetailRes__storage_, weeklyGoldStreamTask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "currWeekNeedReplenishGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWithDrawFreezeDetailRes_FieldNumber_CurrWeekNeedReplenishGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3H5RoomWithDrawFreezeDetailRes__storage_, currWeekNeedReplenishGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "goldStreamDetailsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3H5RoomWeeklyGoldStream),
        .number = PB3H5RoomWithDrawFreezeDetailRes_FieldNumber_GoldStreamDetailsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3H5RoomWithDrawFreezeDetailRes__storage_, goldStreamDetailsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5RoomWithDrawFreezeDetailRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3H5RoomWithDrawFreezeDetailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3H5RoomWeeklyGoldStream

@implementation PB3H5RoomWeeklyGoldStream

@dynamic weekPeriod;
@dynamic roomStream;
@dynamic cumulativeNeedReplenishRoomStream;
@dynamic oriCumulativeNeedReplenishRoomStream;
@dynamic weekNeedReplenishGold;
@dynamic useStatus;
@dynamic id_p;

typedef struct PB3H5RoomWeeklyGoldStream__storage_ {
  uint32_t _has_storage_[1];
  int32_t useStatus;
  int32_t id_p;
  NSString *weekPeriod;
  int64_t roomStream;
  int64_t cumulativeNeedReplenishRoomStream;
  int64_t oriCumulativeNeedReplenishRoomStream;
  int64_t weekNeedReplenishGold;
} PB3H5RoomWeeklyGoldStream__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "weekPeriod",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWeeklyGoldStream_FieldNumber_WeekPeriod,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3H5RoomWeeklyGoldStream__storage_, weekPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomStream",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWeeklyGoldStream_FieldNumber_RoomStream,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3H5RoomWeeklyGoldStream__storage_, roomStream),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cumulativeNeedReplenishRoomStream",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWeeklyGoldStream_FieldNumber_CumulativeNeedReplenishRoomStream,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3H5RoomWeeklyGoldStream__storage_, cumulativeNeedReplenishRoomStream),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "oriCumulativeNeedReplenishRoomStream",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWeeklyGoldStream_FieldNumber_OriCumulativeNeedReplenishRoomStream,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3H5RoomWeeklyGoldStream__storage_, oriCumulativeNeedReplenishRoomStream),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "weekNeedReplenishGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWeeklyGoldStream_FieldNumber_WeekNeedReplenishGold,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3H5RoomWeeklyGoldStream__storage_, weekNeedReplenishGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "useStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWeeklyGoldStream_FieldNumber_UseStatus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3H5RoomWeeklyGoldStream__storage_, useStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5RoomWeeklyGoldStream_FieldNumber_Id_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3H5RoomWeeklyGoldStream__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5RoomWeeklyGoldStream class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3H5RoomWeeklyGoldStream__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryIndexNewerBoxDialogReq

@implementation PB3QueryIndexNewerBoxDialogReq


typedef struct PB3QueryIndexNewerBoxDialogReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryIndexNewerBoxDialogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryIndexNewerBoxDialogReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryIndexNewerBoxDialogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryIndexNewerBoxDialogRes

@implementation PB3QueryIndexNewerBoxDialogRes

@dynamic hasGiftItem, giftItem;
@dynamic indexDialogImage;
@dynamic ifShow;
@dynamic indexStayTime;

typedef struct PB3QueryIndexNewerBoxDialogRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t indexStayTime;
  PB3NewerBoxGiftItem *giftItem;
  NSString *indexDialogImage;
} PB3QueryIndexNewerBoxDialogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftItem",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewerBoxGiftItem),
        .number = PB3QueryIndexNewerBoxDialogRes_FieldNumber_GiftItem,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryIndexNewerBoxDialogRes__storage_, giftItem),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "indexDialogImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryIndexNewerBoxDialogRes_FieldNumber_IndexDialogImage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryIndexNewerBoxDialogRes__storage_, indexDialogImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ifShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryIndexNewerBoxDialogRes_FieldNumber_IfShow,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "indexStayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryIndexNewerBoxDialogRes_FieldNumber_IndexStayTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3QueryIndexNewerBoxDialogRes__storage_, indexStayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryIndexNewerBoxDialogRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryIndexNewerBoxDialogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryNewerBoxRandomRoomReq

@implementation PB3QueryNewerBoxRandomRoomReq


typedef struct PB3QueryNewerBoxRandomRoomReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryNewerBoxRandomRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryNewerBoxRandomRoomReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryNewerBoxRandomRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryNewerBoxRandomRoomRes

@implementation PB3QueryNewerBoxRandomRoomRes

@dynamic roomId;

typedef struct PB3QueryNewerBoxRandomRoomRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3QueryNewerBoxRandomRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRandomRoomRes_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRandomRoomRes__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryNewerBoxRandomRoomRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryNewerBoxRandomRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FinishNewerBoxDialogReq

@implementation PB3FinishNewerBoxDialogReq

@dynamic dialogType;

typedef struct PB3FinishNewerBoxDialogReq__storage_ {
  uint32_t _has_storage_[1];
  PB3NewerBoxDialogType dialogType;
} PB3FinishNewerBoxDialogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dialogType",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxDialogType_EnumDescriptor,
        .number = PB3FinishNewerBoxDialogReq_FieldNumber_DialogType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FinishNewerBoxDialogReq__storage_, dialogType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FinishNewerBoxDialogReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FinishNewerBoxDialogReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FinishNewerBoxDialogReq_DialogType_RawValue(PB3FinishNewerBoxDialogReq *message) {
  GPBDescriptor *descriptor = [PB3FinishNewerBoxDialogReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FinishNewerBoxDialogReq_FieldNumber_DialogType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FinishNewerBoxDialogReq_DialogType_RawValue(PB3FinishNewerBoxDialogReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FinishNewerBoxDialogReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FinishNewerBoxDialogReq_FieldNumber_DialogType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3FinishNewerBoxDialogRes

@implementation PB3FinishNewerBoxDialogRes


typedef struct PB3FinishNewerBoxDialogRes__storage_ {
  uint32_t _has_storage_[1];
} PB3FinishNewerBoxDialogRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FinishNewerBoxDialogRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FinishNewerBoxDialogRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryNewerBoxEntranceReq

@implementation PB3QueryNewerBoxEntranceReq


typedef struct PB3QueryNewerBoxEntranceReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryNewerBoxEntranceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryNewerBoxEntranceReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryNewerBoxEntranceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryNewerBoxEntranceRes

@implementation PB3QueryNewerBoxEntranceRes

@dynamic boxIcon;
@dynamic boxLabelIcon;
@dynamic boxType;
@dynamic autoSendCountdownTime;
@dynamic endTime;

typedef struct PB3QueryNewerBoxEntranceRes__storage_ {
  uint32_t _has_storage_[1];
  PB3NewerBoxType boxType;
  int32_t autoSendCountdownTime;
  NSString *boxIcon;
  NSString *boxLabelIcon;
  int64_t endTime;
} PB3QueryNewerBoxEntranceRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boxIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxEntranceRes_FieldNumber_BoxIcon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxEntranceRes__storage_, boxIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boxLabelIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxEntranceRes_FieldNumber_BoxLabelIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxEntranceRes__storage_, boxLabelIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boxType",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxType_EnumDescriptor,
        .number = PB3QueryNewerBoxEntranceRes_FieldNumber_BoxType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxEntranceRes__storage_, boxType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "autoSendCountdownTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxEntranceRes_FieldNumber_AutoSendCountdownTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxEntranceRes__storage_, autoSendCountdownTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxEntranceRes_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxEntranceRes__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryNewerBoxEntranceRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryNewerBoxEntranceRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3QueryNewerBoxEntranceRes_BoxType_RawValue(PB3QueryNewerBoxEntranceRes *message) {
  GPBDescriptor *descriptor = [PB3QueryNewerBoxEntranceRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryNewerBoxEntranceRes_FieldNumber_BoxType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QueryNewerBoxEntranceRes_BoxType_RawValue(PB3QueryNewerBoxEntranceRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QueryNewerBoxEntranceRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryNewerBoxEntranceRes_FieldNumber_BoxType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3QueryNewerBoxReq

@implementation PB3QueryNewerBoxReq


typedef struct PB3QueryNewerBoxReq__storage_ {
  uint32_t _has_storage_[1];
} PB3QueryNewerBoxReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryNewerBoxReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3QueryNewerBoxReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3QueryNewerBoxRes

@implementation PB3QueryNewerBoxRes

@dynamic boxIcon;
@dynamic boxLabelIcon;
@dynamic dialogContent;
@dynamic giftListArray, giftListArray_Count;
@dynamic originBoxPrice;
@dynamic actualBoxPrice;
@dynamic actualDeduceGold;
@dynamic hasAccumulateChargeInfo, accumulateChargeInfo;
@dynamic endTime;
@dynamic boxType;

typedef struct PB3QueryNewerBoxRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t originBoxPrice;
  int32_t actualBoxPrice;
  int32_t actualDeduceGold;
  PB3NewerBoxType boxType;
  NSString *boxIcon;
  NSString *boxLabelIcon;
  NSString *dialogContent;
  NSMutableArray *giftListArray;
  PB3AccumulateChargeInfo *accumulateChargeInfo;
  int64_t endTime;
} PB3QueryNewerBoxRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boxIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRes_FieldNumber_BoxIcon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, boxIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boxLabelIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRes_FieldNumber_BoxLabelIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, boxLabelIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dialogContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRes_FieldNumber_DialogContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, dialogContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewerBoxGiftItem),
        .number = PB3QueryNewerBoxRes_FieldNumber_GiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, giftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "originBoxPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRes_FieldNumber_OriginBoxPrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, originBoxPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualBoxPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRes_FieldNumber_ActualBoxPrice,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, actualBoxPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualDeduceGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRes_FieldNumber_ActualDeduceGold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, actualDeduceGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accumulateChargeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AccumulateChargeInfo),
        .number = PB3QueryNewerBoxRes_FieldNumber_AccumulateChargeInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, accumulateChargeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3QueryNewerBoxRes_FieldNumber_EndTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxType",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxType_EnumDescriptor,
        .number = PB3QueryNewerBoxRes_FieldNumber_BoxType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3QueryNewerBoxRes__storage_, boxType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3QueryNewerBoxRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3QueryNewerBoxRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3QueryNewerBoxRes_BoxType_RawValue(PB3QueryNewerBoxRes *message) {
  GPBDescriptor *descriptor = [PB3QueryNewerBoxRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryNewerBoxRes_FieldNumber_BoxType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3QueryNewerBoxRes_BoxType_RawValue(PB3QueryNewerBoxRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3QueryNewerBoxRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3QueryNewerBoxRes_FieldNumber_BoxType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3NewerBoxGiftItem

@implementation PB3NewerBoxGiftItem

@dynamic giftId;
@dynamic giftIcon;
@dynamic giftNum;
@dynamic validity;
@dynamic giftName;
@dynamic giftPrice;
@dynamic effectId;

typedef struct PB3NewerBoxGiftItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftNum;
  int32_t validity;
  int32_t giftPrice;
  int32_t effectId;
  NSString *giftIcon;
  NSString *giftName;
} PB3NewerBoxGiftItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerBoxGiftItem_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewerBoxGiftItem__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerBoxGiftItem_FieldNumber_GiftIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewerBoxGiftItem__storage_, giftIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerBoxGiftItem_FieldNumber_GiftNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewerBoxGiftItem__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validity",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerBoxGiftItem_FieldNumber_Validity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewerBoxGiftItem__storage_, validity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerBoxGiftItem_FieldNumber_GiftName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewerBoxGiftItem__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftPrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerBoxGiftItem_FieldNumber_GiftPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NewerBoxGiftItem__storage_, giftPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effectId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewerBoxGiftItem_FieldNumber_EffectId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3NewerBoxGiftItem__storage_, effectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewerBoxGiftItem class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewerBoxGiftItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AccumulateChargeInfo

@implementation PB3AccumulateChargeInfo

@dynamic chargeLevel1;
@dynamic chargeLevel2;
@dynamic chargeLevel3;
@dynamic giftWorth1;
@dynamic giftWorth2;
@dynamic giftWorth3;
@dynamic giftList1Array, giftList1Array_Count;
@dynamic giftList2Array, giftList2Array_Count;
@dynamic giftList3Array, giftList3Array_Count;
@dynamic receiveStatus1;
@dynamic receiveStatus2;
@dynamic receiveStatus3;
@dynamic accumulateChargeProgress;

typedef struct PB3AccumulateChargeInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t chargeLevel1;
  int32_t chargeLevel2;
  int32_t chargeLevel3;
  int32_t giftWorth1;
  int32_t giftWorth2;
  int32_t giftWorth3;
  PB3NewerBoxRewardReceiveStatus receiveStatus1;
  PB3NewerBoxRewardReceiveStatus receiveStatus2;
  PB3NewerBoxRewardReceiveStatus receiveStatus3;
  int32_t accumulateChargeProgress;
  NSMutableArray *giftList1Array;
  NSMutableArray *giftList2Array;
  NSMutableArray *giftList3Array;
} PB3AccumulateChargeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chargeLevel1",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccumulateChargeInfo_FieldNumber_ChargeLevel1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, chargeLevel1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeLevel2",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccumulateChargeInfo_FieldNumber_ChargeLevel2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, chargeLevel2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chargeLevel3",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccumulateChargeInfo_FieldNumber_ChargeLevel3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, chargeLevel3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftWorth1",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccumulateChargeInfo_FieldNumber_GiftWorth1,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, giftWorth1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftWorth2",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccumulateChargeInfo_FieldNumber_GiftWorth2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, giftWorth2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftWorth3",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccumulateChargeInfo_FieldNumber_GiftWorth3,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, giftWorth3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftList1Array",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewerBoxGiftItem),
        .number = PB3AccumulateChargeInfo_FieldNumber_GiftList1Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, giftList1Array),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftList2Array",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewerBoxGiftItem),
        .number = PB3AccumulateChargeInfo_FieldNumber_GiftList2Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, giftList2Array),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftList3Array",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewerBoxGiftItem),
        .number = PB3AccumulateChargeInfo_FieldNumber_GiftList3Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, giftList3Array),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiveStatus1",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxRewardReceiveStatus_EnumDescriptor,
        .number = PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus1,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, receiveStatus1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiveStatus2",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxRewardReceiveStatus_EnumDescriptor,
        .number = PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus2,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, receiveStatus2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiveStatus3",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxRewardReceiveStatus_EnumDescriptor,
        .number = PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus3,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, receiveStatus3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "accumulateChargeProgress",
        .dataTypeSpecific.className = NULL,
        .number = PB3AccumulateChargeInfo_FieldNumber_AccumulateChargeProgress,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3AccumulateChargeInfo__storage_, accumulateChargeProgress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AccumulateChargeInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AccumulateChargeInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001\006\245\201\000\002\006\245\201\000\003\006\245\201\000\004\004\245\201\000\005\004\245\201\000\006\004\245\201\000\007\000gift_li"
        "st_1\000\010\000gift_list_2\000\t\000gift_list_3\000\n\007\246\201\000\013\007"
        "\246\201\000\014\007\246\201\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AccumulateChargeInfo_ReceiveStatus1_RawValue(PB3AccumulateChargeInfo *message) {
  GPBDescriptor *descriptor = [PB3AccumulateChargeInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus1];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AccumulateChargeInfo_ReceiveStatus1_RawValue(PB3AccumulateChargeInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AccumulateChargeInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus1];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3AccumulateChargeInfo_ReceiveStatus2_RawValue(PB3AccumulateChargeInfo *message) {
  GPBDescriptor *descriptor = [PB3AccumulateChargeInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus2];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AccumulateChargeInfo_ReceiveStatus2_RawValue(PB3AccumulateChargeInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AccumulateChargeInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus2];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3AccumulateChargeInfo_ReceiveStatus3_RawValue(PB3AccumulateChargeInfo *message) {
  GPBDescriptor *descriptor = [PB3AccumulateChargeInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus3];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AccumulateChargeInfo_ReceiveStatus3_RawValue(PB3AccumulateChargeInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AccumulateChargeInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AccumulateChargeInfo_FieldNumber_ReceiveStatus3];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BuyNewerBoxReq

@implementation PB3BuyNewerBoxReq

@dynamic boxType;

typedef struct PB3BuyNewerBoxReq__storage_ {
  uint32_t _has_storage_[1];
  PB3NewerBoxType boxType;
} PB3BuyNewerBoxReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boxType",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxType_EnumDescriptor,
        .number = PB3BuyNewerBoxReq_FieldNumber_BoxType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BuyNewerBoxReq__storage_, boxType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyNewerBoxReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BuyNewerBoxReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BuyNewerBoxReq_BoxType_RawValue(PB3BuyNewerBoxReq *message) {
  GPBDescriptor *descriptor = [PB3BuyNewerBoxReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BuyNewerBoxReq_FieldNumber_BoxType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BuyNewerBoxReq_BoxType_RawValue(PB3BuyNewerBoxReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BuyNewerBoxReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BuyNewerBoxReq_FieldNumber_BoxType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3BuyNewerBoxRes

@implementation PB3BuyNewerBoxRes


typedef struct PB3BuyNewerBoxRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BuyNewerBoxRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyNewerBoxRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BuyNewerBoxRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ReceiveNewerBoxRewardReq

@implementation PB3ReceiveNewerBoxRewardReq

@dynamic taskType;

typedef struct PB3ReceiveNewerBoxRewardReq__storage_ {
  uint32_t _has_storage_[1];
  PB3NewerBoxTaskType taskType;
} PB3ReceiveNewerBoxRewardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskType",
        .dataTypeSpecific.enumDescFunc = PB3NewerBoxTaskType_EnumDescriptor,
        .number = PB3ReceiveNewerBoxRewardReq_FieldNumber_TaskType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ReceiveNewerBoxRewardReq__storage_, taskType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveNewerBoxRewardReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ReceiveNewerBoxRewardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ReceiveNewerBoxRewardReq_TaskType_RawValue(PB3ReceiveNewerBoxRewardReq *message) {
  GPBDescriptor *descriptor = [PB3ReceiveNewerBoxRewardReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveNewerBoxRewardReq_FieldNumber_TaskType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ReceiveNewerBoxRewardReq_TaskType_RawValue(PB3ReceiveNewerBoxRewardReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ReceiveNewerBoxRewardReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ReceiveNewerBoxRewardReq_FieldNumber_TaskType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ReceiveNewerBoxRewardRes

@implementation PB3ReceiveNewerBoxRewardRes


typedef struct PB3ReceiveNewerBoxRewardRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ReceiveNewerBoxRewardRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ReceiveNewerBoxRewardRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ReceiveNewerBoxRewardRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryEditReq

@implementation PB3DiaryEditReq

@dynamic id_p;
@dynamic categoryId;
@dynamic title;
@dynamic content;
@dynamic fontSize;
@dynamic fontColor;
@dynamic bgImg;
@dynamic imgsArray, imgsArray_Count;
@dynamic isPasserby;

typedef struct PB3DiaryEditReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t fontSize;
  NSString *title;
  NSString *content;
  NSString *fontColor;
  NSString *bgImg;
  NSMutableArray *imgsArray;
  int64_t id_p;
  int64_t categoryId;
} PB3DiaryEditReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "categoryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_CategoryId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, categoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fontSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_FontSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, fontSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fontColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_FontColor,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, fontColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_BgImg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, bgImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_ImgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DiaryEditReq__storage_, imgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isPasserby",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryEditReq_FieldNumber_IsPasserby,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryEditReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryEditReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryEditRes

@implementation PB3DiaryEditRes


typedef struct PB3DiaryEditRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DiaryEditRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryEditRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DiaryEditRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryDetailRes

@implementation PB3DiaryDetailRes

@dynamic hasData_p, data_p;

typedef struct PB3DiaryDetailRes__storage_ {
  uint32_t _has_storage_[1];
  PB3DiaryInfo *data_p;
} PB3DiaryDetailRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DiaryInfo),
        .number = PB3DiaryDetailRes_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryDetailRes__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryDetailRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryDetailRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryDetailReq

@implementation PB3DiaryDetailReq

@dynamic id_p;

typedef struct PB3DiaryDetailReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3DiaryDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryDetailReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryDetailReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryDetailReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryDetailReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PasserbyDiaryRes

@implementation PB3PasserbyDiaryRes

@dynamic listArray, listArray_Count;
@dynamic nextIndex;

typedef struct PB3PasserbyDiaryRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3PasserbyDiaryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DiaryInfo),
        .number = PB3PasserbyDiaryRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PasserbyDiaryRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3PasserbyDiaryRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PasserbyDiaryRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PasserbyDiaryRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PasserbyDiaryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PasserbyDiaryReq

@implementation PB3PasserbyDiaryReq

@dynamic index;

typedef struct PB3PasserbyDiaryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3PasserbyDiaryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3PasserbyDiaryReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PasserbyDiaryReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PasserbyDiaryReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PasserbyDiaryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryDeleteRes

@implementation PB3DiaryCategoryDeleteRes


typedef struct PB3DiaryCategoryDeleteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DiaryCategoryDeleteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryDeleteRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DiaryCategoryDeleteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryDeleteReq

@implementation PB3DiaryCategoryDeleteReq

@dynamic id_p;

typedef struct PB3DiaryCategoryDeleteReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3DiaryCategoryDeleteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryCategoryDeleteReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryCategoryDeleteReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryDeleteReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryCategoryDeleteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryAddRes

@implementation PB3DiaryCategoryAddRes


typedef struct PB3DiaryCategoryAddRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DiaryCategoryAddRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryAddRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DiaryCategoryAddRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryAddReq

@implementation PB3DiaryCategoryAddReq

@dynamic categoryName;

typedef struct PB3DiaryCategoryAddReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *categoryName;
} PB3DiaryCategoryAddReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "categoryName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryCategoryAddReq_FieldNumber_CategoryName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryCategoryAddReq__storage_, categoryName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryAddReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryCategoryAddReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryWithNumReq

@implementation PB3DiaryCategoryWithNumReq


typedef struct PB3DiaryCategoryWithNumReq__storage_ {
  uint32_t _has_storage_[1];
} PB3DiaryCategoryWithNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryWithNumReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DiaryCategoryWithNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryWithNumRes

@implementation PB3DiaryCategoryWithNumRes

@dynamic listArray, listArray_Count;

typedef struct PB3DiaryCategoryWithNumRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3DiaryCategoryWithNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DiaryCategoryInfo),
        .number = PB3DiaryCategoryWithNumRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DiaryCategoryWithNumRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryWithNumRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryCategoryWithNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryReq

@implementation PB3DiaryCategoryReq


typedef struct PB3DiaryCategoryReq__storage_ {
  uint32_t _has_storage_[1];
} PB3DiaryCategoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DiaryCategoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryRes

@implementation PB3DiaryCategoryRes

@dynamic listArray, listArray_Count;

typedef struct PB3DiaryCategoryRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3DiaryCategoryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DiaryCategoryInfo),
        .number = PB3DiaryCategoryRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DiaryCategoryRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryCategoryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryCategoryInfo

@implementation PB3DiaryCategoryInfo

@dynamic id_p;
@dynamic categoryName;
@dynamic diaryNum;

typedef struct PB3DiaryCategoryInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *categoryName;
  int64_t id_p;
  int64_t diaryNum;
} PB3DiaryCategoryInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryCategoryInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryCategoryInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "categoryName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryCategoryInfo_FieldNumber_CategoryName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DiaryCategoryInfo__storage_, categoryName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "diaryNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryCategoryInfo_FieldNumber_DiaryNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DiaryCategoryInfo__storage_, diaryNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryCategoryInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryCategoryInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryDeleteReq

@implementation PB3DiaryDeleteReq

@dynamic id_p;

typedef struct PB3DiaryDeleteReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3DiaryDeleteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryDeleteReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryDeleteReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryDeleteReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryDeleteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryDeleteRes

@implementation PB3DiaryDeleteRes


typedef struct PB3DiaryDeleteRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DiaryDeleteRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryDeleteRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DiaryDeleteRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyDiaryReq

@implementation PB3MyDiaryReq

@dynamic index;
@dynamic categoryId;

typedef struct PB3MyDiaryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int64_t categoryId;
} PB3MyDiaryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyDiaryReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MyDiaryReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "categoryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyDiaryReq_FieldNumber_CategoryId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MyDiaryReq__storage_, categoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyDiaryReq class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MyDiaryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MyDiaryRes

@implementation PB3MyDiaryRes

@dynamic listArray, listArray_Count;
@dynamic nextIndex;

typedef struct PB3MyDiaryRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3MyDiaryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DiaryInfo),
        .number = PB3MyDiaryRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3MyDiaryRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3MyDiaryRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MyDiaryRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MyDiaryRes class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MyDiaryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DiaryInfo

@implementation PB3DiaryInfo

@dynamic id_p;
@dynamic userId;
@dynamic avatar;
@dynamic userName;
@dynamic categoryId;
@dynamic title;
@dynamic content;
@dynamic fontSize;
@dynamic fontColor;
@dynamic bgImg;
@dynamic imgsArray, imgsArray_Count;
@dynamic isPasserby;
@dynamic viewCount;
@dynamic publishAt;

typedef struct PB3DiaryInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t fontSize;
  NSString *avatar;
  NSString *userName;
  NSString *title;
  NSString *content;
  NSString *fontColor;
  NSString *bgImg;
  NSMutableArray *imgsArray;
  NSString *publishAt;
  int64_t id_p;
  int64_t userId;
  int64_t categoryId;
  int64_t viewCount;
} PB3DiaryInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_UserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, userName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "categoryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_CategoryId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, categoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_Title,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fontSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_FontSize,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, fontSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fontColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_FontColor,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, fontColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_BgImg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, bgImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_ImgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, imgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isPasserby",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_IsPasserby,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "viewCount",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_ViewCount,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, viewCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "publishAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3DiaryInfo_FieldNumber_PublishAt,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3DiaryInfo__storage_, publishAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DiaryInfo class]
                                     rootClass:[PB3UserExtRoot class]
                                          file:PB3UserExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DiaryInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
