// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/activity_common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/ActivityCommon.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ActivityCommonRoot

@implementation PB3ActivityCommonRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3ActivityCommonRoot_FileDescriptor

static GPBFileDescriptor *PB3ActivityCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3ActivityAwardType

GPBEnumDescriptor *PB3ActivityAwardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AwardTypeNone\000AwardTypeGold\000AwardTypeTic"
        "k\000AwardTypeGift\000AwardTypeBonusPool\000Award"
        "TypeEffect\000AwardTypeBackground\000AwardType"
        "Special\000";
    static const int32_t values[] = {
        PB3ActivityAwardType_AwardTypeNone,
        PB3ActivityAwardType_AwardTypeGold,
        PB3ActivityAwardType_AwardTypeTick,
        PB3ActivityAwardType_AwardTypeGift,
        PB3ActivityAwardType_AwardTypeBonusPool,
        PB3ActivityAwardType_AwardTypeEffect,
        PB3ActivityAwardType_AwardTypeBackground,
        PB3ActivityAwardType_AwardTypeSpecial,
    };
    static const char *extraTextFormatInfo = "\010\000\005\204\204\000\001\005\204\204\000\002\005\204\204\000\003\005\204\204\000\004\005\204\345\344\000\005\005\204\206\000\006\005\204\212\000\007\005\204\207\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityAwardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityAwardType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityAwardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityAwardType_AwardTypeNone:
    case PB3ActivityAwardType_AwardTypeGold:
    case PB3ActivityAwardType_AwardTypeTick:
    case PB3ActivityAwardType_AwardTypeGift:
    case PB3ActivityAwardType_AwardTypeBonusPool:
    case PB3ActivityAwardType_AwardTypeEffect:
    case PB3ActivityAwardType_AwardTypeBackground:
    case PB3ActivityAwardType_AwardTypeSpecial:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CountType

GPBEnumDescriptor *PB3CountType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CountTypeNone\000CountTypeGet\000CountTypeSend"
        "\000";
    static const int32_t values[] = {
        PB3CountType_CountTypeNone,
        PB3CountType_CountTypeGet,
        PB3CountType_CountTypeSend,
    };
    static const char *extraTextFormatInfo = "\003\000\t\204\000\001\t\203\000\002\t\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CountType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CountType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CountType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CountType_CountTypeNone:
    case PB3CountType_CountTypeGet:
    case PB3CountType_CountTypeSend:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WelfareSataus

GPBEnumDescriptor *PB3WelfareSataus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StatusNoStart\000StatusDoing\000StatusWaitRece"
        "ive\000StatusCompleted\000StatusPast\000StatusOve"
        "r\000";
    static const int32_t values[] = {
        PB3WelfareSataus_StatusNoStart,
        PB3WelfareSataus_StatusDoing,
        PB3WelfareSataus_StatusWaitReceive,
        PB3WelfareSataus_StatusCompleted,
        PB3WelfareSataus_StatusPast,
        PB3WelfareSataus_StatusOver,
    };
    static const char *extraTextFormatInfo = "\006\000\006\202\205\000\001\006\205\000\002\006\204\207\000\003\006\211\000\004\006\204\000\005\006\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WelfareSataus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WelfareSataus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WelfareSataus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WelfareSataus_StatusNoStart:
    case PB3WelfareSataus_StatusDoing:
    case PB3WelfareSataus_StatusWaitReceive:
    case PB3WelfareSataus_StatusCompleted:
    case PB3WelfareSataus_StatusPast:
    case PB3WelfareSataus_StatusOver:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3LotteryPurposeType

GPBEnumDescriptor *PB3LotteryPurposeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NullLotteryPurpose\000GameLolm\000GamePubgm\000Ga"
        "meArenaOfValor\000SecondRelateAward\000";
    static const int32_t values[] = {
        PB3LotteryPurposeType_NullLotteryPurpose,
        PB3LotteryPurposeType_GameLolm,
        PB3LotteryPurposeType_GamePubgm,
        PB3LotteryPurposeType_GameArenaOfValor,
        PB3LotteryPurposeType_SecondRelateAward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3LotteryPurposeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3LotteryPurposeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3LotteryPurposeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3LotteryPurposeType_NullLotteryPurpose:
    case PB3LotteryPurposeType_GameLolm:
    case PB3LotteryPurposeType_GamePubgm:
    case PB3LotteryPurposeType_GameArenaOfValor:
    case PB3LotteryPurposeType_SecondRelateAward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3IceBrokenAward

GPBEnumDescriptor *PB3IceBrokenAward_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NullIceAward\000IceSmallAward\000IceMidAward\000I"
        "ceBigAward\000";
    static const int32_t values[] = {
        PB3IceBrokenAward_NullIceAward,
        PB3IceBrokenAward_IceSmallAward,
        PB3IceBrokenAward_IceMidAward,
        PB3IceBrokenAward_IceBigAward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3IceBrokenAward)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3IceBrokenAward_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3IceBrokenAward_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3IceBrokenAward_NullIceAward:
    case PB3IceBrokenAward_IceSmallAward:
    case PB3IceBrokenAward_IceMidAward:
    case PB3IceBrokenAward_IceBigAward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PetAttrType

GPBEnumDescriptor *PB3PetAttrType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PetAttrZero\000PetAttrWater\000PetAttrFire\000Pet"
        "AttrGrass\000";
    static const int32_t values[] = {
        PB3PetAttrType_PetAttrZero,
        PB3PetAttrType_PetAttrWater,
        PB3PetAttrType_PetAttrFire,
        PB3PetAttrType_PetAttrGrass,
    };
    static const char *extraTextFormatInfo = "\004\000\003\204\204\000\001\003\204\205\000\002\003\204\204\000\003\003\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PetAttrType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PetAttrType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PetAttrType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PetAttrType_PetAttrZero:
    case PB3PetAttrType_PetAttrWater:
    case PB3PetAttrType_PetAttrFire:
    case PB3PetAttrType_PetAttrGrass:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DigTreasureAwardType

GPBEnumDescriptor *PB3DigTreasureAwardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Nomal\000Precious\000Mysterious\000";
    static const int32_t values[] = {
        PB3DigTreasureAwardType_Nomal,
        PB3DigTreasureAwardType_Precious,
        PB3DigTreasureAwardType_Mysterious,
    };
    static const char *extraTextFormatInfo = "\003\000\005\000\001\010\000\002\n\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DigTreasureAwardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DigTreasureAwardType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DigTreasureAwardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DigTreasureAwardType_Nomal:
    case PB3DigTreasureAwardType_Precious:
    case PB3DigTreasureAwardType_Mysterious:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RankStatistTimeRangeType

GPBEnumDescriptor *PB3RankStatistTimeRangeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RankTypeNone\000Weekly\000Monthly\000Duration\000";
    static const int32_t values[] = {
        PB3RankStatistTimeRangeType_RankTypeNone,
        PB3RankStatistTimeRangeType_Weekly,
        PB3RankStatistTimeRangeType_Monthly,
        PB3RankStatistTimeRangeType_Duration,
    };
    static const char *extraTextFormatInfo = "\004\000\010\204\000\001\006\000\002\007\000\003\010\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RankStatistTimeRangeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RankStatistTimeRangeType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RankStatistTimeRangeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RankStatistTimeRangeType_RankTypeNone:
    case PB3RankStatistTimeRangeType_Weekly:
    case PB3RankStatistTimeRangeType_Monthly:
    case PB3RankStatistTimeRangeType_Duration:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3SortParam

@implementation PB3SortParam

@dynamic playerId;
@dynamic activityId;
@dynamic relActivityId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3SortParam__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int32_t page;
  int64_t playerId;
  int64_t pageSize;
} PB3SortParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_ActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_RelActivityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SortParam class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SortParam__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListWelfareReq

@implementation PB3ListWelfareReq

@dynamic relativeId;
@dynamic actId;
@dynamic relId;
@dynamic playerId;

typedef struct PB3ListWelfareReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t relativeId;
  int32_t actId;
  int32_t relId;
  int64_t playerId;
} PB3ListWelfareReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relativeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListWelfareReq_FieldNumber_RelativeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListWelfareReq__storage_, relativeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListWelfareReq_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListWelfareReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListWelfareReq_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListWelfareReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListWelfareReq_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListWelfareReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListWelfareReq class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListWelfareReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListWelfareRes

@implementation PB3ListWelfareRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListWelfareRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListWelfareRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WelfareInfo),
        .number = PB3ListWelfareRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListWelfareRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListWelfareRes class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListWelfareRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SortResult

@implementation PB3SortResult

@dynamic sort;
@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic gold;
@dynamic point;
@dynamic num;
@dynamic roomId;
@dynamic roomName;
@dynamic likeNum;
@dynamic isLike;
@dynamic msg;
@dynamic lastPlayerId;
@dynamic resource;
@dynamic topRangeType;
@dynamic myTopNum;
@dynamic createdAt;
@dynamic gapToTop;
@dynamic awardImg;
@dynamic cubismIcon;
@dynamic isOnline;
@dynamic toRoomId;
@dynamic isClanMember;
@dynamic gapToRank;

typedef struct PB3SortResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t likeNum;
  int32_t topRangeType;
  int32_t myTopNum;
  NSString *name;
  NSString *icon;
  NSString *roomName;
  NSString *msg;
  NSString *resource;
  NSString *awardImg;
  NSString *cubismIcon;
  int64_t sort;
  int64_t id_p;
  int64_t id2;
  int64_t gold;
  int64_t point;
  int64_t num;
  int64_t roomId;
  int64_t lastPlayerId;
  int64_t createdAt;
  int64_t gapToTop;
  int64_t toRoomId;
  int64_t gapToRank;
} PB3SortResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Id2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Gold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Point,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Num,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_RoomId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_RoomName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "likeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_LikeNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, likeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isLike",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_IsLike,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Msg,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_LastPlayerId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, lastPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "resource",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Resource,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, resource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topRangeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_TopRangeType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, topRangeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "myTopNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_MyTopNum,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, myTopNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_CreatedAt,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gapToTop",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_GapToTop,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, gapToTop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_AwardImg,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, awardImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cubismIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_CubismIcon,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, cubismIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isOnline",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_IsOnline,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "toRoomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_ToRoomId,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, toRoomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isClanMember",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_IsClanMember,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "gapToRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_GapToRank,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, gapToRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SortResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SortResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RankInfo

@implementation PB3RankInfo

@dynamic sort;
@dynamic playerId;
@dynamic name;
@dynamic icon;
@dynamic id2;
@dynamic point;
@dynamic roomName;
@dynamic clanName;
@dynamic gapToTop;

typedef struct PB3RankInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  NSString *name;
  NSString *icon;
  NSString *roomName;
  NSString *clanName;
  int64_t playerId;
  int64_t id2;
  int64_t point;
  int64_t gapToTop;
} PB3RankInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_Id2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_Point,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_RoomName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clanName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_ClanName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, clanName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gapToTop",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankInfo_FieldNumber_GapToTop,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RankInfo__storage_, gapToTop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerSortMsg

@implementation PB3PlayerSortMsg

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic gender;
@dynamic point;
@dynamic sort;

typedef struct PB3PlayerSortMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t gender;
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
  int64_t point;
  int64_t sort;
} PB3PlayerSortMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Point,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Sort,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerSortMsg class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerSortMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ManySortResult

@implementation PB3ManySortResult

@dynamic listArray, listArray_Count;
@dynamic sort;
@dynamic gold;
@dynamic point;
@dynamic num;
@dynamic roomId;
@dynamic roomName;
@dynamic likeNum;
@dynamic isLike;
@dynamic msg;
@dynamic resource;

typedef struct PB3ManySortResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t likeNum;
  NSMutableArray *listArray;
  NSString *roomName;
  NSString *msg;
  NSString *resource;
  int64_t sort;
  int64_t gold;
  int64_t point;
  int64_t num;
  int64_t roomId;
} PB3ManySortResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerSortMsg),
        .number = PB3ManySortResult_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Point,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_RoomId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_RoomName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "likeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_LikeNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, likeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isLike",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_IsLike,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Msg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resource",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Resource,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, resource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ManySortResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ManySortResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Theme

@implementation PB3Theme

@dynamic id_p;
@dynamic name;
@dynamic type;
@dynamic status;
@dynamic startTime;
@dynamic endTime;
@dynamic extend;
@dynamic key;

typedef struct PB3Theme__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t type;
  NSString *name;
  NSString *extend;
  NSString *key;
  int64_t startTime;
  int64_t endTime;
} PB3Theme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Status,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "extend",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Extend,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, extend),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Key,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Theme class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Theme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Comment

@implementation PB3Comment

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic content;
@dynamic created;

typedef struct PB3Comment__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  NSString *content;
  int64_t playerId;
  int64_t created;
} PB3Comment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_Created,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Comment class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Comment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NameList

@implementation PB3NameList

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic union_p;
@dynamic groupType;
@dynamic group;
@dynamic point;
@dynamic remark;

typedef struct PB3NameList__storage_ {
  uint32_t _has_storage_[1];
  int32_t groupType;
  uint32_t group;
  NSString *playerName;
  NSString *playerIcon;
  NSString *union_p;
  NSString *remark;
  int64_t playerId;
  int64_t point;
} PB3NameList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "union_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Union_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, union_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupType",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_GroupType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, groupType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "group",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Group,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Point,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Remark,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NameList class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NameList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NameListResult

@implementation PB3NameListResult

@dynamic name;
@dynamic listArray, listArray_Count;

typedef struct PB3NameListResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *listArray;
} PB3NameListResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameListResult_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NameListResult__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NameList),
        .number = PB3NameListResult_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NameListResult__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NameListResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NameListResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WelfareInfo

@implementation PB3WelfareInfo

@dynamic welfareId;
@dynamic type;
@dynamic status;
@dynamic created;
@dynamic triggerNum;
@dynamic completeNum;
@dynamic billTypeArray, billTypeArray_Count;
@dynamic countNum;
@dynamic dayOrWeekFinishNum;
@dynamic finishId, finishId_Count;
@dynamic triggerLimit;

typedef struct PB3WelfareInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t welfareId;
  int32_t type;
  PB3WelfareSataus status;
  int32_t completeNum;
  int32_t countNum;
  int32_t dayOrWeekFinishNum;
  GPBInt32Array *billTypeArray;
  GPBInt64Int64Dictionary *finishId;
  int64_t created;
  int64_t triggerNum;
  int64_t triggerLimit;
} PB3WelfareInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_WelfareId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3WelfareSataus_EnumDescriptor,
        .number = PB3WelfareInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_Created,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "triggerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_TriggerNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, triggerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "completeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_CompleteNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, completeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billTypeArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_BillTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, billTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "countNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_CountNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, countNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dayOrWeekFinishNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_DayOrWeekFinishNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, dayOrWeekFinishNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "finishId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_FinishId,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, finishId),
        .flags = GPBFieldMapKeyInt64,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "triggerLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_TriggerLimit,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, triggerLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WelfareInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WelfareInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WelfareInfo_Status_RawValue(PB3WelfareInfo *message) {
  GPBDescriptor *descriptor = [PB3WelfareInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WelfareInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WelfareInfo_Status_RawValue(PB3WelfareInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WelfareInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WelfareInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SignInfo

@implementation PB3SignInfo

@dynamic day;
@dynamic created;

typedef struct PB3SignInfo__storage_ {
  uint32_t _has_storage_[1];
  int64_t day;
  int64_t created;
} PB3SignInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "day",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInfo_FieldNumber_Day,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SignInfo__storage_, day),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInfo_FieldNumber_Created,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SignInfo__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SignInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SignInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListGiftShow

@implementation PB3ListGiftShow

@dynamic giftId;
@dynamic giftName;
@dynamic giftCategory;
@dynamic canBuy;

typedef struct PB3ListGiftShow__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftCategory;
  int32_t canBuy;
  NSString *giftName;
} PB3ListGiftShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftCategory",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_GiftCategory,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, giftCategory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "canBuy",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_CanBuy,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, canBuy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListGiftShow class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListGiftShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Number

@implementation PB3Number

@dynamic number;
@dynamic cate;
@dynamic created;

typedef struct PB3Number__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  int32_t cate;
  int64_t created;
} PB3Number__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3Number_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Number__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3Number_FieldNumber_Cate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Number__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3Number_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Number__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Number class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Number__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NumberAwardPlayer

@implementation PB3NumberAwardPlayer

@dynamic playerId;
@dynamic id2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic number;
@dynamic level;

typedef struct PB3NumberAwardPlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  int32_t level;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t id2;
} PB3NumberAwardPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_Number,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_Level,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NumberAwardPlayer class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NumberAwardPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SpecialAward

@implementation PB3SpecialAward

@dynamic type;
@dynamic num;
@dynamic count;

typedef struct PB3SpecialAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t num;
  int32_t count;
} PB3SpecialAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3SpecialAward_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SpecialAward__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SpecialAward_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SpecialAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3SpecialAward_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SpecialAward__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SpecialAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SpecialAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerTime

@implementation PB3PlayerTime

@dynamic playerId;
@dynamic id2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic time;
@dynamic rate;
@dynamic cate;
@dynamic companyTime;

typedef struct PB3PlayerTime__storage_ {
  uint32_t _has_storage_[1];
  int32_t time;
  int32_t rate;
  int32_t cate;
  int32_t companyTime;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t id2;
} PB3PlayerTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Rate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Cate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "companyTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_CompanyTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, companyTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerTime class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerTime__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NoticeRecord

@implementation PB3NoticeRecord

@dynamic msgId;
@dynamic relId;
@dynamic playerId;
@dynamic msg;
@dynamic created;
@dynamic playerName;
@dynamic roomId;
@dynamic roomName;
@dynamic playerIcon;

typedef struct PB3NoticeRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgId;
  int32_t relId;
  int32_t playerId;
  NSString *msg;
  NSString *playerName;
  NSString *roomName;
  NSString *playerIcon;
  int64_t created;
  int64_t roomId;
} PB3NoticeRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_Created,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_PlayerName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_RoomName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_PlayerIcon,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NoticeRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NoticeRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfGift

@implementation PB3ConfGift

@dynamic giftId;
@dynamic giftName;
@dynamic weight;

typedef struct PB3ConfGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t weight;
  NSString *giftName;
} PB3ConfGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGift_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGift_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfGift__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGift_FieldNumber_Weight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfGift__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfGift class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LotteryRecord

@implementation PB3LotteryRecord

@dynamic relId;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic awardPoolId;
@dynamic giftName;
@dynamic created;
@dynamic consumeId;
@dynamic consumeNum;
@dynamic point;
@dynamic confId;
@dynamic roomName;
@dynamic purposeType;
@dynamic awardWeight;
@dynamic playerIcon;
@dynamic awardsArray, awardsArray_Count;

typedef struct PB3LotteryRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t playerId;
  int32_t playerId2;
  int32_t awardPoolId;
  int32_t consumeId;
  int32_t consumeNum;
  int32_t point;
  int32_t confId;
  PB3LotteryPurposeType purposeType;
  int32_t awardWeight;
  NSString *playerName;
  NSString *giftName;
  NSString *roomName;
  NSString *playerIcon;
  NSMutableArray *awardsArray;
  int64_t created;
} PB3LotteryRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardPoolId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_AwardPoolId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, awardPoolId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_GiftName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "consumeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_ConsumeId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, consumeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "consumeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_ConsumeNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, consumeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_Point,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_ConfId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_RoomName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "purposeType",
        .dataTypeSpecific.enumDescFunc = PB3LotteryPurposeType_EnumDescriptor,
        .number = PB3LotteryRecord_FieldNumber_PurposeType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, purposeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "awardWeight",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_AwardWeight,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, awardWeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_PlayerIcon,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActNewAwardInfo),
        .number = PB3LotteryRecord_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LotteryRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LotteryRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3LotteryRecord_PurposeType_RawValue(PB3LotteryRecord *message) {
  GPBDescriptor *descriptor = [PB3LotteryRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LotteryRecord_FieldNumber_PurposeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3LotteryRecord_PurposeType_RawValue(PB3LotteryRecord *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3LotteryRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3LotteryRecord_FieldNumber_PurposeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RelateLotteryRecord

@implementation PB3RelateLotteryRecord

@dynamic drawId;
@dynamic relId;
@dynamic awardPoolId;
@dynamic confId;
@dynamic relDrawId;
@dynamic flag;
@dynamic created;
@dynamic awardsArray, awardsArray_Count;

typedef struct PB3RelateLotteryRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t drawId;
  int32_t relId;
  int32_t awardPoolId;
  int32_t confId;
  int32_t relDrawId;
  int32_t flag;
  NSMutableArray *awardsArray;
  int64_t created;
} PB3RelateLotteryRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "drawId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryRecord_FieldNumber_DrawId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, drawId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryRecord_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardPoolId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryRecord_FieldNumber_AwardPoolId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, awardPoolId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryRecord_FieldNumber_ConfId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relDrawId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryRecord_FieldNumber_RelDrawId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, relDrawId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryRecord_FieldNumber_Flag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, flag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryRecord_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RelateLotteryAward),
        .number = PB3RelateLotteryRecord_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RelateLotteryRecord__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RelateLotteryRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RelateLotteryRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RelateLotteryAward

@implementation PB3RelateLotteryAward

@dynamic awardId;
@dynamic num;

typedef struct PB3RelateLotteryAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t awardId;
  int32_t num;
} PB3RelateLotteryAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryAward_FieldNumber_AwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RelateLotteryAward__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelateLotteryAward_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RelateLotteryAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RelateLotteryAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RelateLotteryAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteRecord

@implementation PB3VoteRecord

@dynamic voterId;
@dynamic voterId2;
@dynamic voterName;
@dynamic voterIcon;
@dynamic byVoterId;
@dynamic byVoterId2;
@dynamic byVoterName;
@dynamic byVoterIcon;
@dynamic num;
@dynamic created;

typedef struct PB3VoteRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  NSString *voterName;
  NSString *voterIcon;
  NSString *byVoterName;
  NSString *byVoterIcon;
  int64_t voterId;
  int64_t voterId2;
  int64_t byVoterId;
  int64_t byVoterId2;
  int64_t created;
} PB3VoteRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voterId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voterName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voterIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "byVoterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "byVoterId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterId2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "byVoterName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "byVoterIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_Num,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_Created,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteResult

@implementation PB3VoteResult

@dynamic relId;
@dynamic playerId;
@dynamic id2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic num;
@dynamic ranking;
@dynamic created;

typedef struct PB3VoteResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t num;
  int32_t ranking;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t id2;
  int64_t created;
} PB3VoteResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Id2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_PlayerIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Num,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ranking",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Ranking,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, ranking),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Created,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewAward

@implementation PB3NewAward

@dynamic awardId;
@dynamic type;
@dynamic prizeId;
@dynamic num;
@dynamic relateId;
@dynamic relateState;
@dynamic assetName;
@dynamic assetImageURL;
@dynamic times;

typedef struct PB3NewAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t awardId;
  int32_t type;
  int32_t prizeId;
  int32_t num;
  int32_t relateId;
  int32_t relateState;
  int32_t times;
  NSString *assetName;
  NSString *assetImageURL;
} PB3NewAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_AwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_PrizeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_RelateId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, relateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relateState",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_RelateState,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, relateState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_AssetName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assetImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_AssetImageURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, assetImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "times",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_Times,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, times),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\005\245\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewAwards

@implementation PB3NewAwards

@dynamic listArray, listArray_Count;

typedef struct PB3NewAwards__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3NewAwards__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3NewAwards_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewAwards__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewAwards class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewAwards__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Cultivate

@implementation PB3Cultivate

@dynamic name;
@dynamic level;
@dynamic cycleLevel;
@dynamic hasAwardIdArray, hasAwardIdArray_Count;

typedef struct PB3Cultivate__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  int32_t cycleLevel;
  NSString *name;
  GPBInt32Array *hasAwardIdArray;
} PB3Cultivate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycleLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_CycleLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, cycleLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hasAwardIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_HasAwardIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, hasAwardIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Cultivate class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Cultivate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogCultivate

@implementation PB3LogCultivate

@dynamic relId;
@dynamic playerId;
@dynamic upgradeType;
@dynamic giftId;
@dynamic giftNum;
@dynamic num;
@dynamic level;
@dynamic cycleLevel;
@dynamic created;

typedef struct PB3LogCultivate__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t upgradeType;
  int32_t giftId;
  int32_t giftNum;
  int32_t num;
  int32_t level;
  int32_t cycleLevel;
  int64_t playerId;
  int64_t created;
} PB3LogCultivate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "upgradeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_UpgradeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, upgradeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_GiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_GiftNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_Num,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_Level,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycleLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_CycleLevel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, cycleLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_Created,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogCultivate class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogCultivate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GoldBackData

@implementation PB3GoldBackData

@dynamic cate;
@dynamic playerId;
@dynamic count;
@dynamic useNum;
@dynamic rate;
@dynamic gold;
@dynamic sort;

typedef struct PB3GoldBackData__storage_ {
  uint32_t _has_storage_[1];
  int32_t cate;
  int32_t sort;
  int64_t playerId;
  int64_t count;
  int64_t useNum;
  int64_t rate;
  int64_t gold;
} PB3GoldBackData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Cate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "useNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_UseNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, useNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Rate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Gold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Sort,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GoldBackData class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GoldBackData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogDrawCard

@implementation PB3LogDrawCard

@dynamic relId;
@dynamic confDrawCardId;
@dynamic selectNums;
@dynamic awardNum;
@dynamic awardStatus;
@dynamic gold;
@dynamic created;

typedef struct PB3LogDrawCard__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t confDrawCardId;
  int32_t awardNum;
  int32_t awardStatus;
  NSString *selectNums;
  int64_t gold;
  int64_t created;
} PB3LogDrawCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confDrawCardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_ConfDrawCardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, confDrawCardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "selectNums",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_SelectNums,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, selectNums),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_AwardNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_AwardStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, awardStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_Gold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogDrawCard class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogDrawCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldLog

@implementation PB3TakeGoldLog

@dynamic takeNum;
@dynamic giftsArray, giftsArray_Count;
@dynamic status;
@dynamic created;

typedef struct PB3TakeGoldLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t takeNum;
  int32_t status;
  NSMutableArray *giftsArray;
  int64_t created;
} PB3TakeGoldLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "takeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldLog_FieldNumber_TakeNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, takeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TakeGoldGift),
        .number = PB3TakeGoldLog_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldLog_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldLog_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldLog class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GoldBackLog

@implementation PB3GoldBackLog

@dynamic payGold;
@dynamic backGold;
@dynamic status;
@dynamic created;

typedef struct PB3GoldBackLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int64_t payGold;
  int64_t backGold;
  int64_t created;
} PB3GoldBackLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_PayGold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, payGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "backGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_BackGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, backGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_Created,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GoldBackLog class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GoldBackLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldGift

@implementation PB3TakeGoldGift

@dynamic id_p;
@dynamic name;
@dynamic num;

typedef struct PB3TakeGoldGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t num;
  NSString *name;
} PB3TakeGoldGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGift_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldGift__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGift_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TakeGoldGift__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGift_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TakeGoldGift__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldGift class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldGiftConf

@implementation PB3TakeGoldGiftConf

@dynamic takeGoldGiftListArray, takeGoldGiftListArray_Count;
@dynamic limitCycle;
@dynamic repeatedNum;

typedef struct PB3TakeGoldGiftConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t limitCycle;
  int32_t repeatedNum;
  NSMutableArray *takeGoldGiftListArray;
} PB3TakeGoldGiftConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "takeGoldGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TakeGoldGift),
        .number = PB3TakeGoldGiftConf_FieldNumber_TakeGoldGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TakeGoldGiftConf__storage_, takeGoldGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "limitCycle",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGiftConf_FieldNumber_LimitCycle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldGiftConf__storage_, limitCycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "repeatedNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGiftConf_FieldNumber_RepeatedNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TakeGoldGiftConf__storage_, repeatedNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldGiftConf class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldGiftConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TemPointRecord

@implementation PB3TemPointRecord

@dynamic billId;
@dynamic point;
@dynamic created;
@dynamic status;

typedef struct PB3TemPointRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *billId;
  int64_t point;
  int64_t created;
} PB3TemPointRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "billId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_BillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, billId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_Point,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TemPointRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TemPointRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BlindAwardInfo

@implementation PB3BlindAwardInfo

@dynamic blindNum;
@dynamic awardName;
@dynamic awardId;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;

typedef struct PB3BlindAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t blindNum;
  int32_t awardId;
  NSString *awardName;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerId2;
} PB3BlindAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blindNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_BlindNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, blindNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_AwardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, awardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_AwardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerId2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerIcon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BlindAwardInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BlindAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityAwardInfo

@implementation PB3ActivityAwardInfo

@dynamic prizeId;
@dynamic num;
@dynamic type;
@dynamic unit;
@dynamic awardId;

typedef struct PB3ActivityAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t prizeId;
  int32_t num;
  int32_t type;
  int32_t awardId;
  NSString *unit;
} PB3ActivityAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_PrizeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_Unit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, unit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_AwardId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityAwardInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BlindRoomInfo

@implementation PB3BlindRoomInfo

@dynamic luckNum;
@dynamic roomId;
@dynamic unusualGiftName;
@dynamic roomIcon;
@dynamic roomName;
@dynamic gender;

typedef struct PB3BlindRoomInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t luckNum;
  int32_t gender;
  NSString *unusualGiftName;
  NSString *roomIcon;
  NSString *roomName;
  int64_t roomId;
} PB3BlindRoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "luckNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_LuckNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, luckNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unusualGiftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_UnusualGiftName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, unusualGiftName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_RoomIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, roomIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_RoomName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_Gender,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BlindRoomInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BlindRoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\007\250\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActPlayerRecvAward

@implementation PB3ActPlayerRecvAward

@dynamic awardId;
@dynamic purposeType;
@dynamic poolId;

typedef struct PB3ActPlayerRecvAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t awardId;
  int32_t purposeType;
  int32_t poolId;
} PB3ActPlayerRecvAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPlayerRecvAward_FieldNumber_AwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActPlayerRecvAward__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "purposeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPlayerRecvAward_FieldNumber_PurposeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActPlayerRecvAward__storage_, purposeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "poolId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPlayerRecvAward_FieldNumber_PoolId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActPlayerRecvAward__storage_, poolId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActPlayerRecvAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActPlayerRecvAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureMarketPublishRecord

@implementation PB3TreasureMarketPublishRecord

@dynamic id_p;
@dynamic goodsId;
@dynamic goodsName;
@dynamic num;
@dynamic totalAmount;
@dynamic goodsType;
@dynamic status;
@dynamic heat;
@dynamic playerId;
@dynamic createTime;

typedef struct PB3TreasureMarketPublishRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t goodsId;
  int32_t num;
  int32_t goodsType;
  int32_t status;
  int32_t heat;
  int32_t createTime;
  NSString *goodsName;
  int64_t totalAmount;
  int64_t playerId;
} PB3TreasureMarketPublishRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_GoodsId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goodsName",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_GoodsName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, goodsName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalAmount",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_TotalAmount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, totalAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "goodsType",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_GoodsType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, goodsType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "heat",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_Heat,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, heat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_PlayerId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketPublishRecord_FieldNumber_CreateTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3TreasureMarketPublishRecord__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureMarketPublishRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureMarketPublishRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TreasureMarketOrder

@implementation PB3TreasureMarketOrder

@dynamic id_p;
@dynamic orderNo;
@dynamic goodsId;
@dynamic goodsName;
@dynamic num;
@dynamic totalAmount;
@dynamic goodsType;
@dynamic status;
@dynamic fee;
@dynamic salerId;
@dynamic buyerId;
@dynamic createTime;
@dynamic remark;

typedef struct PB3TreasureMarketOrder__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t orderNo;
  int32_t goodsId;
  int32_t num;
  int32_t goodsType;
  int32_t status;
  NSString *goodsName;
  NSString *remark;
  int64_t totalAmount;
  int64_t fee;
  int64_t salerId;
  int64_t buyerId;
  int64_t createTime;
} PB3TreasureMarketOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderNo",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_OrderNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, orderNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goodsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_GoodsId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, goodsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "goodsName",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_GoodsName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, goodsName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_Num,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalAmount",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_TotalAmount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, totalAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "goodsType",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_GoodsType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, goodsType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_Status,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_Fee,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "salerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_SalerId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, salerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "buyerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_BuyerId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, buyerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_CreateTime,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3TreasureMarketOrder_FieldNumber_Remark,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3TreasureMarketOrder__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TreasureMarketOrder class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TreasureMarketOrder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasureGridData

@implementation PB3DigTreasureGridData

@dynamic location;
@dynamic digNum;
@dynamic playerId;
@dynamic playerIconURL;
@dynamic giftIconURL;
@dynamic ifMysteriousAward;
@dynamic giftType;

typedef struct PB3DigTreasureGridData__storage_ {
  uint32_t _has_storage_[1];
  int32_t digNum;
  int32_t ifMysteriousAward;
  int32_t giftType;
  NSString *location;
  NSString *playerIconURL;
  NSString *giftIconURL;
  int64_t playerId;
} PB3DigTreasureGridData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridData_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridData__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "digNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridData_FieldNumber_DigNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridData__storage_, digNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridData_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridData__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridData_FieldNumber_PlayerIconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridData__storage_, playerIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridData_FieldNumber_GiftIconURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridData__storage_, giftIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ifMysteriousAward",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridData_FieldNumber_IfMysteriousAward,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridData__storage_, ifMysteriousAward),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftType",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridData_FieldNumber_GiftType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridData__storage_, giftType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasureGridData class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasureGridData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\006\244\241!!\000\005\004\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasureAward

@implementation PB3DigTreasureAward

@dynamic giftId;
@dynamic num;
@dynamic type;
@dynamic expireTime;

typedef struct PB3DigTreasureAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t num;
  int32_t type;
  int32_t expireTime;
} PB3DigTreasureAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureAward_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DigTreasureAward__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureAward_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DigTreasureAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureAward_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DigTreasureAward__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureAward_FieldNumber_ExpireTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DigTreasureAward__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasureAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasureAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasureRankRecord

@implementation PB3DigTreasureRankRecord

@dynamic playerId;
@dynamic playerName;
@dynamic playerIconURL;
@dynamic dateTime;
@dynamic giftName;
@dynamic location;

typedef struct PB3DigTreasureRankRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIconURL;
  NSString *dateTime;
  NSString *giftName;
  NSString *location;
  int64_t playerId;
} PB3DigTreasureRankRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureRankRecord_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DigTreasureRankRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureRankRecord_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DigTreasureRankRecord__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureRankRecord_FieldNumber_PlayerIconURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DigTreasureRankRecord__storage_, playerIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureRankRecord_FieldNumber_DateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DigTreasureRankRecord__storage_, dateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureRankRecord_FieldNumber_GiftName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DigTreasureRankRecord__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureRankRecord_FieldNumber_Location,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3DigTreasureRankRecord__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasureRankRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasureRankRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\006\244\241!!\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasurePlayerRecord

@implementation PB3DigTreasurePlayerRecord

@dynamic dateTime;
@dynamic giftName;
@dynamic location;

typedef struct PB3DigTreasurePlayerRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *dateTime;
  NSString *giftName;
  NSString *location;
} PB3DigTreasurePlayerRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dateTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasurePlayerRecord_FieldNumber_DateTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DigTreasurePlayerRecord__storage_, dateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasurePlayerRecord_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DigTreasurePlayerRecord__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasurePlayerRecord_FieldNumber_Location,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DigTreasurePlayerRecord__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasurePlayerRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasurePlayerRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasureAwardInfo

@implementation PB3DigTreasureAwardInfo

@dynamic giftId;
@dynamic type;
@dynamic giftGold;

typedef struct PB3DigTreasureAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t type;
  int32_t giftGold;
} PB3DigTreasureAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureAwardInfo_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DigTreasureAwardInfo__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureAwardInfo_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DigTreasureAwardInfo__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureAwardInfo_FieldNumber_GiftGold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DigTreasureAwardInfo__storage_, giftGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasureAwardInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasureAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasureGridDataMap

@implementation PB3DigTreasureGridDataMap

@dynamic gridDataMap, gridDataMap_Count;

typedef struct PB3DigTreasureGridDataMap__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *gridDataMap;
} PB3DigTreasureGridDataMap__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gridDataMap",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureGridDataMap_FieldNumber_GridDataMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DigTreasureGridDataMap__storage_, gridDataMap),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasureGridDataMap class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasureGridDataMap__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasureLocationAwardList

@implementation PB3DigTreasureLocationAwardList

@dynamic locationAwardListArray, locationAwardListArray_Count;

typedef struct PB3DigTreasureLocationAwardList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *locationAwardListArray;
} PB3DigTreasureLocationAwardList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationAwardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DigTreasureLocationAward),
        .number = PB3DigTreasureLocationAwardList_FieldNumber_LocationAwardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DigTreasureLocationAwardList__storage_, locationAwardListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasureLocationAwardList class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasureLocationAwardList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000locationAwardList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DigTreasureLocationAward

@implementation PB3DigTreasureLocationAward

@dynamic giftId;
@dynamic giftIconURL;
@dynamic digTreasureAwardType;
@dynamic playerIconURL;
@dynamic location;

typedef struct PB3DigTreasureLocationAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t digTreasureAwardType;
  NSString *giftIconURL;
  NSString *playerIconURL;
  NSString *location;
} PB3DigTreasureLocationAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureLocationAward_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DigTreasureLocationAward__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureLocationAward_FieldNumber_GiftIconURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DigTreasureLocationAward__storage_, giftIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "digTreasureAwardType",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureLocationAward_FieldNumber_DigTreasureAwardType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DigTreasureLocationAward__storage_, digTreasureAwardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureLocationAward_FieldNumber_PlayerIconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DigTreasureLocationAward__storage_, playerIconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = PB3DigTreasureLocationAward_FieldNumber_Location,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DigTreasureLocationAward__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DigTreasureLocationAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DigTreasureLocationAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\004\244\241!!\000\004\006\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RankPKLog

@implementation PB3RankPKLog

@dynamic relActId;
@dynamic statistStartTime;
@dynamic statistEndTime;
@dynamic campName;
@dynamic mvpPlayerId;
@dynamic mvpPlayerId2;
@dynamic mvpName;
@dynamic mvpIcon;
@dynamic awardsArray, awardsArray_Count;
@dynamic created;

typedef struct PB3RankPKLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  NSString *statistStartTime;
  NSString *statistEndTime;
  NSString *campName;
  NSString *mvpName;
  NSString *mvpIcon;
  NSMutableArray *awardsArray;
  int64_t mvpPlayerId;
  int64_t mvpPlayerId2;
  int64_t created;
} PB3RankPKLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "statistStartTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_StatistStartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, statistStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statistEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_StatistEndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, statistEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "campName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_CampName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, campName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mvpPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_MvpPlayerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, mvpPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mvpPlayerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_MvpPlayerId2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, mvpPlayerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mvpName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_MvpName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, mvpName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mvpIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_MvpIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, mvpIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActNewAwardInfo),
        .number = PB3RankPKLog_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankPKLog_FieldNumber_Created,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RankPKLog__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankPKLog class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankPKLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RankAwardLog

@implementation PB3RankAwardLog

@dynamic relActId;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic hasAward, award;
@dynamic created;

typedef struct PB3RankAwardLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  NSString *playerName;
  NSString *playerIcon;
  PB3ActNewAwardInfo *award;
  int64_t playerId;
  int64_t playerId2;
  int64_t created;
} PB3RankAwardLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankAwardLog_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RankAwardLog__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankAwardLog_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RankAwardLog__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankAwardLog_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RankAwardLog__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankAwardLog_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RankAwardLog__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankAwardLog_FieldNumber_PlayerIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RankAwardLog__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "award",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActNewAwardInfo),
        .number = PB3RankAwardLog_FieldNumber_Award,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RankAwardLog__storage_, award),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3RankAwardLog_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RankAwardLog__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RankAwardLog class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RankAwardLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IconDataReq

@implementation PB3IconDataReq

@dynamic actId;
@dynamic relId;
@dynamic type;
@dynamic hasExt, ext;

typedef struct PB3IconDataReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  PB3RoomTopRightCornerLabelType type;
  PB3IconDataExtend *ext;
} PB3IconDataReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IconDataReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IconDataReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RoomTopRightCornerLabelType_EnumDescriptor,
        .number = PB3IconDataReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IconDataReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ext",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IconDataExtend),
        .number = PB3IconDataReq_FieldNumber_Ext,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IconDataReq__storage_, ext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IconDataReq class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IconDataReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3IconDataReq_Type_RawValue(PB3IconDataReq *message) {
  GPBDescriptor *descriptor = [PB3IconDataReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IconDataReq_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3IconDataReq_Type_RawValue(PB3IconDataReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3IconDataReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3IconDataReq_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3IconDataExtend

@implementation PB3IconDataExtend

@dynamic roomId;
@dynamic eventName;
@dynamic subType;
@dynamic itemId;
@dynamic extNumber;
@dynamic subItemId;

typedef struct PB3IconDataExtend__storage_ {
  uint32_t _has_storage_[1];
  int32_t subType;
  NSString *eventName;
  int64_t roomId;
  int64_t itemId;
  int64_t extNumber;
  int64_t subItemId;
} PB3IconDataExtend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataExtend_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IconDataExtend__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "eventName",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataExtend_FieldNumber_EventName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IconDataExtend__storage_, eventName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subType",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataExtend_FieldNumber_SubType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IconDataExtend__storage_, subType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "itemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataExtend_FieldNumber_ItemId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IconDataExtend__storage_, itemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "extNumber",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataExtend_FieldNumber_ExtNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IconDataExtend__storage_, extNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "subItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataExtend_FieldNumber_SubItemId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IconDataExtend__storage_, subItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IconDataExtend class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IconDataExtend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IconDataRes

@implementation PB3IconDataRes

@dynamic playerIcon1;
@dynamic playerId1;
@dynamic playerIcon2;
@dynamic playerId2;
@dynamic remainingTime;
@dynamic number;
@dynamic hasEvent, event;
@dynamic iconData, iconData_Count;

typedef struct PB3IconDataRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  NSString *playerIcon1;
  NSString *playerIcon2;
  PB3SystemNoticeEvent *event;
  GPBInt64ObjectDictionary *iconData;
  int64_t playerId1;
  int64_t playerId2;
  int64_t remainingTime;
} PB3IconDataRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerIcon1",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataRes_FieldNumber_PlayerIcon1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, playerIcon1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId1",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataRes_FieldNumber_PlayerId1,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, playerId1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerIcon2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataRes_FieldNumber_PlayerIcon2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, playerIcon2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataRes_FieldNumber_PlayerId2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remainingTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataRes_FieldNumber_RemainingTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, remainingTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataRes_FieldNumber_Number,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "event",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SystemNoticeEvent),
        .number = PB3IconDataRes_FieldNumber_Event,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iconData",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3IconDataInfo),
        .number = PB3IconDataRes_FieldNumber_IconData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3IconDataRes__storage_, iconData),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyInt64 | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IconDataRes class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IconDataRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\nH\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3IconDataInfo

@implementation PB3IconDataInfo

@dynamic playerIcon1;
@dynamic playerId1;
@dynamic playerIcon2;
@dynamic playerId2;
@dynamic remainingTime;
@dynamic number;
@dynamic hasEvent, event;
@dynamic number2;

typedef struct PB3IconDataInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  int32_t number2;
  NSString *playerIcon1;
  NSString *playerIcon2;
  PB3SystemNoticeEvent *event;
  int64_t playerId1;
  int64_t playerId2;
  int64_t remainingTime;
} PB3IconDataInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerIcon1",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataInfo_FieldNumber_PlayerIcon1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, playerIcon1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId1",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataInfo_FieldNumber_PlayerId1,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, playerId1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerIcon2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataInfo_FieldNumber_PlayerIcon2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, playerIcon2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataInfo_FieldNumber_PlayerId2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remainingTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataInfo_FieldNumber_RemainingTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, remainingTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataInfo_FieldNumber_Number,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "event",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SystemNoticeEvent),
        .number = PB3IconDataInfo_FieldNumber_Event,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "number2",
        .dataTypeSpecific.className = NULL,
        .number = PB3IconDataInfo_FieldNumber_Number2,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3IconDataInfo__storage_, number2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3IconDataInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3IconDataInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
