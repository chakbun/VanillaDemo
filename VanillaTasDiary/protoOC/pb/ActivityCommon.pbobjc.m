// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/activity_common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/ActivityCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ActivityCommonRoot

@implementation PB3ActivityCommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3ActivityCommonRoot_FileDescriptor

static GPBFileDescriptor *PB3ActivityCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3ActAwardType

GPBEnumDescriptor *PB3ActAwardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ActAwardTypeNone\000ActAwardTypeGold\000ActAwa"
        "rdTypeGift\000ActAwardTypeEffect\000ActAwardTy"
        "peSpecial\000ActAwardTypeBox\000";
    static const int32_t values[] = {
        PB3ActAwardType_ActAwardTypeNone,
        PB3ActAwardType_ActAwardTypeGold,
        PB3ActAwardType_ActAwardTypeGift,
        PB3ActAwardType_ActAwardTypeEffect,
        PB3ActAwardType_ActAwardTypeSpecial,
        PB3ActAwardType_ActAwardTypeBox,
    };
    static const char *extraTextFormatInfo = "\006\000\010\204\204\000\001\010\204\204\000\002\010\204\204\000\003\010\204\206\000\004\010\204\207\000\005\010\204\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActAwardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActAwardType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActAwardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActAwardType_ActAwardTypeNone:
    case PB3ActAwardType_ActAwardTypeGold:
    case PB3ActAwardType_ActAwardTypeGift:
    case PB3ActAwardType_ActAwardTypeEffect:
    case PB3ActAwardType_ActAwardTypeSpecial:
    case PB3ActAwardType_ActAwardTypeBox:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WelfareSataus

GPBEnumDescriptor *PB3WelfareSataus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StatusNoStart\000StatusDoing\000StatusWaitRece"
        "ive\000StatusCompleted\000StatusPast\000StatusOve"
        "r\000";
    static const int32_t values[] = {
        PB3WelfareSataus_StatusNoStart,
        PB3WelfareSataus_StatusDoing,
        PB3WelfareSataus_StatusWaitReceive,
        PB3WelfareSataus_StatusCompleted,
        PB3WelfareSataus_StatusPast,
        PB3WelfareSataus_StatusOver,
    };
    static const char *extraTextFormatInfo = "\006\000\006\202\205\000\001\006\205\000\002\006\204\207\000\003\006\211\000\004\006\204\000\005\006\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WelfareSataus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WelfareSataus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WelfareSataus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WelfareSataus_StatusNoStart:
    case PB3WelfareSataus_StatusDoing:
    case PB3WelfareSataus_StatusWaitReceive:
    case PB3WelfareSataus_StatusCompleted:
    case PB3WelfareSataus_StatusPast:
    case PB3WelfareSataus_StatusOver:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3WelfareType

GPBEnumDescriptor *PB3WelfareType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ActWtNone\000ActWtCompleteWelfare\000ActWtWait"
        "ReceiveWelfare\000ActWtSendGiftValue\000ActWtW"
        "elfareTypeRoomOnline\000ActWtPublishTrends\000"
        "ActWtTrendActLikeCount\000ActWtTrendPassLik"
        "eCount\000ActWtFriendMutualConcern\000ActWtCha"
        "t\000ActWtConcern\000ActWtFriendTrendLikeCount"
        "\000";
    static const int32_t values[] = {
        PB3WelfareType_ActWtNone,
        PB3WelfareType_ActWtCompleteWelfare,
        PB3WelfareType_ActWtWaitReceiveWelfare,
        PB3WelfareType_ActWtSendGiftValue,
        PB3WelfareType_ActWtWelfareTypeRoomOnline,
        PB3WelfareType_ActWtPublishTrends,
        PB3WelfareType_ActWtTrendActLikeCount,
        PB3WelfareType_ActWtTrendPassLikeCount,
        PB3WelfareType_ActWtFriendMutualConcern,
        PB3WelfareType_ActWtChat,
        PB3WelfareType_ActWtConcern,
        PB3WelfareType_ActWtFriendTrendLikeCount,
    };
    static const char *extraTextFormatInfo = "\014\000\004A\204\000\001\004A\210\207\000\002\004A\204\207\207\000\003\004A\204\204\205\000\004\004A\207\204\204\206\000\005\004A\207\206\000\006\004A\205\203\204\205\000\007\004A\205\204\204\205\000\010\004A\206\206\207\000\t\004A\204\000\n\004A\207\000\013\004A\206\205\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3WelfareType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3WelfareType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3WelfareType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3WelfareType_ActWtNone:
    case PB3WelfareType_ActWtCompleteWelfare:
    case PB3WelfareType_ActWtWaitReceiveWelfare:
    case PB3WelfareType_ActWtSendGiftValue:
    case PB3WelfareType_ActWtWelfareTypeRoomOnline:
    case PB3WelfareType_ActWtPublishTrends:
    case PB3WelfareType_ActWtTrendActLikeCount:
    case PB3WelfareType_ActWtTrendPassLikeCount:
    case PB3WelfareType_ActWtFriendMutualConcern:
    case PB3WelfareType_ActWtChat:
    case PB3WelfareType_ActWtConcern:
    case PB3WelfareType_ActWtFriendTrendLikeCount:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SpecialAwardType

GPBEnumDescriptor *PB3SpecialAwardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SatNone\000SatLotteryCount\000SatExchageScore\000";
    static const int32_t values[] = {
        PB3SpecialAwardType_SatNone,
        PB3SpecialAwardType_SatLotteryCount,
        PB3SpecialAwardType_SatExchageScore,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\000\001c\207\205\000\002c\207\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SpecialAwardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SpecialAwardType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SpecialAwardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SpecialAwardType_SatNone:
    case PB3SpecialAwardType_SatLotteryCount:
    case PB3SpecialAwardType_SatExchageScore:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3SortParam

@implementation PB3SortParam

@dynamic playerId;
@dynamic activityId;
@dynamic relActivityId;
@dynamic page;
@dynamic pageSize;

typedef struct PB3SortParam__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int32_t page;
  int64_t playerId;
  int64_t pageSize;
} PB3SortParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_ActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_RelActivityId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortParam_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SortParam__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SortParam class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SortParam__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListWelfareReq

@implementation PB3ListWelfareReq

@dynamic actId;
@dynamic relId;

typedef struct PB3ListWelfareReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
} PB3ListWelfareReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListWelfareReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListWelfareReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListWelfareReq_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListWelfareReq__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListWelfareReq class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListWelfareReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListWelfareRes

@implementation PB3ListWelfareRes

@dynamic listArray, listArray_Count;

typedef struct PB3ListWelfareRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3ListWelfareRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WelfareInfo),
        .number = PB3ListWelfareRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListWelfareRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListWelfareRes class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListWelfareRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SortResult

@implementation PB3SortResult

@dynamic sort;
@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic gold;
@dynamic point;
@dynamic num;
@dynamic roomId;
@dynamic roomName;
@dynamic likeNum;
@dynamic isLike;
@dynamic msg;
@dynamic lastPlayerId;
@dynamic resource;

typedef struct PB3SortResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t likeNum;
  NSString *name;
  NSString *icon;
  NSString *roomName;
  NSString *msg;
  NSString *resource;
  int64_t sort;
  int64_t id_p;
  int64_t id2;
  int64_t gold;
  int64_t point;
  int64_t num;
  int64_t roomId;
  int64_t lastPlayerId;
} PB3SortResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Id2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Gold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Point,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Num,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_RoomId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_RoomName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "likeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_LikeNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, likeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isLike",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_IsLike,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Msg,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastPlayerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_LastPlayerId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, lastPlayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "resource",
        .dataTypeSpecific.className = NULL,
        .number = PB3SortResult_FieldNumber_Resource,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3SortResult__storage_, resource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SortResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SortResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayerSortMsg

@implementation PB3PlayerSortMsg

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;
@dynamic gender;
@dynamic point;

typedef struct PB3PlayerSortMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t gender;
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
  int64_t point;
} PB3PlayerSortMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerSortMsg_FieldNumber_Point,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerSortMsg__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerSortMsg class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerSortMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ManySortResult

@implementation PB3ManySortResult

@dynamic listArray, listArray_Count;
@dynamic sort;
@dynamic gold;
@dynamic point;
@dynamic num;
@dynamic roomId;
@dynamic roomName;
@dynamic likeNum;
@dynamic isLike;
@dynamic msg;
@dynamic resource;

typedef struct PB3ManySortResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t likeNum;
  NSMutableArray *listArray;
  NSString *roomName;
  NSString *msg;
  NSString *resource;
  int64_t sort;
  int64_t gold;
  int64_t point;
  int64_t num;
  int64_t roomId;
} PB3ManySortResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayerSortMsg),
        .number = PB3ManySortResult_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Gold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Point,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_RoomId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_RoomName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "likeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_LikeNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, likeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isLike",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_IsLike,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Msg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resource",
        .dataTypeSpecific.className = NULL,
        .number = PB3ManySortResult_FieldNumber_Resource,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ManySortResult__storage_, resource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ManySortResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ManySortResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Theme

@implementation PB3Theme

@dynamic id_p;
@dynamic name;
@dynamic type;
@dynamic status;
@dynamic startTime;
@dynamic endTime;
@dynamic extend;
@dynamic key;

typedef struct PB3Theme__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t type;
  NSString *name;
  NSString *extend;
  NSString *key;
  int64_t startTime;
  int64_t endTime;
} PB3Theme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Status,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "extend",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Extend,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, extend),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = PB3Theme_FieldNumber_Key,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Theme__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Theme class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Theme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Comment

@implementation PB3Comment

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic content;
@dynamic created;

typedef struct PB3Comment__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  NSString *content;
  int64_t playerId;
  int64_t created;
} PB3Comment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3Comment_FieldNumber_Created,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Comment__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Comment class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Comment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NameList

@implementation PB3NameList

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;
@dynamic union_p;
@dynamic groupType;
@dynamic group;
@dynamic point;
@dynamic remark;

typedef struct PB3NameList__storage_ {
  uint32_t _has_storage_[1];
  int32_t groupType;
  uint32_t group;
  NSString *playerName;
  NSString *playerIcon;
  NSString *union_p;
  NSString *remark;
  int64_t playerId;
  int64_t point;
} PB3NameList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "union_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Union_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, union_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupType",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_GroupType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, groupType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "group",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Group,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Point,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameList_FieldNumber_Remark,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3NameList__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NameList class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NameList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NameListResult

@implementation PB3NameListResult

@dynamic name;
@dynamic listArray, listArray_Count;

typedef struct PB3NameListResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *listArray;
} PB3NameListResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3NameListResult_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NameListResult__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NameList),
        .number = PB3NameListResult_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NameListResult__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NameListResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NameListResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WelfareInfo

@implementation PB3WelfareInfo

@dynamic welfareId;
@dynamic type;
@dynamic status;
@dynamic created;
@dynamic triggerNum;
@dynamic completeNum;
@dynamic billTypeArray, billTypeArray_Count;
@dynamic countNum;
@dynamic dayOrWeekFinishNum;

typedef struct PB3WelfareInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t welfareId;
  int32_t type;
  PB3WelfareSataus status;
  int32_t completeNum;
  int32_t countNum;
  int32_t dayOrWeekFinishNum;
  GPBInt32Array *billTypeArray;
  int64_t created;
  int64_t triggerNum;
} PB3WelfareInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_WelfareId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3WelfareSataus_EnumDescriptor,
        .number = PB3WelfareInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_Created,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "triggerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_TriggerNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, triggerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "completeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_CompleteNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, completeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billTypeArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_BillTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, billTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "countNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_CountNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, countNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dayOrWeekFinishNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3WelfareInfo_FieldNumber_DayOrWeekFinishNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3WelfareInfo__storage_, dayOrWeekFinishNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WelfareInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WelfareInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3WelfareInfo_Status_RawValue(PB3WelfareInfo *message) {
  GPBDescriptor *descriptor = [PB3WelfareInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WelfareInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3WelfareInfo_Status_RawValue(PB3WelfareInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3WelfareInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3WelfareInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SignInfo

@implementation PB3SignInfo

@dynamic day;
@dynamic created;

typedef struct PB3SignInfo__storage_ {
  uint32_t _has_storage_[1];
  int64_t day;
  int64_t created;
} PB3SignInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "day",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInfo_FieldNumber_Day,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SignInfo__storage_, day),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3SignInfo_FieldNumber_Created,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SignInfo__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SignInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SignInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListGiftShow

@implementation PB3ListGiftShow

@dynamic giftId;
@dynamic giftName;
@dynamic giftCategory;
@dynamic canBuy;

typedef struct PB3ListGiftShow__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t giftCategory;
  int32_t canBuy;
  NSString *giftName;
} PB3ListGiftShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftCategory",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_GiftCategory,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, giftCategory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "canBuy",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListGiftShow_FieldNumber_CanBuy,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ListGiftShow__storage_, canBuy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListGiftShow class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListGiftShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Number

@implementation PB3Number

@dynamic number;
@dynamic cate;
@dynamic created;

typedef struct PB3Number__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  int32_t cate;
  int64_t created;
} PB3Number__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3Number_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Number__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3Number_FieldNumber_Cate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Number__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3Number_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Number__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Number class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Number__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NumberAwardPlayer

@implementation PB3NumberAwardPlayer

@dynamic playerId;
@dynamic id2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic number;
@dynamic level;

typedef struct PB3NumberAwardPlayer__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  int32_t level;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t id2;
} PB3NumberAwardPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_Number,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3NumberAwardPlayer_FieldNumber_Level,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NumberAwardPlayer__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NumberAwardPlayer class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NumberAwardPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SpecialAward

@implementation PB3SpecialAward

@dynamic type;
@dynamic num;
@dynamic count;

typedef struct PB3SpecialAward__storage_ {
  uint32_t _has_storage_[1];
  PB3SpecialAwardType type;
  int32_t num;
  int32_t count;
} PB3SpecialAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3SpecialAwardType_EnumDescriptor,
        .number = PB3SpecialAward_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SpecialAward__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3SpecialAward_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SpecialAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3SpecialAward_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SpecialAward__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SpecialAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SpecialAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SpecialAward_Type_RawValue(PB3SpecialAward *message) {
  GPBDescriptor *descriptor = [PB3SpecialAward descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SpecialAward_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SpecialAward_Type_RawValue(PB3SpecialAward *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SpecialAward descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SpecialAward_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlayerTime

@implementation PB3PlayerTime

@dynamic playerId;
@dynamic id2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic time;
@dynamic rate;
@dynamic cate;
@dynamic companyTime;

typedef struct PB3PlayerTime__storage_ {
  uint32_t _has_storage_[1];
  int32_t time;
  int32_t rate;
  int32_t cate;
  int32_t companyTime;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t id2;
} PB3PlayerTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Rate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_Cate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "companyTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayerTime_FieldNumber_CompanyTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PlayerTime__storage_, companyTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayerTime class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayerTime__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NoticeRecord

@implementation PB3NoticeRecord

@dynamic msgId;
@dynamic relId;
@dynamic playerId;
@dynamic msg;
@dynamic created;
@dynamic playerName;
@dynamic roomId;
@dynamic roomName;

typedef struct PB3NoticeRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgId;
  int32_t relId;
  int32_t playerId;
  NSString *msg;
  NSString *playerName;
  NSString *roomName;
  int64_t created;
  int64_t roomId;
} PB3NoticeRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, msgId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_Created,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_PlayerName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_RoomId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeRecord_FieldNumber_RoomName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3NoticeRecord__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NoticeRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NoticeRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfGift

@implementation PB3ConfGift

@dynamic giftId;
@dynamic giftName;
@dynamic weight;

typedef struct PB3ConfGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftId;
  int32_t weight;
  NSString *giftName;
} PB3ConfGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGift_FieldNumber_GiftId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfGift__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGift_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfGift__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGift_FieldNumber_Weight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfGift__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfGift class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LotteryRecord

@implementation PB3LotteryRecord

@dynamic relId;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic awardPoolId;
@dynamic giftName;
@dynamic created;
@dynamic consumeId;
@dynamic consumeNum;
@dynamic point;
@dynamic confId;
@dynamic roomName;

typedef struct PB3LotteryRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t playerId;
  int32_t playerId2;
  int32_t awardPoolId;
  int32_t consumeId;
  int32_t consumeNum;
  int32_t point;
  int32_t confId;
  NSString *playerName;
  NSString *giftName;
  NSString *roomName;
  int64_t created;
} PB3LotteryRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_PlayerId2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardPoolId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_AwardPoolId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, awardPoolId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_GiftName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, giftName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "consumeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_ConsumeId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, consumeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "consumeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_ConsumeNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, consumeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_Point,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_ConfId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryRecord_FieldNumber_RoomName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3LotteryRecord__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LotteryRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LotteryRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteRecord

@implementation PB3VoteRecord

@dynamic voterId;
@dynamic voterId2;
@dynamic voterName;
@dynamic voterIcon;
@dynamic byVoterId;
@dynamic byVoterId2;
@dynamic byVoterName;
@dynamic byVoterIcon;
@dynamic num;
@dynamic created;

typedef struct PB3VoteRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  NSString *voterName;
  NSString *voterIcon;
  NSString *byVoterName;
  NSString *byVoterIcon;
  int64_t voterId;
  int64_t voterId2;
  int64_t byVoterId;
  int64_t byVoterId2;
  int64_t created;
} PB3VoteRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voterId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterId2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voterName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voterIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_VoterIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, voterIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "byVoterId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "byVoterId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterId2,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "byVoterName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "byVoterIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_ByVoterIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, byVoterIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_Num,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteRecord_FieldNumber_Created,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3VoteRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3VoteResult

@implementation PB3VoteResult

@dynamic relId;
@dynamic playerId;
@dynamic id2;
@dynamic playerName;
@dynamic playerIcon;
@dynamic num;
@dynamic ranking;
@dynamic created;

typedef struct PB3VoteResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t num;
  int32_t ranking;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t id2;
  int64_t created;
} PB3VoteResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Id2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_PlayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_PlayerIcon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Num,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ranking",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Ranking,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, ranking),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3VoteResult_FieldNumber_Created,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3VoteResult__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3VoteResult class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3VoteResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewAward

@implementation PB3NewAward

@dynamic awardId;
@dynamic type;
@dynamic prizeId;
@dynamic num;
@dynamic relateId;
@dynamic relateState;

typedef struct PB3NewAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t awardId;
  int32_t type;
  int32_t prizeId;
  int32_t num;
  int32_t relateId;
  int32_t relateState;
} PB3NewAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_AwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_PrizeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relateId",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_RelateId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, relateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relateState",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewAward_FieldNumber_RelateState,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3NewAward__storage_, relateState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewAward class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewAwards

@implementation PB3NewAwards

@dynamic listArray, listArray_Count;

typedef struct PB3NewAwards__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PB3NewAwards__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3NewAward),
        .number = PB3NewAwards_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NewAwards__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewAwards class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewAwards__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Cultivate

@implementation PB3Cultivate

@dynamic name;
@dynamic level;
@dynamic cycleLevel;
@dynamic hasAwardIdArray, hasAwardIdArray_Count;

typedef struct PB3Cultivate__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  int32_t cycleLevel;
  NSString *name;
  GPBInt32Array *hasAwardIdArray;
} PB3Cultivate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycleLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_CycleLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, cycleLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hasAwardIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3Cultivate_FieldNumber_HasAwardIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Cultivate__storage_, hasAwardIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Cultivate class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Cultivate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogCultivate

@implementation PB3LogCultivate

@dynamic relId;
@dynamic playerId;
@dynamic upgradeType;
@dynamic giftId;
@dynamic giftNum;
@dynamic num;
@dynamic level;
@dynamic cycleLevel;
@dynamic created;

typedef struct PB3LogCultivate__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t upgradeType;
  int32_t giftId;
  int32_t giftNum;
  int32_t num;
  int32_t level;
  int32_t cycleLevel;
  int64_t playerId;
  int64_t created;
} PB3LogCultivate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "upgradeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_UpgradeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, upgradeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_GiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_GiftNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_Num,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_Level,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycleLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_CycleLevel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, cycleLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCultivate_FieldNumber_Created,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3LogCultivate__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogCultivate class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogCultivate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GoldBackData

@implementation PB3GoldBackData

@dynamic cate;
@dynamic playerId;
@dynamic count;
@dynamic useNum;
@dynamic rate;
@dynamic gold;
@dynamic sort;

typedef struct PB3GoldBackData__storage_ {
  uint32_t _has_storage_[1];
  int32_t cate;
  int32_t sort;
  int64_t playerId;
  int64_t count;
  int64_t useNum;
  int64_t rate;
  int64_t gold;
} PB3GoldBackData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Cate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, cate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "useNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_UseNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, useNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Rate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Gold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackData_FieldNumber_Sort,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3GoldBackData__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GoldBackData class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GoldBackData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogDrawCard

@implementation PB3LogDrawCard

@dynamic relId;
@dynamic confDrawCardId;
@dynamic selectNums;
@dynamic awardNum;
@dynamic awardStatus;
@dynamic gold;
@dynamic created;

typedef struct PB3LogDrawCard__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t confDrawCardId;
  int32_t awardNum;
  int32_t awardStatus;
  NSString *selectNums;
  int64_t gold;
  int64_t created;
} PB3LogDrawCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confDrawCardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_ConfDrawCardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, confDrawCardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "selectNums",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_SelectNums,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, selectNums),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_AwardNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, awardNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_AwardStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, awardStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gold",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_Gold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, gold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogDrawCard_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LogDrawCard__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogDrawCard class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogDrawCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldLog

@implementation PB3TakeGoldLog

@dynamic takeNum;
@dynamic giftsArray, giftsArray_Count;
@dynamic status;
@dynamic created;

typedef struct PB3TakeGoldLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t takeNum;
  int32_t status;
  NSMutableArray *giftsArray;
  int64_t created;
} PB3TakeGoldLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "takeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldLog_FieldNumber_TakeNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, takeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TakeGoldGift),
        .number = PB3TakeGoldLog_FieldNumber_GiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, giftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldLog_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldLog_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TakeGoldLog__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldLog class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GoldBackLog

@implementation PB3GoldBackLog

@dynamic payGold;
@dynamic backGold;
@dynamic status;
@dynamic created;

typedef struct PB3GoldBackLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int64_t payGold;
  int64_t backGold;
  int64_t created;
} PB3GoldBackLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_PayGold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, payGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "backGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_BackGold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, backGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackLog_FieldNumber_Created,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GoldBackLog__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GoldBackLog class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GoldBackLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldGift

@implementation PB3TakeGoldGift

@dynamic id_p;
@dynamic name;
@dynamic num;

typedef struct PB3TakeGoldGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t num;
  NSString *name;
} PB3TakeGoldGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGift_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldGift__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGift_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TakeGoldGift__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGift_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TakeGoldGift__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldGift class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TakeGoldGiftConf

@implementation PB3TakeGoldGiftConf

@dynamic takeGoldGiftListArray, takeGoldGiftListArray_Count;
@dynamic limitCycle;
@dynamic repeatedNum;

typedef struct PB3TakeGoldGiftConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t limitCycle;
  int32_t repeatedNum;
  NSMutableArray *takeGoldGiftListArray;
} PB3TakeGoldGiftConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "takeGoldGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TakeGoldGift),
        .number = PB3TakeGoldGiftConf_FieldNumber_TakeGoldGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TakeGoldGiftConf__storage_, takeGoldGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "limitCycle",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGiftConf_FieldNumber_LimitCycle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TakeGoldGiftConf__storage_, limitCycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "repeatedNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3TakeGoldGiftConf_FieldNumber_RepeatedNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TakeGoldGiftConf__storage_, repeatedNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TakeGoldGiftConf class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TakeGoldGiftConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TemPointRecord

@implementation PB3TemPointRecord

@dynamic billId;
@dynamic point;
@dynamic created;
@dynamic status;

typedef struct PB3TemPointRecord__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *billId;
  int64_t point;
  int64_t created;
} PB3TemPointRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "billId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_BillId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, billId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_Point,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3TemPointRecord_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3TemPointRecord__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TemPointRecord class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TemPointRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BlindAwardInfo

@implementation PB3BlindAwardInfo

@dynamic blindNum;
@dynamic awardName;
@dynamic awardId;
@dynamic playerId;
@dynamic playerId2;
@dynamic playerName;
@dynamic playerIcon;

typedef struct PB3BlindAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t blindNum;
  int32_t awardId;
  NSString *awardName;
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
  int64_t playerId2;
} PB3BlindAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blindNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_BlindNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, blindNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_AwardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, awardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_AwardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerId2",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerId2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerId2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindAwardInfo_FieldNumber_PlayerIcon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3BlindAwardInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BlindAwardInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BlindAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityAwardInfo

@implementation PB3ActivityAwardInfo

@dynamic prizeId;
@dynamic num;
@dynamic type;
@dynamic unit;
@dynamic awardId;

typedef struct PB3ActivityAwardInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t prizeId;
  int32_t num;
  int32_t type;
  int32_t awardId;
  NSString *unit;
} PB3ActivityAwardInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_PrizeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_Unit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, unit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityAwardInfo_FieldNumber_AwardId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActivityAwardInfo__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityAwardInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityAwardInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BlindRoomInfo

@implementation PB3BlindRoomInfo

@dynamic luckNum;
@dynamic roomId;
@dynamic unusualGiftName;
@dynamic roomIcon;
@dynamic roomName;
@dynamic gender;

typedef struct PB3BlindRoomInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t luckNum;
  int32_t gender;
  NSString *unusualGiftName;
  NSString *roomIcon;
  NSString *roomName;
  int64_t roomId;
} PB3BlindRoomInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "luckNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_LuckNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, luckNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unusualGiftName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_UnusualGiftName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, unusualGiftName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_RoomIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, roomIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_RoomName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, roomName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = PB3BlindRoomInfo_FieldNumber_Gender,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3BlindRoomInfo__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BlindRoomInfo class]
                                     rootClass:[PB3ActivityCommonRoot class]
                                          file:PB3ActivityCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BlindRoomInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\007\250\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
