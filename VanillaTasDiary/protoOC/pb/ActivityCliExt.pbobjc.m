// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/activity_cli.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/ActivityCliExt.pbobjc.h"
#import "pb/CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ActivityCliExtRoot

@implementation PB3ActivityCliExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3ActivityCliExtRoot_FileDescriptor

static GPBFileDescriptor *PB3ActivityCliExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3ActivityLocation

GPBEnumDescriptor *PB3ActivityLocation_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LocationNone\000LocationLeftTop\000LocationRig"
        "htTop\000LocationBottom\000LocationCenter\000";
    static const int32_t values[] = {
        PB3ActivityLocation_LocationNone,
        PB3ActivityLocation_LocationLeftTop,
        PB3ActivityLocation_LocationRightTop,
        PB3ActivityLocation_LocationBottom,
        PB3ActivityLocation_LocationCenter,
    };
    static const char *extraTextFormatInfo = "\005\000\010\204\000\001\010\204\203\000\002\010\205\203\000\003\010\206\000\004\010\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityLocation)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityLocation_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityLocation_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityLocation_LocationNone:
    case PB3ActivityLocation_LocationLeftTop:
    case PB3ActivityLocation_LocationRightTop:
    case PB3ActivityLocation_LocationBottom:
    case PB3ActivityLocation_LocationCenter:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomSubInfoShow

GPBEnumDescriptor *PB3RoomSubInfoShow_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RoomSubInfoShowNone\000ShowPoint\000ShowPeople"
        "\000ShowMarriage\000";
    static const int32_t values[] = {
        PB3RoomSubInfoShow_RoomSubInfoShowNone,
        PB3RoomSubInfoShow_ShowPoint,
        PB3RoomSubInfoShow_ShowPeople,
        PB3RoomSubInfoShow_ShowMarriage,
    };
    static const char *extraTextFormatInfo = "\004\000\017\204\000\001\004\205\000\002\004\206\000\003\004\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomSubInfoShow)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomSubInfoShow_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomSubInfoShow_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomSubInfoShow_RoomSubInfoShowNone:
    case PB3RoomSubInfoShow_ShowPoint:
    case PB3RoomSubInfoShow_ShowPeople:
    case PB3RoomSubInfoShow_ShowMarriage:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3PlayerPageType

GPBEnumDescriptor *PB3PlayerPageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PlayerPageTypeNone\000OnePointPoint\000TwoPoin"
        "tPoint\000OneNumNum\000TwoNumNum\000OneNumPoint\000T"
        "woPointPointCount\000";
    static const int32_t values[] = {
        PB3PlayerPageType_PlayerPageTypeNone,
        PB3PlayerPageType_OnePointPoint,
        PB3PlayerPageType_TwoPointPoint,
        PB3PlayerPageType_OneNumNum,
        PB3PlayerPageType_TwoNumNum,
        PB3PlayerPageType_OneNumPoint,
        PB3PlayerPageType_TwoPointPointCount,
    };
    static const char *extraTextFormatInfo = "\007\000\016\204\000\001\003\205\205\000\002\003\205\205\000\003\003\203\203\000\004\003\203\342\001\000\005\003\203\205\000\006\003\205\205\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3PlayerPageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3PlayerPageType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3PlayerPageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3PlayerPageType_PlayerPageTypeNone:
    case PB3PlayerPageType_OnePointPoint:
    case PB3PlayerPageType_TwoPointPoint:
    case PB3PlayerPageType_OneNumNum:
    case PB3PlayerPageType_TwoNumNum:
    case PB3PlayerPageType_OneNumPoint:
    case PB3PlayerPageType_TwoPointPointCount:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityType

GPBEnumDescriptor *PB3ActivityType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeNone\000TypeNormal\000TypeTask\000";
    static const int32_t values[] = {
        PB3ActivityType_TypeNone,
        PB3ActivityType_TypeNormal,
        PB3ActivityType_TypeTask,
    };
    static const char *extraTextFormatInfo = "\003\000\004\204\000\001\004\206\000\002\004\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityType_TypeNone:
    case PB3ActivityType_TypeNormal:
    case PB3ActivityType_TypeTask:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RelActivityType

GPBEnumDescriptor *PB3RelActivityType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RelTypeNone\000RelTypeGoodNum\000RelTypeSortSe"
        "nd\000RelTypeSortGet\000RelTypeMine\000RelTypeSor"
        "tPay\000RelTypeSortConsume\000RelTypeCommon\000";
    static const int32_t values[] = {
        PB3RelActivityType_RelTypeNone,
        PB3RelActivityType_RelTypeGoodNum,
        PB3RelActivityType_RelTypeSortSend,
        PB3RelActivityType_RelTypeSortGet,
        PB3RelActivityType_RelTypeMine,
        PB3RelActivityType_RelTypeSortPay,
        PB3RelActivityType_RelTypeSortConsume,
        PB3RelActivityType_RelTypeCommon,
    };
    static const char *extraTextFormatInfo = "\010\000\003\204\204\000\001\003\204\207\000\002\003\204\204\204\000\003\003\204\204\203\000\004\003\204\204\000\005\003\204\204\203\000\006\003\204\204\207\000\007\003\204\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RelActivityType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RelActivityType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RelActivityType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RelActivityType_RelTypeNone:
    case PB3RelActivityType_RelTypeGoodNum:
    case PB3RelActivityType_RelTypeSortSend:
    case PB3RelActivityType_RelTypeSortGet:
    case PB3RelActivityType_RelTypeMine:
    case PB3RelActivityType_RelTypeSortPay:
    case PB3RelActivityType_RelTypeSortConsume:
    case PB3RelActivityType_RelTypeCommon:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityTaskType

GPBEnumDescriptor *PB3ActivityTaskType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TaskTypeNone\000TaskTypePay\000TaskTypeGiftGet"
        "\000TaskTypeRoomGiftGet\000TaskTypeBuy\000TaskTyp"
        "eGiftSend\000TaskTypeCompletedTask\000";
    static const int32_t values[] = {
        PB3ActivityTaskType_TaskTypeNone,
        PB3ActivityTaskType_TaskTypePay,
        PB3ActivityTaskType_TaskTypeGiftGet,
        PB3ActivityTaskType_TaskTypeRoomGiftGet,
        PB3ActivityTaskType_TaskTypeBuy,
        PB3ActivityTaskType_TaskTypeGiftSend,
        PB3ActivityTaskType_TaskTypeCompletedTask,
    };
    static const char *extraTextFormatInfo = "\007\000\004\204\204\000\001\004\204\203\000\002\004\204\204\203\000\003\004\204\204\204\203\000\004\004\204\203\000\005\004\204\204\204\000\006\004\204\211\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityTaskType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityTaskType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityTaskType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityTaskType_TaskTypeNone:
    case PB3ActivityTaskType_TaskTypePay:
    case PB3ActivityTaskType_TaskTypeGiftGet:
    case PB3ActivityTaskType_TaskTypeRoomGiftGet:
    case PB3ActivityTaskType_TaskTypeBuy:
    case PB3ActivityTaskType_TaskTypeGiftSend:
    case PB3ActivityTaskType_TaskTypeCompletedTask:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityTaskTriggerType

GPBEnumDescriptor *PB3ActivityTaskTriggerType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TaskTriggerTypeNone\000TaskTriggerTypeRepea"
        "ted\000TaskTriggerTypeOnce\000TaskTriggerTypeD"
        "ay\000";
    static const int32_t values[] = {
        PB3ActivityTaskTriggerType_TaskTriggerTypeNone,
        PB3ActivityTaskTriggerType_TaskTriggerTypeRepeated,
        PB3ActivityTaskTriggerType_TaskTriggerTypeOnce,
        PB3ActivityTaskTriggerType_TaskTriggerTypeDay,
    };
    static const char *extraTextFormatInfo = "\004\000\004\207\204\204\000\001\004\207\204\210\000\002\004\207\204\204\000\003\004\207\204\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityTaskTriggerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityTaskTriggerType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityTaskTriggerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityTaskTriggerType_TaskTriggerTypeNone:
    case PB3ActivityTaskTriggerType_TaskTriggerTypeRepeated:
    case PB3ActivityTaskTriggerType_TaskTriggerTypeOnce:
    case PB3ActivityTaskTriggerType_TaskTriggerTypeDay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityTaskTriggerPointType

GPBEnumDescriptor *PB3ActivityTaskTriggerPointType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TaskTriggerPointTypeNone\000TaskTriggerPoin"
        "tTypeNum\000TaskTriggerPointTypePoint\000";
    static const int32_t values[] = {
        PB3ActivityTaskTriggerPointType_TaskTriggerPointTypeNone,
        PB3ActivityTaskTriggerPointType_TaskTriggerPointTypeNum,
        PB3ActivityTaskTriggerPointType_TaskTriggerPointTypePoint,
    };
    static const char *extraTextFormatInfo = "\003\000\004\207\205\204\204\000\001\004\207\205\204\203\000\002\004\207\205\204\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityTaskTriggerPointType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityTaskTriggerPointType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityTaskTriggerPointType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityTaskTriggerPointType_TaskTriggerPointTypeNone:
    case PB3ActivityTaskTriggerPointType_TaskTriggerPointTypeNum:
    case PB3ActivityTaskTriggerPointType_TaskTriggerPointTypePoint:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityConfType

GPBEnumDescriptor *PB3ActivityConfType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ActNone\000ActActivity\000ActWelfare\000ActPuzzle"
        "\000ActLottery\000ActVote\000ActCultivate\000ActNewA"
        "ward\000ActGoldBack\000ActCompound\000ActDrawCard"
        "\000ActLottery2\000ActUserStint\000ActTreasureLis"
        "t\000ActTreasureGiftList\000ActFormCarrier\000Act"
        "SummaryList\000ActServerLottery\000ActBlindLot"
        "tery\000ActDefendPets\000ActDefendPetsBattle\000A"
        "ctExchange\000ActPlayerPolyInfo\000ActPlayer\000A"
        "ctClaninfo\000ActServerTimestamp\000ActConfIdD"
        "ig\000";
    static const int32_t values[] = {
        PB3ActivityConfType_ActNone,
        PB3ActivityConfType_ActActivity,
        PB3ActivityConfType_ActWelfare,
        PB3ActivityConfType_ActPuzzle,
        PB3ActivityConfType_ActLottery,
        PB3ActivityConfType_ActVote,
        PB3ActivityConfType_ActCultivate,
        PB3ActivityConfType_ActNewAward,
        PB3ActivityConfType_ActGoldBack,
        PB3ActivityConfType_ActCompound,
        PB3ActivityConfType_ActDrawCard,
        PB3ActivityConfType_ActLottery2,
        PB3ActivityConfType_ActUserStint,
        PB3ActivityConfType_ActTreasureList,
        PB3ActivityConfType_ActTreasureGiftList,
        PB3ActivityConfType_ActFormCarrier,
        PB3ActivityConfType_ActSummaryList,
        PB3ActivityConfType_ActServerLottery,
        PB3ActivityConfType_ActBlindLottery,
        PB3ActivityConfType_ActDefendPets,
        PB3ActivityConfType_ActDefendPetsBattle,
        PB3ActivityConfType_ActExchange,
        PB3ActivityConfType_ActPlayerPolyInfo,
        PB3ActivityConfType_ActPlayer,
        PB3ActivityConfType_ActClaninfo,
        PB3ActivityConfType_ActServerTimestamp,
        PB3ActivityConfType_ActConfIdDig,
    };
    static const char *extraTextFormatInfo = "\001\025c\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityConfType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityConfType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityConfType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityConfType_ActNone:
    case PB3ActivityConfType_ActActivity:
    case PB3ActivityConfType_ActWelfare:
    case PB3ActivityConfType_ActPuzzle:
    case PB3ActivityConfType_ActLottery:
    case PB3ActivityConfType_ActVote:
    case PB3ActivityConfType_ActCultivate:
    case PB3ActivityConfType_ActNewAward:
    case PB3ActivityConfType_ActGoldBack:
    case PB3ActivityConfType_ActCompound:
    case PB3ActivityConfType_ActDrawCard:
    case PB3ActivityConfType_ActLottery2:
    case PB3ActivityConfType_ActUserStint:
    case PB3ActivityConfType_ActTreasureList:
    case PB3ActivityConfType_ActTreasureGiftList:
    case PB3ActivityConfType_ActFormCarrier:
    case PB3ActivityConfType_ActSummaryList:
    case PB3ActivityConfType_ActServerLottery:
    case PB3ActivityConfType_ActBlindLottery:
    case PB3ActivityConfType_ActDefendPets:
    case PB3ActivityConfType_ActDefendPetsBattle:
    case PB3ActivityConfType_ActExchange:
    case PB3ActivityConfType_ActPlayerPolyInfo:
    case PB3ActivityConfType_ActPlayer:
    case PB3ActivityConfType_ActClaninfo:
    case PB3ActivityConfType_ActServerTimestamp:
    case PB3ActivityConfType_ActConfIdDig:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityCmdId

GPBEnumDescriptor *PB3ActivityCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IcActivityNone\000ActivityNotice\000";
    static const int32_t values[] = {
        PB3ActivityCmdId_IcActivityNone,
        PB3ActivityCmdId_ActivityNotice,
    };
    static const char *extraTextFormatInfo = "\002\000b\210\204\000\001\010\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityCmdId_IcActivityNone:
    case PB3ActivityCmdId_ActivityNotice:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RewardType

GPBEnumDescriptor *PB3RewardType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RewardTypeNull\000RewardTypeGold\000RewardType"
        "GiftTicket\000RewardTypeGift\000RewardTypeGold"
        "Pool\000RewardTypeGoldEffect\000RewardTypeCron"
        "yBackground\000RewardTypeSpecial\000RewardType"
        "RedPacket\000RewardTypeRoomBackground\000Rewar"
        "dTypeGiftBox\000";
    static const int32_t values[] = {
        PB3RewardType_RewardTypeNull,
        PB3RewardType_RewardTypeGold,
        PB3RewardType_RewardTypeGiftTicket,
        PB3RewardType_RewardTypeGift,
        PB3RewardType_RewardTypeGoldPool,
        PB3RewardType_RewardTypeGoldEffect,
        PB3RewardType_RewardTypeCronyBackground,
        PB3RewardType_RewardTypeSpecial,
        PB3RewardType_RewardTypeRedPacket,
        PB3RewardType_RewardTypeRoomBackground,
        PB3RewardType_RewardTypeGiftBox,
    };
    static const char *extraTextFormatInfo = "\013\000\016\000\001\016\000\002\024\000\003\016\000\004\022\000\005\024\000\006\031\000\007\021\000\010\023\000\t\030\000\n\021\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RewardType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RewardType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RewardType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RewardType_RewardTypeNull:
    case PB3RewardType_RewardTypeGold:
    case PB3RewardType_RewardTypeGiftTicket:
    case PB3RewardType_RewardTypeGift:
    case PB3RewardType_RewardTypeGoldPool:
    case PB3RewardType_RewardTypeGoldEffect:
    case PB3RewardType_RewardTypeCronyBackground:
    case PB3RewardType_RewardTypeSpecial:
    case PB3RewardType_RewardTypeRedPacket:
    case PB3RewardType_RewardTypeRoomBackground:
    case PB3RewardType_RewardTypeGiftBox:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3ActPicture

@implementation PB3ActPicture

@dynamic name;
@dynamic picture;
@dynamic link;
@dynamic sort;
@dynamic startTime;
@dynamic endTime;
@dynamic status;
@dynamic video;

typedef struct PB3ActPicture__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  int32_t status;
  NSString *name;
  NSString *picture;
  NSString *link;
  NSString *video;
  int64_t startTime;
  int64_t endTime;
} PB3ActPicture__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_Picture,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_Link,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, link),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_Sort,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_StartTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_EndTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "video",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActPicture_FieldNumber_Video,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ActPicture__storage_, video),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActPicture class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActPicture__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfActPage

@implementation PB3ConfActPage

@dynamic isShare;
@dynamic actRule;
@dynamic sharePicture;
@dynamic actPictureArray, actPictureArray_Count;

typedef struct PB3ConfActPage__storage_ {
  uint32_t _has_storage_[1];
  int32_t isShare;
  NSString *actRule;
  NSString *sharePicture;
  NSMutableArray *actPictureArray;
} PB3ConfActPage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isShare",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActPage_FieldNumber_IsShare,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfActPage__storage_, isShare),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actRule",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActPage_FieldNumber_ActRule,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfActPage__storage_, actRule),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sharePicture",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActPage_FieldNumber_SharePicture,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfActPage__storage_, sharePicture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actPictureArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActPicture),
        .number = PB3ConfActPage_FieldNumber_ActPictureArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfActPage__storage_, actPictureArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfActPage class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfActPage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Int32s

@implementation PB3Int32s

@dynamic arrArray, arrArray_Count;

typedef struct PB3Int32s__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *arrArray;
} PB3Int32s__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "arrArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3Int32s_FieldNumber_ArrArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Int32s__storage_, arrArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Int32s class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Int32s__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityTask

@implementation PB3ActivityTask

@dynamic id_p;
@dynamic name;
@dynamic type;
@dynamic triggerIdArray, triggerIdArray_Count;
@dynamic triggerType;
@dynamic triggerPoint;
@dynamic triggerPointType;
@dynamic rewardArray, rewardArray_Count;
@dynamic roomRewardArray, roomRewardArray_Count;
@dynamic playerAwardPoint;
@dynamic roomAwardPoint;

typedef struct PB3ActivityTask__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3ActivityTaskType type;
  PB3ActivityTaskTriggerType triggerType;
  PB3ActivityTaskTriggerPointType triggerPointType;
  NSString *name;
  GPBInt32Array *triggerIdArray;
  NSMutableArray *rewardArray;
  NSMutableArray *roomRewardArray;
  int64_t triggerPoint;
  int64_t playerAwardPoint;
  int64_t roomAwardPoint;
} PB3ActivityTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTask_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTask_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ActivityTaskType_EnumDescriptor,
        .number = PB3ActivityTask_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "triggerIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTask_FieldNumber_TriggerIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, triggerIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "triggerType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityTaskTriggerType_EnumDescriptor,
        .number = PB3ActivityTask_FieldNumber_TriggerType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, triggerType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "triggerPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTask_FieldNumber_TriggerPoint,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, triggerPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "triggerPointType",
        .dataTypeSpecific.enumDescFunc = PB3ActivityTaskTriggerPointType_EnumDescriptor,
        .number = PB3ActivityTask_FieldNumber_TriggerPointType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, triggerPointType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rewardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Int32s),
        .number = PB3ActivityTask_FieldNumber_RewardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, rewardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomRewardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Int32s),
        .number = PB3ActivityTask_FieldNumber_RoomRewardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, roomRewardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playerAwardPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTask_FieldNumber_PlayerAwardPoint,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, playerAwardPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomAwardPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTask_FieldNumber_RoomAwardPoint,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ActivityTask__storage_, roomAwardPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityTask class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ActivityTask_Type_RawValue(PB3ActivityTask *message) {
  GPBDescriptor *descriptor = [PB3ActivityTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityTask_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityTask_Type_RawValue(PB3ActivityTask *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityTask_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ActivityTask_TriggerType_RawValue(PB3ActivityTask *message) {
  GPBDescriptor *descriptor = [PB3ActivityTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityTask_FieldNumber_TriggerType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityTask_TriggerType_RawValue(PB3ActivityTask *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityTask_FieldNumber_TriggerType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ActivityTask_TriggerPointType_RawValue(PB3ActivityTask *message) {
  GPBDescriptor *descriptor = [PB3ActivityTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityTask_FieldNumber_TriggerPointType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityTask_TriggerPointType_RawValue(PB3ActivityTask *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityTask_FieldNumber_TriggerPointType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ActivityResource

@implementation PB3ActivityResource

@dynamic location;
@dynamic activityURL;
@dynamic progressColor;
@dynamic enterBackground;
@dynamic enterSmallBackground;
@dynamic cardBackground;
@dynamic playerPageStatus;
@dynamic playerPageType;
@dynamic playerPageURL;
@dynamic roomsubinfoShow;
@dynamic pcEnterBackground;
@dynamic weight;

typedef struct PB3ActivityResource__storage_ {
  uint32_t _has_storage_[1];
  PB3ActivityLocation location;
  PB3PlayerPageType playerPageType;
  PB3RoomSubInfoShow roomsubinfoShow;
  int32_t weight;
  NSString *activityURL;
  NSString *progressColor;
  NSString *enterBackground;
  NSString *enterSmallBackground;
  NSString *cardBackground;
  NSString *playerPageURL;
  NSString *pcEnterBackground;
} PB3ActivityResource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.enumDescFunc = PB3ActivityLocation_EnumDescriptor,
        .number = PB3ActivityResource_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, location),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "activityURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_ActivityURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, activityURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "progressColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_ProgressColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, progressColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enterBackground",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_EnterBackground,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, enterBackground),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enterSmallBackground",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_EnterSmallBackground,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, enterSmallBackground),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardBackground",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_CardBackground,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, cardBackground),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerPageStatus",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_PlayerPageStatus,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "playerPageType",
        .dataTypeSpecific.enumDescFunc = PB3PlayerPageType_EnumDescriptor,
        .number = PB3ActivityResource_FieldNumber_PlayerPageType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, playerPageType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerPageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_PlayerPageURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, playerPageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomsubinfoShow",
        .dataTypeSpecific.enumDescFunc = PB3RoomSubInfoShow_EnumDescriptor,
        .number = PB3ActivityResource_FieldNumber_RoomsubinfoShow,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, roomsubinfoShow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pcEnterBackground",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_PcEnterBackground,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, pcEnterBackground),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityResource_FieldNumber_Weight,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3ActivityResource__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityResource class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityResource__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\010\241!!\000\t\006\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ActivityResource_Location_RawValue(PB3ActivityResource *message) {
  GPBDescriptor *descriptor = [PB3ActivityResource descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityResource_FieldNumber_Location];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityResource_Location_RawValue(PB3ActivityResource *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityResource descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityResource_FieldNumber_Location];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ActivityResource_PlayerPageType_RawValue(PB3ActivityResource *message) {
  GPBDescriptor *descriptor = [PB3ActivityResource descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityResource_FieldNumber_PlayerPageType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityResource_PlayerPageType_RawValue(PB3ActivityResource *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityResource descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityResource_FieldNumber_PlayerPageType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ActivityResource_RoomsubinfoShow_RawValue(PB3ActivityResource *message) {
  GPBDescriptor *descriptor = [PB3ActivityResource descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityResource_FieldNumber_RoomsubinfoShow];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityResource_RoomsubinfoShow_RawValue(PB3ActivityResource *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityResource descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityResource_FieldNumber_RoomsubinfoShow];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RelActivity

@implementation PB3RelActivity

@dynamic id_p;
@dynamic name;
@dynamic type;
@dynamic giftIdArray, giftIdArray_Count;
@dynamic tasksArray, tasksArray_Count;
@dynamic startTime;
@dynamic endTime;
@dynamic guaranteedTimes;
@dynamic gender;
@dynamic sortCountType;
@dynamic statistStartTime;
@dynamic statistEndTime;

typedef struct PB3RelActivity__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3RelActivityType type;
  int32_t gender;
  int32_t sortCountType;
  NSString *name;
  GPBInt32Array *giftIdArray;
  NSMutableArray *tasksArray;
  NSString *statistStartTime;
  NSString *statistEndTime;
  int64_t startTime;
  int64_t endTime;
  int64_t guaranteedTimes;
} PB3RelActivity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RelActivityType_EnumDescriptor,
        .number = PB3RelActivity_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "giftIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_GiftIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, giftIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tasksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActivityTask),
        .number = PB3RelActivity_FieldNumber_TasksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, tasksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_StartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "guaranteedTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_GuaranteedTimes,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, guaranteedTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_Gender,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sortCountType",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_SortCountType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, sortCountType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "statistStartTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_StatistStartTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, statistStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statistEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RelActivity_FieldNumber_StatistEndTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3RelActivity__storage_, statistEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RelActivity class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RelActivity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RelActivity_Type_RawValue(PB3RelActivity *message) {
  GPBDescriptor *descriptor = [PB3RelActivity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RelActivity_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RelActivity_Type_RawValue(PB3RelActivity *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RelActivity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RelActivity_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3Activity

@implementation PB3Activity

@dynamic id_p;
@dynamic name;
@dynamic status;
@dynamic type;
@dynamic startTime;
@dynamic endTime;
@dynamic hasResource, resource;
@dynamic relArray, relArray_Count;
@dynamic hasActPage, actPage;
@dynamic isLimit;
@dynamic selfActGender;

typedef struct PB3Activity__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  PB3ActivityType type;
  int32_t isLimit;
  int32_t selfActGender;
  NSString *name;
  PB3ActivityResource *resource;
  NSMutableArray *relArray;
  PB3ConfActPage *actPage;
  int64_t startTime;
  int64_t endTime;
} PB3Activity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3Activity_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3Activity_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3Activity_FieldNumber_Status,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ActivityType_EnumDescriptor,
        .number = PB3Activity_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Activity_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3Activity_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "resource",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ActivityResource),
        .number = PB3Activity_FieldNumber_Resource,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, resource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "relArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RelActivity),
        .number = PB3Activity_FieldNumber_RelArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, relArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actPage",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActPage),
        .number = PB3Activity_FieldNumber_ActPage,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, actPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3Activity_FieldNumber_IsLimit,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, isLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "selfActGender",
        .dataTypeSpecific.className = NULL,
        .number = PB3Activity_FieldNumber_SelfActGender,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3Activity__storage_, selfActGender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Activity class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Activity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3Activity_Type_RawValue(PB3Activity *message) {
  GPBDescriptor *descriptor = [PB3Activity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Activity_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3Activity_Type_RawValue(PB3Activity *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3Activity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3Activity_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ConfNewAwardCustomAward

@implementation PB3ConfNewAwardCustomAward

@dynamic awardId;
@dynamic awardName;
@dynamic prizeId;
@dynamic picture;
@dynamic remark;
@dynamic price;
@dynamic num;
@dynamic unit;
@dynamic type;

typedef struct PB3ConfNewAwardCustomAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t awardId;
  int32_t prizeId;
  int32_t type;
  NSString *awardName;
  NSString *picture;
  NSString *remark;
  NSString *unit;
  int64_t price;
  int64_t num;
} PB3ConfNewAwardCustomAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_AwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_AwardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, awardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_PrizeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_Picture,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_Remark,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_Price,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_Num,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_Unit,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfNewAwardCustomAward_FieldNumber_Type,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfNewAwardCustomAward__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfNewAwardCustomAward class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfNewAwardCustomAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfActAwardShow

@implementation PB3ConfActAwardShow

@dynamic id_p;
@dynamic name;
@dynamic actId;
@dynamic relId;
@dynamic giftId;
@dynamic giftNum;
@dynamic picture;
@dynamic thumbnail;
@dynamic sort;
@dynamic msg;
@dynamic remark;

typedef struct PB3ConfActAwardShow__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t actId;
  int32_t relId;
  int32_t giftId;
  int32_t giftNum;
  int32_t sort;
  NSString *name;
  NSString *picture;
  NSString *thumbnail;
  NSString *msg;
  NSString *remark;
} PB3ConfActAwardShow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_ActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_RelId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_GiftId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_GiftNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_Picture,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_Thumbnail,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_Sort,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_Msg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActAwardShow_FieldNumber_Remark,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ConfActAwardShow__storage_, remark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfActAwardShow class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfActAwardShow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\nC\000\013F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfNewAward

@implementation PB3ConfNewAward

@dynamic awardsArray, awardsArray_Count;
@dynamic awardShowsArray, awardShowsArray_Count;

typedef struct PB3ConfNewAward__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *awardsArray;
  NSMutableArray *awardShowsArray;
} PB3ConfNewAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfNewAwardCustomAward),
        .number = PB3ConfNewAward_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfNewAward__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "awardShowsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActAwardShow),
        .number = PB3ConfNewAward_FieldNumber_AwardShowsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfNewAward__storage_, awardShowsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfNewAward class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfNewAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000awardShows\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfWelfare

@implementation PB3ConfWelfare

@dynamic id_p;
@dynamic group;
@dynamic relativeId;
@dynamic status;
@dynamic triggerNum;
@dynamic triggerType;
@dynamic triggerRate;
@dynamic numLimit;
@dynamic preposeArray, preposeArray_Count;
@dynamic billTypeArray, billTypeArray_Count;
@dynamic skipId;
@dynamic welfareName;
@dynamic countNum;
@dynamic awardsArray, awardsArray_Count;
@dynamic giftId;
@dynamic giftNum;
@dynamic lotteryId;
@dynamic redirect;
@dynamic redirectURL;
@dynamic remark;
@dynamic triggerNumRepeated;
@dynamic validityStartTime;
@dynamic validityEndTime;
@dynamic numOfReceived;
@dynamic totalNum;
@dynamic dayOrWeekNumLimit;
@dynamic rangeIdsArray, rangeIdsArray_Count;

typedef struct PB3ConfWelfare__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t group;
  int32_t relativeId;
  int32_t status;
  int32_t triggerType;
  int32_t triggerRate;
  int32_t countNum;
  int32_t giftId;
  int32_t giftNum;
  int32_t lotteryId;
  int32_t redirect;
  int32_t triggerNumRepeated;
  int32_t dayOrWeekNumLimit;
  GPBInt32Array *preposeArray;
  GPBInt32Array *billTypeArray;
  NSString *welfareName;
  NSMutableArray *awardsArray;
  NSString *redirectURL;
  NSString *remark;
  GPBInt32Array *rangeIdsArray;
  int64_t triggerNum;
  int64_t numLimit;
  int64_t skipId;
  int64_t validityStartTime;
  int64_t validityEndTime;
  int64_t numOfReceived;
  int64_t totalNum;
} PB3ConfWelfare__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "group",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_Group,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relativeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_RelativeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, relativeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "triggerNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_TriggerNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, triggerNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "triggerType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_TriggerType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, triggerType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "triggerRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_TriggerRate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, triggerRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "numLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_NumLimit,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, numLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "preposeArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_PreposeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, preposeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "billTypeArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_BillTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, billTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "skipId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_SkipId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, skipId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "welfareName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_WelfareName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, welfareName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_CountNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, countNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfNewAwardCustomAward),
        .number = PB3ConfWelfare_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_GiftId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_GiftNum,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_LotteryId,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, lotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "redirect",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_Redirect,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, redirect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "redirectURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_RedirectURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, redirectURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_Remark,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "triggerNumRepeated",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_TriggerNumRepeated,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, triggerNumRepeated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "validityStartTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_ValidityStartTime,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, validityStartTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "validityEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_ValidityEndTime,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, validityEndTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "numOfReceived",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_NumOfReceived,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, numOfReceived),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_TotalNum,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, totalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dayOrWeekNumLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_DayOrWeekNumLimit,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, dayOrWeekNumLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rangeIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfWelfare_FieldNumber_RangeIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfWelfare__storage_, rangeIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfWelfare class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfWelfare__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\023\010\241!!\000\026Q\000\027O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfRelPuzzle

@implementation PB3ConfRelPuzzle

@dynamic relPuzzleId;
@dynamic line;
@dynamic numsArray, numsArray_Count;

typedef struct PB3ConfRelPuzzle__storage_ {
  uint32_t _has_storage_[1];
  int32_t relPuzzleId;
  int32_t line;
  GPBInt32Array *numsArray;
} PB3ConfRelPuzzle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relPuzzleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfRelPuzzle_FieldNumber_RelPuzzleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfRelPuzzle__storage_, relPuzzleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "line",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfRelPuzzle_FieldNumber_Line,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfRelPuzzle__storage_, line),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "numsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfRelPuzzle_FieldNumber_NumsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfRelPuzzle__storage_, numsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfRelPuzzle class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfRelPuzzle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3Puzzle

@implementation PB3Puzzle

@dynamic puzzleId;
@dynamic linesArray, linesArray_Count;
@dynamic finished;

typedef struct PB3Puzzle__storage_ {
  uint32_t _has_storage_[1];
  int32_t puzzleId;
  NSMutableArray *linesArray;
} PB3Puzzle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "puzzleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3Puzzle_FieldNumber_PuzzleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3Puzzle__storage_, puzzleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "linesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfRelPuzzle),
        .number = PB3Puzzle_FieldNumber_LinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3Puzzle__storage_, linesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "finished",
        .dataTypeSpecific.className = NULL,
        .number = PB3Puzzle_FieldNumber_Finished,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3Puzzle class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3Puzzle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfPuzzle

@implementation PB3ConfPuzzle

@dynamic puzzleId;
@dynamic name;
@dynamic relId;
@dynamic startTime;
@dynamic endTime;
@dynamic confRelPuzzleArray, confRelPuzzleArray_Count;
@dynamic giftId;

typedef struct PB3ConfPuzzle__storage_ {
  uint32_t _has_storage_[1];
  int32_t puzzleId;
  int32_t relId;
  int32_t giftId;
  NSString *name;
  NSMutableArray *confRelPuzzleArray;
  int64_t startTime;
  int64_t endTime;
} PB3ConfPuzzle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "puzzleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPuzzle_FieldNumber_PuzzleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfPuzzle__storage_, puzzleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPuzzle_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfPuzzle__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPuzzle_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfPuzzle__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPuzzle_FieldNumber_StartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfPuzzle__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPuzzle_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfPuzzle__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "confRelPuzzleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfRelPuzzle),
        .number = PB3ConfPuzzle_FieldNumber_ConfRelPuzzleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfPuzzle__storage_, confRelPuzzleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPuzzle_FieldNumber_GiftId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfPuzzle__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfPuzzle class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfPuzzle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfLotteryPoint

@implementation PB3ConfLotteryPoint

@dynamic point;
@dynamic rate, rate_Count;
@dynamic confLuckId;
@dynamic corrects, corrects_Count;

typedef struct PB3ConfLotteryPoint__storage_ {
  uint32_t _has_storage_[1];
  int32_t point;
  int32_t confLuckId;
  GPBInt32Int32Dictionary *rate;
  GPBInt32Int32Dictionary *corrects;
} PB3ConfLotteryPoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLotteryPoint_FieldNumber_Point,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfLotteryPoint__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLotteryPoint_FieldNumber_Rate,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfLotteryPoint__storage_, rate),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confLuckId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLotteryPoint_FieldNumber_ConfLuckId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfLotteryPoint__storage_, confLuckId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "corrects",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLotteryPoint_FieldNumber_Corrects,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfLotteryPoint__storage_, corrects),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfLotteryPoint class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfLotteryPoint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LotteryAward

@implementation PB3LotteryAward

@dynamic lotteryAwardId;
@dynamic lotteryAwardName;
@dynamic showRate;
@dynamic weight;
@dynamic startTime;
@dynamic endTime;
@dynamic awardsArray, awardsArray_Count;
@dynamic tips;

typedef struct PB3LotteryAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t lotteryAwardId;
  int32_t showRate;
  int32_t weight;
  NSString *lotteryAwardName;
  NSMutableArray *awardsArray;
  NSString *tips;
  int64_t startTime;
  int64_t endTime;
} PB3LotteryAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lotteryAwardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryAward_FieldNumber_LotteryAwardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, lotteryAwardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lotteryAwardName",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryAward_FieldNumber_LotteryAwardName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, lotteryAwardName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryAward_FieldNumber_ShowRate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, showRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryAward_FieldNumber_Weight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryAward_FieldNumber_StartTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryAward_FieldNumber_EndTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfNewAwardCustomAward),
        .number = PB3LotteryAward_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = PB3LotteryAward_FieldNumber_Tips,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LotteryAward__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LotteryAward class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LotteryAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AssignItem

@implementation PB3AssignItem

@dynamic id_p;
@dynamic num;

typedef struct PB3AssignItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t num;
} PB3AssignItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3AssignItem_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AssignItem__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3AssignItem_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AssignItem__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AssignItem class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AssignItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfLottery

@implementation PB3ConfLottery

@dynamic confId;
@dynamic name;
@dynamic relId;
@dynamic getNumType;
@dynamic assignId;
@dynamic assignNum;
@dynamic pointListArray, pointListArray_Count;
@dynamic awardPoolArray, awardPoolArray_Count;
@dynamic assignItemsArray, assignItemsArray_Count;
@dynamic luckyLimit;
@dynamic luckyReset;

typedef struct PB3ConfLottery__storage_ {
  uint32_t _has_storage_[1];
  int32_t confId;
  int32_t relId;
  int32_t getNumType;
  int32_t assignId;
  int32_t assignNum;
  int32_t luckyLimit;
  int32_t luckyReset;
  NSString *name;
  NSMutableArray *pointListArray;
  NSMutableArray *awardPoolArray;
  NSMutableArray *assignItemsArray;
} PB3ConfLottery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "getNumType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_GetNumType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, getNumType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assignId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_AssignId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, assignId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assignNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_AssignNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, assignNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfLotteryPoint),
        .number = PB3ConfLottery_FieldNumber_PointListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, pointListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "awardPoolArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LotteryAward),
        .number = PB3ConfLottery_FieldNumber_AwardPoolArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, awardPoolArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "assignItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AssignItem),
        .number = PB3ConfLottery_FieldNumber_AssignItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, assignItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "luckyLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_LuckyLimit,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, luckyLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "luckyReset",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfLottery_FieldNumber_LuckyReset,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfLottery__storage_, luckyReset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfLottery class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfLottery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfBlindLottery

@implementation PB3ConfBlindLottery

@dynamic confId;
@dynamic name;
@dynamic relId;
@dynamic getNumType;
@dynamic awardPoolArray, awardPoolArray_Count;
@dynamic assignItemsArray, assignItemsArray_Count;

typedef struct PB3ConfBlindLottery__storage_ {
  uint32_t _has_storage_[1];
  int32_t confId;
  int32_t relId;
  int32_t getNumType;
  NSString *name;
  NSMutableArray *awardPoolArray;
  NSMutableArray *assignItemsArray;
} PB3ConfBlindLottery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfBlindLottery_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfBlindLottery__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfBlindLottery_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfBlindLottery__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfBlindLottery_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfBlindLottery__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "getNumType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfBlindLottery_FieldNumber_GetNumType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfBlindLottery__storage_, getNumType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardPoolArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LotteryAward),
        .number = PB3ConfBlindLottery_FieldNumber_AwardPoolArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfBlindLottery__storage_, awardPoolArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "assignItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3AssignItem),
        .number = PB3ConfBlindLottery_FieldNumber_AssignItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfBlindLottery__storage_, assignItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfBlindLottery class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfBlindLottery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfVoteList

@implementation PB3ConfVoteList

@dynamic id_p;
@dynamic relId;
@dynamic name;
@dynamic type;
@dynamic voteCate;
@dynamic byVoterNum;
@dynamic rateEachNum;
@dynamic voteNum;
@dynamic startTime;
@dynamic endTime;

typedef struct PB3ConfVoteList__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t relId;
  int32_t type;
  int32_t voteCate;
  int32_t byVoterNum;
  int32_t rateEachNum;
  int32_t voteNum;
  NSString *name;
  int64_t startTime;
  int64_t endTime;
} PB3ConfVoteList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voteCate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_VoteCate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, voteCate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "byVoterNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_ByVoterNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, byVoterNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rateEachNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_RateEachNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, rateEachNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voteNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_VoteNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, voteNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_StartTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteList_FieldNumber_EndTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ConfVoteList__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfVoteList class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfVoteList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfVoteAward

@implementation PB3ConfVoteAward

@dynamic id_p;
@dynamic actId;
@dynamic name;
@dynamic relIdArray, relIdArray_Count;
@dynamic num;

typedef struct PB3ConfVoteAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t actId;
  int32_t num;
  NSString *name;
  GPBInt32Array *relIdArray;
} PB3ConfVoteAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteAward_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfVoteAward__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteAward_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfVoteAward__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteAward_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfVoteAward__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteAward_FieldNumber_RelIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfVoteAward__storage_, relIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfVoteAward_FieldNumber_Num,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfVoteAward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfVoteAward class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfVoteAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfVote

@implementation PB3ConfVote

@dynamic listArray, listArray_Count;
@dynamic awardsArray, awardsArray_Count;

typedef struct PB3ConfVote__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
  NSMutableArray *awardsArray;
} PB3ConfVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfVoteList),
        .number = PB3ConfVote_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfVote__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfVoteAward),
        .number = PB3ConfVote_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfVote__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfVote class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfVote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfCultivateAward

@implementation PB3ConfCultivateAward

@dynamic id_p;
@dynamic name;
@dynamic relId;
@dynamic cycle;
@dynamic startDot;
@dynamic endDot;
@dynamic giftListArray, giftListArray_Count;

typedef struct PB3ConfCultivateAward__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t relId;
  int32_t cycle;
  NSString *name;
  GPBInt32Array *giftListArray;
  int64_t startDot;
  int64_t endDot;
} PB3ConfCultivateAward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivateAward_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfCultivateAward__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivateAward_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfCultivateAward__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivateAward_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfCultivateAward__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycle",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivateAward_FieldNumber_Cycle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfCultivateAward__storage_, cycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startDot",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivateAward_FieldNumber_StartDot,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfCultivateAward__storage_, startDot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endDot",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivateAward_FieldNumber_EndDot,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfCultivateAward__storage_, endDot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivateAward_FieldNumber_GiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfCultivateAward__storage_, giftListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfCultivateAward class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfCultivateAward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfCultivate

@implementation PB3ConfCultivate

@dynamic relId;
@dynamic cultivateName;
@dynamic mostLevel;
@dynamic cycle;
@dynamic cycleLevel;
@dynamic cycleLevelType;
@dynamic awardsArray, awardsArray_Count;

typedef struct PB3ConfCultivate__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t mostLevel;
  int32_t cycle;
  int32_t cycleLevel;
  int32_t cycleLevelType;
  NSString *cultivateName;
  NSMutableArray *awardsArray;
} PB3ConfCultivate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivate_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfCultivate__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cultivateName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivate_FieldNumber_CultivateName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfCultivate__storage_, cultivateName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mostLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivate_FieldNumber_MostLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfCultivate__storage_, mostLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycle",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivate_FieldNumber_Cycle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfCultivate__storage_, cycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycleLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivate_FieldNumber_CycleLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfCultivate__storage_, cycleLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycleLevelType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCultivate_FieldNumber_CycleLevelType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfCultivate__storage_, cycleLevelType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfCultivateAward),
        .number = PB3ConfCultivate_FieldNumber_AwardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfCultivate__storage_, awardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfCultivate class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfCultivate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GoldBackRanking

@implementation PB3GoldBackRanking

@dynamic minRank;
@dynamic maxRank;
@dynamic num;

typedef struct PB3GoldBackRanking__storage_ {
  uint32_t _has_storage_[1];
  int32_t minRank;
  int32_t maxRank;
  int32_t num;
} PB3GoldBackRanking__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackRanking_FieldNumber_MinRank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GoldBackRanking__storage_, minRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxRank",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackRanking_FieldNumber_MaxRank,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GoldBackRanking__storage_, maxRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoldBackRanking_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GoldBackRanking__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GoldBackRanking class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GoldBackRanking__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfGoldBack

@implementation PB3ConfGoldBack

@dynamic id_p;
@dynamic name;
@dynamic relId;
@dynamic rankArray, rankArray_Count;
@dynamic maxGold;

typedef struct PB3ConfGoldBack__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t relId;
  NSString *name;
  NSMutableArray *rankArray;
  int64_t maxGold;
} PB3ConfGoldBack__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGoldBack_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfGoldBack__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGoldBack_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfGoldBack__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGoldBack_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfGoldBack__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rankArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3GoldBackRanking),
        .number = PB3ConfGoldBack_FieldNumber_RankArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfGoldBack__storage_, rankArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxGold",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfGoldBack_FieldNumber_MaxGold,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfGoldBack__storage_, maxGold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfGoldBack class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfGoldBack__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CompoundAsset

@implementation PB3CompoundAsset

@dynamic assetId;
@dynamic assetNum;
@dynamic rate;
@dynamic assetName;
@dynamic assetImageURL;

typedef struct PB3CompoundAsset__storage_ {
  uint32_t _has_storage_[1];
  int32_t assetId;
  int32_t assetNum;
  int32_t rate;
  NSString *assetName;
  NSString *assetImageURL;
} PB3CompoundAsset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundAsset_FieldNumber_AssetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CompoundAsset__storage_, assetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundAsset_FieldNumber_AssetNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CompoundAsset__storage_, assetNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundAsset_FieldNumber_Rate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CompoundAsset__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundAsset_FieldNumber_AssetName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CompoundAsset__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assetImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundAsset_FieldNumber_AssetImageURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CompoundAsset__storage_, assetImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CompoundAsset class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CompoundAsset__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\005\245\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FailAsset

@implementation PB3FailAsset

@dynamic id_p;
@dynamic assetId;
@dynamic assetNum;
@dynamic cycle;
@dynamic minRate;
@dynamic group;
@dynamic assetName;
@dynamic assetImageURL;

typedef struct PB3FailAsset__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t assetId;
  int32_t assetNum;
  int32_t cycle;
  int32_t minRate;
  int32_t group;
  NSString *assetName;
  NSString *assetImageURL;
} PB3FailAsset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_AssetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, assetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_AssetNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, assetNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cycle",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_Cycle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, cycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_MinRate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, minRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "group",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_Group,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_AssetName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assetImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3FailAsset_FieldNumber_AssetImageURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3FailAsset__storage_, assetImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FailAsset class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FailAsset__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\005\245\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CompoundFormula

@implementation PB3CompoundFormula

@dynamic assetId;
@dynamic compoundRate;
@dynamic minNum;
@dynamic maxNum;
@dynamic failDeductNum;
@dynamic cliRate;
@dynamic assetName;
@dynamic assetImageURL;

typedef struct PB3CompoundFormula__storage_ {
  uint32_t _has_storage_[1];
  int32_t assetId;
  int32_t compoundRate;
  int32_t minNum;
  int32_t maxNum;
  int32_t failDeductNum;
  int32_t cliRate;
  NSString *assetName;
  NSString *assetImageURL;
} PB3CompoundFormula__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_AssetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, assetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "compoundRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_CompoundRate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, compoundRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_MinNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, minNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_MaxNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, maxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "failDeductNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_FailDeductNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, failDeductNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cliRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_CliRate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, cliRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_AssetName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assetImageURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3CompoundFormula_FieldNumber_AssetImageURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3CompoundFormula__storage_, assetImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CompoundFormula class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CompoundFormula__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\005\245\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LimitActData

@implementation PB3LimitActData

@dynamic limitNum;
@dynamic limitRange;
@dynamic useNum;
@dynamic limitCycle;

typedef struct PB3LimitActData__storage_ {
  uint32_t _has_storage_[1];
  int32_t limitNum;
  int32_t limitRange;
  int32_t useNum;
  int32_t limitCycle;
} PB3LimitActData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "limitNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitActData_FieldNumber_LimitNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LimitActData__storage_, limitNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limitRange",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitActData_FieldNumber_LimitRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LimitActData__storage_, limitRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "useNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitActData_FieldNumber_UseNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LimitActData__storage_, useNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limitCycle",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitActData_FieldNumber_LimitCycle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LimitActData__storage_, limitCycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LimitActData class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LimitActData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfCompound

@implementation PB3ConfCompound

@dynamic id_p;
@dynamic name;
@dynamic relId;
@dynamic successAssetArray, successAssetArray_Count;
@dynamic compoundFormulaArray, compoundFormulaArray_Count;
@dynamic failAssetArray, failAssetArray_Count;
@dynamic limitsArray, limitsArray_Count;

typedef struct PB3ConfCompound__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t relId;
  NSString *name;
  NSMutableArray *successAssetArray;
  NSMutableArray *compoundFormulaArray;
  NSMutableArray *failAssetArray;
  NSMutableArray *limitsArray;
} PB3ConfCompound__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCompound_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfCompound__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCompound_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfCompound__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCompound_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfCompound__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "successAssetArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CompoundAsset),
        .number = PB3ConfCompound_FieldNumber_SuccessAssetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfCompound__storage_, successAssetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "compoundFormulaArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CompoundFormula),
        .number = PB3ConfCompound_FieldNumber_CompoundFormulaArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfCompound__storage_, compoundFormulaArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "failAssetArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3FailAsset),
        .number = PB3ConfCompound_FieldNumber_FailAssetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfCompound__storage_, failAssetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "limitsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LimitActData),
        .number = PB3ConfCompound_FieldNumber_LimitsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfCompound__storage_, limitsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfCompound class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfCompound__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LogCompound

@implementation PB3LogCompound

@dynamic relId;
@dynamic compoundId;
@dynamic playerId;
@dynamic usedAssetArray, usedAssetArray_Count;
@dynamic compoundAssetArray, compoundAssetArray_Count;
@dynamic consumeAssetArray, consumeAssetArray_Count;
@dynamic status;
@dynamic rate;
@dynamic created;
@dynamic cliRate;

typedef struct PB3LogCompound__storage_ {
  uint32_t _has_storage_[1];
  int32_t relId;
  int32_t compoundId;
  int32_t rate;
  int32_t cliRate;
  NSMutableArray *usedAssetArray;
  NSMutableArray *compoundAssetArray;
  NSMutableArray *consumeAssetArray;
  int64_t playerId;
  int64_t created;
} PB3LogCompound__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCompound_FieldNumber_RelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "compoundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCompound_FieldNumber_CompoundId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, compoundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCompound_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usedAssetArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CompoundAsset),
        .number = PB3LogCompound_FieldNumber_UsedAssetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, usedAssetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "compoundAssetArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CompoundAsset),
        .number = PB3LogCompound_FieldNumber_CompoundAssetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, compoundAssetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consumeAssetArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CompoundAsset),
        .number = PB3LogCompound_FieldNumber_ConsumeAssetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, consumeAssetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCompound_FieldNumber_Status,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCompound_FieldNumber_Rate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCompound_FieldNumber_Created,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cliRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3LogCompound_FieldNumber_CliRate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3LogCompound__storage_, cliRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LogCompound class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LogCompound__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\n\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfCard

@implementation PB3ConfCard

@dynamic id_p;
@dynamic name;
@dynamic relId;
@dynamic confDrawCardId;
@dynamic type;
@dynamic rate;
@dynamic picture;
@dynamic tips;

typedef struct PB3ConfCard__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t relId;
  int32_t confDrawCardId;
  int32_t type;
  int32_t rate;
  NSString *name;
  NSString *picture;
  NSString *tips;
} PB3ConfCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confDrawCardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_ConfDrawCardId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, confDrawCardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_Rate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_Picture,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfCard_FieldNumber_Tips,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfCard__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfCard class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfDrawCard

@implementation PB3ConfDrawCard

@dynamic id_p;
@dynamic name;
@dynamic relId;
@dynamic consumeType;
@dynamic consumeNum;
@dynamic gainNum;
@dynamic total;
@dynamic usable;
@dynamic cardsArray, cardsArray_Count;
@dynamic sumCardRate;

typedef struct PB3ConfDrawCard__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t relId;
  int32_t consumeType;
  int32_t consumeNum;
  int32_t gainNum;
  int32_t total;
  int32_t usable;
  int32_t sumCardRate;
  NSString *name;
  NSMutableArray *cardsArray;
} PB3ConfDrawCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_RelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "consumeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_ConsumeType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, consumeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "consumeNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_ConsumeNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, consumeNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gainNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_GainNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, gainNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_Total,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "usable",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_Usable,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, usable),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfCard),
        .number = PB3ConfDrawCard_FieldNumber_CardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, cardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sumCardRate",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDrawCard_FieldNumber_SumCardRate,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfDrawCard__storage_, sumCardRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfDrawCard class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfDrawCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserStintConfig

@implementation PB3UserStintConfig

@dynamic stintType;
@dynamic wealthLevel;
@dynamic operation;
@dynamic charmLevel;
@dynamic bindPhone;
@dynamic verified;
@dynamic maxParticipate;
@dynamic maxWinning;
@dynamic roomIdArray, roomIdArray_Count;
@dynamic cpType;

typedef struct PB3UserStintConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t stintType;
  int32_t wealthLevel;
  int32_t operation;
  int32_t charmLevel;
  int32_t bindPhone;
  int32_t verified;
  int32_t maxParticipate;
  int32_t maxWinning;
  int32_t cpType;
  GPBInt64Array *roomIdArray;
} PB3UserStintConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stintType",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_StintType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, stintType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_WealthLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "operation",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_Operation,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, operation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_CharmLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bindPhone",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_BindPhone,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, bindPhone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "verified",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_Verified,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, verified),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxParticipate",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_MaxParticipate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, maxParticipate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxWinning",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_MaxWinning,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, maxWinning),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_RoomIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, roomIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cpType",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStintConfig_FieldNumber_CpType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3UserStintConfig__storage_, cpType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserStintConfig class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserStintConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfUserStint

@implementation PB3ConfUserStint

@dynamic confId;
@dynamic name;
@dynamic youngModel;
@dynamic configListArray, configListArray_Count;

typedef struct PB3ConfUserStint__storage_ {
  uint32_t _has_storage_[1];
  int32_t confId;
  int32_t youngModel;
  NSString *name;
  NSMutableArray *configListArray;
} PB3ConfUserStint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfUserStint_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfUserStint__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfUserStint_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfUserStint__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "youngModel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfUserStint_FieldNumber_YoungModel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfUserStint__storage_, youngModel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "configListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserStintConfig),
        .number = PB3ConfUserStint_FieldNumber_ConfigListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfUserStint__storage_, configListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfUserStint class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfUserStint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UserStint

@implementation PB3UserStint

@dynamic actId;
@dynamic relId;
@dynamic confId;
@dynamic hasConfUserStint, confUserStint;

typedef struct PB3UserStint__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relId;
  int32_t confId;
  PB3ConfUserStint *confUserStint;
} PB3UserStint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStint_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UserStint__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStint_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UserStint__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UserStint_FieldNumber_ConfId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3UserStint__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confUserStint",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfUserStint),
        .number = PB3UserStint_FieldNumber_ConfUserStint,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3UserStint__storage_, confUserStint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UserStint class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UserStint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfTreasure

@implementation PB3ConfTreasure

@dynamic id_p;
@dynamic actId;
@dynamic relActId;
@dynamic name;
@dynamic durationTime;
@dynamic waitTime;
@dynamic giftId;
@dynamic giftNum;

typedef struct PB3ConfTreasure__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t actId;
  int32_t relActId;
  int32_t giftId;
  int32_t giftNum;
  NSString *name;
  int64_t durationTime;
  int64_t waitTime;
} PB3ConfTreasure__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_RelActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "durationTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_DurationTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, durationTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "waitTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_WaitTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, waitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_GiftId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasure_FieldNumber_GiftNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfTreasure__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfTreasure class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfTreasure__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfTreasureGift

@implementation PB3ConfTreasureGift

@dynamic id_p;
@dynamic name;
@dynamic treasureId;
@dynamic prizeId;
@dynamic giftMaxNum;
@dynamic poolSize;
@dynamic playerBetMaxNum;
@dynamic weight;
@dynamic actId;
@dynamic relActId;

typedef struct PB3ConfTreasureGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t treasureId;
  int32_t prizeId;
  int32_t giftMaxNum;
  int32_t poolSize;
  int32_t playerBetMaxNum;
  int32_t weight;
  int32_t actId;
  int32_t relActId;
  NSString *name;
} PB3ConfTreasureGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_TreasureId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_PrizeId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftMaxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_GiftMaxNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, giftMaxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "poolSize",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_PoolSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, poolSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerBetMaxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_PlayerBetMaxNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, playerBetMaxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_Weight,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_ActId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfTreasureGift_FieldNumber_RelActId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ConfTreasureGift__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfTreasureGift class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfTreasureGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfActFormCarrier

@implementation PB3ConfActFormCarrier

@dynamic id_p;
@dynamic name;
@dynamic actId;
@dynamic relActId;
@dynamic formId;
@dynamic verify;
@dynamic status;
@dynamic startTime;
@dynamic endTime;

typedef struct PB3ConfActFormCarrier__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t actId;
  int32_t relActId;
  int32_t formId;
  int32_t verify;
  int32_t status;
  NSString *name;
  int64_t startTime;
  int64_t endTime;
} PB3ConfActFormCarrier__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_ActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_RelActId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "formId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_FormId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, formId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "verify",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_Verify,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, verify),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_StartTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfActFormCarrier_FieldNumber_EndTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfActFormCarrier__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfActFormCarrier class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfActFormCarrier__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CardProgressReq

@implementation PB3CardProgressReq

@dynamic activityId;
@dynamic relActivityId;
@dynamic playerId;

typedef struct PB3CardProgressReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
  int64_t playerId;
} PB3CardProgressReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardProgressReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CardProgressReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardProgressReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CardProgressReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardProgressReq_FieldNumber_PlayerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CardProgressReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CardProgressReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CardProgressReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CardGift

@implementation PB3CardGift

@dynamic taskId;
@dynamic giftIdArray, giftIdArray_Count;
@dynamic giftNum;
@dynamic point;

typedef struct PB3CardGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t taskId;
  GPBInt32Array *giftIdArray;
  int64_t giftNum;
  int64_t point;
} PB3CardGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardGift_FieldNumber_TaskId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CardGift__storage_, taskId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardGift_FieldNumber_GiftIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CardGift__storage_, giftIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardGift_FieldNumber_GiftNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CardGift__storage_, giftNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardGift_FieldNumber_Point,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CardGift__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CardGift class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CardGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CardProgressRes

@implementation PB3CardProgressRes

@dynamic pointTotal;
@dynamic pointExtra;
@dynamic giftArray, giftArray_Count;

typedef struct PB3CardProgressRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *giftArray;
  int64_t pointTotal;
  int64_t pointExtra;
} PB3CardProgressRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pointTotal",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardProgressRes_FieldNumber_PointTotal,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CardProgressRes__storage_, pointTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pointExtra",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardProgressRes_FieldNumber_PointExtra,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CardProgressRes__storage_, pointExtra),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CardGift),
        .number = PB3CardProgressRes_FieldNumber_GiftArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CardProgressRes__storage_, giftArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CardProgressRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CardProgressRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetActivityReq

@implementation PB3GetActivityReq

@dynamic actId;
@dynamic confsArray, confsArray_Count;
@dynamic playerId;

typedef struct PB3GetActivityReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  GPBEnumArray *confsArray;
  int64_t playerId;
} PB3GetActivityReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetActivityReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetActivityReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "confsArray",
        .dataTypeSpecific.enumDescFunc = PB3ActivityConfType_EnumDescriptor,
        .number = PB3GetActivityReq_FieldNumber_ConfsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityReq__storage_, confsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetActivityReq_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetActivityReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetActivityReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetActivityReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetActivityRes

@implementation PB3GetActivityRes

@dynamic activityArray, activityArray_Count;
@dynamic welfareArray, welfareArray_Count;
@dynamic confPuzzleArray, confPuzzleArray_Count;
@dynamic lotteryArray, lotteryArray_Count;
@dynamic hasVote, vote;
@dynamic cultivateArray, cultivateArray_Count;
@dynamic hasNewAward, newAward;
@dynamic goldBackArray, goldBackArray_Count;
@dynamic compoundArray, compoundArray_Count;
@dynamic drawCardArray, drawCardArray_Count;
@dynamic lottery2Array, lottery2Array_Count;
@dynamic userStintArray, userStintArray_Count;
@dynamic confTreasureListArray, confTreasureListArray_Count;
@dynamic confTreasureGiftListArray, confTreasureGiftListArray_Count;
@dynamic confActFormCarrierArray, confActFormCarrierArray_Count;
@dynamic confSummaryListArray, confSummaryListArray_Count;
@dynamic confServerLotteryArray, confServerLotteryArray_Count;
@dynamic blindLotteryArray, blindLotteryArray_Count;
@dynamic confDefendPetsArray, confDefendPetsArray_Count;
@dynamic confPetBattleArray, confPetBattleArray_Count;
@dynamic hasPlayer, player;
@dynamic hasClan, clan;
@dynamic hasServerTimestamp, serverTimestamp;

typedef struct PB3GetActivityRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *activityArray;
  NSMutableArray *welfareArray;
  NSMutableArray *confPuzzleArray;
  NSMutableArray *lotteryArray;
  PB3ConfVote *vote;
  NSMutableArray *cultivateArray;
  PB3ConfNewAward *newAward;
  NSMutableArray *goldBackArray;
  NSMutableArray *compoundArray;
  NSMutableArray *drawCardArray;
  NSMutableArray *lottery2Array;
  NSMutableArray *userStintArray;
  NSMutableArray *confTreasureListArray;
  NSMutableArray *confTreasureGiftListArray;
  NSMutableArray *confActFormCarrierArray;
  NSMutableArray *confSummaryListArray;
  NSMutableArray *confServerLotteryArray;
  NSMutableArray *blindLotteryArray;
  NSMutableArray *confDefendPetsArray;
  NSMutableArray *confPetBattleArray;
  PB3Player *player;
  PB3ClanInfo *clan;
  PB3ServerTimestamp *serverTimestamp;
} PB3GetActivityRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Activity),
        .number = PB3GetActivityRes_FieldNumber_ActivityArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, activityArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "welfareArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfWelfare),
        .number = PB3GetActivityRes_FieldNumber_WelfareArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, welfareArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confPuzzleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfPuzzle),
        .number = PB3GetActivityRes_FieldNumber_ConfPuzzleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confPuzzleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lotteryArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfLottery),
        .number = PB3GetActivityRes_FieldNumber_LotteryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, lotteryArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "vote",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfVote),
        .number = PB3GetActivityRes_FieldNumber_Vote,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cultivateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfCultivate),
        .number = PB3GetActivityRes_FieldNumber_CultivateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, cultivateArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newAward",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfNewAward),
        .number = PB3GetActivityRes_FieldNumber_NewAward,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, newAward),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "goldBackArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfGoldBack),
        .number = PB3GetActivityRes_FieldNumber_GoldBackArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, goldBackArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "compoundArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfCompound),
        .number = PB3GetActivityRes_FieldNumber_CompoundArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, compoundArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "drawCardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfDrawCard),
        .number = PB3GetActivityRes_FieldNumber_DrawCardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, drawCardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lottery2Array",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfLottery),
        .number = PB3GetActivityRes_FieldNumber_Lottery2Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, lottery2Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userStintArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3UserStint),
        .number = PB3GetActivityRes_FieldNumber_UserStintArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, userStintArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confTreasureListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfTreasure),
        .number = PB3GetActivityRes_FieldNumber_ConfTreasureListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confTreasureListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confTreasureGiftListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfTreasureGift),
        .number = PB3GetActivityRes_FieldNumber_ConfTreasureGiftListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confTreasureGiftListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confActFormCarrierArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfActFormCarrier),
        .number = PB3GetActivityRes_FieldNumber_ConfActFormCarrierArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confActFormCarrierArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confSummaryListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfSummary),
        .number = PB3GetActivityRes_FieldNumber_ConfSummaryListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confSummaryListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confServerLotteryArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfServerLottery),
        .number = PB3GetActivityRes_FieldNumber_ConfServerLotteryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confServerLotteryArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blindLotteryArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfBlindLottery),
        .number = PB3GetActivityRes_FieldNumber_BlindLotteryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, blindLotteryArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confDefendPetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfDefendPets),
        .number = PB3GetActivityRes_FieldNumber_ConfDefendPetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confDefendPetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confPetBattleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ConfPetBattle),
        .number = PB3GetActivityRes_FieldNumber_ConfPetBattleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, confPetBattleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "player",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3Player),
        .number = PB3GetActivityRes_FieldNumber_Player,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, player),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clan",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClanInfo),
        .number = PB3GetActivityRes_FieldNumber_Clan,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, clan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "serverTimestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ServerTimestamp),
        .number = PB3GetActivityRes_FieldNumber_ServerTimestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetActivityRes__storage_, serverTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetActivityRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetActivityRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfPetBattle

@implementation PB3ConfPetBattle

@dynamic id_p;
@dynamic actId;
@dynamic relActId;
@dynamic revengeRelActId;
@dynamic battleName;
@dynamic changePetCost;
@dynamic battleCostItemId;
@dynamic pkCostNum;
@dynamic revengeCostNum;
@dynamic revengeProbability;

typedef struct PB3ConfPetBattle__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t actId;
  int32_t relActId;
  int32_t revengeRelActId;
  int32_t changePetCost;
  int32_t battleCostItemId;
  int32_t pkCostNum;
  int32_t revengeCostNum;
  int32_t revengeProbability;
  NSString *battleName;
} PB3ConfPetBattle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_ActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_RelActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "revengeRelActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_RevengeRelActId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, revengeRelActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "battleName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_BattleName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, battleName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "changePetCost",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_ChangePetCost,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, changePetCost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "battleCostItemId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_BattleCostItemId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, battleCostItemId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pkCostNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_PkCostNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, pkCostNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "revengeCostNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_RevengeCostNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, revengeCostNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "revengeProbability",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfPetBattle_FieldNumber_RevengeProbability,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ConfPetBattle__storage_, revengeProbability),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfPetBattle class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfPetBattle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfDefendPets

@implementation PB3ConfDefendPets

@dynamic id_p;
@dynamic name;
@dynamic petImage;
@dynamic petAnimation;
@dynamic prop;
@dynamic desc;
@dynamic restraintDesc;

typedef struct PB3ConfDefendPets__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t prop;
  NSString *name;
  NSString *petImage;
  NSString *petAnimation;
  NSString *desc;
  NSString *restraintDesc;
} PB3ConfDefendPets__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDefendPets_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfDefendPets__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDefendPets_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfDefendPets__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "petImage",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDefendPets_FieldNumber_PetImage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfDefendPets__storage_, petImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "petAnimation",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDefendPets_FieldNumber_PetAnimation,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfDefendPets__storage_, petAnimation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prop",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDefendPets_FieldNumber_Prop,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfDefendPets__storage_, prop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDefendPets_FieldNumber_Desc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfDefendPets__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "restraintDesc",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfDefendPets_FieldNumber_RestraintDesc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfDefendPets__storage_, restraintDesc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfDefendPets class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfDefendPets__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfSummary

@implementation PB3ConfSummary

@dynamic id_p;
@dynamic name;
@dynamic actId;
@dynamic relId;
@dynamic startTime;
@dynamic endTime;
@dynamic year;

typedef struct PB3ConfSummary__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t actId;
  int32_t relId;
  int32_t year;
  NSString *name;
  int64_t startTime;
  int64_t endTime;
} PB3ConfSummary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfSummary_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfSummary__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfSummary_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfSummary__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfSummary_FieldNumber_ActId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfSummary__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfSummary_FieldNumber_RelId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ConfSummary__storage_, relId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfSummary_FieldNumber_StartTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ConfSummary__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfSummary_FieldNumber_EndTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ConfSummary__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "year",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfSummary_FieldNumber_Year,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3ConfSummary__storage_, year),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfSummary class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfSummary__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityRoomSubInfoReq

@implementation PB3ActivityRoomSubInfoReq

@dynamic activityId;
@dynamic relActivityId;

typedef struct PB3ActivityRoomSubInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActivityId;
} PB3ActivityRoomSubInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityRoomSubInfoReq_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityRoomSubInfoReq__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActivityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityRoomSubInfoReq_FieldNumber_RelActivityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityRoomSubInfoReq__storage_, relActivityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityRoomSubInfoReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityRoomSubInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityRoomSubInfoRes

@implementation PB3ActivityRoomSubInfoRes

@dynamic sort;
@dynamic num;

typedef struct PB3ActivityRoomSubInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int64_t sort;
  int64_t num;
} PB3ActivityRoomSubInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityRoomSubInfoRes_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityRoomSubInfoRes__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityRoomSubInfoRes_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityRoomSubInfoRes__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityRoomSubInfoRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityRoomSubInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NoticeActivity

@implementation PB3NoticeActivity

@dynamic type;
@dynamic actIdArray, actIdArray_Count;

typedef struct PB3NoticeActivity__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  GPBInt32Array *actIdArray;
} PB3NoticeActivity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeActivity_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NoticeActivity__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3NoticeActivity_FieldNumber_ActIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3NoticeActivity__storage_, actIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NoticeActivity class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NoticeActivity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GoodNumListReq

@implementation PB3GoodNumListReq

@dynamic playerId;

typedef struct PB3GoodNumListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3GoodNumListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoodNumListReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GoodNumListReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GoodNumListReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GoodNumListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GoodNumListRes

@implementation PB3GoodNumListRes

@dynamic listArray, listArray_Count;
@dynamic used;
@dynamic num;
@dynamic playerName;
@dynamic playerIcon;
@dynamic playerId;

typedef struct PB3GoodNumListRes__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *listArray;
  NSString *playerName;
  NSString *playerIcon;
  int64_t used;
  int64_t num;
  int64_t playerId;
} PB3GoodNumListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoodNumListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3GoodNumListRes__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "used",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoodNumListRes_FieldNumber_Used,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GoodNumListRes__storage_, used),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoodNumListRes_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GoodNumListRes__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoodNumListRes_FieldNumber_PlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GoodNumListRes__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoodNumListRes_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GoodNumListRes__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3GoodNumListRes_FieldNumber_PlayerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GoodNumListRes__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GoodNumListRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GoodNumListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyGoodNumSlotReq

@implementation PB3BuyGoodNumSlotReq


typedef struct PB3BuyGoodNumSlotReq__storage_ {
  uint32_t _has_storage_[1];
} PB3BuyGoodNumSlotReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyGoodNumSlotReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BuyGoodNumSlotReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BuyGoodNumSlotRes

@implementation PB3BuyGoodNumSlotRes


typedef struct PB3BuyGoodNumSlotRes__storage_ {
  uint32_t _has_storage_[1];
} PB3BuyGoodNumSlotRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BuyGoodNumSlotRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BuyGoodNumSlotRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UseGoodNumReq

@implementation PB3UseGoodNumReq

@dynamic num;

typedef struct PB3UseGoodNumReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t num;
} PB3UseGoodNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3UseGoodNumReq_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UseGoodNumReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UseGoodNumReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UseGoodNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UseGoodNumRes

@implementation PB3UseGoodNumRes


typedef struct PB3UseGoodNumRes__storage_ {
  uint32_t _has_storage_[1];
} PB3UseGoodNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UseGoodNumRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3UseGoodNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelGoodNumReq

@implementation PB3DelGoodNumReq

@dynamic numsArray, numsArray_Count;

typedef struct PB3DelGoodNumReq__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *numsArray;
} PB3DelGoodNumReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "numsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelGoodNumReq_FieldNumber_NumsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DelGoodNumReq__storage_, numsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelGoodNumReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelGoodNumReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DelGoodNumRes

@implementation PB3DelGoodNumRes


typedef struct PB3DelGoodNumRes__storage_ {
  uint32_t _has_storage_[1];
} PB3DelGoodNumRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelGoodNumRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3DelGoodNumRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawEventRewardBoxReq

@implementation PB3DrawEventRewardBoxReq

@dynamic actId;
@dynamic relActId;
@dynamic roomId;
@dynamic boxId;
@dynamic boxNum;

typedef struct PB3DrawEventRewardBoxReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t boxId;
  int32_t boxNum;
  int64_t roomId;
} PB3DrawEventRewardBoxReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxReq_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxId",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxReq_FieldNumber_BoxId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxReq__storage_, boxId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxReq_FieldNumber_BoxNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxReq__storage_, boxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawEventRewardBoxReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawEventRewardBoxReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3EventBoxReward

@implementation PB3EventBoxReward

@dynamic prizeId;
@dynamic num;
@dynamic type;
@dynamic unit;
@dynamic awardId;

typedef struct PB3EventBoxReward__storage_ {
  uint32_t _has_storage_[1];
  int32_t prizeId;
  int32_t num;
  int32_t type;
  int32_t awardId;
  NSString *unit;
} PB3EventBoxReward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prizeId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EventBoxReward_FieldNumber_PrizeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3EventBoxReward__storage_, prizeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3EventBoxReward_FieldNumber_Num,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3EventBoxReward__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3EventBoxReward_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3EventBoxReward__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PB3EventBoxReward_FieldNumber_Unit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3EventBoxReward__storage_, unit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "awardId",
        .dataTypeSpecific.className = NULL,
        .number = PB3EventBoxReward_FieldNumber_AwardId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3EventBoxReward__storage_, awardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3EventBoxReward class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3EventBoxReward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DrawEventRewardBoxRes

@implementation PB3DrawEventRewardBoxRes

@dynamic rewardListArray, rewardListArray_Count;
@dynamic curHitTimes;
@dynamic maxHitTimes;
@dynamic maxHitPlayerName;
@dynamic isNewRecord;
@dynamic desc;

typedef struct PB3DrawEventRewardBoxRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t curHitTimes;
  int32_t maxHitTimes;
  int32_t isNewRecord;
  NSMutableArray *rewardListArray;
  NSString *maxHitPlayerName;
  NSString *desc;
} PB3DrawEventRewardBoxRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EventBoxReward),
        .number = PB3DrawEventRewardBoxRes_FieldNumber_RewardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxRes__storage_, rewardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "curHitTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxRes_FieldNumber_CurHitTimes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxRes__storage_, curHitTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxHitTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxRes_FieldNumber_MaxHitTimes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxRes__storage_, maxHitTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxHitPlayerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxRes_FieldNumber_MaxHitPlayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxRes__storage_, maxHitPlayerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isNewRecord",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxRes_FieldNumber_IsNewRecord,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxRes__storage_, isNewRecord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3DrawEventRewardBoxRes_FieldNumber_Desc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DrawEventRewardBoxRes__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DrawEventRewardBoxRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DrawEventRewardBoxRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TriggerEventRewardBoxReq

@implementation PB3TriggerEventRewardBoxReq

@dynamic actId;
@dynamic relActId;

typedef struct PB3TriggerEventRewardBoxReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
} PB3TriggerEventRewardBoxReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TriggerEventRewardBoxReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TriggerEventRewardBoxReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TriggerEventRewardBoxReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TriggerEventRewardBoxReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TriggerEventRewardBoxReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TriggerEventRewardBoxReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TriggerEventRewardBoxRes

@implementation PB3TriggerEventRewardBoxRes

@dynamic rewardListArray, rewardListArray_Count;

typedef struct PB3TriggerEventRewardBoxRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rewardListArray;
} PB3TriggerEventRewardBoxRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3EventBoxReward),
        .number = PB3TriggerEventRewardBoxRes_FieldNumber_RewardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TriggerEventRewardBoxRes__storage_, rewardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TriggerEventRewardBoxRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TriggerEventRewardBoxRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ConfServerLottery

@implementation PB3ConfServerLottery

@dynamic actId;
@dynamic relActId;
@dynamic lotteryIdListArray, lotteryIdListArray_Count;
@dynamic luckyPoint;
@dynamic awardListArray, awardListArray_Count;

typedef struct PB3ConfServerLottery__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t luckyPoint;
  GPBInt32Array *lotteryIdListArray;
  NSMutableArray *awardListArray;
} PB3ConfServerLottery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfServerLottery_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ConfServerLottery__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfServerLottery_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ConfServerLottery__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lotteryIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfServerLottery_FieldNumber_LotteryIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfServerLottery__storage_, lotteryIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "luckyPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3ConfServerLottery_FieldNumber_LuckyPoint,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ConfServerLottery__storage_, luckyPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "awardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3LotteryAward),
        .number = PB3ConfServerLottery_FieldNumber_AwardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ConfServerLottery__storage_, awardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ConfServerLottery class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ConfServerLottery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OnTimeWelfareData

@implementation PB3OnTimeWelfareData

@dynamic confId;
@dynamic welfareName;
@dynamic welfareDes;
@dynamic relateLotteryId;
@dynamic iosPicURL;
@dynamic androidPicURL;
@dynamic routerURL;
@dynamic timeColor;
@dynamic beginTime;
@dynamic endTime;
@dynamic isShowWidget;
@dynamic actId;
@dynamic relActId;
@dynamic isShowRouterURL;

typedef struct PB3OnTimeWelfareData__storage_ {
  uint32_t _has_storage_[1];
  int32_t relateLotteryId;
  int32_t beginTime;
  int32_t endTime;
  int32_t isShowWidget;
  int32_t actId;
  int32_t relActId;
  int32_t isShowRouterURL;
  NSString *welfareName;
  NSString *welfareDes;
  NSString *iosPicURL;
  NSString *androidPicURL;
  NSString *routerURL;
  NSString *timeColor;
  int64_t confId;
} PB3OnTimeWelfareData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "welfareName",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_WelfareName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, welfareName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "welfareDes",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_WelfareDes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, welfareDes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relateLotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_RelateLotteryId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, relateLotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "iosPicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_IosPicURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, iosPicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidPicURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_AndroidPicURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, androidPicURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_RouterURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_TimeColor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, timeColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_BeginTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, beginTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_EndTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isShowWidget",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_IsShowWidget,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, isShowWidget),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_ActId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_RelActId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isShowRouterURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3OnTimeWelfareData_FieldNumber_IsShowRouterURL,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareData__storage_, isShowRouterURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OnTimeWelfareData class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OnTimeWelfareData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\005\003\243\241!!\000\006\007\243\241!!\000\007\006\241!!\000\016\002\244\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindOnTimeWelfareConfReq

@implementation PB3FindOnTimeWelfareConfReq

@dynamic confId;

typedef struct PB3FindOnTimeWelfareConfReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t confId;
} PB3FindOnTimeWelfareConfReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindOnTimeWelfareConfReq_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindOnTimeWelfareConfReq__storage_, confId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindOnTimeWelfareConfReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindOnTimeWelfareConfReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindOnTimeWelfareConfRes

@implementation PB3FindOnTimeWelfareConfRes

@dynamic confListArray, confListArray_Count;

typedef struct PB3FindOnTimeWelfareConfRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *confListArray;
} PB3FindOnTimeWelfareConfRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OnTimeWelfareData),
        .number = PB3FindOnTimeWelfareConfRes_FieldNumber_ConfListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindOnTimeWelfareConfRes__storage_, confListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindOnTimeWelfareConfRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindOnTimeWelfareConfRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OnTimeWelfareStart

@implementation PB3OnTimeWelfareStart

@dynamic hasStartConf, startConf;

typedef struct PB3OnTimeWelfareStart__storage_ {
  uint32_t _has_storage_[1];
  PB3OnTimeWelfareData *startConf;
} PB3OnTimeWelfareStart__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startConf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3OnTimeWelfareData),
        .number = PB3OnTimeWelfareStart_FieldNumber_StartConf,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OnTimeWelfareStart__storage_, startConf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OnTimeWelfareStart class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OnTimeWelfareStart__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayAnnualGameReq

@implementation PB3PlayAnnualGameReq

@dynamic actId;
@dynamic relActId;
@dynamic boxId;
@dynamic hitTimes;
@dynamic isOver;

typedef struct PB3PlayAnnualGameReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t actId;
  int32_t relActId;
  int32_t boxId;
  int32_t hitTimes;
  int32_t isOver;
} PB3PlayAnnualGameReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayAnnualGameReq_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayAnnualGameReq__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayAnnualGameReq_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayAnnualGameReq__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boxId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayAnnualGameReq_FieldNumber_BoxId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayAnnualGameReq__storage_, boxId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hitTimes",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayAnnualGameReq_FieldNumber_HitTimes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayAnnualGameReq__storage_, hitTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isOver",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayAnnualGameReq_FieldNumber_IsOver,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayAnnualGameReq__storage_, isOver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayAnnualGameReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayAnnualGameReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayAnnualGameRes

@implementation PB3PlayAnnualGameRes


typedef struct PB3PlayAnnualGameRes__storage_ {
  uint32_t _has_storage_[1];
} PB3PlayAnnualGameRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayAnnualGameRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PlayAnnualGameRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CardTask

@implementation PB3CardTask

@dynamic taskId;
@dynamic taskName;
@dynamic progress;
@dynamic total;

typedef struct PB3CardTask__storage_ {
  uint32_t _has_storage_[1];
  int32_t taskId;
  int32_t progress;
  int32_t total;
  NSString *taskName;
} PB3CardTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardTask_FieldNumber_TaskId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CardTask__storage_, taskId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "taskName",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardTask_FieldNumber_TaskName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CardTask__storage_, taskName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "progress",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardTask_FieldNumber_Progress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CardTask__storage_, progress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PB3CardTask_FieldNumber_Total,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CardTask__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CardTask class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CardTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListCardTaskReq

@implementation PB3ListCardTaskReq

@dynamic playerId;

typedef struct PB3ListCardTaskReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3ListCardTaskReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCardTaskReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListCardTaskReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListCardTaskReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListCardTaskReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ListCardTaskRes

@implementation PB3ListCardTaskRes

@dynamic tasksArray, tasksArray_Count;
@dynamic score;
@dynamic entryURL;
@dynamic isShow;
@dynamic title;

typedef struct PB3ListCardTaskRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tasksArray;
  NSString *entryURL;
  NSString *title;
  int64_t score;
} PB3ListCardTaskRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tasksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CardTask),
        .number = PB3ListCardTaskRes_FieldNumber_TasksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ListCardTaskRes__storage_, tasksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCardTaskRes_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ListCardTaskRes__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "entryURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCardTaskRes_FieldNumber_EntryURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ListCardTaskRes__storage_, entryURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCardTaskRes_FieldNumber_IsShow,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3ListCardTaskRes_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ListCardTaskRes__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ListCardTaskRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ListCardTaskRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CpPlayerInfo

@implementation PB3CpPlayerInfo

@dynamic id_p;
@dynamic id2;
@dynamic name;
@dynamic icon;

typedef struct PB3CpPlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *icon;
  int64_t id_p;
  int64_t id2;
} PB3CpPlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPlayerInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CpPlayerInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id2",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPlayerInfo_FieldNumber_Id2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CpPlayerInfo__storage_, id2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPlayerInfo_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CpPlayerInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3CpPlayerInfo_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3CpPlayerInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CpPlayerInfo class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CpPlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCpPublicNoticeReq

@implementation PB3FindCpPublicNoticeReq


typedef struct PB3FindCpPublicNoticeReq__storage_ {
  uint32_t _has_storage_[1];
} PB3FindCpPublicNoticeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpPublicNoticeReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3FindCpPublicNoticeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3FindCpPublicNoticeRes

@implementation PB3FindCpPublicNoticeRes

@dynamic playersArray, playersArray_Count;
@dynamic countdown;
@dynamic countdownColor;
@dynamic bgURL;
@dynamic pcBgURL;
@dynamic status;

typedef struct PB3FindCpPublicNoticeRes__storage_ {
  uint32_t _has_storage_[1];
  PB3CpPublicNoticeStatus status;
  NSMutableArray *playersArray;
  NSString *countdownColor;
  NSString *bgURL;
  NSString *pcBgURL;
  int64_t countdown;
} PB3FindCpPublicNoticeRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CpPlayerInfo),
        .number = PB3FindCpPublicNoticeRes_FieldNumber_PlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3FindCpPublicNoticeRes__storage_, playersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "countdown",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpPublicNoticeRes_FieldNumber_Countdown,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3FindCpPublicNoticeRes__storage_, countdown),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "countdownColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpPublicNoticeRes_FieldNumber_CountdownColor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3FindCpPublicNoticeRes__storage_, countdownColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpPublicNoticeRes_FieldNumber_BgURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3FindCpPublicNoticeRes__storage_, bgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pcBgURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3FindCpPublicNoticeRes_FieldNumber_PcBgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3FindCpPublicNoticeRes__storage_, pcBgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3CpPublicNoticeStatus_EnumDescriptor,
        .number = PB3FindCpPublicNoticeRes_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3FindCpPublicNoticeRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3FindCpPublicNoticeRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3FindCpPublicNoticeRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\002\241!!\000\005\002\242\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3FindCpPublicNoticeRes_Status_RawValue(PB3FindCpPublicNoticeRes *message) {
  GPBDescriptor *descriptor = [PB3FindCpPublicNoticeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindCpPublicNoticeRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3FindCpPublicNoticeRes_Status_RawValue(PB3FindCpPublicNoticeRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3FindCpPublicNoticeRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3FindCpPublicNoticeRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CheckPromoterRecallUpdateReq

@implementation PB3CheckPromoterRecallUpdateReq


typedef struct PB3CheckPromoterRecallUpdateReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CheckPromoterRecallUpdateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckPromoterRecallUpdateReq class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CheckPromoterRecallUpdateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CheckPromoterRecallUpdateRes

@implementation PB3CheckPromoterRecallUpdateRes

@dynamic newTaskNum;
@dynamic currentTaskNum;

typedef struct PB3CheckPromoterRecallUpdateRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t newTaskNum;
  int32_t currentTaskNum;
} PB3CheckPromoterRecallUpdateRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "newTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckPromoterRecallUpdateRes_FieldNumber_NewTaskNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CheckPromoterRecallUpdateRes__storage_, newTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currentTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3CheckPromoterRecallUpdateRes_FieldNumber_CurrentTaskNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CheckPromoterRecallUpdateRes__storage_, currentTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CheckPromoterRecallUpdateRes class]
                                     rootClass:[PB3ActivityCliExtRoot class]
                                          file:PB3ActivityCliExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CheckPromoterRecallUpdateRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
