// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/show.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/ShowExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3ShowExtRoot

@implementation PB3ShowExtRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3ShowExtRoot_FileDescriptor

static GPBFileDescriptor *PB3ShowExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3ShowType

GPBEnumDescriptor *PB3ShowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ShowTypeNone\000ShowTypeSinger\000ShowTypeInte"
        "raction\000";
    static const int32_t values[] = {
        PB3ShowType_ShowTypeNone,
        PB3ShowType_ShowTypeSinger,
        PB3ShowType_ShowTypeInteraction,
    };
    static const char *extraTextFormatInfo = "\003\000\014\000\001\016\000\002\023\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ShowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ShowType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ShowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ShowType_ShowTypeNone:
    case PB3ShowType_ShowTypeSinger:
    case PB3ShowType_ShowTypeInteraction:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ShowSongStatus

GPBEnumDescriptor *PB3ShowSongStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SssEnd\000SssPlay\000SssPause\000";
    static const int32_t values[] = {
        PB3ShowSongStatus_SssEnd,
        PB3ShowSongStatus_SssPlay,
        PB3ShowSongStatus_SssPause,
    };
    static const char *extraTextFormatInfo = "\003\000c\203\000\001c\204\000\002c\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ShowSongStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ShowSongStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ShowSongStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ShowSongStatus_SssEnd:
    case PB3ShowSongStatus_SssPlay:
    case PB3ShowSongStatus_SssPause:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ShowLyricActType

GPBEnumDescriptor *PB3ShowLyricActType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ShowStop\000ShowPlay\000ShowPause\000ShowPrev\000Sho"
        "wNext\000";
    static const int32_t values[] = {
        PB3ShowLyricActType_ShowStop,
        PB3ShowLyricActType_ShowPlay,
        PB3ShowLyricActType_ShowPause,
        PB3ShowLyricActType_ShowPrev,
        PB3ShowLyricActType_ShowNext,
    };
    static const char *extraTextFormatInfo = "\005\000\010\000\001\010\000\002\t\000\003\010\000\004\010\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ShowLyricActType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ShowLyricActType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ShowLyricActType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ShowLyricActType_ShowStop:
    case PB3ShowLyricActType_ShowPlay:
    case PB3ShowLyricActType_ShowPause:
    case PB3ShowLyricActType_ShowPrev:
    case PB3ShowLyricActType_ShowNext:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ShowDoubleTarget

GPBEnumDescriptor *PB3ShowDoubleTarget_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SdtRoomPlayer\000SdtRoom\000SdtPlayer\000";
    static const int32_t values[] = {
        PB3ShowDoubleTarget_SdtRoomPlayer,
        PB3ShowDoubleTarget_SdtRoom,
        PB3ShowDoubleTarget_SdtPlayer,
    };
    static const char *extraTextFormatInfo = "\003\000c\204\206\000\001c\204\000\002c\206\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ShowDoubleTarget)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ShowDoubleTarget_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ShowDoubleTarget_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ShowDoubleTarget_SdtRoomPlayer:
    case PB3ShowDoubleTarget_SdtRoom:
    case PB3ShowDoubleTarget_SdtPlayer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ShowOrderType

GPBEnumDescriptor *PB3ShowOrderType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SotNone\000SotBomb\000SotSpeak\000SotSong\000SotChor"
        "us\000SotConfession\000SotInteraction\000SotCoque"
        "try\000";
    static const int32_t values[] = {
        PB3ShowOrderType_SotNone,
        PB3ShowOrderType_SotBomb,
        PB3ShowOrderType_SotSpeak,
        PB3ShowOrderType_SotSong,
        PB3ShowOrderType_SotChorus,
        PB3ShowOrderType_SotConfession,
        PB3ShowOrderType_SotInteraction,
        PB3ShowOrderType_SotCoquetry,
    };
    static const char *extraTextFormatInfo = "\010\000c\204\000\001c\204\000\002c\205\000\003c\204\000\004c\206\000\005c\212\000\006c\213\000\007c\210\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ShowOrderType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ShowOrderType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ShowOrderType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ShowOrderType_SotNone:
    case PB3ShowOrderType_SotBomb:
    case PB3ShowOrderType_SotSpeak:
    case PB3ShowOrderType_SotSong:
    case PB3ShowOrderType_SotChorus:
    case PB3ShowOrderType_SotConfession:
    case PB3ShowOrderType_SotInteraction:
    case PB3ShowOrderType_SotCoquetry:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3OptBossTaskType

GPBEnumDescriptor *PB3OptBossTaskType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ObttNone\000ObttDelete\000ObttUpper\000ObttTop\000";
    static const int32_t values[] = {
        PB3OptBossTaskType_ObttNone,
        PB3OptBossTaskType_ObttDelete,
        PB3OptBossTaskType_ObttUpper,
        PB3OptBossTaskType_ObttTop,
    };
    static const char *extraTextFormatInfo = "\004\000d\204\000\001d\206\000\002d\205\000\003d\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3OptBossTaskType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3OptBossTaskType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3OptBossTaskType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3OptBossTaskType_ObttNone:
    case PB3OptBossTaskType_ObttDelete:
    case PB3OptBossTaskType_ObttUpper:
    case PB3OptBossTaskType_ObttTop:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3ShowInfoReq

@implementation PB3ShowInfoReq


typedef struct PB3ShowInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowInfoReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowInfoRes

@implementation PB3ShowInfoRes

@dynamic showType;
@dynamic hasSongInfo, songInfo;
@dynamic hasInteractionInfo, interactionInfo;

typedef struct PB3ShowInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowType showType;
  PB3ShowSongInfo *songInfo;
  PB3ShowInteractionRes *interactionInfo;
} PB3ShowInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showType",
        .dataTypeSpecific.enumDescFunc = PB3ShowType_EnumDescriptor,
        .number = PB3ShowInfoRes_FieldNumber_ShowType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowInfoRes__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "songInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowSongInfo),
        .number = PB3ShowInfoRes_FieldNumber_SongInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowInfoRes__storage_, songInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interactionInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowInteractionRes),
        .number = PB3ShowInfoRes_FieldNumber_InteractionInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowInfoRes__storage_, interactionInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowInfoRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ShowInfoRes_ShowType_RawValue(PB3ShowInfoRes *message) {
  GPBDescriptor *descriptor = [PB3ShowInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowInfoRes_FieldNumber_ShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowInfoRes_ShowType_RawValue(PB3ShowInfoRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowInfoRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowInfoRes_FieldNumber_ShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowSongInfo

@implementation PB3ShowSongInfo

@dynamic song;
@dynamic singer;
@dynamic lyric;
@dynamic playTime;
@dynamic status;
@dynamic songTime;

typedef struct PB3ShowSongInfo__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowSongStatus status;
  NSString *song;
  NSString *singer;
  NSString *lyric;
  int64_t playTime;
  int64_t songTime;
} PB3ShowSongInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "song",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongInfo_FieldNumber_Song,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowSongInfo__storage_, song),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singer",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongInfo_FieldNumber_Singer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowSongInfo__storage_, singer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lyric",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongInfo_FieldNumber_Lyric,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowSongInfo__storage_, lyric),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongInfo_FieldNumber_PlayTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowSongInfo__storage_, playTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ShowSongStatus_EnumDescriptor,
        .number = PB3ShowSongInfo_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ShowSongInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "songTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongInfo_FieldNumber_SongTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ShowSongInfo__storage_, songTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowSongInfo class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowSongInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ShowSongInfo_Status_RawValue(PB3ShowSongInfo *message) {
  GPBDescriptor *descriptor = [PB3ShowSongInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowSongInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowSongInfo_Status_RawValue(PB3ShowSongInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowSongInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowSongInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowInteractionReq

@implementation PB3ShowInteractionReq

@dynamic title;
@dynamic desc;

typedef struct PB3ShowInteractionReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *desc;
} PB3ShowInteractionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionReq_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowInteractionReq__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionReq_FieldNumber_Desc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowInteractionReq__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowInteractionReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowInteractionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowInteractionRes

@implementation PB3ShowInteractionRes

@dynamic title;
@dynamic desc;

typedef struct PB3ShowInteractionRes__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *desc;
} PB3ShowInteractionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionRes_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowInteractionRes__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionRes_FieldNumber_Desc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowInteractionRes__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowInteractionRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowInteractionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowSearchSongUrl

@implementation PB3ShowSearchSongUrl

@dynamic method;
@dynamic URL;
@dynamic argsKv, argsKv_Count;
@dynamic headerKv, headerKv_Count;
@dynamic platform;

typedef struct PB3ShowSearchSongUrl__storage_ {
  uint32_t _has_storage_[1];
  NSString *method;
  NSString *URL;
  NSMutableDictionary *argsKv;
  NSMutableDictionary *headerKv;
  NSString *platform;
} PB3ShowSearchSongUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "method",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSearchSongUrl_FieldNumber_Method,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongUrl__storage_, method),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSearchSongUrl_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongUrl__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "argsKv",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSearchSongUrl_FieldNumber_ArgsKv,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongUrl__storage_, argsKv),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headerKv",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSearchSongUrl_FieldNumber_HeaderKv,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongUrl__storage_, headerKv),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSearchSongUrl_FieldNumber_Platform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongUrl__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowSearchSongUrl class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowSearchSongUrl__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowSearchSongReq

@implementation PB3ShowSearchSongReq

@dynamic song;
@dynamic singer;

typedef struct PB3ShowSearchSongReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *song;
  NSString *singer;
} PB3ShowSearchSongReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "song",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSearchSongReq_FieldNumber_Song,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongReq__storage_, song),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singer",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSearchSongReq_FieldNumber_Singer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongReq__storage_, singer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowSearchSongReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowSearchSongReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowSearchSongRes

@implementation PB3ShowSearchSongRes

@dynamic songsURLArray, songsURLArray_Count;

typedef struct PB3ShowSearchSongRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *songsURLArray;
} PB3ShowSearchSongRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "songsURLArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowSearchSongUrl),
        .number = PB3ShowSearchSongRes_FieldNumber_SongsURLArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowSearchSongRes__storage_, songsURLArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowSearchSongRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowSearchSongRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000songs_url\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowSongListInfo

@implementation PB3ShowSongListInfo

@dynamic songId;
@dynamic songMid;
@dynamic song;
@dynamic singer;
@dynamic platform;
@dynamic songTime;

typedef struct PB3ShowSongListInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t songTime;
  NSString *songId;
  NSString *songMid;
  NSString *song;
  NSString *singer;
  NSString *platform;
} PB3ShowSongListInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "songId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongListInfo_FieldNumber_SongId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowSongListInfo__storage_, songId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "songMid",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongListInfo_FieldNumber_SongMid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowSongListInfo__storage_, songMid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "song",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongListInfo_FieldNumber_Song,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowSongListInfo__storage_, song),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singer",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongListInfo_FieldNumber_Singer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowSongListInfo__storage_, singer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongListInfo_FieldNumber_Platform,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ShowSongListInfo__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "songTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowSongListInfo_FieldNumber_SongTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ShowSongListInfo__storage_, songTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowSongListInfo class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowSongListInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowParseSongList

@implementation PB3ShowParseSongList

@dynamic platform;
@dynamic songListHTTPBody;

typedef struct PB3ShowParseSongList__storage_ {
  uint32_t _has_storage_[1];
  NSString *platform;
  NSString *songListHTTPBody;
} PB3ShowParseSongList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowParseSongList_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowParseSongList__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "songListHTTPBody",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowParseSongList_FieldNumber_SongListHTTPBody,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowParseSongList__storage_, songListHTTPBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowParseSongList class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowParseSongList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\004\244\241!!!\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowParseSongListReq

@implementation PB3ShowParseSongListReq

@dynamic songBodyListArray, songBodyListArray_Count;

typedef struct PB3ShowParseSongListReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *songBodyListArray;
} PB3ShowParseSongListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "songBodyListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowParseSongList),
        .number = PB3ShowParseSongListReq_FieldNumber_SongBodyListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowParseSongListReq__storage_, songBodyListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowParseSongListReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowParseSongListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowParseSongListRes

@implementation PB3ShowParseSongListRes

@dynamic songListArray, songListArray_Count;

typedef struct PB3ShowParseSongListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *songListArray;
} PB3ShowParseSongListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "songListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowSongListInfo),
        .number = PB3ShowParseSongListRes_FieldNumber_SongListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowParseSongListRes__storage_, songListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowParseSongListRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowParseSongListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowGetLyricUrlReq

@implementation PB3ShowGetLyricUrlReq

@dynamic songId;
@dynamic songMid;
@dynamic platform;

typedef struct PB3ShowGetLyricUrlReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *songId;
  NSString *songMid;
  NSString *platform;
} PB3ShowGetLyricUrlReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "songId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowGetLyricUrlReq_FieldNumber_SongId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowGetLyricUrlReq__storage_, songId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "songMid",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowGetLyricUrlReq_FieldNumber_SongMid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowGetLyricUrlReq__storage_, songMid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowGetLyricUrlReq_FieldNumber_Platform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowGetLyricUrlReq__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowGetLyricUrlReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowGetLyricUrlReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowGetLyricUrlRes

@implementation PB3ShowGetLyricUrlRes

@dynamic hasLyricURL, lyricURL;

typedef struct PB3ShowGetLyricUrlRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowSearchSongUrl *lyricURL;
} PB3ShowGetLyricUrlRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lyricURL",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowSearchSongUrl),
        .number = PB3ShowGetLyricUrlRes_FieldNumber_LyricURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowGetLyricUrlRes__storage_, lyricURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowGetLyricUrlRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowGetLyricUrlRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowParseLyricReq

@implementation PB3ShowParseLyricReq

@dynamic platform;
@dynamic lyricHTTPBody;

typedef struct PB3ShowParseLyricReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *platform;
  NSString *lyricHTTPBody;
} PB3ShowParseLyricReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowParseLyricReq_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowParseLyricReq__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lyricHTTPBody",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowParseLyricReq_FieldNumber_LyricHTTPBody,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowParseLyricReq__storage_, lyricHTTPBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowParseLyricReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowParseLyricReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\005\241!!!\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowParseLyricRes

@implementation PB3ShowParseLyricRes

@dynamic lyric;
@dynamic songTime;

typedef struct PB3ShowParseLyricRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t songTime;
  NSString *lyric;
} PB3ShowParseLyricRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lyric",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowParseLyricRes_FieldNumber_Lyric,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowParseLyricRes__storage_, lyric),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "songTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowParseLyricRes_FieldNumber_SongTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowParseLyricRes__storage_, songTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowParseLyricRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowParseLyricRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowPlayLyricReq

@implementation PB3ShowPlayLyricReq

@dynamic songTime;
@dynamic lyric;
@dynamic song;
@dynamic singer;

typedef struct PB3ShowPlayLyricReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t songTime;
  NSString *lyric;
  NSString *song;
  NSString *singer;
} PB3ShowPlayLyricReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "songTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowPlayLyricReq_FieldNumber_SongTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowPlayLyricReq__storage_, songTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "lyric",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowPlayLyricReq_FieldNumber_Lyric,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowPlayLyricReq__storage_, lyric),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "song",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowPlayLyricReq_FieldNumber_Song,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowPlayLyricReq__storage_, song),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "singer",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowPlayLyricReq_FieldNumber_Singer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowPlayLyricReq__storage_, singer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowPlayLyricReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowPlayLyricReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowPlayLyricRes

@implementation PB3ShowPlayLyricRes


typedef struct PB3ShowPlayLyricRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowPlayLyricRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowPlayLyricRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowPlayLyricRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowLyricCtrlReq

@implementation PB3ShowLyricCtrlReq

@dynamic act;
@dynamic songPlayTime;

typedef struct PB3ShowLyricCtrlReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowLyricActType act;
  int32_t songPlayTime;
} PB3ShowLyricCtrlReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "act",
        .dataTypeSpecific.enumDescFunc = PB3ShowLyricActType_EnumDescriptor,
        .number = PB3ShowLyricCtrlReq_FieldNumber_Act,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowLyricCtrlReq__storage_, act),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "songPlayTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowLyricCtrlReq_FieldNumber_SongPlayTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowLyricCtrlReq__storage_, songPlayTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowLyricCtrlReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowLyricCtrlReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ShowLyricCtrlReq_Act_RawValue(PB3ShowLyricCtrlReq *message) {
  GPBDescriptor *descriptor = [PB3ShowLyricCtrlReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowLyricCtrlReq_FieldNumber_Act];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowLyricCtrlReq_Act_RawValue(PB3ShowLyricCtrlReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowLyricCtrlReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowLyricCtrlReq_FieldNumber_Act];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowLyricCtrlRes

@implementation PB3ShowLyricCtrlRes

@dynamic act;
@dynamic playTime;
@dynamic status;

typedef struct PB3ShowLyricCtrlRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowLyricActType act;
  PB3ShowSongStatus status;
  int64_t playTime;
} PB3ShowLyricCtrlRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "act",
        .dataTypeSpecific.enumDescFunc = PB3ShowLyricActType_EnumDescriptor,
        .number = PB3ShowLyricCtrlRes_FieldNumber_Act,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowLyricCtrlRes__storage_, act),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowLyricCtrlRes_FieldNumber_PlayTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowLyricCtrlRes__storage_, playTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PB3ShowSongStatus_EnumDescriptor,
        .number = PB3ShowLyricCtrlRes_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowLyricCtrlRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowLyricCtrlRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowLyricCtrlRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ShowLyricCtrlRes_Act_RawValue(PB3ShowLyricCtrlRes *message) {
  GPBDescriptor *descriptor = [PB3ShowLyricCtrlRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowLyricCtrlRes_FieldNumber_Act];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowLyricCtrlRes_Act_RawValue(PB3ShowLyricCtrlRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowLyricCtrlRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowLyricCtrlRes_FieldNumber_Act];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ShowLyricCtrlRes_Status_RawValue(PB3ShowLyricCtrlRes *message) {
  GPBDescriptor *descriptor = [PB3ShowLyricCtrlRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowLyricCtrlRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowLyricCtrlRes_Status_RawValue(PB3ShowLyricCtrlRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowLyricCtrlRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowLyricCtrlRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowConfig

@implementation PB3ShowConfig

@dynamic defaultSpeak;
@dynamic defaultSong;
@dynamic defaultSongDouble;
@dynamic defaultBomb;
@dynamic defaultBombDouble;
@dynamic speakGiftIdsArray, speakGiftIdsArray_Count;
@dynamic songGiftIdsArray, songGiftIdsArray_Count;
@dynamic songDoubleGiftIdsArray, songDoubleGiftIdsArray_Count;
@dynamic bombGiftIdsArray, bombGiftIdsArray_Count;
@dynamic bombDoubleGiftIdsArray, bombDoubleGiftIdsArray_Count;
@dynamic bombAnimationURL;
@dynamic canCancel;
@dynamic bombAnimationTime;
@dynamic defaultAllChair;
@dynamic allChairGiftIdsArray, allChairGiftIdsArray_Count;
@dynamic defaultChorus;
@dynamic defaultChorusDouble;
@dynamic chorusGiftIdsArray, chorusGiftIdsArray_Count;
@dynamic chorusDoubleGiftIdsArray, chorusDoubleGiftIdsArray_Count;

typedef struct PB3ShowConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t defaultSpeak;
  int32_t defaultSong;
  int32_t defaultSongDouble;
  int32_t defaultBomb;
  int32_t defaultBombDouble;
  int32_t bombAnimationTime;
  int32_t defaultAllChair;
  int32_t defaultChorus;
  int32_t defaultChorusDouble;
  GPBInt32Array *speakGiftIdsArray;
  GPBInt32Array *songGiftIdsArray;
  GPBInt32Array *songDoubleGiftIdsArray;
  GPBInt32Array *bombGiftIdsArray;
  GPBInt32Array *bombDoubleGiftIdsArray;
  NSString *bombAnimationURL;
  GPBInt32Array *allChairGiftIdsArray;
  GPBInt32Array *chorusGiftIdsArray;
  GPBInt32Array *chorusDoubleGiftIdsArray;
} PB3ShowConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "defaultSpeak",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultSpeak,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultSpeak),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultSong",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultSong,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultSong),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultSongDouble",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultSongDouble,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultSongDouble),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultBomb",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultBomb,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultBomb),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultBombDouble",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultBombDouble,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultBombDouble),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "speakGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_SpeakGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, speakGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "songGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_SongGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, songGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "songDoubleGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_SongDoubleGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, songDoubleGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_BombGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, bombGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombDoubleGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_BombDoubleGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, bombDoubleGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombAnimationURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_BombAnimationURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, bombAnimationURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "canCancel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_CanCancel,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bombAnimationTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_BombAnimationTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, bombAnimationTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultAllChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultAllChair,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultAllChair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allChairGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_AllChairGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, allChairGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultChorus",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultChorus,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultChorus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultChorusDouble",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_DefaultChorusDouble,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, defaultChorusDouble),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chorusGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_ChorusGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, chorusGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chorusDoubleGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowConfig_FieldNumber_ChorusDoubleGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowConfig__storage_, chorusDoubleGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowConfig class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\013\004\251\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowInteractionConfig

@implementation PB3ShowInteractionConfig

@dynamic defaultSpeak;
@dynamic defaultBomb;
@dynamic defaultBombDouble;
@dynamic speakGiftIdsArray, speakGiftIdsArray_Count;
@dynamic singleGiftIdsArray, singleGiftIdsArray_Count;
@dynamic singleDoubleGiftIdsArray, singleDoubleGiftIdsArray_Count;
@dynamic singleAllChairGiftIdsArray, singleAllChairGiftIdsArray_Count;
@dynamic moreGiftIdsArray, moreGiftIdsArray_Count;
@dynamic moreDoubleGiftIdsArray, moreDoubleGiftIdsArray_Count;
@dynamic bombGiftIdsArray, bombGiftIdsArray_Count;
@dynamic bombDoubleGiftIdsArray, bombDoubleGiftIdsArray_Count;
@dynamic bombAnimationURL;
@dynamic bombAnimationTime;

typedef struct PB3ShowInteractionConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t defaultSpeak;
  int32_t defaultBomb;
  int32_t defaultBombDouble;
  int32_t bombAnimationTime;
  GPBInt32Array *speakGiftIdsArray;
  GPBInt32Array *singleGiftIdsArray;
  GPBInt32Array *singleDoubleGiftIdsArray;
  GPBInt32Array *singleAllChairGiftIdsArray;
  GPBInt32Array *moreGiftIdsArray;
  GPBInt32Array *moreDoubleGiftIdsArray;
  GPBInt32Array *bombGiftIdsArray;
  GPBInt32Array *bombDoubleGiftIdsArray;
  NSString *bombAnimationURL;
} PB3ShowInteractionConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "defaultSpeak",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_DefaultSpeak,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, defaultSpeak),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultBomb",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_DefaultBomb,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, defaultBomb),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "defaultBombDouble",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_DefaultBombDouble,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, defaultBombDouble),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "speakGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_SpeakGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, speakGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "singleGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_SingleGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, singleGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "singleDoubleGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_SingleDoubleGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, singleDoubleGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "singleAllChairGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_SingleAllChairGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, singleAllChairGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "moreGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_MoreGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, moreGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "moreDoubleGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_MoreDoubleGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, moreDoubleGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_BombGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, bombGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombDoubleGiftIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_BombDoubleGiftIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, bombDoubleGiftIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombAnimationURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_BombAnimationURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, bombAnimationURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bombAnimationTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowInteractionConfig_FieldNumber_BombAnimationTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ShowInteractionConfig__storage_, bombAnimationTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowInteractionConfig class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowInteractionConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\014\004\251\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowConfigReq

@implementation PB3ShowConfigReq


typedef struct PB3ShowConfigReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowConfigReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowConfigReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowConfigRes

@implementation PB3ShowConfigRes

@dynamic hasConfigs, configs;
@dynamic hasInteractionConfig, interactionConfig;

typedef struct PB3ShowConfigRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowConfig *configs;
  PB3ShowInteractionConfig *interactionConfig;
} PB3ShowConfigRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "configs",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowConfig),
        .number = PB3ShowConfigRes_FieldNumber_Configs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowConfigRes__storage_, configs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interactionConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowInteractionConfig),
        .number = PB3ShowConfigRes_FieldNumber_InteractionConfig,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowConfigRes__storage_, interactionConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowConfigRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowConfigRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RequestingSong

@implementation PB3RequestingSong

@dynamic showType;
@dynamic speakGiftId;
@dynamic songGiftId;
@dynamic songDoubleGiftId;
@dynamic bombGiftId;
@dynamic bombDoubleGiftId;
@dynamic bombClearChair;
@dynamic bombTaskNum;
@dynamic doubleTarget;
@dynamic allDoubleGiftId;
@dynamic hasPriceList, priceList;
@dynamic chorusGiftId;
@dynamic chorusDoubleGiftId;

typedef struct PB3RequestingSong__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowType showType;
  int32_t speakGiftId;
  int32_t songGiftId;
  int32_t songDoubleGiftId;
  int32_t bombGiftId;
  int32_t bombDoubleGiftId;
  int32_t bombClearChair;
  int32_t bombTaskNum;
  PB3ShowDoubleTarget doubleTarget;
  int32_t allDoubleGiftId;
  int32_t chorusGiftId;
  int32_t chorusDoubleGiftId;
  PB3InteractionConfig *priceList;
} PB3RequestingSong__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showType",
        .dataTypeSpecific.enumDescFunc = PB3ShowType_EnumDescriptor,
        .number = PB3RequestingSong_FieldNumber_ShowType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "speakGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_SpeakGiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, speakGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "songGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_SongGiftId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, songGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "songDoubleGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_SongDoubleGiftId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, songDoubleGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_BombGiftId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, bombGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombDoubleGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_BombDoubleGiftId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, bombDoubleGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombClearChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_BombClearChair,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, bombClearChair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bombTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_BombTaskNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, bombTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleTarget",
        .dataTypeSpecific.enumDescFunc = PB3ShowDoubleTarget_EnumDescriptor,
        .number = PB3RequestingSong_FieldNumber_DoubleTarget,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, doubleTarget),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "allDoubleGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_AllDoubleGiftId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, allDoubleGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "priceList",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InteractionConfig),
        .number = PB3RequestingSong_FieldNumber_PriceList,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, priceList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chorusGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_ChorusGiftId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, chorusGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chorusDoubleGiftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RequestingSong_FieldNumber_ChorusDoubleGiftId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3RequestingSong__storage_, chorusDoubleGiftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RequestingSong class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RequestingSong__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RequestingSong_ShowType_RawValue(PB3RequestingSong *message) {
  GPBDescriptor *descriptor = [PB3RequestingSong descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RequestingSong_FieldNumber_ShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RequestingSong_ShowType_RawValue(PB3RequestingSong *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RequestingSong descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RequestingSong_FieldNumber_ShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3RequestingSong_DoubleTarget_RawValue(PB3RequestingSong *message) {
  GPBDescriptor *descriptor = [PB3RequestingSong descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RequestingSong_FieldNumber_DoubleTarget];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RequestingSong_DoubleTarget_RawValue(PB3RequestingSong *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RequestingSong descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RequestingSong_FieldNumber_DoubleTarget];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3InteractionConfig

@implementation PB3InteractionConfig

@dynamic singleListArray, singleListArray_Count;
@dynamic allChairListArray, allChairListArray_Count;

typedef struct PB3InteractionConfig__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *singleListArray;
  NSMutableArray *allChairListArray;
} PB3InteractionConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "singleListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InteractionPrice),
        .number = PB3InteractionConfig_FieldNumber_SingleListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionConfig__storage_, singleListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allChairListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3InteractionPrice),
        .number = PB3InteractionConfig_FieldNumber_AllChairListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3InteractionConfig__storage_, allChairListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionConfig class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InteractionPrice

@implementation PB3InteractionPrice

@dynamic timeMin;
@dynamic singleGift;
@dynamic doubleGift;
@dynamic allChair;
@dynamic isAllChair;

typedef struct PB3InteractionPrice__storage_ {
  uint32_t _has_storage_[1];
  int32_t timeMin;
  int32_t singleGift;
  int32_t doubleGift;
  int32_t allChair;
} PB3InteractionPrice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timeMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionPrice_FieldNumber_TimeMin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InteractionPrice__storage_, timeMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "singleGift",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionPrice_FieldNumber_SingleGift,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InteractionPrice__storage_, singleGift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleGift",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionPrice_FieldNumber_DoubleGift,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3InteractionPrice__storage_, doubleGift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionPrice_FieldNumber_AllChair,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3InteractionPrice__storage_, allChair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAllChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3InteractionPrice_FieldNumber_IsAllChair,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InteractionPrice class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InteractionPrice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetRequestingSongReq

@implementation PB3SetRequestingSongReq

@dynamic hasData_p, data_p;

typedef struct PB3SetRequestingSongReq__storage_ {
  uint32_t _has_storage_[1];
  PB3RequestingSong *data_p;
} PB3SetRequestingSongReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RequestingSong),
        .number = PB3SetRequestingSongReq_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SetRequestingSongReq__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRequestingSongReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SetRequestingSongReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SetRequestingSongRes

@implementation PB3SetRequestingSongRes


typedef struct PB3SetRequestingSongRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SetRequestingSongRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SetRequestingSongRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SetRequestingSongRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RequestingSongReq

@implementation PB3RequestingSongReq


typedef struct PB3RequestingSongReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RequestingSongReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RequestingSongReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RequestingSongReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RequestingSongRes

@implementation PB3RequestingSongRes

@dynamic hasSong, song;
@dynamic hasInteraction, interaction;

typedef struct PB3RequestingSongRes__storage_ {
  uint32_t _has_storage_[1];
  PB3RequestingSong *song;
  PB3RequestingSong *interaction;
} PB3RequestingSongRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "song",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RequestingSong),
        .number = PB3RequestingSongRes_FieldNumber_Song,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RequestingSongRes__storage_, song),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interaction",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RequestingSong),
        .number = PB3RequestingSongRes_FieldNumber_Interaction,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RequestingSongRes__storage_, interaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RequestingSongRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RequestingSongRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowOrderReq

@implementation PB3ShowOrderReq

@dynamic orderType;
@dynamic idsArray, idsArray_Count;
@dynamic singleId;
@dynamic doubleId;
@dynamic isAllChair;
@dynamic supportId;

typedef struct PB3ShowOrderReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowOrderType orderType;
  int32_t singleId;
  int32_t doubleId;
  int32_t supportId;
  GPBInt64Array *idsArray;
} PB3ShowOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderType",
        .dataTypeSpecific.enumDescFunc = PB3ShowOrderType_EnumDescriptor,
        .number = PB3ShowOrderReq_FieldNumber_OrderType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowOrderReq__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "idsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowOrderReq__storage_, idsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "singleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderReq_FieldNumber_SingleId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowOrderReq__storage_, singleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "doubleId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderReq_FieldNumber_DoubleId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowOrderReq__storage_, doubleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isAllChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderReq_FieldNumber_IsAllChair,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "supportId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderReq_FieldNumber_SupportId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3ShowOrderReq__storage_, supportId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowOrderReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ShowOrderReq_OrderType_RawValue(PB3ShowOrderReq *message) {
  GPBDescriptor *descriptor = [PB3ShowOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowOrderReq_FieldNumber_OrderType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowOrderReq_OrderType_RawValue(PB3ShowOrderReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowOrderReq_FieldNumber_OrderType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowOrderRes

@implementation PB3ShowOrderRes


typedef struct PB3ShowOrderRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowOrderRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BossItem

@implementation PB3BossItem

@dynamic id_p;
@dynamic name;
@dynamic icon;
@dynamic createTime;
@dynamic tasksArray, tasksArray_Count;

typedef struct PB3BossItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *icon;
  NSMutableArray *tasksArray;
  int64_t id_p;
  int64_t createTime;
} PB3BossItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3BossItem_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BossItem__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3BossItem_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3BossItem__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PB3BossItem_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3BossItem__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3BossItem_FieldNumber_CreateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3BossItem__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tasksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ShowTask),
        .number = PB3BossItem_FieldNumber_TasksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3BossItem__storage_, tasksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BossItem class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BossItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowTask

@implementation PB3ShowTask

@dynamic id_p;
@dynamic showType;
@dynamic orderType;
@dynamic playerId;
@dynamic name;
@dynamic isAllChair;
@dynamic timeMin;
@dynamic giftId;
@dynamic orderTypeIcon;
@dynamic orderTypeName;

typedef struct PB3ShowTask__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowType showType;
  PB3ShowOrderType orderType;
  int32_t timeMin;
  int32_t giftId;
  NSString *id_p;
  NSString *name;
  NSString *orderTypeIcon;
  NSString *orderTypeName;
  int64_t playerId;
} PB3ShowTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showType",
        .dataTypeSpecific.enumDescFunc = PB3ShowType_EnumDescriptor,
        .number = PB3ShowTask_FieldNumber_ShowType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.enumDescFunc = PB3ShowOrderType_EnumDescriptor,
        .number = PB3ShowTask_FieldNumber_OrderType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_PlayerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAllChair",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_IsAllChair,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_TimeMin,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, timeMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_GiftId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orderTypeIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_OrderTypeIcon,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, orderTypeIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "orderTypeName",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowTask_FieldNumber_OrderTypeName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3ShowTask__storage_, orderTypeName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowTask class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ShowTask_ShowType_RawValue(PB3ShowTask *message) {
  GPBDescriptor *descriptor = [PB3ShowTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowTask_FieldNumber_ShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowTask_ShowType_RawValue(PB3ShowTask *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowTask_FieldNumber_ShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3ShowTask_OrderType_RawValue(PB3ShowTask *message) {
  GPBDescriptor *descriptor = [PB3ShowTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowTask_FieldNumber_OrderType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ShowTask_OrderType_RawValue(PB3ShowTask *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ShowTask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ShowTask_FieldNumber_OrderType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ShowBossListReq

@implementation PB3ShowBossListReq

@dynamic index;

typedef struct PB3ShowBossListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
} PB3ShowBossListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBossListReq_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowBossListReq__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowBossListReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowBossListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowBossListRes

@implementation PB3ShowBossListRes

@dynamic listArray, listArray_Count;
@dynamic nextIndex;

typedef struct PB3ShowBossListRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t nextIndex;
  NSMutableArray *listArray;
} PB3ShowBossListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BossItem),
        .number = PB3ShowBossListRes_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowBossListRes__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowBossListRes_FieldNumber_NextIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowBossListRes__storage_, nextIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowBossListRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowBossListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AdminAddShowBossReq

@implementation PB3AdminAddShowBossReq

@dynamic bossId;
@dynamic orderType;
@dynamic num;
@dynamic idsArray, idsArray_Count;

typedef struct PB3AdminAddShowBossReq__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowOrderType orderType;
  int32_t num;
  GPBInt64Array *idsArray;
  int64_t bossId;
} PB3AdminAddShowBossReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3AdminAddShowBossReq_FieldNumber_BossId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3AdminAddShowBossReq__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "orderType",
        .dataTypeSpecific.enumDescFunc = PB3ShowOrderType_EnumDescriptor,
        .number = PB3AdminAddShowBossReq_FieldNumber_OrderType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3AdminAddShowBossReq__storage_, orderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PB3AdminAddShowBossReq_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3AdminAddShowBossReq__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "idsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3AdminAddShowBossReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3AdminAddShowBossReq__storage_, idsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AdminAddShowBossReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3AdminAddShowBossReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3AdminAddShowBossReq_OrderType_RawValue(PB3AdminAddShowBossReq *message) {
  GPBDescriptor *descriptor = [PB3AdminAddShowBossReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AdminAddShowBossReq_FieldNumber_OrderType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3AdminAddShowBossReq_OrderType_RawValue(PB3AdminAddShowBossReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3AdminAddShowBossReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3AdminAddShowBossReq_FieldNumber_OrderType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3AdminAddShowBossRes

@implementation PB3AdminAddShowBossRes


typedef struct PB3AdminAddShowBossRes__storage_ {
  uint32_t _has_storage_[1];
} PB3AdminAddShowBossRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AdminAddShowBossRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AdminAddShowBossRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OptBossTaskReq

@implementation PB3OptBossTaskReq

@dynamic taskId;
@dynamic optType;
@dynamic bossId;

typedef struct PB3OptBossTaskReq__storage_ {
  uint32_t _has_storage_[1];
  PB3OptBossTaskType optType;
  NSString *taskId;
  int64_t bossId;
} PB3OptBossTaskReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OptBossTaskReq_FieldNumber_TaskId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3OptBossTaskReq__storage_, taskId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "optType",
        .dataTypeSpecific.enumDescFunc = PB3OptBossTaskType_EnumDescriptor,
        .number = PB3OptBossTaskReq_FieldNumber_OptType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3OptBossTaskReq__storage_, optType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bossId",
        .dataTypeSpecific.className = NULL,
        .number = PB3OptBossTaskReq_FieldNumber_BossId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3OptBossTaskReq__storage_, bossId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OptBossTaskReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OptBossTaskReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3OptBossTaskReq_OptType_RawValue(PB3OptBossTaskReq *message) {
  GPBDescriptor *descriptor = [PB3OptBossTaskReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OptBossTaskReq_FieldNumber_OptType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3OptBossTaskReq_OptType_RawValue(PB3OptBossTaskReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3OptBossTaskReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3OptBossTaskReq_FieldNumber_OptType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3OptBossTaskRes

@implementation PB3OptBossTaskRes


typedef struct PB3OptBossTaskRes__storage_ {
  uint32_t _has_storage_[1];
} PB3OptBossTaskRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OptBossTaskRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3OptBossTaskRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BombNotice

@implementation PB3BombNotice

@dynamic showType;

typedef struct PB3BombNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3ShowType showType;
} PB3BombNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showType",
        .dataTypeSpecific.enumDescFunc = PB3ShowType_EnumDescriptor,
        .number = PB3BombNotice_FieldNumber_ShowType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3BombNotice__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BombNotice class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3BombNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3BombNotice_ShowType_RawValue(PB3BombNotice *message) {
  GPBDescriptor *descriptor = [PB3BombNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BombNotice_FieldNumber_ShowType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3BombNotice_ShowType_RawValue(PB3BombNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3BombNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3BombNotice_FieldNumber_ShowType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PlanTaskInfoReq

@implementation PB3PlanTaskInfoReq


typedef struct PB3PlanTaskInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PlanTaskInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlanTaskInfoReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PlanTaskInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlanTaskInfoRes

@implementation PB3PlanTaskInfoRes

@dynamic startTime;
@dynamic endTime;
@dynamic artistNum;
@dynamic minTaskNum;
@dynamic topNum;
@dynamic manualNum;

typedef struct PB3PlanTaskInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t startTime;
  int32_t endTime;
  int32_t artistNum;
  int32_t minTaskNum;
  int32_t topNum;
  int32_t manualNum;
} PB3PlanTaskInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanTaskInfoRes_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlanTaskInfoRes__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanTaskInfoRes_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlanTaskInfoRes__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "artistNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanTaskInfoRes_FieldNumber_ArtistNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlanTaskInfoRes__storage_, artistNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanTaskInfoRes_FieldNumber_MinTaskNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlanTaskInfoRes__storage_, minTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "topNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanTaskInfoRes_FieldNumber_TopNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlanTaskInfoRes__storage_, topNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "manualNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanTaskInfoRes_FieldNumber_ManualNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3PlanTaskInfoRes__storage_, manualNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlanTaskInfoRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlanTaskInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SavePlanTaskReq

@implementation PB3SavePlanTaskReq

@dynamic roomId;
@dynamic startTime;
@dynamic endTime;
@dynamic artistNum;
@dynamic minTaskNum;
@dynamic topNum;
@dynamic manualNum;

typedef struct PB3SavePlanTaskReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t startTime;
  int32_t endTime;
  int32_t artistNum;
  int32_t minTaskNum;
  int32_t topNum;
  int32_t manualNum;
  int64_t roomId;
} PB3SavePlanTaskReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SavePlanTaskReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SavePlanTaskReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SavePlanTaskReq_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SavePlanTaskReq__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SavePlanTaskReq_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SavePlanTaskReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "artistNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SavePlanTaskReq_FieldNumber_ArtistNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SavePlanTaskReq__storage_, artistNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SavePlanTaskReq_FieldNumber_MinTaskNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SavePlanTaskReq__storage_, minTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "topNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SavePlanTaskReq_FieldNumber_TopNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SavePlanTaskReq__storage_, topNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "manualNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SavePlanTaskReq_FieldNumber_ManualNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SavePlanTaskReq__storage_, manualNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SavePlanTaskReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SavePlanTaskReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SavePlanTaskRes

@implementation PB3SavePlanTaskRes


typedef struct PB3SavePlanTaskRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SavePlanTaskRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SavePlanTaskRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SavePlanTaskRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowOrderInfoReq

@implementation PB3ShowOrderInfoReq


typedef struct PB3ShowOrderInfoReq__storage_ {
  uint32_t _has_storage_[1];
} PB3ShowOrderInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowOrderInfoReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ShowOrderInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowOrderInfoRes

@implementation PB3ShowOrderInfoRes

@dynamic startTime;
@dynamic endTime;
@dynamic infoArray, infoArray_Count;
@dynamic minTaskNum;
@dynamic topNum;
@dynamic isCancel;

typedef struct PB3ShowOrderInfoRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t minTaskNum;
  int32_t topNum;
  NSMutableArray *infoArray;
  int64_t startTime;
  int64_t endTime;
} PB3ShowOrderInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderInfoRes_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowOrderInfoRes__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderInfoRes_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowOrderInfoRes__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "infoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayTaskInfo),
        .number = PB3ShowOrderInfoRes_FieldNumber_InfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ShowOrderInfoRes__storage_, infoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "minTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderInfoRes_FieldNumber_MinTaskNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ShowOrderInfoRes__storage_, minTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "topNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderInfoRes_FieldNumber_TopNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ShowOrderInfoRes__storage_, topNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isCancel",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowOrderInfoRes_FieldNumber_IsCancel,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowOrderInfoRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowOrderInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayTaskInfo

@implementation PB3PlayTaskInfo

@dynamic order;
@dynamic playerId;
@dynamic name;
@dynamic iconURL;
@dynamic taskNum;
@dynamic isPrevOrder;
@dynamic doneTaskNum;
@dynamic isTop;
@dynamic isManual;

typedef struct PB3PlayTaskInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t order;
  int32_t taskNum;
  int32_t doneTaskNum;
  NSString *name;
  NSString *iconURL;
  int64_t playerId;
} PB3PlayTaskInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlayTaskInfo__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_PlayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PlayTaskInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3PlayTaskInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_IconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3PlayTaskInfo__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "taskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_TaskNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3PlayTaskInfo__storage_, taskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isPrevOrder",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_IsPrevOrder,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "doneTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_DoneTaskNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3PlayTaskInfo__storage_, doneTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isTop",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_IsTop,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isManual",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlayTaskInfo_FieldNumber_IsManual,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayTaskInfo class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayTaskInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayOrderReq

@implementation PB3PlayOrderReq


typedef struct PB3PlayOrderReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PlayOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayOrderReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PlayOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlayOrderRes

@implementation PB3PlayOrderRes

@dynamic taskListArray, taskListArray_Count;
@dynamic doneListArray, doneListArray_Count;

typedef struct PB3PlayOrderRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *taskListArray;
  NSMutableArray *doneListArray;
} PB3PlayOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayTaskInfo),
        .number = PB3PlayOrderRes_FieldNumber_TaskListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayOrderRes__storage_, taskListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "doneListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayTaskInfo),
        .number = PB3PlayOrderRes_FieldNumber_DoneListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlayOrderRes__storage_, doneListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlayOrderRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlayOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SubTaskReq

@implementation PB3SubTaskReq

@dynamic playerId;

typedef struct PB3SubTaskReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3SubTaskReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SubTaskReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SubTaskReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SubTaskReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SubTaskReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SubTaskRes

@implementation PB3SubTaskRes


typedef struct PB3SubTaskRes__storage_ {
  uint32_t _has_storage_[1];
} PB3SubTaskRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SubTaskRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3SubTaskRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlanOrderReq

@implementation PB3PlanOrderReq


typedef struct PB3PlanOrderReq__storage_ {
  uint32_t _has_storage_[1];
} PB3PlanOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlanOrderReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3PlanOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PlanOrderRes

@implementation PB3PlanOrderRes

@dynamic taskListArray, taskListArray_Count;
@dynamic minTaskNum;
@dynamic isCancel;

typedef struct PB3PlanOrderRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t minTaskNum;
  NSMutableArray *taskListArray;
} PB3PlanOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3PlayTaskInfo),
        .number = PB3PlanOrderRes_FieldNumber_TaskListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3PlanOrderRes__storage_, taskListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "minTaskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanOrderRes_FieldNumber_MinTaskNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PlanOrderRes__storage_, minTaskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isCancel",
        .dataTypeSpecific.className = NULL,
        .number = PB3PlanOrderRes_FieldNumber_IsCancel,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PlanOrderRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PlanOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ArrangeOrderReq

@implementation PB3ArrangeOrderReq

@dynamic taskNum;

typedef struct PB3ArrangeOrderReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t taskNum;
} PB3ArrangeOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ArrangeOrderReq_FieldNumber_TaskNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ArrangeOrderReq__storage_, taskNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ArrangeOrderReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ArrangeOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ArrangeOrderRes

@implementation PB3ArrangeOrderRes


typedef struct PB3ArrangeOrderRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ArrangeOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ArrangeOrderRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ArrangeOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ArrangeTopOrderReq

@implementation PB3ArrangeTopOrderReq

@dynamic playerId;

typedef struct PB3ArrangeTopOrderReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
} PB3ArrangeTopOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ArrangeTopOrderReq_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ArrangeTopOrderReq__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ArrangeTopOrderReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ArrangeTopOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ArrangeTopOrderRes

@implementation PB3ArrangeTopOrderRes


typedef struct PB3ArrangeTopOrderRes__storage_ {
  uint32_t _has_storage_[1];
} PB3ArrangeTopOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ArrangeTopOrderRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3ArrangeTopOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CancelPlanOrderReq

@implementation PB3CancelPlanOrderReq


typedef struct PB3CancelPlanOrderReq__storage_ {
  uint32_t _has_storage_[1];
} PB3CancelPlanOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelPlanOrderReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CancelPlanOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CancelPlanOrderRes

@implementation PB3CancelPlanOrderRes


typedef struct PB3CancelPlanOrderRes__storage_ {
  uint32_t _has_storage_[1];
} PB3CancelPlanOrderRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CancelPlanOrderRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3CancelPlanOrderRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSpeakReq

@implementation PB3RoomSpeakReq


typedef struct PB3RoomSpeakReq__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomSpeakReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSpeakReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomSpeakReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomSpeakRes

@implementation PB3RoomSpeakRes


typedef struct PB3RoomSpeakRes__storage_ {
  uint32_t _has_storage_[1];
} PB3RoomSpeakRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomSpeakRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3RoomSpeakRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ShowNewBoss

@implementation PB3ShowNewBoss

@dynamic hasNewBossTask, newBossTask;
@dynamic newIndex;

typedef struct PB3ShowNewBoss__storage_ {
  uint32_t _has_storage_[1];
  int32_t newIndex;
  PB3BossItem *newBossTask;
} PB3ShowNewBoss__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "newBossTask",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BossItem),
        .number = PB3ShowNewBoss_FieldNumber_NewBossTask,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ShowNewBoss__storage_, newBossTask),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newIndex",
        .dataTypeSpecific.className = NULL,
        .number = PB3ShowNewBoss_FieldNumber_NewIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ShowNewBoss__storage_, newIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ShowNewBoss class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ShowNewBoss__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomShowBossListReq

@implementation PB3RoomShowBossListReq

@dynamic roomId;

typedef struct PB3RoomShowBossListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t roomId;
} PB3RoomShowBossListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomShowBossListReq_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomShowBossListReq__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomShowBossListReq class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomShowBossListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomShowBossListRes

@implementation PB3RoomShowBossListRes

@dynamic bossListArray, bossListArray_Count;

typedef struct PB3RoomShowBossListRes__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *bossListArray;
} PB3RoomShowBossListRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bossListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3BossItem),
        .number = PB3RoomShowBossListRes_FieldNumber_BossListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomShowBossListRes__storage_, bossListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomShowBossListRes class]
                                     rootClass:[PB3ShowExtRoot class]
                                          file:PB3ShowExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomShowBossListRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
