// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/system.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "pb/SystemExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3SystemExtRoot

@implementation PB3SystemExtRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3SystemExtRoot_FileDescriptor

static GPBFileDescriptor *PB3SystemExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3SystemCmdId

GPBEnumDescriptor *PB3SystemCmdId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None101\000SystemMsgCmdId\000SystemNoticeCmdId"
        "\000SystemPushLogCmdId\000SystemMaintenanceCmd"
        "Id\000SystemMail\000SystemAuthNameCmdId\000System"
        "RoomVideoURLCmdId\000SystemUpdateTabsCmdId\000"
        "SystemWeekStar\000SystemTimer\000SystemWeekSta"
        "rNotice\000SystemConfUpdate\000SystemToastCmdI"
        "d\000ClanUpdate\000NoticeCmdId\000BillCheckStatus"
        "\000DialogPopupCmdId\000PrivateChatCmdId\000Crack"
        "EggSystemMsgCmdId\000OverdueSystemMsgCmdId\000"
        "CommonNoticeCmdId\000NewSystemNoticeCmdId\000D"
        "ynConfUpdateCmdId\000NoticeDelBf\000NewSystemN"
        "oticeMarqueeCmdId\000ActivityDataCmdId\000Acti"
        "vityPopCmdId\000ActivitySortCmdId\000RoomBanne"
        "rDataCmdId\000RoomBannerMsgCmdId\000RoomBanner"
        "BoxCmdId\000RoomEventRewardBoxCmdId\000UmengRe"
        "portCmdId\000ActivityTreasureCmdId\000SystemNo"
        "ticeNeedCheckCmdId\000ActivityPremiumsCmdId"
        "\000ActivityLotteryPointCmdId\000ActivityLimit"
        "edTimeWelfareCmdId\000ActivityOnTimeWelfare"
        "CmdId\000RoomEventRewardBoxAwardCmdId\000Activ"
        "ityOnAskOrSendGiftCmdId\000ActivityBlindLot"
        "teryUpdateCmdId\000SystemSyncOpt\000ActivitySl"
        "otMachine\000";
    static const int32_t values[] = {
        PB3SystemCmdId_None101,
        PB3SystemCmdId_SystemMsgCmdId,
        PB3SystemCmdId_SystemNoticeCmdId,
        PB3SystemCmdId_SystemPushLogCmdId,
        PB3SystemCmdId_SystemMaintenanceCmdId,
        PB3SystemCmdId_SystemMail,
        PB3SystemCmdId_SystemAuthNameCmdId,
        PB3SystemCmdId_SystemRoomVideoURLCmdId,
        PB3SystemCmdId_SystemUpdateTabsCmdId,
        PB3SystemCmdId_SystemWeekStar,
        PB3SystemCmdId_SystemTimer,
        PB3SystemCmdId_SystemWeekStarNotice,
        PB3SystemCmdId_SystemConfUpdate,
        PB3SystemCmdId_SystemToastCmdId,
        PB3SystemCmdId_ClanUpdate,
        PB3SystemCmdId_NoticeCmdId,
        PB3SystemCmdId_BillCheckStatus,
        PB3SystemCmdId_DialogPopupCmdId,
        PB3SystemCmdId_PrivateChatCmdId,
        PB3SystemCmdId_CrackEggSystemMsgCmdId,
        PB3SystemCmdId_OverdueSystemMsgCmdId,
        PB3SystemCmdId_CommonNoticeCmdId,
        PB3SystemCmdId_NewSystemNoticeCmdId,
        PB3SystemCmdId_DynConfUpdateCmdId,
        PB3SystemCmdId_NoticeDelBf,
        PB3SystemCmdId_NewSystemNoticeMarqueeCmdId,
        PB3SystemCmdId_ActivityDataCmdId,
        PB3SystemCmdId_ActivityPopCmdId,
        PB3SystemCmdId_ActivitySortCmdId,
        PB3SystemCmdId_RoomBannerDataCmdId,
        PB3SystemCmdId_RoomBannerMsgCmdId,
        PB3SystemCmdId_RoomBannerBoxCmdId,
        PB3SystemCmdId_RoomEventRewardBoxCmdId,
        PB3SystemCmdId_UmengReportCmdId,
        PB3SystemCmdId_ActivityTreasureCmdId,
        PB3SystemCmdId_SystemNoticeNeedCheckCmdId,
        PB3SystemCmdId_ActivityPremiumsCmdId,
        PB3SystemCmdId_ActivityLotteryPointCmdId,
        PB3SystemCmdId_ActivityLimitedTimeWelfareCmdId,
        PB3SystemCmdId_ActivityOnTimeWelfareCmdId,
        PB3SystemCmdId_RoomEventRewardBoxAwardCmdId,
        PB3SystemCmdId_ActivityOnAskOrSendGiftCmdId,
        PB3SystemCmdId_ActivityBlindLotteryUpdateCmdId,
        PB3SystemCmdId_SystemSyncOpt,
        PB3SystemCmdId_ActivitySlotMachine,
    };
    static const char *extraTextFormatInfo = "\001\007f\344\345\203\343\342\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SystemCmdId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SystemCmdId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SystemCmdId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SystemCmdId_None101:
    case PB3SystemCmdId_SystemMsgCmdId:
    case PB3SystemCmdId_SystemNoticeCmdId:
    case PB3SystemCmdId_SystemPushLogCmdId:
    case PB3SystemCmdId_SystemMaintenanceCmdId:
    case PB3SystemCmdId_SystemMail:
    case PB3SystemCmdId_SystemAuthNameCmdId:
    case PB3SystemCmdId_SystemRoomVideoURLCmdId:
    case PB3SystemCmdId_SystemUpdateTabsCmdId:
    case PB3SystemCmdId_SystemWeekStar:
    case PB3SystemCmdId_SystemTimer:
    case PB3SystemCmdId_SystemWeekStarNotice:
    case PB3SystemCmdId_SystemConfUpdate:
    case PB3SystemCmdId_SystemToastCmdId:
    case PB3SystemCmdId_ClanUpdate:
    case PB3SystemCmdId_NoticeCmdId:
    case PB3SystemCmdId_BillCheckStatus:
    case PB3SystemCmdId_DialogPopupCmdId:
    case PB3SystemCmdId_PrivateChatCmdId:
    case PB3SystemCmdId_CrackEggSystemMsgCmdId:
    case PB3SystemCmdId_OverdueSystemMsgCmdId:
    case PB3SystemCmdId_CommonNoticeCmdId:
    case PB3SystemCmdId_NewSystemNoticeCmdId:
    case PB3SystemCmdId_DynConfUpdateCmdId:
    case PB3SystemCmdId_NoticeDelBf:
    case PB3SystemCmdId_NewSystemNoticeMarqueeCmdId:
    case PB3SystemCmdId_ActivityDataCmdId:
    case PB3SystemCmdId_ActivityPopCmdId:
    case PB3SystemCmdId_ActivitySortCmdId:
    case PB3SystemCmdId_RoomBannerDataCmdId:
    case PB3SystemCmdId_RoomBannerMsgCmdId:
    case PB3SystemCmdId_RoomBannerBoxCmdId:
    case PB3SystemCmdId_RoomEventRewardBoxCmdId:
    case PB3SystemCmdId_UmengReportCmdId:
    case PB3SystemCmdId_ActivityTreasureCmdId:
    case PB3SystemCmdId_SystemNoticeNeedCheckCmdId:
    case PB3SystemCmdId_ActivityPremiumsCmdId:
    case PB3SystemCmdId_ActivityLotteryPointCmdId:
    case PB3SystemCmdId_ActivityLimitedTimeWelfareCmdId:
    case PB3SystemCmdId_ActivityOnTimeWelfareCmdId:
    case PB3SystemCmdId_RoomEventRewardBoxAwardCmdId:
    case PB3SystemCmdId_ActivityOnAskOrSendGiftCmdId:
    case PB3SystemCmdId_ActivityBlindLotteryUpdateCmdId:
    case PB3SystemCmdId_SystemSyncOpt:
    case PB3SystemCmdId_ActivitySlotMachine:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ReportEventType

GPBEnumDescriptor *PB3ReportEventType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EventDefault\000MoodEffectUseSuccess\000MoodEf"
        "fectUseFail\000";
    static const int32_t values[] = {
        PB3ReportEventType_EventDefault,
        PB3ReportEventType_MoodEffectUseSuccess,
        PB3ReportEventType_MoodEffectUseFail,
    };
    static const char *extraTextFormatInfo = "\001\000\005\347\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ReportEventType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ReportEventType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ReportEventType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ReportEventType_EventDefault:
    case PB3ReportEventType_MoodEffectUseSuccess:
    case PB3ReportEventType_MoodEffectUseFail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SysToastType

GPBEnumDescriptor *PB3SysToastType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SysToastNormal\000SysToastSucc\000SysToastWarn"
        "\000SysToastError\000";
    static const int32_t values[] = {
        PB3SysToastType_SysToastNormal,
        PB3SysToastType_SysToastSucc,
        PB3SysToastType_SysToastWarn,
        PB3SysToastType_SysToastError,
    };
    static const char *extraTextFormatInfo = "\004\000\016\000\001\014\000\002\014\000\003\r\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SysToastType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SysToastType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SysToastType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SysToastType_SysToastNormal:
    case PB3SysToastType_SysToastSucc:
    case PB3SysToastType_SysToastWarn:
    case PB3SysToastType_SysToastError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SysConfType

GPBEnumDescriptor *PB3SysConfType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SysConfTypeNone\000TypeGift\000TypeEffect\000Type"
        "GiftRoom\000TypeAssetsConf\000TypeConfBlind\000Fr"
        "iendHeartbeat\000TypeConfActivity\000TypeConfS"
        "tores\000TypeConfBindPhoneReward\000TypeConfBi"
        "llConf\000TypeConfSubConf\000TypeCrackWriting\000"
        "TypeIntimateConf\000TypePcindexNavConf\000Type"
        "CrackTheme\000TypeRoomDecorateConf\000TypeRoom"
        "DecorateShopConf\000TypeRoomDecorateConfV2\000"
        "TypeNobilityConfig\000TypeRoomSkillConfig\000T"
        "ypeNobilityEffectConfig\000TypeNobilityCust"
        "omerService\000TypeFriendBackgroundConfig\000T"
        "ypeProtectionOfMinorsWindow\000TypeGiftBann"
        "er\000TypeEmojiConf\000TypeEffectBanner\000TypeFo"
        "cusRoomPop\000TypeShowConfig\000TypeStoreClass"
        "ifyConfig\000TypeVoiceTag\000TypeUpdateRoomWea"
        "lthDayRank\000TypeFriendImImgLimit\000TypeActi"
        "vityRoomList\000TypeCountDown\000TypeGiftClass"
        "ify\000TypeIntimateFansLevConf\000TypeFirstCla"
        "ssify\000TypeGiftNumTextConf\000TypeEffectBagC"
        "lassify\000TypeOnTimeWelfare\000TypeKupdateGme"
        "Key\000TypeTeacherStudentLevCfg\000TypeMobaTea"
        "mGameCfg\000";
    static const int32_t values[] = {
        PB3SysConfType_SysConfTypeNone,
        PB3SysConfType_TypeGift,
        PB3SysConfType_TypeEffect,
        PB3SysConfType_TypeGiftRoom,
        PB3SysConfType_TypeAssetsConf,
        PB3SysConfType_TypeConfBlind,
        PB3SysConfType_FriendHeartbeat,
        PB3SysConfType_TypeConfActivity,
        PB3SysConfType_TypeConfStores,
        PB3SysConfType_TypeConfBindPhoneReward,
        PB3SysConfType_TypeConfBillConf,
        PB3SysConfType_TypeConfSubConf,
        PB3SysConfType_TypeCrackWriting,
        PB3SysConfType_TypeIntimateConf,
        PB3SysConfType_TypePcindexNavConf,
        PB3SysConfType_TypeCrackTheme,
        PB3SysConfType_TypeRoomDecorateConf,
        PB3SysConfType_TypeRoomDecorateShopConf,
        PB3SysConfType_TypeRoomDecorateConfV2,
        PB3SysConfType_TypeNobilityConfig,
        PB3SysConfType_TypeRoomSkillConfig,
        PB3SysConfType_TypeNobilityEffectConfig,
        PB3SysConfType_TypeNobilityCustomerService,
        PB3SysConfType_TypeFriendBackgroundConfig,
        PB3SysConfType_TypeProtectionOfMinorsWindow,
        PB3SysConfType_TypeGiftBanner,
        PB3SysConfType_TypeEmojiConf,
        PB3SysConfType_TypeEffectBanner,
        PB3SysConfType_TypeFocusRoomPop,
        PB3SysConfType_TypeShowConfig,
        PB3SysConfType_TypeStoreClassifyConfig,
        PB3SysConfType_TypeVoiceTag,
        PB3SysConfType_TypeUpdateRoomWealthDayRank,
        PB3SysConfType_TypeFriendImImgLimit,
        PB3SysConfType_TypeActivityRoomList,
        PB3SysConfType_TypeCountDown,
        PB3SysConfType_TypeGiftClassify,
        PB3SysConfType_TypeIntimateFansLevConf,
        PB3SysConfType_TypeFirstClassify,
        PB3SysConfType_TypeGiftNumTextConf,
        PB3SysConfType_TypeEffectBagClassify,
        PB3SysConfType_TypeOnTimeWelfare,
        PB3SysConfType_TypeKupdateGmeKey,
        PB3SysConfType_TypeTeacherStudentLevCfg,
        PB3SysConfType_TypeMobaTeamGameCfg,
    };
    static const char *extraTextFormatInfo = "-\000\014c\000\001\010\000\002\n\000\003\014\000\004\016\000\005\r\000\006\017\000\007\020\000\010\016\000\t\027\000\n\020\000\013\017\000\014\020\000\r\020\000\016\005M\000\017\016\000\020\024\000\021\030\000\022\026\000\023\022\000\024\023\000\025\030\000\026\033\000\027\032\000\030\034\000\031\016\000\032\r\000\033\020\000\034\020\000\035\016\000\036\027\000\037\014\000 \033\000!\024\000\"\024\000#\r\000$\020\000%\027\000&\021\000\'\023\000(\025\000)\021\000*\005L\000+\030\000,\023\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SysConfType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SysConfType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SysConfType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SysConfType_SysConfTypeNone:
    case PB3SysConfType_TypeGift:
    case PB3SysConfType_TypeEffect:
    case PB3SysConfType_TypeGiftRoom:
    case PB3SysConfType_TypeAssetsConf:
    case PB3SysConfType_TypeConfBlind:
    case PB3SysConfType_FriendHeartbeat:
    case PB3SysConfType_TypeConfActivity:
    case PB3SysConfType_TypeConfStores:
    case PB3SysConfType_TypeConfBindPhoneReward:
    case PB3SysConfType_TypeConfBillConf:
    case PB3SysConfType_TypeConfSubConf:
    case PB3SysConfType_TypeCrackWriting:
    case PB3SysConfType_TypeIntimateConf:
    case PB3SysConfType_TypePcindexNavConf:
    case PB3SysConfType_TypeCrackTheme:
    case PB3SysConfType_TypeRoomDecorateConf:
    case PB3SysConfType_TypeRoomDecorateShopConf:
    case PB3SysConfType_TypeRoomDecorateConfV2:
    case PB3SysConfType_TypeNobilityConfig:
    case PB3SysConfType_TypeRoomSkillConfig:
    case PB3SysConfType_TypeNobilityEffectConfig:
    case PB3SysConfType_TypeNobilityCustomerService:
    case PB3SysConfType_TypeFriendBackgroundConfig:
    case PB3SysConfType_TypeProtectionOfMinorsWindow:
    case PB3SysConfType_TypeGiftBanner:
    case PB3SysConfType_TypeEmojiConf:
    case PB3SysConfType_TypeEffectBanner:
    case PB3SysConfType_TypeFocusRoomPop:
    case PB3SysConfType_TypeShowConfig:
    case PB3SysConfType_TypeStoreClassifyConfig:
    case PB3SysConfType_TypeVoiceTag:
    case PB3SysConfType_TypeUpdateRoomWealthDayRank:
    case PB3SysConfType_TypeFriendImImgLimit:
    case PB3SysConfType_TypeActivityRoomList:
    case PB3SysConfType_TypeCountDown:
    case PB3SysConfType_TypeGiftClassify:
    case PB3SysConfType_TypeIntimateFansLevConf:
    case PB3SysConfType_TypeFirstClassify:
    case PB3SysConfType_TypeGiftNumTextConf:
    case PB3SysConfType_TypeEffectBagClassify:
    case PB3SysConfType_TypeOnTimeWelfare:
    case PB3SysConfType_TypeKupdateGmeKey:
    case PB3SysConfType_TypeTeacherStudentLevCfg:
    case PB3SysConfType_TypeMobaTeamGameCfg:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NoticeType

GPBEnumDescriptor *PB3NoticeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NtZero\000NtCertify\000NtToast\000NtForceLogout\000";
    static const int32_t values[] = {
        PB3NoticeType_NtZero,
        PB3NoticeType_NtCertify,
        PB3NoticeType_NtToast,
        PB3NoticeType_NtForceLogout,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NoticeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NoticeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NoticeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NoticeType_NtZero:
    case PB3NoticeType_NtCertify:
    case PB3NoticeType_NtToast:
    case PB3NoticeType_NtForceLogout:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ButtonType

GPBEnumDescriptor *PB3ButtonType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BtypeZero\000BtypeConfirm\000BtypeCancel\000";
    static const int32_t values[] = {
        PB3ButtonType_BtypeZero,
        PB3ButtonType_BtypeConfirm,
        PB3ButtonType_BtypeCancel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ButtonType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ButtonType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ButtonType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ButtonType_BtypeZero:
    case PB3ButtonType_BtypeConfirm:
    case PB3ButtonType_BtypeCancel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ReceiverType

GPBEnumDescriptor *PB3ReceiverType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RtNone\000RtAllPlayer\000RtAreaPlayer\000RtChanne"
        "lPlayer\000";
    static const int32_t values[] = {
        PB3ReceiverType_RtNone,
        PB3ReceiverType_RtAllPlayer,
        PB3ReceiverType_RtAreaPlayer,
        PB3ReceiverType_RtChannelPlayer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ReceiverType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ReceiverType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ReceiverType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ReceiverType_RtNone:
    case PB3ReceiverType_RtAllPlayer:
    case PB3ReceiverType_RtAreaPlayer:
    case PB3ReceiverType_RtChannelPlayer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SystemMsgStyleType

GPBEnumDescriptor *PB3SystemMsgStyleType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SmstText\000SmstImageText\000";
    static const int32_t values[] = {
        PB3SystemMsgStyleType_SmstText,
        PB3SystemMsgStyleType_SmstImageText,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SystemMsgStyleType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SystemMsgStyleType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SystemMsgStyleType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SystemMsgStyleType_SmstText:
    case PB3SystemMsgStyleType_SmstImageText:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3H5DataNoticeType

GPBEnumDescriptor *PB3H5DataNoticeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DataNoticeTypeNone\000DataNoticeTypeSlotMac"
        "hineWaitResult\000DataNoticeTypeSlotMachine"
        "Result\000DataNoticeTypeSlotMachineNextRoun"
        "d\000";
    static const int32_t values[] = {
        PB3H5DataNoticeType_DataNoticeTypeNone,
        PB3H5DataNoticeType_DataNoticeTypeSlotMachineWaitResult,
        PB3H5DataNoticeType_DataNoticeTypeSlotMachineResult,
        PB3H5DataNoticeType_DataNoticeTypeSlotMachineNextRound,
    };
    static const char *extraTextFormatInfo = "\004\000\022\000\001\037\004\000\002\037\000\003\037\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3H5DataNoticeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3H5DataNoticeType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3H5DataNoticeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3H5DataNoticeType_DataNoticeTypeNone:
    case PB3H5DataNoticeType_DataNoticeTypeSlotMachineWaitResult:
    case PB3H5DataNoticeType_DataNoticeTypeSlotMachineResult:
    case PB3H5DataNoticeType_DataNoticeTypeSlotMachineNextRound:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3SubMsgType

GPBEnumDescriptor *PB3SubMsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SmtSelf\000SmtActivity\000";
    static const int32_t values[] = {
        PB3SubMsgType_SmtSelf,
        PB3SubMsgType_SmtActivity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3SubMsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3SubMsgType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3SubMsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3SubMsgType_SmtSelf:
    case PB3SubMsgType_SmtActivity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3GenerationDataType

GPBEnumDescriptor *PB3GenerationDataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GdtZero\000";
    static const int32_t values[] = {
        PB3GenerationDataType_GdtZero,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3GenerationDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3GenerationDataType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3GenerationDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3GenerationDataType_GdtZero:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DialogStyle

GPBEnumDescriptor *PB3DialogStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DsZero\000DsYoung\000DsPrivate\000";
    static const int32_t values[] = {
        PB3DialogStyle_DsZero,
        PB3DialogStyle_DsYoung,
        PB3DialogStyle_DsPrivate,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DialogStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DialogStyle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DialogStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DialogStyle_DsZero:
    case PB3DialogStyle_DsYoung:
    case PB3DialogStyle_DsPrivate:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DialogButtonStyle

GPBEnumDescriptor *PB3DialogButtonStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DbsZero\000DbsNormal\000DbsContent\000";
    static const int32_t values[] = {
        PB3DialogButtonStyle_DbsZero,
        PB3DialogButtonStyle_DbsNormal,
        PB3DialogButtonStyle_DbsContent,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DialogButtonStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DialogButtonStyle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DialogButtonStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DialogButtonStyle_DbsZero:
    case PB3DialogButtonStyle_DbsNormal:
    case PB3DialogButtonStyle_DbsContent:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3DialogButtonType

GPBEnumDescriptor *PB3DialogButtonType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DbtZero\000DbtCancel\000DbtConfirm\000DbtCallback"
        "\000DbtRoute\000";
    static const int32_t values[] = {
        PB3DialogButtonType_DbtZero,
        PB3DialogButtonType_DbtCancel,
        PB3DialogButtonType_DbtConfirm,
        PB3DialogButtonType_DbtCallback,
        PB3DialogButtonType_DbtRoute,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3DialogButtonType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3DialogButtonType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3DialogButtonType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3DialogButtonType_DbtZero:
    case PB3DialogButtonType_DbtCancel:
    case PB3DialogButtonType_DbtConfirm:
    case PB3DialogButtonType_DbtCallback:
    case PB3DialogButtonType_DbtRoute:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CallbackDataType

GPBEnumDescriptor *PB3CallbackDataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CdtZero\000CdtCallbackOperation\000";
    static const int32_t values[] = {
        PB3CallbackDataType_CdtZero,
        PB3CallbackDataType_CdtCallbackOperation,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CallbackDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CallbackDataType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CallbackDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CallbackDataType_CdtZero:
    case PB3CallbackDataType_CdtCallbackOperation:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CallbackOpt

GPBEnumDescriptor *PB3CallbackOpt_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CboZero\000CboNext\000CboPopEnd\000";
    static const int32_t values[] = {
        PB3CallbackOpt_CboZero,
        PB3CallbackOpt_CboNext,
        PB3CallbackOpt_CboPopEnd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CallbackOpt)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CallbackOpt_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CallbackOpt_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CallbackOpt_CboZero:
    case PB3CallbackOpt_CboNext:
    case PB3CallbackOpt_CboPopEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3CommonNoticeType

GPBEnumDescriptor *PB3CommonNoticeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CntNull\000CntCommon\000";
    static const int32_t values[] = {
        PB3CommonNoticeType_CntNull,
        PB3CommonNoticeType_CntCommon,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3CommonNoticeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3CommonNoticeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3CommonNoticeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3CommonNoticeType_CntNull:
    case PB3CommonNoticeType_CntCommon:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActivityPopPos

GPBEnumDescriptor *PB3ActivityPopPos_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PosBottom\000PosTop\000PosLeft\000PosRight\000PosMid"
        "\000";
    static const int32_t values[] = {
        PB3ActivityPopPos_PosBottom,
        PB3ActivityPopPos_PosTop,
        PB3ActivityPopPos_PosLeft,
        PB3ActivityPopPos_PosRight,
        PB3ActivityPopPos_PosMid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActivityPopPos)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActivityPopPos_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActivityPopPos_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActivityPopPos_PosBottom:
    case PB3ActivityPopPos_PosTop:
    case PB3ActivityPopPos_PosLeft:
    case PB3ActivityPopPos_PosRight:
    case PB3ActivityPopPos_PosMid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3RoomAnimationType

GPBEnumDescriptor *PB3RoomAnimationType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RNull\000RBanner\000RSite\000";
    static const int32_t values[] = {
        PB3RoomAnimationType_RNull,
        PB3RoomAnimationType_RBanner,
        PB3RoomAnimationType_RSite,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3RoomAnimationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3RoomAnimationType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3RoomAnimationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3RoomAnimationType_RNull:
    case PB3RoomAnimationType_RBanner:
    case PB3RoomAnimationType_RSite:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ActBoxGameType

GPBEnumDescriptor *PB3ActBoxGameType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GameNormal\000GameGoldenToad\000";
    static const int32_t values[] = {
        PB3ActBoxGameType_GameNormal,
        PB3ActBoxGameType_GameGoldenToad,
    };
    static const char *extraTextFormatInfo = "\002\000\004\206\000\001\004\206\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ActBoxGameType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ActBoxGameType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ActBoxGameType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ActBoxGameType_GameNormal:
    case PB3ActBoxGameType_GameGoldenToad:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3ClientType

GPBEnumDescriptor *PB3ClientType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CtZero\000CtIos\000CtPc\000";
    static const int32_t values[] = {
        PB3ClientType_CtZero,
        PB3ClientType_CtIos,
        PB3ClientType_CtPc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ClientType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ClientType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ClientType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ClientType_CtZero:
    case PB3ClientType_CtIos:
    case PB3ClientType_CtPc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3NoShowRoomType

GPBEnumDescriptor *PB3NoShowRoomType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NsrtZero\000NsrtNormal\000NsrtReward\000NsrtGuild"
        "\000NsrtActivity\000";
    static const int32_t values[] = {
        PB3NoShowRoomType_NsrtZero,
        PB3NoShowRoomType_NsrtNormal,
        PB3NoShowRoomType_NsrtReward,
        PB3NoShowRoomType_NsrtGuild,
        PB3NoShowRoomType_NsrtActivity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3NoShowRoomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3NoShowRoomType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3NoShowRoomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3NoShowRoomType_NsrtZero:
    case PB3NoShowRoomType_NsrtNormal:
    case PB3NoShowRoomType_NsrtReward:
    case PB3NoShowRoomType_NsrtGuild:
    case PB3NoShowRoomType_NsrtActivity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3UmengReport

@implementation PB3UmengReport

@dynamic eventName;
@dynamic list, list_Count;

typedef struct PB3UmengReport__storage_ {
  uint32_t _has_storage_[1];
  NSString *eventName;
  NSMutableDictionary *list;
} PB3UmengReport__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventName",
        .dataTypeSpecific.className = NULL,
        .number = PB3UmengReport_FieldNumber_EventName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UmengReport__storage_, eventName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "list",
        .dataTypeSpecific.className = NULL,
        .number = PB3UmengReport_FieldNumber_List,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3UmengReport__storage_, list),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UmengReport class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UmengReport__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3certifyNotice

@implementation PB3certifyNotice

@dynamic noticeType;
@dynamic msg;
@dynamic buttonStyleArray, buttonStyleArray_Count;

typedef struct PB3certifyNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3NoticeType noticeType;
  NSString *msg;
  GPBEnumArray *buttonStyleArray;
} PB3certifyNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noticeType",
        .dataTypeSpecific.enumDescFunc = PB3NoticeType_EnumDescriptor,
        .number = PB3certifyNotice_FieldNumber_NoticeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3certifyNotice__storage_, noticeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3certifyNotice_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3certifyNotice__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonStyleArray",
        .dataTypeSpecific.enumDescFunc = PB3ButtonType_EnumDescriptor,
        .number = PB3certifyNotice_FieldNumber_ButtonStyleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3certifyNotice__storage_, buttonStyleArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3certifyNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3certifyNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3certifyNotice_NoticeType_RawValue(PB3certifyNotice *message) {
  GPBDescriptor *descriptor = [PB3certifyNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3certifyNotice_FieldNumber_NoticeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3certifyNotice_NoticeType_RawValue(PB3certifyNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3certifyNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3certifyNotice_FieldNumber_NoticeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SlotMachineResultNotice

@implementation PB3SlotMachineResultNotice

@dynamic roundId;
@dynamic resultTime;
@dynamic resultId;
@dynamic resultImg;
@dynamic curSpendNum;
@dynamic curGetNum;
@dynamic isWin;
@dynamic countDown;

typedef struct PB3SlotMachineResultNotice__storage_ {
  uint32_t _has_storage_[1];
  uint32_t resultId;
  uint32_t countDown;
  NSString *resultImg;
  uint64_t roundId;
  int64_t resultTime;
  uint64_t curSpendNum;
  uint64_t curGetNum;
} PB3SlotMachineResultNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_RoundId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineResultNotice__storage_, roundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "resultTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_ResultTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineResultNotice__storage_, resultTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "resultId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_ResultId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SlotMachineResultNotice__storage_, resultId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultImg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_ResultImg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SlotMachineResultNotice__storage_, resultImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "curSpendNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_CurSpendNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SlotMachineResultNotice__storage_, curSpendNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "curGetNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_CurGetNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SlotMachineResultNotice__storage_, curGetNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "isWin",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_IsWin,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "countDown",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineResultNotice_FieldNumber_CountDown,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SlotMachineResultNotice__storage_, countDown),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineResultNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineResultNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SlotMachineNextRoundNotice

@implementation PB3SlotMachineNextRoundNotice

@dynamic roundId;
@dynamic coundDownSec;

typedef struct PB3SlotMachineNextRoundNotice__storage_ {
  uint32_t _has_storage_[1];
  uint64_t roundId;
  int64_t coundDownSec;
} PB3SlotMachineNextRoundNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roundId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineNextRoundNotice_FieldNumber_RoundId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SlotMachineNextRoundNotice__storage_, roundId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "coundDownSec",
        .dataTypeSpecific.className = NULL,
        .number = PB3SlotMachineNextRoundNotice_FieldNumber_CoundDownSec,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SlotMachineNextRoundNotice__storage_, coundDownSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SlotMachineNextRoundNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SlotMachineNextRoundNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3H5DataUpdateNotice

@implementation PB3H5DataUpdateNotice

@dynamic noticeFunc;
@dynamic paramJson;

typedef struct PB3H5DataUpdateNotice__storage_ {
  uint32_t _has_storage_[1];
  NSString *noticeFunc;
  NSString *paramJson;
} PB3H5DataUpdateNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noticeFunc",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5DataUpdateNotice_FieldNumber_NoticeFunc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3H5DataUpdateNotice__storage_, noticeFunc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paramJson",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5DataUpdateNotice_FieldNumber_ParamJson,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3H5DataUpdateNotice__storage_, paramJson),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5DataUpdateNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3H5DataUpdateNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3H5DataParam

@implementation PB3H5DataParam

@dynamic noticeType;
@dynamic jsonParam;

typedef struct PB3H5DataParam__storage_ {
  uint32_t _has_storage_[1];
  PB3H5DataNoticeType noticeType;
  NSString *jsonParam;
} PB3H5DataParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noticeType",
        .dataTypeSpecific.enumDescFunc = PB3H5DataNoticeType_EnumDescriptor,
        .number = PB3H5DataParam_FieldNumber_NoticeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3H5DataParam__storage_, noticeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "jsonParam",
        .dataTypeSpecific.className = NULL,
        .number = PB3H5DataParam_FieldNumber_JsonParam,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3H5DataParam__storage_, jsonParam),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3H5DataParam class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3H5DataParam__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3H5DataParam_NoticeType_RawValue(PB3H5DataParam *message) {
  GPBDescriptor *descriptor = [PB3H5DataParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3H5DataParam_FieldNumber_NoticeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3H5DataParam_NoticeType_RawValue(PB3H5DataParam *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3H5DataParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3H5DataParam_FieldNumber_NoticeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SystemMsgNotice

@implementation PB3SystemMsgNotice

@dynamic msg;
@dynamic sendTime;
@dynamic language;
@dynamic routerURL;
@dynamic picture;
@dynamic pictureRouter;
@dynamic maskText;
@dynamic bottomText;
@dynamic bottomRouter;
@dynamic msgTitle;
@dynamic roomId;
@dynamic status;
@dynamic overdueTime;
@dynamic hyperlink;
@dynamic msgType;
@dynamic pcSystemSwitch;
@dynamic wealthLevel;
@dynamic receiverType;
@dynamic registerDayLimit;
@dynamic registerJudgeType;
@dynamic wealthJudgeType;
@dynamic andOr;
@dynamic charmJudgeType;
@dynamic charmLevel;
@dynamic startTs;
@dynamic endTs;
@dynamic operatorId;
@dynamic operatorName;
@dynamic reason;
@dynamic subMsgType;
@dynamic deviceType;
@dynamic sendFrom;
@dynamic checkId;
@dynamic styleType;
@dynamic receiverValue;

typedef struct PB3SystemMsgNotice__storage_ {
  uint32_t _has_storage_[2];
  uint32_t sendTime;
  uint32_t language;
  uint32_t status;
  uint32_t msgType;
  uint32_t pcSystemSwitch;
  uint32_t wealthLevel;
  PB3ReceiverType receiverType;
  int32_t registerDayLimit;
  int32_t registerJudgeType;
  int32_t wealthJudgeType;
  int32_t andOr;
  int32_t charmJudgeType;
  int32_t charmLevel;
  PB3SubMsgType subMsgType;
  int32_t deviceType;
  int32_t sendFrom;
  PB3SystemMsgStyleType styleType;
  NSString *msg;
  NSString *routerURL;
  NSString *picture;
  NSString *pictureRouter;
  NSString *maskText;
  NSString *bottomText;
  NSString *bottomRouter;
  NSString *msgTitle;
  NSData *roomId;
  NSString *hyperlink;
  NSString *operatorName;
  NSString *reason;
  NSString *receiverValue;
  int64_t overdueTime;
  int64_t startTs;
  int64_t endTs;
  int64_t operatorId;
  int64_t checkId;
} PB3SystemMsgNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_SendTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_Language,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_RouterURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_Picture,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pictureRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_PictureRouter,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, pictureRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maskText",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_MaskText,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, maskText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomText",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_BottomText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, bottomText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bottomRouter",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_BottomRouter,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, bottomRouter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_MsgTitle,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, msgTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_RoomId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_Status,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "overdueTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_OverdueTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, overdueTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hyperlink",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_Hyperlink,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, hyperlink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_MsgType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, msgType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pcSystemSwitch",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_PcSystemSwitch,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, pcSystemSwitch),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "wealthLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_WealthLevel,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, wealthLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "receiverType",
        .dataTypeSpecific.enumDescFunc = PB3ReceiverType_EnumDescriptor,
        .number = PB3SystemMsgNotice_FieldNumber_ReceiverType,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, receiverType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "registerDayLimit",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_RegisterDayLimit,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, registerDayLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "registerJudgeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_RegisterJudgeType,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, registerJudgeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthJudgeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_WealthJudgeType,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, wealthJudgeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "andOr",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_AndOr,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, andOr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmJudgeType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_CharmJudgeType,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, charmJudgeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLevel",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_CharmLevel,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, charmLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTs",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_StartTs,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, startTs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTs",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_EndTs,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, endTs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "operatorId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_OperatorId,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, operatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "operatorName",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_OperatorName,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, operatorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reason",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_Reason,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, reason),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subMsgType",
        .dataTypeSpecific.enumDescFunc = PB3SubMsgType_EnumDescriptor,
        .number = PB3SystemMsgNotice_FieldNumber_SubMsgType,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, subMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_DeviceType,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, deviceType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sendFrom",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_SendFrom,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, sendFrom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "checkId",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_CheckId,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, checkId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "styleType",
        .dataTypeSpecific.enumDescFunc = PB3SystemMsgStyleType_EnumDescriptor,
        .number = PB3SystemMsgNotice_FieldNumber_StyleType,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, styleType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiverValue",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNotice_FieldNumber_ReceiverValue,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(PB3SystemMsgNotice__storage_, receiverValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SystemMsgNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SystemMsgNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SystemMsgNotice_ReceiverType_RawValue(PB3SystemMsgNotice *message) {
  GPBDescriptor *descriptor = [PB3SystemMsgNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNotice_FieldNumber_ReceiverType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SystemMsgNotice_ReceiverType_RawValue(PB3SystemMsgNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SystemMsgNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNotice_FieldNumber_ReceiverType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SystemMsgNotice_SubMsgType_RawValue(PB3SystemMsgNotice *message) {
  GPBDescriptor *descriptor = [PB3SystemMsgNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNotice_FieldNumber_SubMsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SystemMsgNotice_SubMsgType_RawValue(PB3SystemMsgNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SystemMsgNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNotice_FieldNumber_SubMsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3SystemMsgNotice_StyleType_RawValue(PB3SystemMsgNotice *message) {
  GPBDescriptor *descriptor = [PB3SystemMsgNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNotice_FieldNumber_StyleType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SystemMsgNotice_StyleType_RawValue(PB3SystemMsgNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SystemMsgNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNotice_FieldNumber_StyleType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SystemMsgNoticeExt

@implementation PB3SystemMsgNoticeExt

@dynamic msg;
@dynamic sendTime;
@dynamic language;
@dynamic routerURL;
@dynamic picture;
@dynamic msgTitle;
@dynamic msgType;
@dynamic styleType;

typedef struct PB3SystemMsgNoticeExt__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sendTime;
  uint32_t language;
  uint32_t msgType;
  PB3SystemMsgStyleType styleType;
  NSString *msg;
  NSString *routerURL;
  NSString *picture;
  NSString *msgTitle;
} PB3SystemMsgNoticeExt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNoticeExt_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNoticeExt_FieldNumber_SendTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, sendTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNoticeExt_FieldNumber_Language,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "routerURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNoticeExt_FieldNumber_RouterURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, routerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNoticeExt_FieldNumber_Picture,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgTitle",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNoticeExt_FieldNumber_MsgTitle,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, msgTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemMsgNoticeExt_FieldNumber_MsgType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, msgType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "styleType",
        .dataTypeSpecific.enumDescFunc = PB3SystemMsgStyleType_EnumDescriptor,
        .number = PB3SystemMsgNoticeExt_FieldNumber_StyleType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3SystemMsgNoticeExt__storage_, styleType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SystemMsgNoticeExt class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SystemMsgNoticeExt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SystemMsgNoticeExt_StyleType_RawValue(PB3SystemMsgNoticeExt *message) {
  GPBDescriptor *descriptor = [PB3SystemMsgNoticeExt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNoticeExt_FieldNumber_StyleType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SystemMsgNoticeExt_StyleType_RawValue(PB3SystemMsgNoticeExt *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SystemMsgNoticeExt descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SystemMsgNoticeExt_FieldNumber_StyleType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3NewSystemNotice

@implementation PB3NewSystemNotice

@dynamic msg;
@dynamic canCheckScreneSingle;
@dynamic checkScrenePrice;

typedef struct PB3NewSystemNotice__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  int64_t checkScrenePrice;
} PB3NewSystemNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNotice_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewSystemNotice__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "canCheckScreneSingle",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNotice_FieldNumber_CanCheckScreneSingle,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "checkScrenePrice",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNotice_FieldNumber_CheckScrenePrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewSystemNotice__storage_, checkScrenePrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewSystemNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewSystemNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3NewSystemNoticeMarquee

@implementation PB3NewSystemNoticeMarquee

@dynamic wealthLv;
@dynamic charmLv;
@dynamic orAnd;
@dynamic content;
@dynamic router;

typedef struct PB3NewSystemNoticeMarquee__storage_ {
  uint32_t _has_storage_[1];
  int32_t wealthLv;
  int32_t charmLv;
  int32_t orAnd;
  NSString *content;
  NSString *router;
} PB3NewSystemNoticeMarquee__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wealthLv",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNoticeMarquee_FieldNumber_WealthLv,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3NewSystemNoticeMarquee__storage_, wealthLv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLv",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNoticeMarquee_FieldNumber_CharmLv,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3NewSystemNoticeMarquee__storage_, charmLv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "orAnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNoticeMarquee_FieldNumber_OrAnd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3NewSystemNoticeMarquee__storage_, orAnd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNoticeMarquee_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3NewSystemNoticeMarquee__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "router",
        .dataTypeSpecific.className = NULL,
        .number = PB3NewSystemNoticeMarquee_FieldNumber_Router,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3NewSystemNoticeMarquee__storage_, router),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3NewSystemNoticeMarquee class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3NewSystemNoticeMarquee__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3OverdueMsgNotice

@implementation PB3OverdueMsgNotice

@dynamic msgIdArray, msgIdArray_Count;

typedef struct PB3OverdueMsgNotice__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *msgIdArray;
} PB3OverdueMsgNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3OverdueMsgNotice_FieldNumber_MsgIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3OverdueMsgNotice__storage_, msgIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3OverdueMsgNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3OverdueMsgNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3MaintenanceMsgNotice

@implementation PB3MaintenanceMsgNotice

@dynamic device;
@dynamic content;

typedef struct PB3MaintenanceMsgNotice__storage_ {
  uint32_t _has_storage_[1];
  NSString *device;
  NSString *content;
} PB3MaintenanceMsgNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "device",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaintenanceMsgNotice_FieldNumber_Device,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3MaintenanceMsgNotice__storage_, device),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3MaintenanceMsgNotice_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3MaintenanceMsgNotice__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3MaintenanceMsgNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3MaintenanceMsgNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3UpdateTabs

@implementation PB3UpdateTabs

@dynamic tabsArray, tabsArray_Count;

typedef struct PB3UpdateTabs__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tabsArray;
} PB3UpdateTabs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tabsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateTabs_FieldNumber_TabsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3UpdateTabs__storage_, tabsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateTabs class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdateTabs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeekStar

@implementation PB3WeekStar

@dynamic type;
@dynamic namesArray, namesArray_Count;
@dynamic content;

typedef struct PB3WeekStar__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSMutableArray *namesArray;
  NSString *content;
} PB3WeekStar__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekStar_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeekStar__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "namesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3WeekStarPlayer),
        .number = PB3WeekStar_FieldNumber_NamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3WeekStar__storage_, namesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekStar_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeekStar__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeekStar class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeekStar__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3WeekStarPlayer

@implementation PB3WeekStarPlayer

@dynamic id_p;
@dynamic name;

typedef struct PB3WeekStarPlayer__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  int64_t id_p;
} PB3WeekStarPlayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekStarPlayer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3WeekStarPlayer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PB3WeekStarPlayer_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3WeekStarPlayer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3WeekStarPlayer class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3WeekStarPlayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TimerInfo

@implementation PB3TimerInfo

@dynamic seconds;

typedef struct PB3TimerInfo__storage_ {
  uint32_t _has_storage_[1];
  int64_t seconds;
} PB3TimerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seconds",
        .dataTypeSpecific.className = NULL,
        .number = PB3TimerInfo_FieldNumber_Seconds,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TimerInfo__storage_, seconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TimerInfo class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TimerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SysConfUpdate

@implementation PB3SysConfUpdate

@dynamic type;
@dynamic data_p;

typedef struct PB3SysConfUpdate__storage_ {
  uint32_t _has_storage_[1];
  PB3SysConfType type;
  NSData *data_p;
} PB3SysConfUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3SysConfType_EnumDescriptor,
        .number = PB3SysConfUpdate_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SysConfUpdate__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3SysConfUpdate_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SysConfUpdate__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SysConfUpdate class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SysConfUpdate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SysConfUpdate_Type_RawValue(PB3SysConfUpdate *message) {
  GPBDescriptor *descriptor = [PB3SysConfUpdate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SysConfUpdate_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SysConfUpdate_Type_RawValue(PB3SysConfUpdate *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SysConfUpdate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SysConfUpdate_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3SysToastMsg

@implementation PB3SysToastMsg

@dynamic type;
@dynamic msg;

typedef struct PB3SysToastMsg__storage_ {
  uint32_t _has_storage_[1];
  PB3SysToastType type;
  NSString *msg;
} PB3SysToastMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3SysToastType_EnumDescriptor,
        .number = PB3SysToastMsg_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SysToastMsg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SysToastMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SysToastMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SysToastMsg class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SysToastMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3SysToastMsg_Type_RawValue(PB3SysToastMsg *message) {
  GPBDescriptor *descriptor = [PB3SysToastMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SysToastMsg_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3SysToastMsg_Type_RawValue(PB3SysToastMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3SysToastMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3SysToastMsg_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3UpdateClanNotice

@implementation PB3UpdateClanNotice

@dynamic playerId;
@dynamic clanId;

typedef struct PB3UpdateClanNotice__storage_ {
  uint32_t _has_storage_[1];
  int64_t playerId;
  int64_t clanId;
} PB3UpdateClanNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateClanNotice_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3UpdateClanNotice__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clanId",
        .dataTypeSpecific.className = NULL,
        .number = PB3UpdateClanNotice_FieldNumber_ClanId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3UpdateClanNotice__storage_, clanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3UpdateClanNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3UpdateClanNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3DialogNotice

@implementation PB3DialogNotice

@dynamic title;
@dynamic content;
@dynamic dialogStyle;
@dynamic buttonsArray, buttonsArray_Count;
@dynamic dataType;
@dynamic generationData;

typedef struct PB3DialogNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3DialogStyle dialogStyle;
  PB3GenerationDataType dataType;
  NSString *title;
  NSString *content;
  NSMutableArray *buttonsArray;
  NSData *generationData;
} PB3DialogNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogNotice_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DialogNotice__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogNotice_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DialogNotice__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dialogStyle",
        .dataTypeSpecific.enumDescFunc = PB3DialogStyle_EnumDescriptor,
        .number = PB3DialogNotice_FieldNumber_DialogStyle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DialogNotice__storage_, dialogStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3DialogButton),
        .number = PB3DialogNotice_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DialogNotice__storage_, buttonsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = PB3GenerationDataType_EnumDescriptor,
        .number = PB3DialogNotice_FieldNumber_DataType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DialogNotice__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "generationData",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogNotice_FieldNumber_GenerationData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DialogNotice__storage_, generationData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DialogNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DialogNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DialogNotice_DialogStyle_RawValue(PB3DialogNotice *message) {
  GPBDescriptor *descriptor = [PB3DialogNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogNotice_FieldNumber_DialogStyle];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DialogNotice_DialogStyle_RawValue(PB3DialogNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DialogNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogNotice_FieldNumber_DialogStyle];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3DialogNotice_DataType_RawValue(PB3DialogNotice *message) {
  GPBDescriptor *descriptor = [PB3DialogNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogNotice_FieldNumber_DataType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DialogNotice_DataType_RawValue(PB3DialogNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DialogNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogNotice_FieldNumber_DataType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DialogButton

@implementation PB3DialogButton

@dynamic text;
@dynamic textColor;
@dynamic backgroundColor;
@dynamic buttonStyle;
@dynamic buttonType;
@dynamic canPress;
@dynamic callbackData;
@dynamic route;

typedef struct PB3DialogButton__storage_ {
  uint32_t _has_storage_[1];
  PB3DialogButtonStyle buttonStyle;
  PB3DialogButtonType buttonType;
  NSString *text;
  NSString *textColor;
  NSString *backgroundColor;
  NSData *callbackData;
  NSString *route;
} PB3DialogButton__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogButton_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3DialogButton__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogButton_FieldNumber_TextColor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3DialogButton__storage_, textColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundColor",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogButton_FieldNumber_BackgroundColor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3DialogButton__storage_, backgroundColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonStyle",
        .dataTypeSpecific.enumDescFunc = PB3DialogButtonStyle_EnumDescriptor,
        .number = PB3DialogButton_FieldNumber_ButtonStyle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3DialogButton__storage_, buttonStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "buttonType",
        .dataTypeSpecific.enumDescFunc = PB3DialogButtonType_EnumDescriptor,
        .number = PB3DialogButton_FieldNumber_ButtonType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3DialogButton__storage_, buttonType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "canPress",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogButton_FieldNumber_CanPress,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "callbackData",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogButton_FieldNumber_CallbackData,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3DialogButton__storage_, callbackData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "route",
        .dataTypeSpecific.className = NULL,
        .number = PB3DialogButton_FieldNumber_Route,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3DialogButton__storage_, route),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DialogButton class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DialogButton__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3DialogButton_ButtonStyle_RawValue(PB3DialogButton *message) {
  GPBDescriptor *descriptor = [PB3DialogButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogButton_FieldNumber_ButtonStyle];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DialogButton_ButtonStyle_RawValue(PB3DialogButton *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DialogButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogButton_FieldNumber_ButtonStyle];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3DialogButton_ButtonType_RawValue(PB3DialogButton *message) {
  GPBDescriptor *descriptor = [PB3DialogButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogButton_FieldNumber_ButtonType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3DialogButton_ButtonType_RawValue(PB3DialogButton *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3DialogButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3DialogButton_FieldNumber_ButtonType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CallbackData

@implementation PB3CallbackData

@dynamic callbackType;
@dynamic callbackData;

typedef struct PB3CallbackData__storage_ {
  uint32_t _has_storage_[1];
  PB3CallbackDataType callbackType;
  NSData *callbackData;
} PB3CallbackData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callbackType",
        .dataTypeSpecific.enumDescFunc = PB3CallbackDataType_EnumDescriptor,
        .number = PB3CallbackData_FieldNumber_CallbackType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CallbackData__storage_, callbackType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "callbackData",
        .dataTypeSpecific.className = NULL,
        .number = PB3CallbackData_FieldNumber_CallbackData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CallbackData__storage_, callbackData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CallbackData class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CallbackData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CallbackData_CallbackType_RawValue(PB3CallbackData *message) {
  GPBDescriptor *descriptor = [PB3CallbackData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CallbackData_FieldNumber_CallbackType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CallbackData_CallbackType_RawValue(PB3CallbackData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CallbackData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CallbackData_FieldNumber_CallbackType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CallbackOperation

@implementation PB3CallbackOperation

@dynamic opt;
@dynamic dialogId;

typedef struct PB3CallbackOperation__storage_ {
  uint32_t _has_storage_[1];
  PB3CallbackOpt opt;
  int32_t dialogId;
} PB3CallbackOperation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = PB3CallbackOpt_EnumDescriptor,
        .number = PB3CallbackOperation_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CallbackOperation__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dialogId",
        .dataTypeSpecific.className = NULL,
        .number = PB3CallbackOperation_FieldNumber_DialogId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CallbackOperation__storage_, dialogId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CallbackOperation class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CallbackOperation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CallbackOperation_Opt_RawValue(PB3CallbackOperation *message) {
  GPBDescriptor *descriptor = [PB3CallbackOperation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CallbackOperation_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CallbackOperation_Opt_RawValue(PB3CallbackOperation *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CallbackOperation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CallbackOperation_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3PrivateChatMsg

@implementation PB3PrivateChatMsg

@dynamic toId;
@dynamic msg;

typedef struct PB3PrivateChatMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  int64_t toId;
} PB3PrivateChatMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateChatMsg_FieldNumber_ToId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PrivateChatMsg__storage_, toId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3PrivateChatMsg_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PrivateChatMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PrivateChatMsg class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PrivateChatMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3CommonNotice

@implementation PB3CommonNotice

@dynamic type;
@dynamic title;
@dynamic content;
@dynamic buttonsArray, buttonsArray_Count;
@dynamic outCanPress;

typedef struct PB3CommonNotice__storage_ {
  uint32_t _has_storage_[1];
  PB3CommonNoticeType type;
  NSString *title;
  NSString *content;
  NSMutableArray *buttonsArray;
} PB3CommonNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3CommonNoticeType_EnumDescriptor,
        .number = PB3CommonNotice_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CommonNotice__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PB3CommonNotice_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CommonNotice__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PB3CommonNotice_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CommonNotice__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3CommonNoticeButton),
        .number = PB3CommonNotice_FieldNumber_ButtonsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3CommonNotice__storage_, buttonsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outCanPress",
        .dataTypeSpecific.className = NULL,
        .number = PB3CommonNotice_FieldNumber_OutCanPress,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CommonNotice class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CommonNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CommonNotice_Type_RawValue(PB3CommonNotice *message) {
  GPBDescriptor *descriptor = [PB3CommonNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CommonNotice_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CommonNotice_Type_RawValue(PB3CommonNotice *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CommonNotice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CommonNotice_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3CommonNoticeButton

@implementation PB3CommonNoticeButton

@dynamic type;
@dynamic text;
@dynamic route;

typedef struct PB3CommonNoticeButton__storage_ {
  uint32_t _has_storage_[1];
  PB3ButtonType type;
  NSString *text;
  NSString *route;
} PB3CommonNoticeButton__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3ButtonType_EnumDescriptor,
        .number = PB3CommonNoticeButton_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3CommonNoticeButton__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PB3CommonNoticeButton_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3CommonNoticeButton__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "route",
        .dataTypeSpecific.className = NULL,
        .number = PB3CommonNoticeButton_FieldNumber_Route,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3CommonNoticeButton__storage_, route),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3CommonNoticeButton class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3CommonNoticeButton__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3CommonNoticeButton_Type_RawValue(PB3CommonNoticeButton *message) {
  GPBDescriptor *descriptor = [PB3CommonNoticeButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CommonNoticeButton_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3CommonNoticeButton_Type_RawValue(PB3CommonNoticeButton *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3CommonNoticeButton descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3CommonNoticeButton_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3DelBFRecords

@implementation PB3DelBFRecords

@dynamic idsArray, idsArray_Count;

typedef struct PB3DelBFRecords__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *idsArray;
} PB3DelBFRecords__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3DelBFRecords_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3DelBFRecords__storage_, idsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3DelBFRecords class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3DelBFRecords__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ContentSensitiveChkErr

@implementation PB3ContentSensitiveChkErr

@dynamic toastText;
@dynamic checkedContent;

typedef struct PB3ContentSensitiveChkErr__storage_ {
  uint32_t _has_storage_[1];
  NSString *toastText;
  NSString *checkedContent;
} PB3ContentSensitiveChkErr__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toastText",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContentSensitiveChkErr_FieldNumber_ToastText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ContentSensitiveChkErr__storage_, toastText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "checkedContent",
        .dataTypeSpecific.className = NULL,
        .number = PB3ContentSensitiveChkErr_FieldNumber_CheckedContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ContentSensitiveChkErr__storage_, checkedContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ContentSensitiveChkErr class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ContentSensitiveChkErr__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3PushActivityData

@implementation PB3PushActivityData

@dynamic activityCmdId;
@dynamic bin;

typedef struct PB3PushActivityData__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityCmdId;
  NSData *bin;
} PB3PushActivityData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityCmdId",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushActivityData_FieldNumber_ActivityCmdId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3PushActivityData__storage_, activityCmdId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bin",
        .dataTypeSpecific.className = NULL,
        .number = PB3PushActivityData_FieldNumber_Bin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3PushActivityData__storage_, bin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3PushActivityData class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3PushActivityData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityTreasureData

@implementation PB3ActivityTreasureData

@dynamic treasureId;
@dynamic periodNum;
@dynamic stock;
@dynamic status;

typedef struct PB3ActivityTreasureData__storage_ {
  uint32_t _has_storage_[1];
  int32_t treasureId;
  int32_t stock;
  int32_t status;
  NSString *periodNum;
} PB3ActivityTreasureData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "treasureId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTreasureData_FieldNumber_TreasureId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityTreasureData__storage_, treasureId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "periodNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTreasureData_FieldNumber_PeriodNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityTreasureData__storage_, periodNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stock",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTreasureData_FieldNumber_Stock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityTreasureData__storage_, stock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityTreasureData_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3ActivityTreasureData__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityTreasureData class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityTreasureData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityPremiumsData

@implementation PB3ActivityPremiumsData

@dynamic exchangeIdListArray, exchangeIdListArray_Count;
@dynamic expireTime;
@dynamic remark;
@dynamic premiumsId;

typedef struct PB3ActivityPremiumsData__storage_ {
  uint32_t _has_storage_[1];
  int32_t expireTime;
  int32_t premiumsId;
  GPBInt32Array *exchangeIdListArray;
  NSString *remark;
} PB3ActivityPremiumsData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchangeIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityPremiumsData_FieldNumber_ExchangeIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3ActivityPremiumsData__storage_, exchangeIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityPremiumsData_FieldNumber_ExpireTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityPremiumsData__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityPremiumsData_FieldNumber_Remark,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityPremiumsData__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "premiumsId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityPremiumsData_FieldNumber_PremiumsId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityPremiumsData__storage_, premiumsId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityPremiumsData class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityPremiumsData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityLotteryPointData

@implementation PB3ActivityLotteryPointData

@dynamic lotteryId;
@dynamic dataType;
@dynamic curServerPoint;

typedef struct PB3ActivityLotteryPointData__storage_ {
  uint32_t _has_storage_[1];
  int32_t lotteryId;
  int32_t dataType;
  int32_t curServerPoint;
} PB3ActivityLotteryPointData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityLotteryPointData_FieldNumber_LotteryId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityLotteryPointData__storage_, lotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityLotteryPointData_FieldNumber_DataType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityLotteryPointData__storage_, dataType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "curServerPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityLotteryPointData_FieldNumber_CurServerPoint,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityLotteryPointData__storage_, curServerPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityLotteryPointData class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityLotteryPointData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ActivityPopData

@implementation PB3ActivityPopData

@dynamic switchType;
@dynamic routeURL;
@dynamic pos;

typedef struct PB3ActivityPopData__storage_ {
  uint32_t _has_storage_[1];
  int32_t switchType;
  PB3ActivityPopPos pos;
  NSString *routeURL;
} PB3ActivityPopData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "switchType",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityPopData_FieldNumber_SwitchType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivityPopData__storage_, switchType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "routeURL",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivityPopData_FieldNumber_RouteURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivityPopData__storage_, routeURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pos",
        .dataTypeSpecific.enumDescFunc = PB3ActivityPopPos_EnumDescriptor,
        .number = PB3ActivityPopData_FieldNumber_Pos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3ActivityPopData__storage_, pos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivityPopData class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivityPopData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3ActivityPopData_Pos_RawValue(PB3ActivityPopData *message) {
  GPBDescriptor *descriptor = [PB3ActivityPopData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityPopData_FieldNumber_Pos];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3ActivityPopData_Pos_RawValue(PB3ActivityPopData *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3ActivityPopData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3ActivityPopData_FieldNumber_Pos];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3ActivitySortList

@implementation PB3ActivitySortList

@dynamic actId;
@dynamic relActId;

typedef struct PB3ActivitySortList__storage_ {
  uint32_t _has_storage_[1];
  int64_t actId;
  int64_t relActId;
} PB3ActivitySortList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivitySortList_FieldNumber_ActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ActivitySortList__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3ActivitySortList_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ActivitySortList__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ActivitySortList class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ActivitySortList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomAnimation

@implementation PB3RoomAnimation

@dynamic type;
@dynamic isShow;
@dynamic endTime;

typedef struct PB3RoomAnimation__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomAnimationType type;
  int64_t endTime;
} PB3RoomAnimation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PB3RoomAnimationType_EnumDescriptor,
        .number = PB3RoomAnimation_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomAnimation__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAnimation_FieldNumber_IsShow,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomAnimation_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomAnimation__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomAnimation class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomAnimation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomAnimation_Type_RawValue(PB3RoomAnimation *message) {
  GPBDescriptor *descriptor = [PB3RoomAnimation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomAnimation_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomAnimation_Type_RawValue(PB3RoomAnimation *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomAnimation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomAnimation_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomContributor

@implementation PB3RoomContributor

@dynamic playerId;
@dynamic playerIcon;
@dynamic point;
@dynamic sort;

typedef struct PB3RoomContributor__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  NSString *playerIcon;
  int64_t playerId;
  int64_t point;
} PB3RoomContributor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomContributor_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomContributor__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomContributor_FieldNumber_PlayerIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomContributor__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomContributor_FieldNumber_Point,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomContributor__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomContributor_FieldNumber_Sort,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomContributor__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomContributor class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomContributor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomRankMemberInfo

@implementation PB3RoomRankMemberInfo

@dynamic roomCurPoint;
@dynamic boxCurPoint;
@dynamic boxMaxPoint;
@dynamic sort;
@dynamic playerListArray, playerListArray_Count;
@dynamic bannerAnimationArray, bannerAnimationArray_Count;
@dynamic maxBoxNum;
@dynamic totalBoxNum;
@dynamic maxOpenBoxNum;
@dynamic actId;
@dynamic relActId;

typedef struct PB3RoomRankMemberInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  int32_t maxBoxNum;
  int32_t totalBoxNum;
  int32_t maxOpenBoxNum;
  int32_t actId;
  int32_t relActId;
  NSMutableArray *playerListArray;
  NSMutableArray *bannerAnimationArray;
  int64_t roomCurPoint;
  int64_t boxCurPoint;
  int64_t boxMaxPoint;
} PB3RoomRankMemberInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomCurPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_RoomCurPoint,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, roomCurPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxCurPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_BoxCurPoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, boxCurPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxMaxPoint",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_BoxMaxPoint,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, boxMaxPoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_Sort,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomContributor),
        .number = PB3RoomRankMemberInfo_FieldNumber_PlayerListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, playerListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannerAnimationArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomAnimation),
        .number = PB3RoomRankMemberInfo_FieldNumber_BannerAnimationArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, bannerAnimationArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxBoxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_MaxBoxNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, maxBoxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalBoxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_TotalBoxNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, totalBoxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxOpenBoxNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_MaxOpenBoxNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, maxOpenBoxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_ActId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, actId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomRankMemberInfo_FieldNumber_RelActId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RoomRankMemberInfo__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomRankMemberInfo class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomRankMemberInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomBanner

@implementation PB3RoomBanner

@dynamic isShow;
@dynamic hasRankMemberInfo, rankMemberInfo;
@dynamic isShowPopupWin;

typedef struct PB3RoomBanner__storage_ {
  uint32_t _has_storage_[1];
  PB3RoomRankMemberInfo *rankMemberInfo;
} PB3RoomBanner__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isShow",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBanner_FieldNumber_IsShow,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "rankMemberInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3RoomRankMemberInfo),
        .number = PB3RoomBanner_FieldNumber_RankMemberInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomBanner__storage_, rankMemberInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isShowPopupWin",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBanner_FieldNumber_IsShowPopupWin,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomBanner class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomBanner__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomBannerMsg

@implementation PB3RoomBannerMsg

@dynamic roomId;
@dynamic roomIcon;
@dynamic msg;
@dynamic endTime;
@dynamic boxEndTime;
@dynamic excludeRoomsArray, excludeRoomsArray_Count;

typedef struct PB3RoomBannerMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomIcon;
  NSString *msg;
  GPBInt64Array *excludeRoomsArray;
  int64_t roomId;
  int64_t endTime;
  int64_t boxEndTime;
} PB3RoomBannerMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerMsg_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomBannerMsg__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerMsg_FieldNumber_RoomIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomBannerMsg__storage_, roomIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerMsg_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomBannerMsg__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerMsg_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomBannerMsg__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boxEndTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerMsg_FieldNumber_BoxEndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomBannerMsg__storage_, boxEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "excludeRoomsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerMsg_FieldNumber_ExcludeRoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3RoomBannerMsg__storage_, excludeRoomsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomBannerMsg class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomBannerMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TriggerPlayerInfo

@implementation PB3TriggerPlayerInfo

@dynamic playerId;
@dynamic playerName;
@dynamic playerIcon;

typedef struct PB3TriggerPlayerInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *playerName;
  NSString *playerIcon;
  int64_t playerId;
} PB3TriggerPlayerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = PB3TriggerPlayerInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TriggerPlayerInfo__storage_, playerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = PB3TriggerPlayerInfo_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TriggerPlayerInfo__storage_, playerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = PB3TriggerPlayerInfo_FieldNumber_PlayerIcon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TriggerPlayerInfo__storage_, playerIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TriggerPlayerInfo class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TriggerPlayerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3RoomBannerBoxInfo

@implementation PB3RoomBannerBoxInfo

@dynamic activityId;
@dynamic relActId;
@dynamic lotteryId;
@dynamic assignId;
@dynamic startTime;
@dynamic endTime;
@dynamic hasTriggerPlayerInfo, triggerPlayerInfo;
@dynamic gameType;
@dynamic gameScore;

typedef struct PB3RoomBannerBoxInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActId;
  int32_t lotteryId;
  int32_t assignId;
  PB3ActBoxGameType gameType;
  int32_t gameScore;
  PB3TriggerPlayerInfo *triggerPlayerInfo;
  int64_t endTime;
  int64_t startTime;
} PB3RoomBannerBoxInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerBoxInfo_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerBoxInfo_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lotteryId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerBoxInfo_FieldNumber_LotteryId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, lotteryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assignId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerBoxInfo_FieldNumber_AssignId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, assignId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerBoxInfo_FieldNumber_EndTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerBoxInfo_FieldNumber_StartTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "triggerPlayerInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TriggerPlayerInfo),
        .number = PB3RoomBannerBoxInfo_FieldNumber_TriggerPlayerInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, triggerPlayerInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameType",
        .dataTypeSpecific.enumDescFunc = PB3ActBoxGameType_EnumDescriptor,
        .number = PB3RoomBannerBoxInfo_FieldNumber_GameType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, gameType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gameScore",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomBannerBoxInfo_FieldNumber_GameScore,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PB3RoomBannerBoxInfo__storage_, gameScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomBannerBoxInfo class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomBannerBoxInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3RoomBannerBoxInfo_GameType_RawValue(PB3RoomBannerBoxInfo *message) {
  GPBDescriptor *descriptor = [PB3RoomBannerBoxInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomBannerBoxInfo_FieldNumber_GameType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3RoomBannerBoxInfo_GameType_RawValue(PB3RoomBannerBoxInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3RoomBannerBoxInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3RoomBannerBoxInfo_FieldNumber_GameType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3RoomEventRewardBoxInfo

@implementation PB3RoomEventRewardBoxInfo

@dynamic activityId;
@dynamic relActId;
@dynamic roomId;
@dynamic endTime;

typedef struct PB3RoomEventRewardBoxInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t activityId;
  int32_t relActId;
  int64_t roomId;
  int64_t endTime;
} PB3RoomEventRewardBoxInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activityId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomEventRewardBoxInfo_FieldNumber_ActivityId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3RoomEventRewardBoxInfo__storage_, activityId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomEventRewardBoxInfo_FieldNumber_RelActId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3RoomEventRewardBoxInfo__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomEventRewardBoxInfo_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3RoomEventRewardBoxInfo__storage_, roomId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3RoomEventRewardBoxInfo_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3RoomEventRewardBoxInfo__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3RoomEventRewardBoxInfo class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3RoomEventRewardBoxInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SystemNoticeNeedCheck

@implementation PB3SystemNoticeNeedCheck

@dynamic msg;
@dynamic hasConf, conf;

typedef struct PB3SystemNoticeNeedCheck__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  PB3SystemNoticeNeedCheckConf *conf;
} PB3SystemNoticeNeedCheck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheck_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheck__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "conf",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3SystemNoticeNeedCheckConf),
        .number = PB3SystemNoticeNeedCheck_FieldNumber_Conf,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheck__storage_, conf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SystemNoticeNeedCheck class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SystemNoticeNeedCheck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3SystemNoticeNeedCheckConf

@implementation PB3SystemNoticeNeedCheckConf

@dynamic version, version_Count;
@dynamic orAnd;
@dynamic wealthLvMin;
@dynamic wealthLvMax;
@dynamic charmLvMin;
@dynamic charmLvMax;
@dynamic blackRoomIdsArray, blackRoomIdsArray_Count;
@dynamic noShowRoomTypeArray, noShowRoomTypeArray_Count;

typedef struct PB3SystemNoticeNeedCheckConf__storage_ {
  uint32_t _has_storage_[1];
  int32_t orAnd;
  int32_t wealthLvMin;
  int32_t wealthLvMax;
  int32_t charmLvMin;
  int32_t charmLvMax;
  GPBInt32ObjectDictionary *version;
  GPBInt64Array *blackRoomIdsArray;
  GPBInt32Array *noShowRoomTypeArray;
} PB3SystemNoticeNeedCheckConf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ClientVer),
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_Version,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, version),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orAnd",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_OrAnd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, orAnd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLvMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_WealthLvMin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, wealthLvMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wealthLvMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_WealthLvMax,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, wealthLvMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLvMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_CharmLvMin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, charmLvMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "charmLvMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_CharmLvMax,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, charmLvMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "blackRoomIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_BlackRoomIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, blackRoomIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "noShowRoomTypeArray",
        .dataTypeSpecific.className = NULL,
        .number = PB3SystemNoticeNeedCheckConf_FieldNumber_NoShowRoomTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3SystemNoticeNeedCheckConf__storage_, noShowRoomTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3SystemNoticeNeedCheckConf class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3SystemNoticeNeedCheckConf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3ClientVer

@implementation PB3ClientVer

@dynamic verMin;
@dynamic verMax;

typedef struct PB3ClientVer__storage_ {
  uint32_t _has_storage_[1];
  int64_t verMin;
  int64_t verMax;
} PB3ClientVer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verMin",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClientVer_FieldNumber_VerMin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3ClientVer__storage_, verMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "verMax",
        .dataTypeSpecific.className = NULL,
        .number = PB3ClientVer_FieldNumber_VerMax,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3ClientVer__storage_, verMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3ClientVer class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3ClientVer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3LimitedTimeWelfare

@implementation PB3LimitedTimeWelfare

@dynamic relActId;
@dynamic welfareId;
@dynamic beginTime;
@dynamic endTime;
@dynamic numOfReceived;
@dynamic totalNum;

typedef struct PB3LimitedTimeWelfare__storage_ {
  uint32_t _has_storage_[1];
  int32_t relActId;
  int32_t welfareId;
  int64_t beginTime;
  int64_t endTime;
  int64_t numOfReceived;
  int64_t totalNum;
} PB3LimitedTimeWelfare__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relActId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitedTimeWelfare_FieldNumber_RelActId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3LimitedTimeWelfare__storage_, relActId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "welfareId",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitedTimeWelfare_FieldNumber_WelfareId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3LimitedTimeWelfare__storage_, welfareId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitedTimeWelfare_FieldNumber_BeginTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3LimitedTimeWelfare__storage_, beginTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitedTimeWelfare_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3LimitedTimeWelfare__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "numOfReceived",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitedTimeWelfare_FieldNumber_NumOfReceived,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3LimitedTimeWelfare__storage_, numOfReceived),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalNum",
        .dataTypeSpecific.className = NULL,
        .number = PB3LimitedTimeWelfare_FieldNumber_TotalNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3LimitedTimeWelfare__storage_, totalNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3LimitedTimeWelfare class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3LimitedTimeWelfare__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3AskOrSendNewInfo

@implementation PB3AskOrSendNewInfo


typedef struct PB3AskOrSendNewInfo__storage_ {
  uint32_t _has_storage_[1];
} PB3AskOrSendNewInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3AskOrSendNewInfo class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3AskOrSendNewInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3BlindLotteryStatusUpdate

@implementation PB3BlindLotteryStatusUpdate


typedef struct PB3BlindLotteryStatusUpdate__storage_ {
  uint32_t _has_storage_[1];
} PB3BlindLotteryStatusUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3BlindLotteryStatusUpdate class]
                                     rootClass:[PB3SystemExtRoot class]
                                          file:PB3SystemExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3BlindLotteryStatusUpdate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
