// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stat_pb/stat_common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "stat_pb/StatCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3StatCommonRoot

@implementation PB3StatCommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PB3StatCommonRoot_FileDescriptor

static GPBFileDescriptor *PB3StatCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"stat_pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3TrackingParamType

GPBEnumDescriptor *PB3TrackingParamType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TrackingParamTypeDefault\000TrackingParamTy"
        "peInt64\000TrackingParamTypeStr\000TrackingPar"
        "amTypeFloat\000";
    static const int32_t values[] = {
        PB3TrackingParamType_TrackingParamTypeDefault,
        PB3TrackingParamType_TrackingParamTypeInt64,
        PB3TrackingParamType_TrackingParamTypeStr,
        PB3TrackingParamType_TrackingParamTypeFloat,
    };
    static const char *extraTextFormatInfo = "\004\000\030\000\001\026\000\002\024\000\003\026\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3TrackingParamType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3TrackingParamType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3TrackingParamType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3TrackingParamType_TrackingParamTypeDefault:
    case PB3TrackingParamType_TrackingParamTypeInt64:
    case PB3TrackingParamType_TrackingParamTypeStr:
    case PB3TrackingParamType_TrackingParamTypeFloat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3TrackingReq

@implementation PB3TrackingReq

@dynamic application;
@dynamic timestamp;
@dynamic sign;
@dynamic trackingParamListArray, trackingParamListArray_Count;

typedef struct PB3TrackingReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *application;
  NSString *sign;
  NSMutableArray *trackingParamListArray;
  int64_t timestamp;
} PB3TrackingReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "application",
        .dataTypeSpecific.className = NULL,
        .number = PB3TrackingReq_FieldNumber_Application,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TrackingReq__storage_, application),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PB3TrackingReq_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TrackingReq__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = PB3TrackingReq_FieldNumber_Sign,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TrackingReq__storage_, sign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trackingParamListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TrackingParamList),
        .number = PB3TrackingReq_FieldNumber_TrackingParamListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TrackingReq__storage_, trackingParamListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TrackingReq class]
                                     rootClass:[PB3StatCommonRoot class]
                                          file:PB3StatCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TrackingReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TrackingParamList

@implementation PB3TrackingParamList

@dynamic event;
@dynamic trackingParamsArray, trackingParamsArray_Count;

typedef struct PB3TrackingParamList__storage_ {
  uint32_t _has_storage_[1];
  NSString *event;
  NSMutableArray *trackingParamsArray;
} PB3TrackingParamList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "event",
        .dataTypeSpecific.className = NULL,
        .number = PB3TrackingParamList_FieldNumber_Event,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TrackingParamList__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trackingParamsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3TrackingParam),
        .number = PB3TrackingParamList_FieldNumber_TrackingParamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PB3TrackingParamList__storage_, trackingParamsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TrackingParamList class]
                                     rootClass:[PB3StatCommonRoot class]
                                          file:PB3StatCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TrackingParamList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3TrackingParam

@implementation PB3TrackingParam

@dynamic key;
@dynamic value;
@dynamic trackingParamType;

typedef struct PB3TrackingParam__storage_ {
  uint32_t _has_storage_[1];
  PB3TrackingParamType trackingParamType;
  NSString *key;
  NSString *value;
} PB3TrackingParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = PB3TrackingParam_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3TrackingParam__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PB3TrackingParam_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3TrackingParam__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trackingParamType",
        .dataTypeSpecific.enumDescFunc = PB3TrackingParamType_EnumDescriptor,
        .number = PB3TrackingParam_FieldNumber_TrackingParamType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3TrackingParam__storage_, trackingParamType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TrackingParam class]
                                     rootClass:[PB3StatCommonRoot class]
                                          file:PB3StatCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3TrackingParam__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3TrackingParam_TrackingParamType_RawValue(PB3TrackingParam *message) {
  GPBDescriptor *descriptor = [PB3TrackingParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TrackingParam_FieldNumber_TrackingParamType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3TrackingParam_TrackingParamType_RawValue(PB3TrackingParam *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3TrackingParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3TrackingParam_FieldNumber_TrackingParamType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3TrackingRes

@implementation PB3TrackingRes


typedef struct PB3TrackingRes__storage_ {
  uint32_t _has_storage_[1];
} PB3TrackingRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3TrackingRes class]
                                     rootClass:[PB3StatCommonRoot class]
                                          file:PB3StatCommonRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3TrackingRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
