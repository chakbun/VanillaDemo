// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/http1002.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "client/HTTP1002.pbobjc.h"
#import "client/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PROTOHTTP1002Root

@implementation PROTOHTTP1002Root

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PROTOHTTP1002Root_FileDescriptor

static GPBFileDescriptor *PROTOHTTP1002Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto.client"
                                                 objcPrefix:@"PROTO"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PROTORank

@implementation PROTORank

@dynamic hasId_p, id_p;
@dynamic hasName, name;
@dynamic hasSex, sex;
@dynamic hasLevel, level;
@dynamic hasResTime, resTime;
@dynamic hasGapVal, gapVal;
@dynamic hasIcon, icon;
@dynamic hasGiftId, giftId;
@dynamic hasGiftNum, giftNum;
@dynamic hasRanking, ranking;

typedef struct PROTORank__storage_ {
  uint32_t _has_storage_[1];
  PROTOSexType sex;
  uint32_t level;
  uint32_t resTime;
  uint32_t gapVal;
  uint32_t giftId;
  uint32_t giftNum;
  uint32_t ranking;
  NSString *name;
  NSString *icon;
  int64_t id_p;
} PROTORank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PROTORank__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PROTORank__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.enumDescFunc = PROTOSexType_EnumDescriptor,
        .number = PROTORank_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PROTORank__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_Level,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PROTORank__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resTime",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_ResTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PROTORank__storage_, resTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gapVal",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_GapVal,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PROTORank__storage_, gapVal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_Icon,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PROTORank__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_GiftId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PROTORank__storage_, giftId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giftNum",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_GiftNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PROTORank__storage_, giftNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ranking",
        .dataTypeSpecific.className = NULL,
        .number = PROTORank_FieldNumber_Ranking,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PROTORank__storage_, ranking),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PROTORank class]
                                     rootClass:[PROTOHTTP1002Root class]
                                          file:PROTOHTTP1002Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PROTORank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\005\007\000\006\006\000\010\006\000\t\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PROTOHSC100220

@implementation PROTOHSC100220

@dynamic hasType, type;
@dynamic weekArray, weekArray_Count;
@dynamic monthArray, monthArray_Count;
@dynamic totalArray, totalArray_Count;
@dynamic newplayerArray, newplayerArray_Count;

typedef struct PROTOHSC100220__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSMutableArray *monthArray;
  NSMutableArray *totalArray;
  NSMutableArray *newplayerArray;
  NSMutableArray *weekArray;
} PROTOHSC100220__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PROTOHSC100220_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PROTOHSC100220__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "monthArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PROTORank),
        .number = PROTOHSC100220_FieldNumber_MonthArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PROTOHSC100220__storage_, monthArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PROTORank),
        .number = PROTOHSC100220_FieldNumber_TotalArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PROTOHSC100220__storage_, totalArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newplayerArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PROTORank),
        .number = PROTOHSC100220_FieldNumber_NewplayerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PROTOHSC100220__storage_, newplayerArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "weekArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PROTORank),
        .number = PROTOHSC100220_FieldNumber_WeekArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PROTOHSC100220__storage_, weekArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PROTOHSC100220 class]
                                     rootClass:[PROTOHTTP1002Root class]
                                          file:PROTOHTTP1002Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PROTOHSC100220__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PROTOHSC100221

@implementation PROTOHSC100221

@dynamic listArray, listArray_Count;

typedef struct PROTOHSC100221__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PROTOHSC100221__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PROTORank),
        .number = PROTOHSC100221_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PROTOHSC100221__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PROTOHSC100221 class]
                                     rootClass:[PROTOHTTP1002Root class]
                                          file:PROTOHTTP1002Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PROTOHSC100221__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PROTOHSC100230

@implementation PROTOHSC100230

@dynamic hasType, type;
@dynamic rankArray, rankArray_Count;

typedef struct PROTOHSC100230__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSMutableArray *rankArray;
} PROTOHSC100230__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PROTOHSC100230_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PROTOHSC100230__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rankArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PROTORank),
        .number = PROTOHSC100230_FieldNumber_RankArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PROTOHSC100230__storage_, rankArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PROTOHSC100230 class]
                                     rootClass:[PROTOHTTP1002Root class]
                                          file:PROTOHTTP1002Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PROTOHSC100230__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
