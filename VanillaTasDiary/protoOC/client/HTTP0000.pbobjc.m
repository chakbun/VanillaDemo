// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/http0000.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "client/HTTP0000.pbobjc.h"
#import "client/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PROTOHTTP0000Root

@implementation PROTOHTTP0000Root

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PROTOHTTP0000Root_FileDescriptor

static GPBFileDescriptor *PROTOHTTP0000Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto.client"
                                                 objcPrefix:@"PROTO"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PROTOUpdateNotice

@implementation PROTOUpdateNotice

@dynamic hasVersion, version;
@dynamic hasVersionName, versionName;
@dynamic hasNoticeType, noticeType;
@dynamic hasReleaseNotes, releaseNotes;
@dynamic hasLevelVersion, levelVersion;
@dynamic hasGiftVersion, giftVersion;
@dynamic hasWordFilterVersion, wordFilterVersion;
@dynamic hasSplashVersion, splashVersion;
@dynamic socketsArray, socketsArray_Count;
@dynamic hasMsg, msg;

typedef struct PROTOUpdateNotice__storage_ {
  uint32_t _has_storage_[1];
  PROTOUpdateNotice_NoticeType noticeType;
  NSString *version;
  NSString *versionName;
  NSString *releaseNotes;
  NSString *levelVersion;
  NSString *giftVersion;
  NSString *wordFilterVersion;
  NSString *splashVersion;
  NSMutableArray *socketsArray;
  NSString *msg;
} PROTOUpdateNotice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionName",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_VersionName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, versionName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noticeType",
        .dataTypeSpecific.enumDescFunc = PROTOUpdateNotice_NoticeType_EnumDescriptor,
        .number = PROTOUpdateNotice_FieldNumber_NoticeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, noticeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "releaseNotes",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_ReleaseNotes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, releaseNotes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "levelVersion",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_LevelVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, levelVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftVersion",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_GiftVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, giftVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wordFilterVersion",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_WordFilterVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, wordFilterVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "splashVersion",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_SplashVersion,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, splashVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "socketsArray",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_SocketsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, socketsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PROTOUpdateNotice_FieldNumber_Msg,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PROTOUpdateNotice__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PROTOUpdateNotice class]
                                     rootClass:[PROTOHTTP0000Root class]
                                          file:PROTOHTTP0000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PROTOUpdateNotice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PROTOUpdateNotice_NoticeType

GPBEnumDescriptor *PROTOUpdateNotice_NoticeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NtNone\000NtRecommend\000NtForce\000";
    static const int32_t values[] = {
        PROTOUpdateNotice_NoticeType_NtNone,
        PROTOUpdateNotice_NoticeType_NtRecommend,
        PROTOUpdateNotice_NoticeType_NtForce,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PROTOUpdateNotice_NoticeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PROTOUpdateNotice_NoticeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PROTOUpdateNotice_NoticeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PROTOUpdateNotice_NoticeType_NtNone:
    case PROTOUpdateNotice_NoticeType_NtRecommend:
    case PROTOUpdateNotice_NoticeType_NtForce:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
